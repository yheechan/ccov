; ModuleID = 'grep.c'
source_filename = "grep.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.timespec = type { i64, i64 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.dfa = type { [8 x i32]*, i32, i32, i32*, i32, i32, i32, i32, i32, %struct.dfa_state*, i32, i32, %struct.position_set*, i32, i32, i32, i32**, i32**, i32**, i32*, i32*, %struct.dfamust* }
%struct.dfa_state = type { i32, %struct.position_set, i8, i8, i8, i8, i32 }
%struct.position_set = type { %struct.position*, i32 }
%struct.position = type { i32, i32 }
%struct.dfamust = type { i32, i8*, %struct.dfamust* }
%struct.matcher = type { i8*, void (i8*, i64)*, i8* (i8*, i64, i8**)* }
%struct.anon.0 = type { i8*, i32 (...)* }
%struct.must = type { i8**, i8*, i8*, i8* }
%struct.re_pattern_buffer = type { i8*, i64, i64, i32, i8*, i8*, i64, i8 }
%struct.re_registers = type { i32, i32*, i32* }
%struct.fail_stack_type = type { i8**, i32, i32 }
%union.register_info_type = type { i8* }
%struct.anon = type { i8, [3 x i8] }
%struct.compile_stack_type = type { %struct.compile_stack_elt_t*, i32, i32 }
%struct.compile_stack_elt_t = type { i32, i32, i32, i32, i32 }
%struct.regmatch_t = type { i32, i32 }
%struct.kwset = type { %struct.obstack, i32, %struct.trie*, i32, i32, [256 x i8], [256 x %struct.trie*], i8*, i32, i8* }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (...)*, void (...)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.trie = type { i32, %struct.tree*, %struct.trie*, %struct.trie*, %struct.trie*, i32, i32, i32 }
%struct.tree = type { %struct.tree*, %struct.tree*, %struct.trie*, i8, i8 }
%struct.kwsmatch = type { i32, [1 x i8*], [1 x i64] }

@.str = private unnamed_addr constant [17 x i8] c"memory exhausted\00", align 1
@reset.initialized = internal global i32 0, align 4
@bufsalloc = internal global i64 0, align 8
@bufalloc = internal global i64 0, align 8
@buffer = internal global i8* null, align 8
@bufbeg = internal global i8* null, align 8
@buflim = internal global i8* null, align 8
@bufdesc = internal global i32 0, align 4
@bufstat = internal global %struct.stat zeroinitializer, align 8
@bufmapped = internal global i32 0, align 4
@bufoffset = internal global i64 0, align 8
@compile = internal global void (...)* null, align 8
@execute = internal global i8* (...)* null, align 8
@.str.1 = private unnamed_addr constant [7 x i8] c"target\00", align 1
@prog = internal global i8* null, align 8
@matcher = dso_local global i8* null, align 8
@.str.2 = private unnamed_addr constant [39 x i8] c"0123456789A:B:CEFGVX:bce:f:hiLlnqsvwxy\00", align 1
@out_before = internal global i32 0, align 4
@out_after = internal global i32 0, align 4
@optarg = external dso_local global i8*, align 8
@.str.3 = private unnamed_addr constant [6 x i8] c"egrep\00", align 1
@.str.4 = private unnamed_addr constant [42 x i8] c"you may specify only one of -E, -F, or -G\00", align 1
@.str.5 = private unnamed_addr constant [12 x i8] c"posix-egrep\00", align 1
@.str.6 = private unnamed_addr constant [6 x i8] c"fgrep\00", align 1
@.str.7 = private unnamed_addr constant [5 x i8] c"grep\00", align 1
@stdout = external dso_local global %struct._IO_FILE*, align 8
@.str.8 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@version = internal global [21 x i8] c"GNU grep version 2.0\00", align 16
@.str.9 = private unnamed_addr constant [26 x i8] c"matcher already specified\00", align 1
@out_byte = internal global i32 0, align 4
@out_quiet = internal global i32 0, align 4
@.str.10 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.11 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@stdin = external dso_local global %struct._IO_FILE*, align 8
@match_icase = dso_local global i32 0, align 4
@out_line = internal global i32 0, align 4
@out_invert = internal global i32 0, align 4
@match_words = dso_local global i32 0, align 4
@match_lines = dso_local global i32 0, align 4
@optind = external dso_local global i32, align 4
@.str.12 = private unnamed_addr constant [8 x i8] c"default\00", align 1
@out_file = internal global i32 0, align 4
@.str.13 = private unnamed_addr constant [17 x i8] c"(standard input)\00", align 1
@filename = internal global i8* null, align 8
@.str.14 = private unnamed_addr constant [4 x i8] c"%s:\00", align 1
@.str.15 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@.str.16 = private unnamed_addr constant [18 x i8] c"(standard input)\0A\00", align 1
@errseen = internal global i32 0, align 4
@re_syntax_options = dso_local global i32 0, align 4
@re_max_failures = dso_local global i32 2000, align 4
@re_syntax_table = internal global [256 x i8] zeroinitializer, align 16
@re_error_msg = internal global [17 x i8*] [i8* null, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.46, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.47, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.48, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.49, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.50, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.51, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.52, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.53, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.54, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.55, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.56, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.57, i32 0, i32 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.58, i32 0, i32 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.59, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.60, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.61, i32 0, i32 0)], align 16
@.str.17 = private unnamed_addr constant [8 x i8] c"Success\00", align 1
@syntax_bits_set = internal global i32 0, align 4
@syntax_bits = internal global i32 0, align 4
@case_fold = internal global i32 0, align 4
@dfa = internal global %struct.dfa* null, align 8
@lexptr = internal global i8* null, align 8
@lexstart = internal global i8* null, align 8
@lexleft = internal global i32 0, align 4
@lasttok = internal global i32 0, align 4
@laststart = internal global i32 0, align 4
@parens = internal global i32 0, align 4
@.str.18 = private unnamed_addr constant [20 x i8] c"No syntax specified\00", align 1
@tok = internal global i32 0, align 4
@depth = internal global i32 0, align 4
@.str.19 = private unnamed_addr constant [13 x i8] c"Unbalanced )\00", align 1
@dfastate.letters = internal global [8 x i32] zeroinitializer, align 16
@dfastate.newline = internal global [8 x i32] zeroinitializer, align 16
@dfastate.initialized = internal global i32 0, align 4
@dfaexec.sbit = internal global [256 x i32] zeroinitializer, align 16
@dfaexec.sbit_init = internal global i32 0, align 4
@.str.20 = private unnamed_addr constant [14 x i8] c"out of memory\00", align 1
@.str.21 = private unnamed_addr constant [6 x i8] c"ggrep\00", align 1
@.str.22 = private unnamed_addr constant [7 x i8] c"gegrep\00", align 1
@.str.23 = private unnamed_addr constant [7 x i8] c"gfgrep\00", align 1
@matchers = dso_local global [9 x %struct.matcher] [%struct.matcher { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.12, i32 0, i32 0), void (i8*, i64)* @Gcompile, i8* (i8*, i64, i8**)* @EGexecute }, %struct.matcher { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i32 0, i32 0), void (i8*, i64)* @Gcompile, i8* (i8*, i64, i8**)* @EGexecute }, %struct.matcher { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.21, i32 0, i32 0), void (i8*, i64)* @Gcompile, i8* (i8*, i64, i8**)* @EGexecute }, %struct.matcher { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0), void (i8*, i64)* @Ecompile, i8* (i8*, i64, i8**)* @EGexecute }, %struct.matcher { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.5, i32 0, i32 0), void (i8*, i64)* @Ecompile, i8* (i8*, i64, i8**)* @EGexecute }, %struct.matcher { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.22, i32 0, i32 0), void (i8*, i64)* @Ecompile, i8* (i8*, i64, i8**)* @EGexecute }, %struct.matcher { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i32 0, i32 0), void (i8*, i64)* @Fcompile, i8* (i8*, i64, i8**)* @Fexecute }, %struct.matcher { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.23, i32 0, i32 0), void (i8*, i64)* @Fcompile, i8* (i8*, i64, i8**)* @Fexecute }, %struct.matcher zeroinitializer], align 16
@.str.25 = private unnamed_addr constant [12 x i8] c"%s: %s: %s\0A\00", align 1
@.str.26 = private unnamed_addr constant [8 x i8] c"%s: %s\0A\00", align 1
@.str.27 = private unnamed_addr constant [76 x i8] c"usage: %s [-[[AB] ]<num>] [-[CEFGVchilnqsvwx]] [-[ef]] <expr> [<files...>]\0A\00", align 1
@totalcc = internal global i64 0, align 8
@lastout = internal global i8* null, align 8
@totalnl = internal global i64 0, align 8
@pending = internal global i32 0, align 4
@lastnl = internal global i8* null, align 8
@fillbuf.pagesize = internal global i32 0, align 4
@.str.28 = private unnamed_addr constant [21 x i8] c"%s: warning: %s: %s\0A\00", align 1
@prtext.used = internal global i32 0, align 4
@.str.29 = private unnamed_addr constant [3 x i8] c"--\00", align 1
@.str.30 = private unnamed_addr constant [5 x i8] c"%s%c\00", align 1
@.str.31 = private unnamed_addr constant [5 x i8] c"%d%c\00", align 1
@.str.32 = private unnamed_addr constant [6 x i8] c"%lu%c\00", align 1
@.str.33 = private unnamed_addr constant [15 x i8] c"writing output\00", align 1
@.str.34 = private unnamed_addr constant [6 x i8] c"alnum\00", align 1
@.str.35 = private unnamed_addr constant [6 x i8] c"alpha\00", align 1
@.str.36 = private unnamed_addr constant [6 x i8] c"blank\00", align 1
@.str.37 = private unnamed_addr constant [6 x i8] c"cntrl\00", align 1
@.str.38 = private unnamed_addr constant [6 x i8] c"digit\00", align 1
@.str.39 = private unnamed_addr constant [6 x i8] c"graph\00", align 1
@.str.40 = private unnamed_addr constant [6 x i8] c"lower\00", align 1
@.str.41 = private unnamed_addr constant [6 x i8] c"print\00", align 1
@.str.42 = private unnamed_addr constant [6 x i8] c"punct\00", align 1
@.str.43 = private unnamed_addr constant [6 x i8] c"space\00", align 1
@.str.44 = private unnamed_addr constant [6 x i8] c"upper\00", align 1
@.str.45 = private unnamed_addr constant [7 x i8] c"xdigit\00", align 1
@init_syntax_once.done = internal global i32 0, align 4
@.str.46 = private unnamed_addr constant [9 x i8] c"No match\00", align 1
@.str.47 = private unnamed_addr constant [27 x i8] c"Invalid regular expression\00", align 1
@.str.48 = private unnamed_addr constant [28 x i8] c"Invalid collation character\00", align 1
@.str.49 = private unnamed_addr constant [29 x i8] c"Invalid character class name\00", align 1
@.str.50 = private unnamed_addr constant [19 x i8] c"Trailing backslash\00", align 1
@.str.51 = private unnamed_addr constant [23 x i8] c"Invalid back reference\00", align 1
@.str.52 = private unnamed_addr constant [18 x i8] c"Unmatched [ or [^\00", align 1
@.str.53 = private unnamed_addr constant [18 x i8] c"Unmatched ( or \\(\00", align 1
@.str.54 = private unnamed_addr constant [13 x i8] c"Unmatched \\{\00", align 1
@.str.55 = private unnamed_addr constant [24 x i8] c"Invalid content of \\{\\}\00", align 1
@.str.56 = private unnamed_addr constant [18 x i8] c"Invalid range end\00", align 1
@.str.57 = private unnamed_addr constant [17 x i8] c"Memory exhausted\00", align 1
@.str.58 = private unnamed_addr constant [37 x i8] c"Invalid preceding regular expression\00", align 1
@.str.59 = private unnamed_addr constant [36 x i8] c"Premature end of regular expression\00", align 1
@.str.60 = private unnamed_addr constant [27 x i8] c"Regular expression too big\00", align 1
@.str.61 = private unnamed_addr constant [18 x i8] c"Unmatched ) or \\)\00", align 1
@.str.62 = private unnamed_addr constant [20 x i8] c"Unfinished \\ escape\00", align 1
@maxrep = internal global i32 0, align 4
@minrep = internal global i32 0, align 4
@.str.63 = private unnamed_addr constant [24 x i8] c"unfinished repeat count\00", align 1
@.str.64 = private unnamed_addr constant [23 x i8] c"malformed repeat count\00", align 1
@.str.65 = private unnamed_addr constant [13 x i8] c"Unbalanced [\00", align 1
@prednames = internal global [12 x %struct.anon.0] [%struct.anon.0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.66, i32 0, i32 0), i32 (...)* bitcast (i32 (i32)* @is_alpha to i32 (...)*) }, %struct.anon.0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.67, i32 0, i32 0), i32 (...)* bitcast (i32 (i32)* @is_upper to i32 (...)*) }, %struct.anon.0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.68, i32 0, i32 0), i32 (...)* bitcast (i32 (i32)* @is_lower to i32 (...)*) }, %struct.anon.0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.69, i32 0, i32 0), i32 (...)* bitcast (i32 (i32)* @is_digit to i32 (...)*) }, %struct.anon.0 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.70, i32 0, i32 0), i32 (...)* bitcast (i32 (i32)* @is_xdigit to i32 (...)*) }, %struct.anon.0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.71, i32 0, i32 0), i32 (...)* bitcast (i32 (i32)* @is_space to i32 (...)*) }, %struct.anon.0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.72, i32 0, i32 0), i32 (...)* bitcast (i32 (i32)* @is_punct to i32 (...)*) }, %struct.anon.0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.73, i32 0, i32 0), i32 (...)* bitcast (i32 (i32)* @is_alnum to i32 (...)*) }, %struct.anon.0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.74, i32 0, i32 0), i32 (...)* bitcast (i32 (i32)* @is_print to i32 (...)*) }, %struct.anon.0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.75, i32 0, i32 0), i32 (...)* bitcast (i32 (i32)* @is_graph to i32 (...)*) }, %struct.anon.0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.76, i32 0, i32 0), i32 (...)* bitcast (i32 (i32)* @is_cntrl to i32 (...)*) }, %struct.anon.0 zeroinitializer], align 16
@.str.66 = private unnamed_addr constant [9 x i8] c":alpha:]\00", align 1
@.str.67 = private unnamed_addr constant [9 x i8] c":upper:]\00", align 1
@.str.68 = private unnamed_addr constant [9 x i8] c":lower:]\00", align 1
@.str.69 = private unnamed_addr constant [9 x i8] c":digit:]\00", align 1
@.str.70 = private unnamed_addr constant [10 x i8] c":xdigit:]\00", align 1
@.str.71 = private unnamed_addr constant [9 x i8] c":space:]\00", align 1
@.str.72 = private unnamed_addr constant [9 x i8] c":punct:]\00", align 1
@.str.73 = private unnamed_addr constant [9 x i8] c":alnum:]\00", align 1
@.str.74 = private unnamed_addr constant [9 x i8] c":print:]\00", align 1
@.str.75 = private unnamed_addr constant [9 x i8] c":graph:]\00", align 1
@.str.76 = private unnamed_addr constant [9 x i8] c":cntrl:]\00", align 1
@.str.77 = private unnamed_addr constant [13 x i8] c"Unbalanced (\00", align 1
@dfamust.must0 = internal global %struct.must zeroinitializer, align 8
@.str.78 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@regex = internal global %struct.re_pattern_buffer zeroinitializer, align 8
@dfa_1 = internal global %struct.dfa zeroinitializer, align 8
@.str.79 = private unnamed_addr constant [4 x i8] c"^\\(\00", align 1
@.str.80 = private unnamed_addr constant [23 x i8] c"\\(^\\|[^0-9A-Za-z_]\\)\\(\00", align 1
@.str.81 = private unnamed_addr constant [23 x i8] c"\\)\\([^0-9A-Za-z_]\\|$\\)\00", align 1
@.str.82 = private unnamed_addr constant [4 x i8] c"\\)$\00", align 1
@lastexact = internal global i32 0, align 4
@kwset = internal global i8* null, align 8
@kwsinit.trans = internal global [256 x i8] zeroinitializer, align 16
@.str.83 = private unnamed_addr constant [3 x i8] c"^(\00", align 1
@.str.84 = private unnamed_addr constant [19 x i8] c"(^|[^0-9A-Za-z_])(\00", align 1
@.str.85 = private unnamed_addr constant [19 x i8] c")([^0-9A-Za-z_]|$)\00", align 1
@.str.86 = private unnamed_addr constant [3 x i8] c")$\00", align 1
@EGexecute.regs = internal global %struct.re_registers zeroinitializer, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fatal(i8* %mesg, i32 %errnum) #0 {
entry:
  %mesg.addr = alloca i8*, align 8
  %errnum.addr = alloca i32, align 4
  store i8* %mesg, i8** %mesg.addr, align 8
  store i32 %errnum, i32* %errnum.addr, align 4
  %0 = load i8*, i8** %mesg.addr, align 8
  %1 = load i32, i32* %errnum.addr, align 4
  call void @error(i8* %0, i32 %1)
  call void @exit(i32 2) #8
  unreachable
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @error(i8* %mesg, i32 %errnum) #0 {
entry:
  %mesg.addr = alloca i8*, align 8
  %errnum.addr = alloca i32, align 4
  store i8* %mesg, i8** %mesg.addr, align 8
  store i32 %errnum, i32* %errnum.addr, align 4
  %0 = load i32, i32* %errnum.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %2 = load i8*, i8** @prog, align 8
  %3 = load i8*, i8** %mesg.addr, align 8
  %4 = load i32, i32* %errnum.addr, align 4
  %call = call i8* @strerror(i32 %4) #9
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.25, i64 0, i64 0), i8* %2, i8* %3, i8* %call)
  br label %if.end

if.else:                                          ; preds = %entry
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %6 = load i8*, i8** @prog, align 8
  %7 = load i8*, i8** %mesg.addr, align 8
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.26, i64 0, i64 0), i8* %6, i8* %7)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  store i32 1, i32* @errseen, align 4
  ret void
}

; Function Attrs: nocallback noreturn nounwind
declare dso_local void @exit(i32) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @xmalloc(i64 %size) #0 {
entry:
  %size.addr = alloca i64, align 8
  %result = alloca i8*, align 8
  store i64 %size, i64* %size.addr, align 8
  %0 = load i64, i64* %size.addr, align 8
  %call = call noalias align 16 i8* @malloc(i64 %0) #9
  store i8* %call, i8** %result, align 8
  %1 = load i64, i64* %size.addr, align 8
  %tobool = icmp ne i64 %1, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load i8*, i8** %result, align 8
  %tobool1 = icmp ne i8* %2, null
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  call void @fatal(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0), i32 0)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %3 = load i8*, i8** %result, align 8
  ret i8* %3
}

; Function Attrs: nocallback nounwind
declare dso_local noalias align 16 i8* @malloc(i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @xrealloc(i8* %ptr, i64 %size) #0 {
entry:
  %ptr.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %result = alloca i8*, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** %ptr.addr, align 8
  %2 = load i64, i64* %size.addr, align 8
  %call = call align 16 i8* @realloc(i8* %1, i64 %2) #9
  store i8* %call, i8** %result, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  %3 = load i64, i64* %size.addr, align 8
  %call1 = call noalias align 16 i8* @malloc(i64 %3) #9
  store i8* %call1, i8** %result, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %4 = load i64, i64* %size.addr, align 8
  %tobool2 = icmp ne i64 %4, 0
  br i1 %tobool2, label %land.lhs.true, label %if.end5

land.lhs.true:                                    ; preds = %if.end
  %5 = load i8*, i8** %result, align 8
  %tobool3 = icmp ne i8* %5, null
  br i1 %tobool3, label %if.end5, label %if.then4

if.then4:                                         ; preds = %land.lhs.true
  call void @fatal(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0), i32 0)
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %land.lhs.true, %if.end
  %6 = load i8*, i8** %result, align 8
  ret i8* %6
}

; Function Attrs: nocallback nounwind
declare dso_local align 16 i8* @realloc(i8*, i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @reset(i32 %fd) #0 {
entry:
  %fd.addr = alloca i32, align 4
  store i32 %fd, i32* %fd.addr, align 4
  %0 = load i32, i32* @reset.initialized, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.end5, label %if.then

if.then:                                          ; preds = %entry
  store i32 1, i32* @reset.initialized, align 4
  %call = call i32 @getpagesize() #10
  %cmp = icmp sgt i32 8192, %call
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %call1 = call i32 @getpagesize() #10
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 8192, %cond.true ], [ %call1, %cond.false ]
  %conv = sext i32 %cond to i64
  store i64 %conv, i64* @bufsalloc, align 8
  %1 = load i64, i64* @bufsalloc, align 8
  %mul = mul i64 5, %1
  store i64 %mul, i64* @bufalloc, align 8
  %2 = load i64, i64* @bufalloc, align 8
  %add = add i64 %2, 1
  %call2 = call noalias i8* @valloc(i64 %add) #9
  store i8* %call2, i8** @buffer, align 8
  %3 = load i8*, i8** @buffer, align 8
  %tobool3 = icmp ne i8* %3, null
  br i1 %tobool3, label %if.end, label %if.then4

if.then4:                                         ; preds = %cond.end
  call void @fatal(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0), i32 0)
  br label %if.end

if.end:                                           ; preds = %if.then4, %cond.end
  %4 = load i8*, i8** @buffer, align 8
  store i8* %4, i8** @bufbeg, align 8
  %5 = load i8*, i8** @buffer, align 8
  store i8* %5, i8** @buflim, align 8
  br label %if.end5

if.end5:                                          ; preds = %if.end, %entry
  %6 = load i32, i32* %fd.addr, align 4
  store i32 %6, i32* @bufdesc, align 4
  %7 = load i32, i32* %fd.addr, align 4
  %call6 = call i32 @fstat(i32 %7, %struct.stat* @bufstat) #9
  %cmp7 = icmp slt i32 %call6, 0
  br i1 %cmp7, label %if.then11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end5
  %8 = load i32, i32* getelementptr inbounds (%struct.stat, %struct.stat* @bufstat, i32 0, i32 3), align 8
  %and = and i32 %8, 61440
  %cmp9 = icmp eq i32 %and, 32768
  br i1 %cmp9, label %if.else, label %if.then11

if.then11:                                        ; preds = %lor.lhs.false, %if.end5
  store i32 0, i32* @bufmapped, align 4
  br label %if.end13

if.else:                                          ; preds = %lor.lhs.false
  store i32 1, i32* @bufmapped, align 4
  %9 = load i32, i32* %fd.addr, align 4
  %call12 = call i64 @lseek(i32 %9, i64 0, i32 1) #9
  store i64 %call12, i64* @bufoffset, align 8
  br label %if.end13

if.end13:                                         ; preds = %if.else, %if.then11
  ret void
}

; Function Attrs: nocallback nounwind readnone willreturn
declare dso_local i32 @getpagesize() #3

; Function Attrs: nocallback nounwind
declare dso_local noalias i8* @valloc(i64) #2

; Function Attrs: nocallback nounwind
declare dso_local i32 @fstat(i32, %struct.stat*) #2

; Function Attrs: nocallback nounwind
declare dso_local i64 @lseek(i32, i64, i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @setmatcher(i8* %name) #0 {
entry:
  %retval = alloca i32, align 4
  %name.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  store i8* %name, i8** %name.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %idxprom = sext i32 %0 to i64
  %arrayidx = getelementptr inbounds [0 x %struct.matcher], [0 x %struct.matcher]* bitcast ([9 x %struct.matcher]* @matchers to [0 x %struct.matcher]*), i64 0, i64 %idxprom
  %name1 = getelementptr inbounds %struct.matcher, %struct.matcher* %arrayidx, i32 0, i32 0
  %1 = load i8*, i8** %name1, align 8
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8*, i8** %name.addr, align 8
  %3 = load i32, i32* %i, align 4
  %idxprom2 = sext i32 %3 to i64
  %arrayidx3 = getelementptr inbounds [0 x %struct.matcher], [0 x %struct.matcher]* bitcast ([9 x %struct.matcher]* @matchers to [0 x %struct.matcher]*), i64 0, i64 %idxprom2
  %name4 = getelementptr inbounds %struct.matcher, %struct.matcher* %arrayidx3, i32 0, i32 0
  %4 = load i8*, i8** %name4, align 8
  %call = call i32 @strcmp(i8* %2, i8* %4) #11
  %cmp = icmp eq i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %idxprom5 = sext i32 %5 to i64
  %arrayidx6 = getelementptr inbounds [0 x %struct.matcher], [0 x %struct.matcher]* bitcast ([9 x %struct.matcher]* @matchers to [0 x %struct.matcher]*), i64 0, i64 %idxprom5
  %compile = getelementptr inbounds %struct.matcher, %struct.matcher* %arrayidx6, i32 0, i32 1
  %6 = load void (i8*, i64)*, void (i8*, i64)** %compile, align 8
  %7 = bitcast void (i8*, i64)* %6 to void (...)*
  store void (...)* %7, void (...)** @compile, align 8
  %8 = load i32, i32* %i, align 4
  %idxprom7 = sext i32 %8 to i64
  %arrayidx8 = getelementptr inbounds [0 x %struct.matcher], [0 x %struct.matcher]* bitcast ([9 x %struct.matcher]* @matchers to [0 x %struct.matcher]*), i64 0, i64 %idxprom7
  %execute = getelementptr inbounds %struct.matcher, %struct.matcher* %arrayidx8, i32 0, i32 2
  %9 = load i8* (i8*, i64, i8**)*, i8* (i8*, i64, i8**)** %execute, align 8
  %10 = bitcast i8* (i8*, i64, i8**)* %9 to i8* (...)*
  store i8* (...)* %10, i8* (...)** @execute, align 8
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond, !llvm.loop !4

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  %12 = load i32, i32* %retval, align 4
  ret i32 %12
}

; Function Attrs: nocallback nounwind readonly willreturn
declare dso_local i32 @strcmp(i8*, i8*) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %keys = alloca i8*, align 8
  %keycc = alloca i64, align 8
  %oldcc = alloca i64, align 8
  %keyalloc = alloca i64, align 8
  %keyfound = alloca i32, align 4
  %count_matches = alloca i32, align 4
  %no_filenames = alloca i32, align 4
  %list_files = alloca i32, align 4
  %suppress_errors = alloca i32, align 4
  %opt = alloca i32, align 4
  %cc = alloca i32, align 4
  %desc = alloca i32, align 4
  %count = alloca i32, align 4
  %status = alloca i32, align 4
  %fp = alloca %struct._IO_FILE*, align 8
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 8
  %0 = load i8**, i8*** %argv.addr, align 8
  %arrayidx = getelementptr inbounds i8*, i8** %0, i64 0
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), i8** %arrayidx, align 8
  %1 = load i8**, i8*** %argv.addr, align 8
  %arrayidx1 = getelementptr inbounds i8*, i8** %1, i64 0
  %2 = load i8*, i8** %arrayidx1, align 8
  store i8* %2, i8** @prog, align 8
  %3 = load i8*, i8** @prog, align 8
  %tobool = icmp ne i8* %3, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %4 = load i8*, i8** @prog, align 8
  %call = call i8* @strrchr(i8* %4, i32 47) #11
  %tobool2 = icmp ne i8* %call, null
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %5 = load i8*, i8** @prog, align 8
  %call3 = call i8* @strrchr(i8* %5, i32 47) #11
  %add.ptr = getelementptr inbounds i8, i8* %call3, i64 1
  store i8* %add.ptr, i8** @prog, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  store i8* null, i8** %keys, align 8
  store i64 0, i64* %keycc, align 8
  store i32 0, i32* %keyfound, align 4
  store i32 0, i32* %count_matches, align 4
  store i32 0, i32* %no_filenames, align 4
  store i32 0, i32* %list_files, align 4
  store i32 0, i32* %suppress_errors, align 4
  store i8* null, i8** @matcher, align 8
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog, %if.end
  %6 = load i32, i32* %argc.addr, align 4
  %7 = load i8**, i8*** %argv.addr, align 8
  %call4 = call i32 @getopt(i32 %6, i8** %7, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.2, i64 0, i64 0)) #9
  store i32 %call4, i32* %opt, align 4
  %cmp = icmp ne i32 %call4, -1
  br i1 %cmp, label %while.body, label %while.end124

while.body:                                       ; preds = %while.cond
  %8 = load i32, i32* %opt, align 4
  switch i32 %8, label %sw.default [
    i32 48, label %sw.bb
    i32 49, label %sw.bb
    i32 50, label %sw.bb
    i32 51, label %sw.bb
    i32 52, label %sw.bb
    i32 53, label %sw.bb
    i32 54, label %sw.bb
    i32 55, label %sw.bb
    i32 56, label %sw.bb
    i32 57, label %sw.bb
    i32 65, label %sw.bb8
    i32 66, label %sw.bb13
    i32 67, label %sw.bb18
    i32 69, label %sw.bb19
    i32 70, label %sw.bb26
    i32 71, label %sw.bb33
    i32 86, label %sw.bb40
    i32 88, label %sw.bb42
    i32 98, label %sw.bb46
    i32 99, label %sw.bb47
    i32 101, label %sw.bb48
    i32 102, label %sw.bb62
    i32 104, label %sw.bb114
    i32 105, label %sw.bb115
    i32 121, label %sw.bb115
    i32 76, label %sw.bb116
    i32 108, label %sw.bb117
    i32 110, label %sw.bb118
    i32 113, label %sw.bb119
    i32 115, label %sw.bb120
    i32 118, label %sw.bb121
    i32 119, label %sw.bb122
    i32 120, label %sw.bb123
  ]

sw.bb:                                            ; preds = %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body
  %9 = load i32, i32* @out_before, align 4
  %mul = mul nsw i32 10, %9
  %10 = load i32, i32* %opt, align 4
  %add = add nsw i32 %mul, %10
  %sub = sub nsw i32 %add, 48
  store i32 %sub, i32* @out_before, align 4
  %11 = load i32, i32* @out_after, align 4
  %mul5 = mul nsw i32 10, %11
  %12 = load i32, i32* %opt, align 4
  %add6 = add nsw i32 %mul5, %12
  %sub7 = sub nsw i32 %add6, 48
  store i32 %sub7, i32* @out_after, align 4
  br label %sw.epilog

sw.bb8:                                           ; preds = %while.body
  %13 = load i8*, i8** @optarg, align 8
  %call9 = call i32 @atoi(i8* %13) #11
  store i32 %call9, i32* @out_after, align 4
  %14 = load i32, i32* @out_after, align 4
  %cmp10 = icmp slt i32 %14, 0
  br i1 %cmp10, label %if.then11, label %if.end12

if.then11:                                        ; preds = %sw.bb8
  call void @usage()
  br label %if.end12

if.end12:                                         ; preds = %if.then11, %sw.bb8
  br label %sw.epilog

sw.bb13:                                          ; preds = %while.body
  %15 = load i8*, i8** @optarg, align 8
  %call14 = call i32 @atoi(i8* %15) #11
  store i32 %call14, i32* @out_before, align 4
  %16 = load i32, i32* @out_before, align 4
  %cmp15 = icmp slt i32 %16, 0
  br i1 %cmp15, label %if.then16, label %if.end17

if.then16:                                        ; preds = %sw.bb13
  call void @usage()
  br label %if.end17

if.end17:                                         ; preds = %if.then16, %sw.bb13
  br label %sw.epilog

sw.bb18:                                          ; preds = %while.body
  store i32 2, i32* @out_after, align 4
  store i32 2, i32* @out_before, align 4
  br label %sw.epilog

sw.bb19:                                          ; preds = %while.body
  %17 = load i8*, i8** @matcher, align 8
  %tobool20 = icmp ne i8* %17, null
  br i1 %tobool20, label %land.lhs.true21, label %if.end25

land.lhs.true21:                                  ; preds = %sw.bb19
  %18 = load i8*, i8** @matcher, align 8
  %call22 = call i32 @strcmp(i8* %18, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0)) #11
  %cmp23 = icmp ne i32 %call22, 0
  br i1 %cmp23, label %if.then24, label %if.end25

if.then24:                                        ; preds = %land.lhs.true21
  call void @fatal(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.4, i64 0, i64 0), i32 0)
  br label %if.end25

if.end25:                                         ; preds = %if.then24, %land.lhs.true21, %sw.bb19
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.5, i64 0, i64 0), i8** @matcher, align 8
  br label %sw.epilog

sw.bb26:                                          ; preds = %while.body
  %19 = load i8*, i8** @matcher, align 8
  %tobool27 = icmp ne i8* %19, null
  br i1 %tobool27, label %land.lhs.true28, label %if.end32

land.lhs.true28:                                  ; preds = %sw.bb26
  %20 = load i8*, i8** @matcher, align 8
  %call29 = call i32 @strcmp(i8* %20, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i64 0, i64 0)) #11
  %cmp30 = icmp ne i32 %call29, 0
  br i1 %cmp30, label %if.then31, label %if.end32

if.then31:                                        ; preds = %land.lhs.true28
  call void @fatal(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.4, i64 0, i64 0), i32 0)
  br label %if.end32

if.end32:                                         ; preds = %if.then31, %land.lhs.true28, %sw.bb26
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i64 0, i64 0), i8** @matcher, align 8
  br label %sw.epilog

sw.bb33:                                          ; preds = %while.body
  %21 = load i8*, i8** @matcher, align 8
  %tobool34 = icmp ne i8* %21, null
  br i1 %tobool34, label %land.lhs.true35, label %if.end39

land.lhs.true35:                                  ; preds = %sw.bb33
  %22 = load i8*, i8** @matcher, align 8
  %call36 = call i32 @strcmp(i8* %22, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i64 0, i64 0)) #11
  %cmp37 = icmp ne i32 %call36, 0
  br i1 %cmp37, label %if.then38, label %if.end39

if.then38:                                        ; preds = %land.lhs.true35
  call void @fatal(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.4, i64 0, i64 0), i32 0)
  br label %if.end39

if.end39:                                         ; preds = %if.then38, %land.lhs.true35, %sw.bb33
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i64 0, i64 0), i8** @matcher, align 8
  br label %sw.epilog

sw.bb40:                                          ; preds = %while.body
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %call41 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %23, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @version, i64 0, i64 0))
  br label %sw.epilog

sw.bb42:                                          ; preds = %while.body
  %24 = load i8*, i8** @matcher, align 8
  %tobool43 = icmp ne i8* %24, null
  br i1 %tobool43, label %if.then44, label %if.end45

if.then44:                                        ; preds = %sw.bb42
  call void @fatal(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.9, i64 0, i64 0), i32 0)
  br label %if.end45

if.end45:                                         ; preds = %if.then44, %sw.bb42
  %25 = load i8*, i8** @optarg, align 8
  store i8* %25, i8** @matcher, align 8
  br label %sw.epilog

sw.bb46:                                          ; preds = %while.body
  store i32 1, i32* @out_byte, align 4
  br label %sw.epilog

sw.bb47:                                          ; preds = %while.body
  store i32 1, i32* @out_quiet, align 4
  store i32 1, i32* %count_matches, align 4
  br label %sw.epilog

sw.bb48:                                          ; preds = %while.body
  %26 = load i8*, i8** @optarg, align 8
  %call49 = call i64 @strlen(i8* %26) #11
  %conv = trunc i64 %call49 to i32
  store i32 %conv, i32* %cc, align 4
  %27 = load i8*, i8** %keys, align 8
  %28 = load i64, i64* %keycc, align 8
  %29 = load i32, i32* %cc, align 4
  %conv50 = sext i32 %29 to i64
  %add51 = add i64 %28, %conv50
  %add52 = add i64 %add51, 1
  %call53 = call i8* @xrealloc(i8* %27, i64 %add52)
  store i8* %call53, i8** %keys, align 8
  %30 = load i32, i32* %keyfound, align 4
  %tobool54 = icmp ne i32 %30, 0
  br i1 %tobool54, label %if.then55, label %if.end57

if.then55:                                        ; preds = %sw.bb48
  %31 = load i8*, i8** %keys, align 8
  %32 = load i64, i64* %keycc, align 8
  %inc = add i64 %32, 1
  store i64 %inc, i64* %keycc, align 8
  %arrayidx56 = getelementptr inbounds i8, i8* %31, i64 %32
  store i8 10, i8* %arrayidx56, align 1
  br label %if.end57

if.end57:                                         ; preds = %if.then55, %sw.bb48
  %33 = load i8*, i8** %keys, align 8
  %34 = load i64, i64* %keycc, align 8
  %arrayidx58 = getelementptr inbounds i8, i8* %33, i64 %34
  %35 = load i8*, i8** @optarg, align 8
  %call59 = call i8* @strcpy(i8* %arrayidx58, i8* %35) #9
  %36 = load i32, i32* %cc, align 4
  %conv60 = sext i32 %36 to i64
  %37 = load i64, i64* %keycc, align 8
  %add61 = add i64 %37, %conv60
  store i64 %add61, i64* %keycc, align 8
  store i32 1, i32* %keyfound, align 4
  br label %sw.epilog

sw.bb62:                                          ; preds = %while.body
  %38 = load i8*, i8** @optarg, align 8
  %call63 = call i32 @strcmp(i8* %38, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)) #11
  %cmp64 = icmp ne i32 %call63, 0
  br i1 %cmp64, label %cond.true, label %cond.false

cond.true:                                        ; preds = %sw.bb62
  %39 = load i8*, i8** @optarg, align 8
  %call66 = call %struct._IO_FILE* @fopen(i8* %39, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11, i64 0, i64 0))
  br label %cond.end

cond.false:                                       ; preds = %sw.bb62
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._IO_FILE* [ %call66, %cond.true ], [ %40, %cond.false ]
  store %struct._IO_FILE* %cond, %struct._IO_FILE** %fp, align 8
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8
  %tobool67 = icmp ne %struct._IO_FILE* %41, null
  br i1 %tobool67, label %if.end70, label %if.then68

if.then68:                                        ; preds = %cond.end
  %42 = load i8*, i8** @optarg, align 8
  %call69 = call i32* @__errno_location() #10
  %43 = load i32, i32* %call69, align 4
  call void @fatal(i8* %42, i32 %43)
  br label %if.end70

if.end70:                                         ; preds = %if.then68, %cond.end
  store i64 1, i64* %keyalloc, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end70
  %44 = load i64, i64* %keyalloc, align 8
  %45 = load i64, i64* %keycc, align 8
  %cmp71 = icmp ule i64 %44, %45
  br i1 %cmp71, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %46 = load i64, i64* %keyalloc, align 8
  %mul73 = mul i64 %46, 2
  store i64 %mul73, i64* %keyalloc, align 8
  br label %for.cond, !llvm.loop !6

for.end:                                          ; preds = %for.cond
  %47 = load i8*, i8** %keys, align 8
  %48 = load i64, i64* %keyalloc, align 8
  %call74 = call i8* @xrealloc(i8* %47, i64 %48)
  store i8* %call74, i8** %keys, align 8
  %49 = load i64, i64* %keycc, align 8
  store i64 %49, i64* %oldcc, align 8
  %50 = load i32, i32* %keyfound, align 4
  %tobool75 = icmp ne i32 %50, 0
  br i1 %tobool75, label %if.then76, label %if.end79

if.then76:                                        ; preds = %for.end
  %51 = load i8*, i8** %keys, align 8
  %52 = load i64, i64* %keycc, align 8
  %inc77 = add i64 %52, 1
  store i64 %inc77, i64* %keycc, align 8
  %arrayidx78 = getelementptr inbounds i8, i8* %51, i64 %52
  store i8 10, i8* %arrayidx78, align 1
  br label %if.end79

if.end79:                                         ; preds = %if.then76, %for.end
  br label %while.cond80

while.cond80:                                     ; preds = %if.end97, %if.end79
  %53 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8
  %call81 = call i32 @feof(%struct._IO_FILE* %53) #9
  %tobool82 = icmp ne i32 %call81, 0
  br i1 %tobool82, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %while.cond80
  %54 = load i8*, i8** %keys, align 8
  %55 = load i64, i64* %keycc, align 8
  %add.ptr83 = getelementptr inbounds i8, i8* %54, i64 %55
  %56 = load i64, i64* %keyalloc, align 8
  %57 = load i64, i64* %keycc, align 8
  %sub84 = sub i64 %56, %57
  %58 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8
  %call85 = call i64 @fread(i8* %add.ptr83, i64 1, i64 %sub84, %struct._IO_FILE* %58)
  %conv86 = trunc i64 %call85 to i32
  store i32 %conv86, i32* %cc, align 4
  %cmp87 = icmp sgt i32 %conv86, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond80
  %59 = phi i1 [ false, %while.cond80 ], [ %cmp87, %land.rhs ]
  br i1 %59, label %while.body89, label %while.end

while.body89:                                     ; preds = %land.end
  %60 = load i32, i32* %cc, align 4
  %conv90 = sext i32 %60 to i64
  %61 = load i64, i64* %keycc, align 8
  %add91 = add i64 %61, %conv90
  store i64 %add91, i64* %keycc, align 8
  %62 = load i64, i64* %keycc, align 8
  %63 = load i64, i64* %keyalloc, align 8
  %cmp92 = icmp eq i64 %62, %63
  br i1 %cmp92, label %if.then94, label %if.end97

if.then94:                                        ; preds = %while.body89
  %64 = load i8*, i8** %keys, align 8
  %65 = load i64, i64* %keyalloc, align 8
  %mul95 = mul i64 %65, 2
  store i64 %mul95, i64* %keyalloc, align 8
  %call96 = call i8* @xrealloc(i8* %64, i64 %mul95)
  store i8* %call96, i8** %keys, align 8
  br label %if.end97

if.end97:                                         ; preds = %if.then94, %while.body89
  br label %while.cond80, !llvm.loop !7

while.end:                                        ; preds = %land.end
  %66 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8
  %67 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8
  %cmp98 = icmp ne %struct._IO_FILE* %66, %67
  br i1 %cmp98, label %if.then100, label %if.end102

if.then100:                                       ; preds = %while.end
  %68 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8
  %call101 = call i32 @fclose(%struct._IO_FILE* %68)
  br label %if.end102

if.end102:                                        ; preds = %if.then100, %while.end
  %69 = load i64, i64* %keycc, align 8
  %70 = load i64, i64* %oldcc, align 8
  %sub103 = sub i64 %69, %70
  %cmp104 = icmp ugt i64 %sub103, 0
  br i1 %cmp104, label %land.lhs.true106, label %if.end113

land.lhs.true106:                                 ; preds = %if.end102
  %71 = load i8*, i8** %keys, align 8
  %72 = load i64, i64* %keycc, align 8
  %sub107 = sub i64 %72, 1
  %arrayidx108 = getelementptr inbounds i8, i8* %71, i64 %sub107
  %73 = load i8, i8* %arrayidx108, align 1
  %conv109 = sext i8 %73 to i32
  %cmp110 = icmp eq i32 %conv109, 10
  br i1 %cmp110, label %if.then112, label %if.end113

if.then112:                                       ; preds = %land.lhs.true106
  %74 = load i64, i64* %keycc, align 8
  %dec = add i64 %74, -1
  store i64 %dec, i64* %keycc, align 8
  br label %if.end113

if.end113:                                        ; preds = %if.then112, %land.lhs.true106, %if.end102
  store i32 1, i32* %keyfound, align 4
  br label %sw.epilog

sw.bb114:                                         ; preds = %while.body
  store i32 1, i32* %no_filenames, align 4
  br label %sw.epilog

sw.bb115:                                         ; preds = %while.body, %while.body
  store i32 1, i32* @match_icase, align 4
  br label %sw.epilog

sw.bb116:                                         ; preds = %while.body
  store i32 1, i32* @out_quiet, align 4
  store i32 -1, i32* %list_files, align 4
  br label %sw.epilog

sw.bb117:                                         ; preds = %while.body
  store i32 1, i32* @out_quiet, align 4
  store i32 1, i32* %list_files, align 4
  br label %sw.epilog

sw.bb118:                                         ; preds = %while.body
  store i32 1, i32* @out_line, align 4
  br label %sw.epilog

sw.bb119:                                         ; preds = %while.body
  store i32 1, i32* @out_quiet, align 4
  br label %sw.epilog

sw.bb120:                                         ; preds = %while.body
  store i32 1, i32* %suppress_errors, align 4
  br label %sw.epilog

sw.bb121:                                         ; preds = %while.body
  store i32 1, i32* @out_invert, align 4
  br label %sw.epilog

sw.bb122:                                         ; preds = %while.body
  store i32 1, i32* @match_words, align 4
  br label %sw.epilog

sw.bb123:                                         ; preds = %while.body
  store i32 1, i32* @match_lines, align 4
  br label %sw.epilog

sw.default:                                       ; preds = %while.body
  call void @usage()
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb123, %sw.bb122, %sw.bb121, %sw.bb120, %sw.bb119, %sw.bb118, %sw.bb117, %sw.bb116, %sw.bb115, %sw.bb114, %if.end113, %if.end57, %sw.bb47, %sw.bb46, %if.end45, %sw.bb40, %if.end39, %if.end32, %if.end25, %sw.bb18, %if.end17, %if.end12, %sw.bb
  br label %while.cond, !llvm.loop !8

while.end124:                                     ; preds = %while.cond
  %75 = load i32, i32* %keyfound, align 4
  %tobool125 = icmp ne i32 %75, 0
  br i1 %tobool125, label %if.end134, label %if.then126

if.then126:                                       ; preds = %while.end124
  %76 = load i32, i32* @optind, align 4
  %77 = load i32, i32* %argc.addr, align 4
  %cmp127 = icmp slt i32 %76, %77
  br i1 %cmp127, label %if.then129, label %if.else

if.then129:                                       ; preds = %if.then126
  %78 = load i8**, i8*** %argv.addr, align 8
  %79 = load i32, i32* @optind, align 4
  %inc130 = add nsw i32 %79, 1
  store i32 %inc130, i32* @optind, align 4
  %idxprom = sext i32 %79 to i64
  %arrayidx131 = getelementptr inbounds i8*, i8** %78, i64 %idxprom
  %80 = load i8*, i8** %arrayidx131, align 8
  store i8* %80, i8** %keys, align 8
  %81 = load i8*, i8** %keys, align 8
  %call132 = call i64 @strlen(i8* %81) #11
  store i64 %call132, i64* %keycc, align 8
  br label %if.end133

if.else:                                          ; preds = %if.then126
  call void @usage()
  br label %if.end133

if.end133:                                        ; preds = %if.else, %if.then129
  br label %if.end134

if.end134:                                        ; preds = %if.end133, %while.end124
  %82 = load i8*, i8** @matcher, align 8
  %tobool135 = icmp ne i8* %82, null
  br i1 %tobool135, label %if.end137, label %if.then136

if.then136:                                       ; preds = %if.end134
  %83 = load i8*, i8** @prog, align 8
  store i8* %83, i8** @matcher, align 8
  br label %if.end137

if.end137:                                        ; preds = %if.then136, %if.end134
  %84 = load i8*, i8** @matcher, align 8
  %call138 = call i32 @setmatcher(i8* %84)
  %tobool139 = icmp ne i32 %call138, 0
  br i1 %tobool139, label %if.end144, label %land.lhs.true140

land.lhs.true140:                                 ; preds = %if.end137
  %call141 = call i32 @setmatcher(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.12, i64 0, i64 0))
  %tobool142 = icmp ne i32 %call141, 0
  br i1 %tobool142, label %if.end144, label %if.then143

if.then143:                                       ; preds = %land.lhs.true140
  call void @abort() #8
  unreachable

if.end144:                                        ; preds = %land.lhs.true140, %if.end137
  %85 = load void (...)*, void (...)** @compile, align 8
  %86 = load i8*, i8** %keys, align 8
  %87 = load i64, i64* %keycc, align 8
  %callee.knr.cast = bitcast void (...)* %85 to void (i8*, i64, ...)*
  call void (i8*, i64, ...) %callee.knr.cast(i8* %86, i64 %87)
  %88 = load i32, i32* %argc.addr, align 4
  %89 = load i32, i32* @optind, align 4
  %sub145 = sub nsw i32 %88, %89
  %cmp146 = icmp sgt i32 %sub145, 1
  br i1 %cmp146, label %land.lhs.true148, label %if.end151

land.lhs.true148:                                 ; preds = %if.end144
  %90 = load i32, i32* %no_filenames, align 4
  %tobool149 = icmp ne i32 %90, 0
  br i1 %tobool149, label %if.end151, label %if.then150

if.then150:                                       ; preds = %land.lhs.true148
  store i32 1, i32* @out_file, align 4
  br label %if.end151

if.end151:                                        ; preds = %if.then150, %land.lhs.true148, %if.end144
  store i32 1, i32* %status, align 4
  %91 = load i32, i32* @optind, align 4
  %92 = load i32, i32* %argc.addr, align 4
  %cmp152 = icmp slt i32 %91, %92
  br i1 %cmp152, label %if.then154, label %if.else219

if.then154:                                       ; preds = %if.end151
  br label %while.cond155

while.cond155:                                    ; preds = %if.end216, %if.then154
  %93 = load i32, i32* @optind, align 4
  %94 = load i32, i32* %argc.addr, align 4
  %cmp156 = icmp slt i32 %93, %94
  br i1 %cmp156, label %while.body158, label %while.end218

while.body158:                                    ; preds = %while.cond155
  %95 = load i8**, i8*** %argv.addr, align 8
  %96 = load i32, i32* @optind, align 4
  %idxprom159 = sext i32 %96 to i64
  %arrayidx160 = getelementptr inbounds i8*, i8** %95, i64 %idxprom159
  %97 = load i8*, i8** %arrayidx160, align 8
  %call161 = call i32 @strcmp(i8* %97, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)) #11
  %tobool162 = icmp ne i32 %call161, 0
  br i1 %tobool162, label %cond.true163, label %cond.false167

cond.true163:                                     ; preds = %while.body158
  %98 = load i8**, i8*** %argv.addr, align 8
  %99 = load i32, i32* @optind, align 4
  %idxprom164 = sext i32 %99 to i64
  %arrayidx165 = getelementptr inbounds i8*, i8** %98, i64 %idxprom164
  %100 = load i8*, i8** %arrayidx165, align 8
  %call166 = call i32 (i8*, i32, ...) @open(i8* %100, i32 0)
  br label %cond.end168

cond.false167:                                    ; preds = %while.body158
  br label %cond.end168

cond.end168:                                      ; preds = %cond.false167, %cond.true163
  %cond169 = phi i32 [ %call166, %cond.true163 ], [ 0, %cond.false167 ]
  store i32 %cond169, i32* %desc, align 4
  %101 = load i32, i32* %desc, align 4
  %cmp170 = icmp slt i32 %101, 0
  br i1 %cmp170, label %if.then172, label %if.else179

if.then172:                                       ; preds = %cond.end168
  %102 = load i32, i32* %suppress_errors, align 4
  %tobool173 = icmp ne i32 %102, 0
  br i1 %tobool173, label %if.end178, label %if.then174

if.then174:                                       ; preds = %if.then172
  %103 = load i8**, i8*** %argv.addr, align 8
  %104 = load i32, i32* @optind, align 4
  %idxprom175 = sext i32 %104 to i64
  %arrayidx176 = getelementptr inbounds i8*, i8** %103, i64 %idxprom175
  %105 = load i8*, i8** %arrayidx176, align 8
  %call177 = call i32* @__errno_location() #10
  %106 = load i32, i32* %call177, align 4
  call void @error(i8* %105, i32 %106)
  br label %if.end178

if.end178:                                        ; preds = %if.then174, %if.then172
  br label %if.end211

if.else179:                                       ; preds = %cond.end168
  %107 = load i32, i32* %desc, align 4
  %cmp180 = icmp eq i32 %107, 0
  br i1 %cmp180, label %cond.true182, label %cond.false183

cond.true182:                                     ; preds = %if.else179
  br label %cond.end186

cond.false183:                                    ; preds = %if.else179
  %108 = load i8**, i8*** %argv.addr, align 8
  %109 = load i32, i32* @optind, align 4
  %idxprom184 = sext i32 %109 to i64
  %arrayidx185 = getelementptr inbounds i8*, i8** %108, i64 %idxprom184
  %110 = load i8*, i8** %arrayidx185, align 8
  br label %cond.end186

cond.end186:                                      ; preds = %cond.false183, %cond.true182
  %cond187 = phi i8* [ getelementptr inbounds ([17 x i8], [17 x i8]* @.str.13, i64 0, i64 0), %cond.true182 ], [ %110, %cond.false183 ]
  store i8* %cond187, i8** @filename, align 8
  %111 = load i32, i32* %desc, align 4
  %call188 = call i32 @grep(i32 %111)
  store i32 %call188, i32* %count, align 4
  %112 = load i32, i32* %count_matches, align 4
  %tobool189 = icmp ne i32 %112, 0
  br i1 %tobool189, label %if.then190, label %if.end196

if.then190:                                       ; preds = %cond.end186
  %113 = load i32, i32* @out_file, align 4
  %tobool191 = icmp ne i32 %113, 0
  br i1 %tobool191, label %if.then192, label %if.end194

if.then192:                                       ; preds = %if.then190
  %114 = load i8*, i8** @filename, align 8
  %call193 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i64 0, i64 0), i8* %114)
  br label %if.end194

if.end194:                                        ; preds = %if.then192, %if.then190
  %115 = load i32, i32* %count, align 4
  %call195 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15, i64 0, i64 0), i32 %115)
  br label %if.end196

if.end196:                                        ; preds = %if.end194, %cond.end186
  %116 = load i32, i32* %count, align 4
  %tobool197 = icmp ne i32 %116, 0
  br i1 %tobool197, label %if.then198, label %if.else204

if.then198:                                       ; preds = %if.end196
  store i32 0, i32* %status, align 4
  %117 = load i32, i32* %list_files, align 4
  %cmp199 = icmp eq i32 %117, 1
  br i1 %cmp199, label %if.then201, label %if.end203

if.then201:                                       ; preds = %if.then198
  %118 = load i8*, i8** @filename, align 8
  %call202 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0), i8* %118)
  br label %if.end203

if.end203:                                        ; preds = %if.then201, %if.then198
  br label %if.end210

if.else204:                                       ; preds = %if.end196
  %119 = load i32, i32* %list_files, align 4
  %cmp205 = icmp eq i32 %119, -1
  br i1 %cmp205, label %if.then207, label %if.end209

if.then207:                                       ; preds = %if.else204
  %120 = load i8*, i8** @filename, align 8
  %call208 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0), i8* %120)
  br label %if.end209

if.end209:                                        ; preds = %if.then207, %if.else204
  br label %if.end210

if.end210:                                        ; preds = %if.end209, %if.end203
  br label %if.end211

if.end211:                                        ; preds = %if.end210, %if.end178
  %121 = load i32, i32* %desc, align 4
  %cmp212 = icmp ne i32 %121, 0
  br i1 %cmp212, label %if.then214, label %if.end216

if.then214:                                       ; preds = %if.end211
  %122 = load i32, i32* %desc, align 4
  %call215 = call i32 @close(i32 %122)
  br label %if.end216

if.end216:                                        ; preds = %if.then214, %if.end211
  %123 = load i32, i32* @optind, align 4
  %inc217 = add nsw i32 %123, 1
  store i32 %inc217, i32* @optind, align 4
  br label %while.cond155, !llvm.loop !9

while.end218:                                     ; preds = %while.cond155
  br label %if.end239

if.else219:                                       ; preds = %if.end151
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.13, i64 0, i64 0), i8** @filename, align 8
  %call220 = call i32 @grep(i32 0)
  store i32 %call220, i32* %count, align 4
  %124 = load i32, i32* %count_matches, align 4
  %tobool221 = icmp ne i32 %124, 0
  br i1 %tobool221, label %if.then222, label %if.end224

if.then222:                                       ; preds = %if.else219
  %125 = load i32, i32* %count, align 4
  %call223 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15, i64 0, i64 0), i32 %125)
  br label %if.end224

if.end224:                                        ; preds = %if.then222, %if.else219
  %126 = load i32, i32* %count, align 4
  %tobool225 = icmp ne i32 %126, 0
  br i1 %tobool225, label %if.then226, label %if.else232

if.then226:                                       ; preds = %if.end224
  store i32 0, i32* %status, align 4
  %127 = load i32, i32* %list_files, align 4
  %cmp227 = icmp eq i32 %127, 1
  br i1 %cmp227, label %if.then229, label %if.end231

if.then229:                                       ; preds = %if.then226
  %call230 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.16, i64 0, i64 0))
  br label %if.end231

if.end231:                                        ; preds = %if.then229, %if.then226
  br label %if.end238

if.else232:                                       ; preds = %if.end224
  %128 = load i32, i32* %list_files, align 4
  %cmp233 = icmp eq i32 %128, -1
  br i1 %cmp233, label %if.then235, label %if.end237

if.then235:                                       ; preds = %if.else232
  %call236 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.16, i64 0, i64 0))
  br label %if.end237

if.end237:                                        ; preds = %if.then235, %if.else232
  br label %if.end238

if.end238:                                        ; preds = %if.end237, %if.end231
  br label %if.end239

if.end239:                                        ; preds = %if.end238, %while.end218
  %129 = load i32, i32* @errseen, align 4
  %tobool240 = icmp ne i32 %129, 0
  br i1 %tobool240, label %cond.true241, label %cond.false242

cond.true241:                                     ; preds = %if.end239
  br label %cond.end243

cond.false242:                                    ; preds = %if.end239
  %130 = load i32, i32* %status, align 4
  br label %cond.end243

cond.end243:                                      ; preds = %cond.false242, %cond.true241
  %cond244 = phi i32 [ 2, %cond.true241 ], [ %130, %cond.false242 ]
  call void @exit(i32 %cond244) #8
  unreachable
}

; Function Attrs: nocallback nounwind readonly willreturn
declare dso_local i8* @strrchr(i8*, i32) #4

; Function Attrs: nocallback nounwind
declare dso_local i32 @getopt(i32, i8**, i8*) #2

; Function Attrs: nocallback nounwind readonly willreturn
declare dso_local i32 @atoi(i8*) #4

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #5

; Function Attrs: nocallback nounwind readonly willreturn
declare dso_local i64 @strlen(i8*) #4

; Function Attrs: nocallback nounwind
declare dso_local i8* @strcpy(i8*, i8*) #2

declare dso_local %struct._IO_FILE* @fopen(i8*, i8*) #5

; Function Attrs: nocallback nounwind readnone willreturn
declare dso_local i32* @__errno_location() #3

; Function Attrs: nocallback nounwind
declare dso_local i32 @feof(%struct._IO_FILE*) #2

declare dso_local i64 @fread(i8*, i64, i64, %struct._IO_FILE*) #5

declare dso_local i32 @fclose(%struct._IO_FILE*) #5

; Function Attrs: nocallback noreturn nounwind
declare dso_local void @abort() #1

declare dso_local i32 @open(i8*, i32, ...) #5

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @grep(i32 %fd) #0 {
entry:
  %retval = alloca i32, align 4
  %fd.addr = alloca i32, align 4
  %nlines = alloca i32, align 4
  %i = alloca i32, align 4
  %residue = alloca i64, align 8
  %save = alloca i64, align 8
  %beg = alloca i8*, align 8
  %lim = alloca i8*, align 8
  store i32 %fd, i32* %fd.addr, align 4
  %0 = load i32, i32* %fd.addr, align 4
  call void @reset(i32 %0)
  store i64 0, i64* @totalcc, align 8
  store i8* null, i8** @lastout, align 8
  store i64 0, i64* @totalnl, align 8
  store i32 0, i32* @pending, align 4
  store i32 0, i32* %nlines, align 4
  store i64 0, i64* %residue, align 8
  store i64 0, i64* %save, align 8
  br label %for.cond

for.cond:                                         ; preds = %if.end54, %entry
  %1 = load i64, i64* %save, align 8
  %call = call i32 @fillbuf(i64 %1)
  %cmp = icmp slt i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %for.cond
  %2 = load i8*, i8** @filename, align 8
  %call1 = call i32* @__errno_location() #10
  %3 = load i32, i32* %call1, align 4
  call void @error(i8* %2, i32 %3)
  %4 = load i32, i32* %nlines, align 4
  store i32 %4, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.cond
  %5 = load i8*, i8** @bufbeg, align 8
  store i8* %5, i8** @lastnl, align 8
  %6 = load i8*, i8** @lastout, align 8
  %tobool = icmp ne i8* %6, null
  br i1 %tobool, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %7 = load i8*, i8** @bufbeg, align 8
  store i8* %7, i8** @lastout, align 8
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %if.end
  %8 = load i8*, i8** @buflim, align 8
  %9 = load i8*, i8** @bufbeg, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %8 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %9 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %10 = load i64, i64* %save, align 8
  %cmp4 = icmp eq i64 %sub.ptr.sub, %10
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end3
  br label %for.end55

if.end6:                                          ; preds = %if.end3
  %11 = load i8*, i8** @bufbeg, align 8
  %12 = load i64, i64* %save, align 8
  %add.ptr = getelementptr inbounds i8, i8* %11, i64 %12
  %13 = load i64, i64* %residue, align 8
  %idx.neg = sub i64 0, %13
  %add.ptr7 = getelementptr inbounds i8, i8* %add.ptr, i64 %idx.neg
  store i8* %add.ptr7, i8** %beg, align 8
  %14 = load i8*, i8** @buflim, align 8
  store i8* %14, i8** %lim, align 8
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc, %if.end6
  %15 = load i8*, i8** %lim, align 8
  %16 = load i8*, i8** %beg, align 8
  %cmp9 = icmp ugt i8* %15, %16
  br i1 %cmp9, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond8
  %17 = load i8*, i8** %lim, align 8
  %arrayidx = getelementptr inbounds i8, i8* %17, i64 -1
  %18 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %18 to i32
  %cmp10 = icmp ne i32 %conv, 10
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond8
  %19 = phi i1 [ false, %for.cond8 ], [ %cmp10, %land.rhs ]
  br i1 %19, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %20 = load i8*, i8** %lim, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %20, i32 -1
  store i8* %incdec.ptr, i8** %lim, align 8
  br label %for.cond8, !llvm.loop !10

for.end:                                          ; preds = %land.end
  %21 = load i8*, i8** @buflim, align 8
  %22 = load i8*, i8** %lim, align 8
  %sub.ptr.lhs.cast12 = ptrtoint i8* %21 to i64
  %sub.ptr.rhs.cast13 = ptrtoint i8* %22 to i64
  %sub.ptr.sub14 = sub i64 %sub.ptr.lhs.cast12, %sub.ptr.rhs.cast13
  store i64 %sub.ptr.sub14, i64* %residue, align 8
  %23 = load i8*, i8** %beg, align 8
  %24 = load i8*, i8** %lim, align 8
  %cmp15 = icmp ult i8* %23, %24
  br i1 %cmp15, label %if.then17, label %if.end22

if.then17:                                        ; preds = %for.end
  %25 = load i8*, i8** %beg, align 8
  %26 = load i8*, i8** %lim, align 8
  %call18 = call i32 @grepbuf(i8* %25, i8* %26)
  %27 = load i32, i32* %nlines, align 4
  %add = add nsw i32 %27, %call18
  store i32 %add, i32* %nlines, align 4
  %28 = load i32, i32* @pending, align 4
  %tobool19 = icmp ne i32 %28, 0
  br i1 %tobool19, label %if.then20, label %if.end21

if.then20:                                        ; preds = %if.then17
  %29 = load i8*, i8** %lim, align 8
  call void @prpending(i8* %29)
  br label %if.end21

if.end21:                                         ; preds = %if.then20, %if.then17
  br label %if.end22

if.end22:                                         ; preds = %if.end21, %for.end
  store i32 0, i32* %i, align 4
  %30 = load i8*, i8** %lim, align 8
  store i8* %30, i8** %beg, align 8
  br label %while.cond

while.cond:                                       ; preds = %do.end, %if.end22
  %31 = load i32, i32* %i, align 4
  %32 = load i32, i32* @out_before, align 4
  %cmp23 = icmp slt i32 %31, %32
  br i1 %cmp23, label %land.lhs.true, label %land.end30

land.lhs.true:                                    ; preds = %while.cond
  %33 = load i8*, i8** %beg, align 8
  %34 = load i8*, i8** @bufbeg, align 8
  %cmp25 = icmp ugt i8* %33, %34
  br i1 %cmp25, label %land.rhs27, label %land.end30

land.rhs27:                                       ; preds = %land.lhs.true
  %35 = load i8*, i8** %beg, align 8
  %36 = load i8*, i8** @lastout, align 8
  %cmp28 = icmp ne i8* %35, %36
  br label %land.end30

land.end30:                                       ; preds = %land.rhs27, %land.lhs.true, %while.cond
  %37 = phi i1 [ false, %land.lhs.true ], [ false, %while.cond ], [ %cmp28, %land.rhs27 ]
  br i1 %37, label %while.body, label %while.end

while.body:                                       ; preds = %land.end30
  %38 = load i32, i32* %i, align 4
  %inc = add nsw i32 %38, 1
  store i32 %inc, i32* %i, align 4
  br label %do.body

do.body:                                          ; preds = %land.end39, %while.body
  %39 = load i8*, i8** %beg, align 8
  %incdec.ptr31 = getelementptr inbounds i8, i8* %39, i32 -1
  store i8* %incdec.ptr31, i8** %beg, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %40 = load i8*, i8** %beg, align 8
  %41 = load i8*, i8** @bufbeg, align 8
  %cmp32 = icmp ugt i8* %40, %41
  br i1 %cmp32, label %land.rhs34, label %land.end39

land.rhs34:                                       ; preds = %do.cond
  %42 = load i8*, i8** %beg, align 8
  %arrayidx35 = getelementptr inbounds i8, i8* %42, i64 -1
  %43 = load i8, i8* %arrayidx35, align 1
  %conv36 = sext i8 %43 to i32
  %cmp37 = icmp ne i32 %conv36, 10
  br label %land.end39

land.end39:                                       ; preds = %land.rhs34, %do.cond
  %44 = phi i1 [ false, %do.cond ], [ %cmp37, %land.rhs34 ]
  br i1 %44, label %do.body, label %do.end, !llvm.loop !11

do.end:                                           ; preds = %land.end39
  br label %while.cond, !llvm.loop !12

while.end:                                        ; preds = %land.end30
  %45 = load i8*, i8** %beg, align 8
  %46 = load i8*, i8** @lastout, align 8
  %cmp40 = icmp ne i8* %45, %46
  br i1 %cmp40, label %if.then42, label %if.end43

if.then42:                                        ; preds = %while.end
  store i8* null, i8** @lastout, align 8
  br label %if.end43

if.end43:                                         ; preds = %if.then42, %while.end
  %47 = load i64, i64* %residue, align 8
  %48 = load i8*, i8** %lim, align 8
  %add.ptr44 = getelementptr inbounds i8, i8* %48, i64 %47
  %49 = load i8*, i8** %beg, align 8
  %sub.ptr.lhs.cast45 = ptrtoint i8* %add.ptr44 to i64
  %sub.ptr.rhs.cast46 = ptrtoint i8* %49 to i64
  %sub.ptr.sub47 = sub i64 %sub.ptr.lhs.cast45, %sub.ptr.rhs.cast46
  store i64 %sub.ptr.sub47, i64* %save, align 8
  %50 = load i8*, i8** @buflim, align 8
  %51 = load i8*, i8** @bufbeg, align 8
  %sub.ptr.lhs.cast48 = ptrtoint i8* %50 to i64
  %sub.ptr.rhs.cast49 = ptrtoint i8* %51 to i64
  %sub.ptr.sub50 = sub i64 %sub.ptr.lhs.cast48, %sub.ptr.rhs.cast49
  %52 = load i64, i64* %save, align 8
  %sub = sub i64 %sub.ptr.sub50, %52
  %53 = load i64, i64* @totalcc, align 8
  %add51 = add i64 %53, %sub
  store i64 %add51, i64* @totalcc, align 8
  %54 = load i32, i32* @out_line, align 4
  %tobool52 = icmp ne i32 %54, 0
  br i1 %tobool52, label %if.then53, label %if.end54

if.then53:                                        ; preds = %if.end43
  %55 = load i8*, i8** %beg, align 8
  call void @nlscan(i8* %55)
  br label %if.end54

if.end54:                                         ; preds = %if.then53, %if.end43
  br label %for.cond

for.end55:                                        ; preds = %if.then5
  %56 = load i64, i64* %residue, align 8
  %tobool56 = icmp ne i64 %56, 0
  br i1 %tobool56, label %if.then57, label %if.end66

if.then57:                                        ; preds = %for.end55
  %57 = load i8*, i8** @bufbeg, align 8
  %58 = load i64, i64* %save, align 8
  %add.ptr58 = getelementptr inbounds i8, i8* %57, i64 %58
  %59 = load i64, i64* %residue, align 8
  %idx.neg59 = sub i64 0, %59
  %add.ptr60 = getelementptr inbounds i8, i8* %add.ptr58, i64 %idx.neg59
  %60 = load i8*, i8** @buflim, align 8
  %call61 = call i32 @grepbuf(i8* %add.ptr60, i8* %60)
  %61 = load i32, i32* %nlines, align 4
  %add62 = add nsw i32 %61, %call61
  store i32 %add62, i32* %nlines, align 4
  %62 = load i32, i32* @pending, align 4
  %tobool63 = icmp ne i32 %62, 0
  br i1 %tobool63, label %if.then64, label %if.end65

if.then64:                                        ; preds = %if.then57
  %63 = load i8*, i8** @buflim, align 8
  call void @prpending(i8* %63)
  br label %if.end65

if.end65:                                         ; preds = %if.then64, %if.then57
  br label %if.end66

if.end66:                                         ; preds = %if.end65, %for.end55
  %64 = load i32, i32* %nlines, align 4
  store i32 %64, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end66, %if.then
  %65 = load i32, i32* %retval, align 4
  ret i32 %65
}

declare dso_local i32 @printf(i8*, ...) #5

declare dso_local i32 @close(i32) #5

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @re_set_syntax(i32 %syntax) #0 {
entry:
  %syntax.addr = alloca i32, align 4
  %ret = alloca i32, align 4
  store i32 %syntax, i32* %syntax.addr, align 4
  %0 = load i32, i32* @re_syntax_options, align 4
  store i32 %0, i32* %ret, align 4
  %1 = load i32, i32* %syntax.addr, align 4
  store i32 %1, i32* @re_syntax_options, align 4
  %2 = load i32, i32* %ret, align 4
  ret i32 %2
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @re_compile_fastmap(%struct.re_pattern_buffer* %bufp) #0 {
entry:
  %retval = alloca i32, align 4
  %bufp.addr = alloca %struct.re_pattern_buffer*, align 8
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %fail_stack = alloca %struct.fail_stack_type, align 8
  %destination = alloca i8*, align 8
  %num_regs = alloca i32, align 4
  %fastmap = alloca i8*, align 8
  %pattern = alloca i8*, align 8
  %size = alloca i64, align 8
  %p = alloca i8*, align 8
  %pend = alloca i8*, align 8
  %path_can_be_null = alloca i8, align 1
  %succeed_n_p = alloca i8, align 1
  store %struct.re_pattern_buffer* %bufp, %struct.re_pattern_buffer** %bufp.addr, align 8
  store i32 0, i32* %num_regs, align 4
  %0 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %fastmap1 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %0, i32 0, i32 4
  %1 = load i8*, i8** %fastmap1, align 8
  store i8* %1, i8** %fastmap, align 8
  %2 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %2, i32 0, i32 0
  %3 = load i8*, i8** %buffer, align 8
  store i8* %3, i8** %pattern, align 8
  %4 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %used = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %4, i32 0, i32 2
  %5 = load i64, i64* %used, align 8
  store i64 %5, i64* %size, align 8
  %6 = load i8*, i8** %pattern, align 8
  store i8* %6, i8** %p, align 8
  %7 = load i8*, i8** %pattern, align 8
  %8 = load i64, i64* %size, align 8
  %add.ptr = getelementptr inbounds i8, i8* %7, i64 %8
  store i8* %add.ptr, i8** %pend, align 8
  store i8 1, i8* %path_can_be_null, align 1
  store i8 0, i8* %succeed_n_p, align 1
  br label %do.body

do.body:                                          ; preds = %entry
  %9 = alloca i8, i64 40, align 16
  %10 = bitcast i8* %9 to i8**
  %stack = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  store i8** %10, i8*** %stack, align 8
  %stack2 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %11 = load i8**, i8*** %stack2, align 8
  %cmp = icmp eq i8** %11, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  store i32 -2, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %do.body
  %size3 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 1
  store i32 5, i32* %size3, align 8
  %avail = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  store i32 0, i32* %avail, align 4
  br label %do.end

do.end:                                           ; preds = %if.end
  %12 = load i8*, i8** %fastmap, align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 0, i64 256, i1 false)
  %13 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %fastmap_accurate = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %13, i32 0, i32 7
  %bf.load = load i8, i8* %fastmap_accurate, align 8
  %bf.clear = and i8 %bf.load, -9
  %bf.set = or i8 %bf.clear, 8
  store i8 %bf.set, i8* %fastmap_accurate, align 8
  %14 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %can_be_null = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %14, i32 0, i32 7
  %bf.load4 = load i8, i8* %can_be_null, align 8
  %bf.clear5 = and i8 %bf.load4, -2
  store i8 %bf.clear5, i8* %can_be_null, align 8
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog, %sw.bb283, %sw.bb281, %if.end280, %if.end262, %if.end185, %if.then155, %if.then147, %sw.bb132, %do.end
  %15 = load i8*, i8** %p, align 8
  %16 = load i8*, i8** %pend, align 8
  %cmp6 = icmp ne i8* %15, %16
  br i1 %cmp6, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %while.cond
  %avail7 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %17 = load i32, i32* %avail7, align 4
  %cmp8 = icmp eq i32 %17, 0
  %lnot = xor i1 %cmp8, true
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %while.cond
  %18 = phi i1 [ true, %while.cond ], [ %lnot, %lor.rhs ]
  br i1 %18, label %while.body, label %while.end

while.body:                                       ; preds = %lor.end
  %19 = load i8*, i8** %p, align 8
  %20 = load i8*, i8** %pend, align 8
  %cmp9 = icmp eq i8* %19, %20
  br i1 %cmp9, label %if.then10, label %if.end19

if.then10:                                        ; preds = %while.body
  %21 = load i8, i8* %path_can_be_null, align 1
  %conv = sext i8 %21 to i32
  %22 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %can_be_null11 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %22, i32 0, i32 7
  %bf.load12 = load i8, i8* %can_be_null11, align 8
  %bf.clear13 = and i8 %bf.load12, 1
  %bf.cast = zext i8 %bf.clear13 to i32
  %or = or i32 %bf.cast, %conv
  %23 = trunc i32 %or to i8
  %bf.load14 = load i8, i8* %can_be_null11, align 8
  %bf.value = and i8 %23, 1
  %bf.clear15 = and i8 %bf.load14, -2
  %bf.set16 = or i8 %bf.clear15, %bf.value
  store i8 %bf.set16, i8* %can_be_null11, align 8
  %bf.result.cast = zext i8 %bf.value to i32
  store i8 1, i8* %path_can_be_null, align 1
  %stack17 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %24 = load i8**, i8*** %stack17, align 8
  %avail18 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %25 = load i32, i32* %avail18, align 4
  %dec = add i32 %25, -1
  store i32 %dec, i32* %avail18, align 4
  %idxprom = zext i32 %dec to i64
  %arrayidx = getelementptr inbounds i8*, i8** %24, i64 %idxprom
  %26 = load i8*, i8** %arrayidx, align 8
  store i8* %26, i8** %p, align 8
  br label %if.end19

if.end19:                                         ; preds = %if.then10, %while.body
  %27 = load i8*, i8** %p, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %27, i32 1
  store i8* %incdec.ptr, i8** %p, align 8
  %28 = load i8, i8* %27, align 1
  %conv20 = zext i8 %28 to i32
  switch i32 %conv20, label %sw.default [
    i32 7, label %sw.bb
    i32 1, label %sw.bb25
    i32 3, label %sw.bb29
    i32 4, label %sw.bb42
    i32 23, label %sw.bb76
    i32 24, label %sw.bb93
    i32 2, label %sw.bb110
    i32 0, label %sw.bb132
    i32 8, label %sw.bb132
    i32 9, label %sw.bb132
    i32 10, label %sw.bb132
    i32 11, label %sw.bb132
    i32 27, label %sw.bb132
    i32 28, label %sw.bb132
    i32 25, label %sw.bb132
    i32 26, label %sw.bb132
    i32 19, label %sw.bb132
    i32 21, label %sw.bb133
    i32 16, label %sw.bb133
    i32 17, label %sw.bb133
    i32 12, label %sw.bb133
    i32 13, label %sw.bb133
    i32 18, label %sw.bb133
    i32 14, label %sw.bb186
    i32 15, label %sw.bb186
    i32 20, label %sw.bb263
    i32 22, label %sw.bb281
    i32 5, label %sw.bb283
    i32 6, label %sw.bb283
  ]

sw.bb:                                            ; preds = %if.end19
  %29 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %can_be_null21 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %29, i32 0, i32 7
  %bf.load22 = load i8, i8* %can_be_null21, align 8
  %bf.clear23 = and i8 %bf.load22, -2
  %bf.set24 = or i8 %bf.clear23, 1
  store i8 %bf.set24, i8* %can_be_null21, align 8
  store i32 0, i32* %retval, align 4
  br label %return

sw.bb25:                                          ; preds = %if.end19
  %30 = load i8*, i8** %fastmap, align 8
  %31 = load i8*, i8** %p, align 8
  %arrayidx26 = getelementptr inbounds i8, i8* %31, i64 1
  %32 = load i8, i8* %arrayidx26, align 1
  %idxprom27 = zext i8 %32 to i64
  %arrayidx28 = getelementptr inbounds i8, i8* %30, i64 %idxprom27
  store i8 1, i8* %arrayidx28, align 1
  br label %sw.epilog

sw.bb29:                                          ; preds = %if.end19
  %33 = load i8*, i8** %p, align 8
  %incdec.ptr30 = getelementptr inbounds i8, i8* %33, i32 1
  store i8* %incdec.ptr30, i8** %p, align 8
  %34 = load i8, i8* %33, align 1
  %conv31 = zext i8 %34 to i32
  %mul = mul nsw i32 %conv31, 8
  %sub = sub nsw i32 %mul, 1
  store i32 %sub, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %sw.bb29
  %35 = load i32, i32* %j, align 4
  %cmp32 = icmp sge i32 %35, 0
  br i1 %cmp32, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %36 = load i8*, i8** %p, align 8
  %37 = load i32, i32* %j, align 4
  %div = sdiv i32 %37, 8
  %idxprom34 = sext i32 %div to i64
  %arrayidx35 = getelementptr inbounds i8, i8* %36, i64 %idxprom34
  %38 = load i8, i8* %arrayidx35, align 1
  %conv36 = zext i8 %38 to i32
  %39 = load i32, i32* %j, align 4
  %rem = srem i32 %39, 8
  %shl = shl i32 1, %rem
  %and = and i32 %conv36, %shl
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then37, label %if.end40

if.then37:                                        ; preds = %for.body
  %40 = load i8*, i8** %fastmap, align 8
  %41 = load i32, i32* %j, align 4
  %idxprom38 = sext i32 %41 to i64
  %arrayidx39 = getelementptr inbounds i8, i8* %40, i64 %idxprom38
  store i8 1, i8* %arrayidx39, align 1
  br label %if.end40

if.end40:                                         ; preds = %if.then37, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end40
  %42 = load i32, i32* %j, align 4
  %dec41 = add nsw i32 %42, -1
  store i32 %dec41, i32* %j, align 4
  br label %for.cond, !llvm.loop !13

for.end:                                          ; preds = %for.cond
  br label %sw.epilog

sw.bb42:                                          ; preds = %if.end19
  %43 = load i8*, i8** %p, align 8
  %44 = load i8, i8* %43, align 1
  %conv43 = zext i8 %44 to i32
  %mul44 = mul nsw i32 %conv43, 8
  store i32 %mul44, i32* %j, align 4
  br label %for.cond45

for.cond45:                                       ; preds = %for.inc51, %sw.bb42
  %45 = load i32, i32* %j, align 4
  %cmp46 = icmp slt i32 %45, 256
  br i1 %cmp46, label %for.body48, label %for.end52

for.body48:                                       ; preds = %for.cond45
  %46 = load i8*, i8** %fastmap, align 8
  %47 = load i32, i32* %j, align 4
  %idxprom49 = sext i32 %47 to i64
  %arrayidx50 = getelementptr inbounds i8, i8* %46, i64 %idxprom49
  store i8 1, i8* %arrayidx50, align 1
  br label %for.inc51

for.inc51:                                        ; preds = %for.body48
  %48 = load i32, i32* %j, align 4
  %inc = add nsw i32 %48, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond45, !llvm.loop !14

for.end52:                                        ; preds = %for.cond45
  %49 = load i8*, i8** %p, align 8
  %incdec.ptr53 = getelementptr inbounds i8, i8* %49, i32 1
  store i8* %incdec.ptr53, i8** %p, align 8
  %50 = load i8, i8* %49, align 1
  %conv54 = zext i8 %50 to i32
  %mul55 = mul nsw i32 %conv54, 8
  %sub56 = sub nsw i32 %mul55, 1
  store i32 %sub56, i32* %j, align 4
  br label %for.cond57

for.cond57:                                       ; preds = %for.inc73, %for.end52
  %51 = load i32, i32* %j, align 4
  %cmp58 = icmp sge i32 %51, 0
  br i1 %cmp58, label %for.body60, label %for.end75

for.body60:                                       ; preds = %for.cond57
  %52 = load i8*, i8** %p, align 8
  %53 = load i32, i32* %j, align 4
  %div61 = sdiv i32 %53, 8
  %idxprom62 = sext i32 %div61 to i64
  %arrayidx63 = getelementptr inbounds i8, i8* %52, i64 %idxprom62
  %54 = load i8, i8* %arrayidx63, align 1
  %conv64 = zext i8 %54 to i32
  %55 = load i32, i32* %j, align 4
  %rem65 = srem i32 %55, 8
  %shl66 = shl i32 1, %rem65
  %and67 = and i32 %conv64, %shl66
  %tobool68 = icmp ne i32 %and67, 0
  br i1 %tobool68, label %if.end72, label %if.then69

if.then69:                                        ; preds = %for.body60
  %56 = load i8*, i8** %fastmap, align 8
  %57 = load i32, i32* %j, align 4
  %idxprom70 = sext i32 %57 to i64
  %arrayidx71 = getelementptr inbounds i8, i8* %56, i64 %idxprom70
  store i8 1, i8* %arrayidx71, align 1
  br label %if.end72

if.end72:                                         ; preds = %if.then69, %for.body60
  br label %for.inc73

for.inc73:                                        ; preds = %if.end72
  %58 = load i32, i32* %j, align 4
  %dec74 = add nsw i32 %58, -1
  store i32 %dec74, i32* %j, align 4
  br label %for.cond57, !llvm.loop !15

for.end75:                                        ; preds = %for.cond57
  br label %sw.epilog

sw.bb76:                                          ; preds = %if.end19
  store i32 0, i32* %j, align 4
  br label %for.cond77

for.cond77:                                       ; preds = %for.inc90, %sw.bb76
  %59 = load i32, i32* %j, align 4
  %cmp78 = icmp slt i32 %59, 256
  br i1 %cmp78, label %for.body80, label %for.end92

for.body80:                                       ; preds = %for.cond77
  %60 = load i32, i32* %j, align 4
  %idxprom81 = sext i32 %60 to i64
  %arrayidx82 = getelementptr inbounds [256 x i8], [256 x i8]* @re_syntax_table, i64 0, i64 %idxprom81
  %61 = load i8, i8* %arrayidx82, align 1
  %conv83 = sext i8 %61 to i32
  %cmp84 = icmp eq i32 %conv83, 1
  br i1 %cmp84, label %if.then86, label %if.end89

if.then86:                                        ; preds = %for.body80
  %62 = load i8*, i8** %fastmap, align 8
  %63 = load i32, i32* %j, align 4
  %idxprom87 = sext i32 %63 to i64
  %arrayidx88 = getelementptr inbounds i8, i8* %62, i64 %idxprom87
  store i8 1, i8* %arrayidx88, align 1
  br label %if.end89

if.end89:                                         ; preds = %if.then86, %for.body80
  br label %for.inc90

for.inc90:                                        ; preds = %if.end89
  %64 = load i32, i32* %j, align 4
  %inc91 = add nsw i32 %64, 1
  store i32 %inc91, i32* %j, align 4
  br label %for.cond77, !llvm.loop !16

for.end92:                                        ; preds = %for.cond77
  br label %sw.epilog

sw.bb93:                                          ; preds = %if.end19
  store i32 0, i32* %j, align 4
  br label %for.cond94

for.cond94:                                       ; preds = %for.inc107, %sw.bb93
  %65 = load i32, i32* %j, align 4
  %cmp95 = icmp slt i32 %65, 256
  br i1 %cmp95, label %for.body97, label %for.end109

for.body97:                                       ; preds = %for.cond94
  %66 = load i32, i32* %j, align 4
  %idxprom98 = sext i32 %66 to i64
  %arrayidx99 = getelementptr inbounds [256 x i8], [256 x i8]* @re_syntax_table, i64 0, i64 %idxprom98
  %67 = load i8, i8* %arrayidx99, align 1
  %conv100 = sext i8 %67 to i32
  %cmp101 = icmp ne i32 %conv100, 1
  br i1 %cmp101, label %if.then103, label %if.end106

if.then103:                                       ; preds = %for.body97
  %68 = load i8*, i8** %fastmap, align 8
  %69 = load i32, i32* %j, align 4
  %idxprom104 = sext i32 %69 to i64
  %arrayidx105 = getelementptr inbounds i8, i8* %68, i64 %idxprom104
  store i8 1, i8* %arrayidx105, align 1
  br label %if.end106

if.end106:                                        ; preds = %if.then103, %for.body97
  br label %for.inc107

for.inc107:                                       ; preds = %if.end106
  %70 = load i32, i32* %j, align 4
  %inc108 = add nsw i32 %70, 1
  store i32 %inc108, i32* %j, align 4
  br label %for.cond94, !llvm.loop !17

for.end109:                                       ; preds = %for.cond94
  br label %sw.epilog

sw.bb110:                                         ; preds = %if.end19
  store i32 0, i32* %j, align 4
  br label %for.cond111

for.cond111:                                      ; preds = %for.inc117, %sw.bb110
  %71 = load i32, i32* %j, align 4
  %cmp112 = icmp slt i32 %71, 256
  br i1 %cmp112, label %for.body114, label %for.end119

for.body114:                                      ; preds = %for.cond111
  %72 = load i8*, i8** %fastmap, align 8
  %73 = load i32, i32* %j, align 4
  %idxprom115 = sext i32 %73 to i64
  %arrayidx116 = getelementptr inbounds i8, i8* %72, i64 %idxprom115
  store i8 1, i8* %arrayidx116, align 1
  br label %for.inc117

for.inc117:                                       ; preds = %for.body114
  %74 = load i32, i32* %j, align 4
  %inc118 = add nsw i32 %74, 1
  store i32 %inc118, i32* %j, align 4
  br label %for.cond111, !llvm.loop !18

for.end119:                                       ; preds = %for.cond111
  %75 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %syntax = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %75, i32 0, i32 3
  %76 = load i32, i32* %syntax, align 8
  %and120 = and i32 %76, 64
  %tobool121 = icmp ne i32 %and120, 0
  br i1 %tobool121, label %if.else, label %if.then122

if.then122:                                       ; preds = %for.end119
  %77 = load i8*, i8** %fastmap, align 8
  %arrayidx123 = getelementptr inbounds i8, i8* %77, i64 10
  store i8 0, i8* %arrayidx123, align 1
  br label %if.end131

if.else:                                          ; preds = %for.end119
  %78 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %can_be_null124 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %78, i32 0, i32 7
  %bf.load125 = load i8, i8* %can_be_null124, align 8
  %bf.clear126 = and i8 %bf.load125, 1
  %bf.cast127 = zext i8 %bf.clear126 to i32
  %tobool128 = icmp ne i32 %bf.cast127, 0
  br i1 %tobool128, label %if.then129, label %if.end130

if.then129:                                       ; preds = %if.else
  store i32 0, i32* %retval, align 4
  br label %return

if.end130:                                        ; preds = %if.else
  br label %if.end131

if.end131:                                        ; preds = %if.end130, %if.then122
  br label %sw.epilog

sw.bb132:                                         ; preds = %if.end19, %if.end19, %if.end19, %if.end19, %if.end19, %if.end19, %if.end19, %if.end19, %if.end19, %if.end19
  br label %while.cond, !llvm.loop !19

sw.bb133:                                         ; preds = %if.end19, %if.end19, %if.end19, %if.end19, %if.end19, %if.end19
  br label %do.body134

do.body134:                                       ; preds = %sw.bb133
  br label %do.body135

do.body135:                                       ; preds = %do.body134
  %79 = load i8*, i8** %p, align 8
  %80 = load i8, i8* %79, align 1
  %conv136 = zext i8 %80 to i32
  %and137 = and i32 %conv136, 255
  store i32 %and137, i32* %j, align 4
  %81 = load i8*, i8** %p, align 8
  %add.ptr138 = getelementptr inbounds i8, i8* %81, i64 1
  %82 = load i8, i8* %add.ptr138, align 1
  %conv139 = sext i8 %82 to i32
  %shl140 = shl i32 %conv139, 8
  %83 = load i32, i32* %j, align 4
  %add = add nsw i32 %83, %shl140
  store i32 %add, i32* %j, align 4
  br label %do.end141

do.end141:                                        ; preds = %do.body135
  %84 = load i8*, i8** %p, align 8
  %add.ptr142 = getelementptr inbounds i8, i8* %84, i64 2
  store i8* %add.ptr142, i8** %p, align 8
  br label %do.end143

do.end143:                                        ; preds = %do.end141
  %85 = load i32, i32* %j, align 4
  %86 = load i8*, i8** %p, align 8
  %idx.ext = sext i32 %85 to i64
  %add.ptr144 = getelementptr inbounds i8, i8* %86, i64 %idx.ext
  store i8* %add.ptr144, i8** %p, align 8
  %87 = load i32, i32* %j, align 4
  %cmp145 = icmp sgt i32 %87, 0
  br i1 %cmp145, label %if.then147, label %if.end148

if.then147:                                       ; preds = %do.end143
  br label %while.cond, !llvm.loop !19

if.end148:                                        ; preds = %do.end143
  %88 = load i8*, i8** %p, align 8
  %89 = load i8, i8* %88, align 1
  %conv149 = zext i8 %89 to i32
  %cmp150 = icmp ne i32 %conv149, 14
  br i1 %cmp150, label %land.lhs.true, label %if.end156

land.lhs.true:                                    ; preds = %if.end148
  %90 = load i8*, i8** %p, align 8
  %91 = load i8, i8* %90, align 1
  %conv152 = zext i8 %91 to i32
  %cmp153 = icmp ne i32 %conv152, 20
  br i1 %cmp153, label %if.then155, label %if.end156

if.then155:                                       ; preds = %land.lhs.true
  br label %while.cond, !llvm.loop !19

if.end156:                                        ; preds = %land.lhs.true, %if.end148
  %92 = load i8*, i8** %p, align 8
  %incdec.ptr157 = getelementptr inbounds i8, i8* %92, i32 1
  store i8* %incdec.ptr157, i8** %p, align 8
  br label %do.body158

do.body158:                                       ; preds = %if.end156
  br label %do.body159

do.body159:                                       ; preds = %do.body158
  %93 = load i8*, i8** %p, align 8
  %94 = load i8, i8* %93, align 1
  %conv160 = zext i8 %94 to i32
  %and161 = and i32 %conv160, 255
  store i32 %and161, i32* %j, align 4
  %95 = load i8*, i8** %p, align 8
  %add.ptr162 = getelementptr inbounds i8, i8* %95, i64 1
  %96 = load i8, i8* %add.ptr162, align 1
  %conv163 = sext i8 %96 to i32
  %shl164 = shl i32 %conv163, 8
  %97 = load i32, i32* %j, align 4
  %add165 = add nsw i32 %97, %shl164
  store i32 %add165, i32* %j, align 4
  br label %do.end166

do.end166:                                        ; preds = %do.body159
  %98 = load i8*, i8** %p, align 8
  %add.ptr167 = getelementptr inbounds i8, i8* %98, i64 2
  store i8* %add.ptr167, i8** %p, align 8
  br label %do.end168

do.end168:                                        ; preds = %do.end166
  %99 = load i32, i32* %j, align 4
  %100 = load i8*, i8** %p, align 8
  %idx.ext169 = sext i32 %99 to i64
  %add.ptr170 = getelementptr inbounds i8, i8* %100, i64 %idx.ext169
  store i8* %add.ptr170, i8** %p, align 8
  %avail171 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %101 = load i32, i32* %avail171, align 4
  %cmp172 = icmp eq i32 %101, 0
  br i1 %cmp172, label %if.end185, label %land.lhs.true174

land.lhs.true174:                                 ; preds = %do.end168
  %stack175 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %102 = load i8**, i8*** %stack175, align 8
  %avail176 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %103 = load i32, i32* %avail176, align 4
  %sub177 = sub i32 %103, 1
  %idxprom178 = zext i32 %sub177 to i64
  %arrayidx179 = getelementptr inbounds i8*, i8** %102, i64 %idxprom178
  %104 = load i8*, i8** %arrayidx179, align 8
  %105 = load i8*, i8** %p, align 8
  %cmp180 = icmp eq i8* %104, %105
  br i1 %cmp180, label %if.then182, label %if.end185

if.then182:                                       ; preds = %land.lhs.true174
  %avail183 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %106 = load i32, i32* %avail183, align 4
  %dec184 = add i32 %106, -1
  store i32 %dec184, i32* %avail183, align 4
  br label %if.end185

if.end185:                                        ; preds = %if.then182, %land.lhs.true174, %do.end168
  br label %while.cond, !llvm.loop !19

sw.bb186:                                         ; preds = %if.end19, %if.end19
  br label %handle_on_failure_jump

handle_on_failure_jump:                           ; preds = %if.then278, %sw.bb186
  br label %do.body187

do.body187:                                       ; preds = %handle_on_failure_jump
  br label %do.body188

do.body188:                                       ; preds = %do.body187
  %107 = load i8*, i8** %p, align 8
  %108 = load i8, i8* %107, align 1
  %conv189 = zext i8 %108 to i32
  %and190 = and i32 %conv189, 255
  store i32 %and190, i32* %j, align 4
  %109 = load i8*, i8** %p, align 8
  %add.ptr191 = getelementptr inbounds i8, i8* %109, i64 1
  %110 = load i8, i8* %add.ptr191, align 1
  %conv192 = sext i8 %110 to i32
  %shl193 = shl i32 %conv192, 8
  %111 = load i32, i32* %j, align 4
  %add194 = add nsw i32 %111, %shl193
  store i32 %add194, i32* %j, align 4
  br label %do.end195

do.end195:                                        ; preds = %do.body188
  %112 = load i8*, i8** %p, align 8
  %add.ptr196 = getelementptr inbounds i8, i8* %112, i64 2
  store i8* %add.ptr196, i8** %p, align 8
  br label %do.end197

do.end197:                                        ; preds = %do.end195
  %113 = load i8*, i8** %p, align 8
  %114 = load i32, i32* %j, align 4
  %idx.ext198 = sext i32 %114 to i64
  %add.ptr199 = getelementptr inbounds i8, i8* %113, i64 %idx.ext198
  %115 = load i8*, i8** %pend, align 8
  %cmp200 = icmp ult i8* %add.ptr199, %115
  br i1 %cmp200, label %if.then202, label %if.else243

if.then202:                                       ; preds = %do.end197
  %avail203 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %116 = load i32, i32* %avail203, align 4
  %size204 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 1
  %117 = load i32, i32* %size204, align 8
  %cmp205 = icmp eq i32 %116, %117
  br i1 %cmp205, label %land.lhs.true207, label %cond.false233

land.lhs.true207:                                 ; preds = %if.then202
  %size208 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 1
  %118 = load i32, i32* %size208, align 8
  %119 = load i32, i32* @re_max_failures, align 4
  %120 = load i32, i32* %num_regs, align 4
  %sub209 = sub i32 %120, 1
  %mul210 = mul i32 %sub209, 3
  %add211 = add i32 %mul210, 4
  %mul212 = mul i32 %119, %add211
  %cmp213 = icmp ugt i32 %118, %mul212
  br i1 %cmp213, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true207
  br i1 false, label %cond.false233, label %cond.true232

cond.false:                                       ; preds = %land.lhs.true207
  %size215 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 1
  %121 = load i32, i32* %size215, align 8
  %shl216 = shl i32 %121, 1
  %conv217 = zext i32 %shl216 to i64
  %mul218 = mul i64 %conv217, 8
  %122 = alloca i8, i64 %mul218, align 16
  store i8* %122, i8** %destination, align 8
  %123 = load i8*, i8** %destination, align 8
  %stack219 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %124 = load i8**, i8*** %stack219, align 8
  %125 = bitcast i8** %124 to i8*
  %size220 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 1
  %126 = load i32, i32* %size220, align 8
  %conv221 = zext i32 %126 to i64
  %mul222 = mul i64 %conv221, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %123, i8* align 8 %125, i64 %mul222, i1 false)
  %127 = load i8*, i8** %destination, align 8
  %128 = bitcast i8* %127 to i8**
  %stack223 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  store i8** %128, i8*** %stack223, align 8
  %stack224 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %129 = load i8**, i8*** %stack224, align 8
  %cmp225 = icmp eq i8** %129, null
  br i1 %cmp225, label %cond.true227, label %cond.false228

cond.true227:                                     ; preds = %cond.false
  br label %cond.end

cond.false228:                                    ; preds = %cond.false
  %size229 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 1
  %130 = load i32, i32* %size229, align 8
  %shl230 = shl i32 %130, 1
  store i32 %shl230, i32* %size229, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false228, %cond.true227
  %cond = phi i32 [ 0, %cond.true227 ], [ 1, %cond.false228 ]
  %tobool231 = icmp ne i32 %cond, 0
  br i1 %tobool231, label %cond.false233, label %cond.true232

cond.true232:                                     ; preds = %cond.end, %cond.true
  br i1 false, label %if.end242, label %if.then241

cond.false233:                                    ; preds = %cond.end, %cond.true, %if.then202
  %131 = load i8*, i8** %p, align 8
  %132 = load i32, i32* %j, align 4
  %idx.ext234 = sext i32 %132 to i64
  %add.ptr235 = getelementptr inbounds i8, i8* %131, i64 %idx.ext234
  %stack236 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %133 = load i8**, i8*** %stack236, align 8
  %avail237 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %134 = load i32, i32* %avail237, align 4
  %inc238 = add i32 %134, 1
  store i32 %inc238, i32* %avail237, align 4
  %idxprom239 = zext i32 %134 to i64
  %arrayidx240 = getelementptr inbounds i8*, i8** %133, i64 %idxprom239
  store i8* %add.ptr235, i8** %arrayidx240, align 8
  br i1 true, label %if.end242, label %if.then241

if.then241:                                       ; preds = %cond.false233, %cond.true232
  store i32 -2, i32* %retval, align 4
  br label %return

if.end242:                                        ; preds = %cond.false233, %cond.true232
  br label %if.end248

if.else243:                                       ; preds = %do.end197
  %135 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %can_be_null244 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %135, i32 0, i32 7
  %bf.load245 = load i8, i8* %can_be_null244, align 8
  %bf.clear246 = and i8 %bf.load245, -2
  %bf.set247 = or i8 %bf.clear246, 1
  store i8 %bf.set247, i8* %can_be_null244, align 8
  br label %if.end248

if.end248:                                        ; preds = %if.else243, %if.end242
  %136 = load i8, i8* %succeed_n_p, align 1
  %tobool249 = icmp ne i8 %136, 0
  br i1 %tobool249, label %if.then250, label %if.end262

if.then250:                                       ; preds = %if.end248
  br label %do.body251

do.body251:                                       ; preds = %if.then250
  br label %do.body252

do.body252:                                       ; preds = %do.body251
  %137 = load i8*, i8** %p, align 8
  %138 = load i8, i8* %137, align 1
  %conv253 = zext i8 %138 to i32
  %and254 = and i32 %conv253, 255
  store i32 %and254, i32* %k, align 4
  %139 = load i8*, i8** %p, align 8
  %add.ptr255 = getelementptr inbounds i8, i8* %139, i64 1
  %140 = load i8, i8* %add.ptr255, align 1
  %conv256 = sext i8 %140 to i32
  %shl257 = shl i32 %conv256, 8
  %141 = load i32, i32* %k, align 4
  %add258 = add nsw i32 %141, %shl257
  store i32 %add258, i32* %k, align 4
  br label %do.end259

do.end259:                                        ; preds = %do.body252
  %142 = load i8*, i8** %p, align 8
  %add.ptr260 = getelementptr inbounds i8, i8* %142, i64 2
  store i8* %add.ptr260, i8** %p, align 8
  br label %do.end261

do.end261:                                        ; preds = %do.end259
  store i8 0, i8* %succeed_n_p, align 1
  br label %if.end262

if.end262:                                        ; preds = %do.end261, %if.end248
  br label %while.cond, !llvm.loop !19

sw.bb263:                                         ; preds = %if.end19
  %143 = load i8*, i8** %p, align 8
  %add.ptr264 = getelementptr inbounds i8, i8* %143, i64 2
  store i8* %add.ptr264, i8** %p, align 8
  br label %do.body265

do.body265:                                       ; preds = %sw.bb263
  br label %do.body266

do.body266:                                       ; preds = %do.body265
  %144 = load i8*, i8** %p, align 8
  %145 = load i8, i8* %144, align 1
  %conv267 = zext i8 %145 to i32
  %and268 = and i32 %conv267, 255
  store i32 %and268, i32* %k, align 4
  %146 = load i8*, i8** %p, align 8
  %add.ptr269 = getelementptr inbounds i8, i8* %146, i64 1
  %147 = load i8, i8* %add.ptr269, align 1
  %conv270 = sext i8 %147 to i32
  %shl271 = shl i32 %conv270, 8
  %148 = load i32, i32* %k, align 4
  %add272 = add nsw i32 %148, %shl271
  store i32 %add272, i32* %k, align 4
  br label %do.end273

do.end273:                                        ; preds = %do.body266
  %149 = load i8*, i8** %p, align 8
  %add.ptr274 = getelementptr inbounds i8, i8* %149, i64 2
  store i8* %add.ptr274, i8** %p, align 8
  br label %do.end275

do.end275:                                        ; preds = %do.end273
  %150 = load i32, i32* %k, align 4
  %cmp276 = icmp eq i32 %150, 0
  br i1 %cmp276, label %if.then278, label %if.end280

if.then278:                                       ; preds = %do.end275
  %151 = load i8*, i8** %p, align 8
  %add.ptr279 = getelementptr inbounds i8, i8* %151, i64 -4
  store i8* %add.ptr279, i8** %p, align 8
  store i8 1, i8* %succeed_n_p, align 1
  br label %handle_on_failure_jump

if.end280:                                        ; preds = %do.end275
  br label %while.cond, !llvm.loop !19

sw.bb281:                                         ; preds = %if.end19
  %152 = load i8*, i8** %p, align 8
  %add.ptr282 = getelementptr inbounds i8, i8* %152, i64 4
  store i8* %add.ptr282, i8** %p, align 8
  br label %while.cond, !llvm.loop !19

sw.bb283:                                         ; preds = %if.end19, %if.end19
  %153 = load i8*, i8** %p, align 8
  %add.ptr284 = getelementptr inbounds i8, i8* %153, i64 2
  store i8* %add.ptr284, i8** %p, align 8
  br label %while.cond, !llvm.loop !19

sw.default:                                       ; preds = %if.end19
  call void @abort() #8
  unreachable

sw.epilog:                                        ; preds = %if.end131, %for.end109, %for.end92, %for.end75, %for.end, %sw.bb25
  store i8 0, i8* %path_can_be_null, align 1
  %154 = load i8*, i8** %pend, align 8
  store i8* %154, i8** %p, align 8
  br label %while.cond, !llvm.loop !19

while.end:                                        ; preds = %lor.end
  %155 = load i8, i8* %path_can_be_null, align 1
  %conv285 = sext i8 %155 to i32
  %156 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %can_be_null286 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %156, i32 0, i32 7
  %bf.load287 = load i8, i8* %can_be_null286, align 8
  %bf.clear288 = and i8 %bf.load287, 1
  %bf.cast289 = zext i8 %bf.clear288 to i32
  %or290 = or i32 %bf.cast289, %conv285
  %157 = trunc i32 %or290 to i8
  %bf.load291 = load i8, i8* %can_be_null286, align 8
  %bf.value292 = and i8 %157, 1
  %bf.clear293 = and i8 %bf.load291, -2
  %bf.set294 = or i8 %bf.clear293, %bf.value292
  store i8 %bf.set294, i8* %can_be_null286, align 8
  %bf.result.cast295 = zext i8 %bf.value292 to i32
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then241, %if.then129, %sw.bb, %if.then
  %158 = load i32, i32* %retval, align 4
  ret i32 %158
}

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #6

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #7

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @re_set_registers(%struct.re_pattern_buffer* %bufp, %struct.re_registers* %regs, i32 %num_regs, i32* %starts, i32* %ends) #0 {
entry:
  %bufp.addr = alloca %struct.re_pattern_buffer*, align 8
  %regs.addr = alloca %struct.re_registers*, align 8
  %num_regs.addr = alloca i32, align 4
  %starts.addr = alloca i32*, align 8
  %ends.addr = alloca i32*, align 8
  store %struct.re_pattern_buffer* %bufp, %struct.re_pattern_buffer** %bufp.addr, align 8
  store %struct.re_registers* %regs, %struct.re_registers** %regs.addr, align 8
  store i32 %num_regs, i32* %num_regs.addr, align 4
  store i32* %starts, i32** %starts.addr, align 8
  store i32* %ends, i32** %ends.addr, align 8
  %0 = load i32, i32* %num_regs.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %regs_allocated = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1, i32 0, i32 7
  %bf.load = load i8, i8* %regs_allocated, align 8
  %bf.clear = and i8 %bf.load, -7
  %bf.set = or i8 %bf.clear, 2
  store i8 %bf.set, i8* %regs_allocated, align 8
  %2 = load i32, i32* %num_regs.addr, align 4
  %3 = load %struct.re_registers*, %struct.re_registers** %regs.addr, align 8
  %num_regs1 = getelementptr inbounds %struct.re_registers, %struct.re_registers* %3, i32 0, i32 0
  store i32 %2, i32* %num_regs1, align 8
  %4 = load i32*, i32** %starts.addr, align 8
  %5 = load %struct.re_registers*, %struct.re_registers** %regs.addr, align 8
  %start = getelementptr inbounds %struct.re_registers, %struct.re_registers* %5, i32 0, i32 1
  store i32* %4, i32** %start, align 8
  %6 = load i32*, i32** %ends.addr, align 8
  %7 = load %struct.re_registers*, %struct.re_registers** %regs.addr, align 8
  %end = getelementptr inbounds %struct.re_registers, %struct.re_registers* %7, i32 0, i32 2
  store i32* %6, i32** %end, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  %8 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %regs_allocated2 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %8, i32 0, i32 7
  %bf.load3 = load i8, i8* %regs_allocated2, align 8
  %bf.clear4 = and i8 %bf.load3, -7
  store i8 %bf.clear4, i8* %regs_allocated2, align 8
  %9 = load %struct.re_registers*, %struct.re_registers** %regs.addr, align 8
  %num_regs5 = getelementptr inbounds %struct.re_registers, %struct.re_registers* %9, i32 0, i32 0
  store i32 0, i32* %num_regs5, align 8
  %10 = load %struct.re_registers*, %struct.re_registers** %regs.addr, align 8
  %end6 = getelementptr inbounds %struct.re_registers, %struct.re_registers* %10, i32 0, i32 2
  store i32* null, i32** %end6, align 8
  %11 = load %struct.re_registers*, %struct.re_registers** %regs.addr, align 8
  %start7 = getelementptr inbounds %struct.re_registers, %struct.re_registers* %11, i32 0, i32 1
  store i32* null, i32** %start7, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @re_search(%struct.re_pattern_buffer* %bufp, i8* %string, i32 %size, i32 %startpos, i32 %range, %struct.re_registers* %regs) #0 {
entry:
  %bufp.addr = alloca %struct.re_pattern_buffer*, align 8
  %string.addr = alloca i8*, align 8
  %size.addr = alloca i32, align 4
  %startpos.addr = alloca i32, align 4
  %range.addr = alloca i32, align 4
  %regs.addr = alloca %struct.re_registers*, align 8
  store %struct.re_pattern_buffer* %bufp, %struct.re_pattern_buffer** %bufp.addr, align 8
  store i8* %string, i8** %string.addr, align 8
  store i32 %size, i32* %size.addr, align 4
  store i32 %startpos, i32* %startpos.addr, align 4
  store i32 %range, i32* %range.addr, align 4
  store %struct.re_registers* %regs, %struct.re_registers** %regs.addr, align 8
  %0 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %1 = load i8*, i8** %string.addr, align 8
  %2 = load i32, i32* %size.addr, align 4
  %3 = load i32, i32* %startpos.addr, align 4
  %4 = load i32, i32* %range.addr, align 4
  %5 = load %struct.re_registers*, %struct.re_registers** %regs.addr, align 8
  %6 = load i32, i32* %size.addr, align 4
  %call = call i32 @re_search_2(%struct.re_pattern_buffer* %0, i8* null, i32 0, i8* %1, i32 %2, i32 %3, i32 %4, %struct.re_registers* %5, i32 %6)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @re_search_2(%struct.re_pattern_buffer* %bufp, i8* %string1, i32 %size1, i8* %string2, i32 %size2, i32 %startpos, i32 %range, %struct.re_registers* %regs, i32 %stop) #0 {
entry:
  %retval = alloca i32, align 4
  %bufp.addr = alloca %struct.re_pattern_buffer*, align 8
  %string1.addr = alloca i8*, align 8
  %size1.addr = alloca i32, align 4
  %string2.addr = alloca i8*, align 8
  %size2.addr = alloca i32, align 4
  %startpos.addr = alloca i32, align 4
  %range.addr = alloca i32, align 4
  %regs.addr = alloca %struct.re_registers*, align 8
  %stop.addr = alloca i32, align 4
  %val = alloca i32, align 4
  %fastmap = alloca i8*, align 8
  %translate = alloca i8*, align 8
  %total_size = alloca i32, align 4
  %endpos = alloca i32, align 4
  %d = alloca i8*, align 8
  %lim = alloca i32, align 4
  %irange = alloca i32, align 4
  %c = alloca i8, align 1
  store %struct.re_pattern_buffer* %bufp, %struct.re_pattern_buffer** %bufp.addr, align 8
  store i8* %string1, i8** %string1.addr, align 8
  store i32 %size1, i32* %size1.addr, align 4
  store i8* %string2, i8** %string2.addr, align 8
  store i32 %size2, i32* %size2.addr, align 4
  store i32 %startpos, i32* %startpos.addr, align 4
  store i32 %range, i32* %range.addr, align 4
  store %struct.re_registers* %regs, %struct.re_registers** %regs.addr, align 8
  store i32 %stop, i32* %stop.addr, align 4
  %0 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %fastmap1 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %0, i32 0, i32 4
  %1 = load i8*, i8** %fastmap1, align 8
  store i8* %1, i8** %fastmap, align 8
  %2 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %translate2 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %2, i32 0, i32 5
  %3 = load i8*, i8** %translate2, align 8
  store i8* %3, i8** %translate, align 8
  %4 = load i32, i32* %size1.addr, align 4
  %5 = load i32, i32* %size2.addr, align 4
  %add = add nsw i32 %4, %5
  store i32 %add, i32* %total_size, align 4
  %6 = load i32, i32* %startpos.addr, align 4
  %7 = load i32, i32* %range.addr, align 4
  %add3 = add nsw i32 %6, %7
  store i32 %add3, i32* %endpos, align 4
  %8 = load i32, i32* %startpos.addr, align 4
  %cmp = icmp slt i32 %8, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %9 = load i32, i32* %startpos.addr, align 4
  %10 = load i32, i32* %total_size, align 4
  %cmp4 = icmp sgt i32 %9, %10
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %11 = load i32, i32* %endpos, align 4
  %cmp5 = icmp slt i32 %11, -1
  br i1 %cmp5, label %if.then6, label %if.else

if.then6:                                         ; preds = %if.end
  %12 = load i32, i32* %startpos.addr, align 4
  %sub = sub nsw i32 -1, %12
  store i32 %sub, i32* %range.addr, align 4
  br label %if.end11

if.else:                                          ; preds = %if.end
  %13 = load i32, i32* %endpos, align 4
  %14 = load i32, i32* %total_size, align 4
  %cmp7 = icmp sgt i32 %13, %14
  br i1 %cmp7, label %if.then8, label %if.end10

if.then8:                                         ; preds = %if.else
  %15 = load i32, i32* %total_size, align 4
  %16 = load i32, i32* %startpos.addr, align 4
  %sub9 = sub nsw i32 %15, %16
  store i32 %sub9, i32* %range.addr, align 4
  br label %if.end10

if.end10:                                         ; preds = %if.then8, %if.else
  br label %if.end11

if.end11:                                         ; preds = %if.end10, %if.then6
  %17 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %used = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %17, i32 0, i32 2
  %18 = load i64, i64* %used, align 8
  %cmp12 = icmp ugt i64 %18, 0
  br i1 %cmp12, label %land.lhs.true, label %if.end24

land.lhs.true:                                    ; preds = %if.end11
  %19 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %19, i32 0, i32 0
  %20 = load i8*, i8** %buffer, align 8
  %arrayidx = getelementptr inbounds i8, i8* %20, i64 0
  %21 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %21 to i32
  %cmp13 = icmp eq i32 %conv, 10
  br i1 %cmp13, label %land.lhs.true15, label %if.end24

land.lhs.true15:                                  ; preds = %land.lhs.true
  %22 = load i32, i32* %range.addr, align 4
  %cmp16 = icmp sgt i32 %22, 0
  br i1 %cmp16, label %if.then18, label %if.end24

if.then18:                                        ; preds = %land.lhs.true15
  %23 = load i32, i32* %startpos.addr, align 4
  %cmp19 = icmp sgt i32 %23, 0
  br i1 %cmp19, label %if.then21, label %if.else22

if.then21:                                        ; preds = %if.then18
  store i32 -1, i32* %retval, align 4
  br label %return

if.else22:                                        ; preds = %if.then18
  store i32 1, i32* %range.addr, align 4
  br label %if.end23

if.end23:                                         ; preds = %if.else22
  br label %if.end24

if.end24:                                         ; preds = %if.end23, %land.lhs.true15, %land.lhs.true, %if.end11
  %24 = load i8*, i8** %fastmap, align 8
  %tobool = icmp ne i8* %24, null
  br i1 %tobool, label %land.lhs.true25, label %if.end32

land.lhs.true25:                                  ; preds = %if.end24
  %25 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %fastmap_accurate = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %25, i32 0, i32 7
  %bf.load = load i8, i8* %fastmap_accurate, align 8
  %bf.lshr = lshr i8 %bf.load, 3
  %bf.clear = and i8 %bf.lshr, 1
  %bf.cast = zext i8 %bf.clear to i32
  %tobool26 = icmp ne i32 %bf.cast, 0
  br i1 %tobool26, label %if.end32, label %if.then27

if.then27:                                        ; preds = %land.lhs.true25
  %26 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %call = call i32 @re_compile_fastmap(%struct.re_pattern_buffer* %26)
  %cmp28 = icmp eq i32 %call, -2
  br i1 %cmp28, label %if.then30, label %if.end31

if.then30:                                        ; preds = %if.then27
  store i32 -2, i32* %retval, align 4
  br label %return

if.end31:                                         ; preds = %if.then27
  br label %if.end32

if.end32:                                         ; preds = %if.end31, %land.lhs.true25, %if.end24
  br label %for.cond

for.cond:                                         ; preds = %if.end155, %if.end32
  %27 = load i8*, i8** %fastmap, align 8
  %tobool33 = icmp ne i8* %27, null
  br i1 %tobool33, label %land.lhs.true34, label %if.end119

land.lhs.true34:                                  ; preds = %for.cond
  %28 = load i32, i32* %startpos.addr, align 4
  %29 = load i32, i32* %total_size, align 4
  %cmp35 = icmp slt i32 %28, %29
  br i1 %cmp35, label %land.lhs.true37, label %if.end119

land.lhs.true37:                                  ; preds = %land.lhs.true34
  %30 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %can_be_null = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %30, i32 0, i32 7
  %bf.load38 = load i8, i8* %can_be_null, align 8
  %bf.clear39 = and i8 %bf.load38, 1
  %bf.cast40 = zext i8 %bf.clear39 to i32
  %tobool41 = icmp ne i32 %bf.cast40, 0
  br i1 %tobool41, label %if.end119, label %if.then42

if.then42:                                        ; preds = %land.lhs.true37
  %31 = load i32, i32* %range.addr, align 4
  %cmp43 = icmp sgt i32 %31, 0
  br i1 %cmp43, label %if.then45, label %if.else85

if.then45:                                        ; preds = %if.then42
  store i32 0, i32* %lim, align 4
  %32 = load i32, i32* %range.addr, align 4
  store i32 %32, i32* %irange, align 4
  %33 = load i32, i32* %startpos.addr, align 4
  %34 = load i32, i32* %size1.addr, align 4
  %cmp46 = icmp slt i32 %33, %34
  br i1 %cmp46, label %land.lhs.true48, label %if.end55

land.lhs.true48:                                  ; preds = %if.then45
  %35 = load i32, i32* %startpos.addr, align 4
  %36 = load i32, i32* %range.addr, align 4
  %add49 = add nsw i32 %35, %36
  %37 = load i32, i32* %size1.addr, align 4
  %cmp50 = icmp sge i32 %add49, %37
  br i1 %cmp50, label %if.then52, label %if.end55

if.then52:                                        ; preds = %land.lhs.true48
  %38 = load i32, i32* %range.addr, align 4
  %39 = load i32, i32* %size1.addr, align 4
  %40 = load i32, i32* %startpos.addr, align 4
  %sub53 = sub nsw i32 %39, %40
  %sub54 = sub nsw i32 %38, %sub53
  store i32 %sub54, i32* %lim, align 4
  br label %if.end55

if.end55:                                         ; preds = %if.then52, %land.lhs.true48, %if.then45
  %41 = load i32, i32* %startpos.addr, align 4
  %42 = load i32, i32* %size1.addr, align 4
  %cmp56 = icmp sge i32 %41, %42
  br i1 %cmp56, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end55
  %43 = load i8*, i8** %string2.addr, align 8
  %44 = load i32, i32* %size1.addr, align 4
  %idx.ext = sext i32 %44 to i64
  %idx.neg = sub i64 0, %idx.ext
  %add.ptr = getelementptr inbounds i8, i8* %43, i64 %idx.neg
  br label %cond.end

cond.false:                                       ; preds = %if.end55
  %45 = load i8*, i8** %string1.addr, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %add.ptr, %cond.true ], [ %45, %cond.false ]
  %46 = load i32, i32* %startpos.addr, align 4
  %idx.ext58 = sext i32 %46 to i64
  %add.ptr59 = getelementptr inbounds i8, i8* %cond, i64 %idx.ext58
  store i8* %add.ptr59, i8** %d, align 8
  %47 = load i8*, i8** %translate, align 8
  %tobool60 = icmp ne i8* %47, null
  br i1 %tobool60, label %if.then61, label %if.else68

if.then61:                                        ; preds = %cond.end
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then61
  %48 = load i32, i32* %range.addr, align 4
  %49 = load i32, i32* %lim, align 4
  %cmp62 = icmp sgt i32 %48, %49
  br i1 %cmp62, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %50 = load i8*, i8** %fastmap, align 8
  %51 = load i8*, i8** %translate, align 8
  %52 = load i8*, i8** %d, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %52, i32 1
  store i8* %incdec.ptr, i8** %d, align 8
  %53 = load i8, i8* %52, align 1
  %idxprom = zext i8 %53 to i64
  %arrayidx64 = getelementptr inbounds i8, i8* %51, i64 %idxprom
  %54 = load i8, i8* %arrayidx64, align 1
  %idxprom65 = zext i8 %54 to i64
  %arrayidx66 = getelementptr inbounds i8, i8* %50, i64 %idxprom65
  %55 = load i8, i8* %arrayidx66, align 1
  %tobool67 = icmp ne i8 %55, 0
  %lnot = xor i1 %tobool67, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %56 = phi i1 [ false, %while.cond ], [ %lnot, %land.rhs ]
  br i1 %56, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %57 = load i32, i32* %range.addr, align 4
  %dec = add nsw i32 %57, -1
  store i32 %dec, i32* %range.addr, align 4
  br label %while.cond, !llvm.loop !20

while.end:                                        ; preds = %land.end
  br label %if.end82

if.else68:                                        ; preds = %cond.end
  br label %while.cond69

while.cond69:                                     ; preds = %while.body79, %if.else68
  %58 = load i32, i32* %range.addr, align 4
  %59 = load i32, i32* %lim, align 4
  %cmp70 = icmp sgt i32 %58, %59
  br i1 %cmp70, label %land.rhs72, label %land.end78

land.rhs72:                                       ; preds = %while.cond69
  %60 = load i8*, i8** %fastmap, align 8
  %61 = load i8*, i8** %d, align 8
  %incdec.ptr73 = getelementptr inbounds i8, i8* %61, i32 1
  store i8* %incdec.ptr73, i8** %d, align 8
  %62 = load i8, i8* %61, align 1
  %idxprom74 = zext i8 %62 to i64
  %arrayidx75 = getelementptr inbounds i8, i8* %60, i64 %idxprom74
  %63 = load i8, i8* %arrayidx75, align 1
  %tobool76 = icmp ne i8 %63, 0
  %lnot77 = xor i1 %tobool76, true
  br label %land.end78

land.end78:                                       ; preds = %land.rhs72, %while.cond69
  %64 = phi i1 [ false, %while.cond69 ], [ %lnot77, %land.rhs72 ]
  br i1 %64, label %while.body79, label %while.end81

while.body79:                                     ; preds = %land.end78
  %65 = load i32, i32* %range.addr, align 4
  %dec80 = add nsw i32 %65, -1
  store i32 %dec80, i32* %range.addr, align 4
  br label %while.cond69, !llvm.loop !21

while.end81:                                      ; preds = %land.end78
  br label %if.end82

if.end82:                                         ; preds = %while.end81, %while.end
  %66 = load i32, i32* %irange, align 4
  %67 = load i32, i32* %range.addr, align 4
  %sub83 = sub nsw i32 %66, %67
  %68 = load i32, i32* %startpos.addr, align 4
  %add84 = add nsw i32 %68, %sub83
  store i32 %add84, i32* %startpos.addr, align 4
  br label %if.end118

if.else85:                                        ; preds = %if.then42
  %69 = load i32, i32* %size1.addr, align 4
  %cmp86 = icmp eq i32 %69, 0
  br i1 %cmp86, label %cond.true91, label %lor.lhs.false88

lor.lhs.false88:                                  ; preds = %if.else85
  %70 = load i32, i32* %startpos.addr, align 4
  %71 = load i32, i32* %size1.addr, align 4
  %cmp89 = icmp sge i32 %70, %71
  br i1 %cmp89, label %cond.true91, label %cond.false96

cond.true91:                                      ; preds = %lor.lhs.false88, %if.else85
  %72 = load i8*, i8** %string2.addr, align 8
  %73 = load i32, i32* %startpos.addr, align 4
  %74 = load i32, i32* %size1.addr, align 4
  %sub92 = sub nsw i32 %73, %74
  %idxprom93 = sext i32 %sub92 to i64
  %arrayidx94 = getelementptr inbounds i8, i8* %72, i64 %idxprom93
  %75 = load i8, i8* %arrayidx94, align 1
  %conv95 = sext i8 %75 to i32
  br label %cond.end100

cond.false96:                                     ; preds = %lor.lhs.false88
  %76 = load i8*, i8** %string1.addr, align 8
  %77 = load i32, i32* %startpos.addr, align 4
  %idxprom97 = sext i32 %77 to i64
  %arrayidx98 = getelementptr inbounds i8, i8* %76, i64 %idxprom97
  %78 = load i8, i8* %arrayidx98, align 1
  %conv99 = sext i8 %78 to i32
  br label %cond.end100

cond.end100:                                      ; preds = %cond.false96, %cond.true91
  %cond101 = phi i32 [ %conv95, %cond.true91 ], [ %conv99, %cond.false96 ]
  %conv102 = trunc i32 %cond101 to i8
  store i8 %conv102, i8* %c, align 1
  %79 = load i8*, i8** %fastmap, align 8
  %80 = load i8*, i8** %translate, align 8
  %tobool103 = icmp ne i8* %80, null
  br i1 %tobool103, label %cond.true104, label %cond.false108

cond.true104:                                     ; preds = %cond.end100
  %81 = load i8*, i8** %translate, align 8
  %82 = load i8, i8* %c, align 1
  %idxprom105 = zext i8 %82 to i64
  %arrayidx106 = getelementptr inbounds i8, i8* %81, i64 %idxprom105
  %83 = load i8, i8* %arrayidx106, align 1
  %conv107 = sext i8 %83 to i32
  br label %cond.end110

cond.false108:                                    ; preds = %cond.end100
  %84 = load i8, i8* %c, align 1
  %conv109 = sext i8 %84 to i32
  br label %cond.end110

cond.end110:                                      ; preds = %cond.false108, %cond.true104
  %cond111 = phi i32 [ %conv107, %cond.true104 ], [ %conv109, %cond.false108 ]
  %conv112 = trunc i32 %cond111 to i8
  %idxprom113 = zext i8 %conv112 to i64
  %arrayidx114 = getelementptr inbounds i8, i8* %79, i64 %idxprom113
  %85 = load i8, i8* %arrayidx114, align 1
  %tobool115 = icmp ne i8 %85, 0
  br i1 %tobool115, label %if.end117, label %if.then116

if.then116:                                       ; preds = %cond.end110
  br label %advance

if.end117:                                        ; preds = %cond.end110
  br label %if.end118

if.end118:                                        ; preds = %if.end117, %if.end82
  br label %if.end119

if.end119:                                        ; preds = %if.end118, %land.lhs.true37, %land.lhs.true34, %for.cond
  %86 = load i32, i32* %range.addr, align 4
  %cmp120 = icmp sge i32 %86, 0
  br i1 %cmp120, label %land.lhs.true122, label %if.end134

land.lhs.true122:                                 ; preds = %if.end119
  %87 = load i32, i32* %startpos.addr, align 4
  %88 = load i32, i32* %total_size, align 4
  %cmp123 = icmp eq i32 %87, %88
  br i1 %cmp123, label %land.lhs.true125, label %if.end134

land.lhs.true125:                                 ; preds = %land.lhs.true122
  %89 = load i8*, i8** %fastmap, align 8
  %tobool126 = icmp ne i8* %89, null
  br i1 %tobool126, label %land.lhs.true127, label %if.end134

land.lhs.true127:                                 ; preds = %land.lhs.true125
  %90 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %can_be_null128 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %90, i32 0, i32 7
  %bf.load129 = load i8, i8* %can_be_null128, align 8
  %bf.clear130 = and i8 %bf.load129, 1
  %bf.cast131 = zext i8 %bf.clear130 to i32
  %tobool132 = icmp ne i32 %bf.cast131, 0
  br i1 %tobool132, label %if.end134, label %if.then133

if.then133:                                       ; preds = %land.lhs.true127
  store i32 -1, i32* %retval, align 4
  br label %return

if.end134:                                        ; preds = %land.lhs.true127, %land.lhs.true125, %land.lhs.true122, %if.end119
  %91 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %92 = load i8*, i8** %string1.addr, align 8
  %93 = load i32, i32* %size1.addr, align 4
  %94 = load i8*, i8** %string2.addr, align 8
  %95 = load i32, i32* %size2.addr, align 4
  %96 = load i32, i32* %startpos.addr, align 4
  %97 = load %struct.re_registers*, %struct.re_registers** %regs.addr, align 8
  %98 = load i32, i32* %stop.addr, align 4
  %call135 = call i32 @re_match_2(%struct.re_pattern_buffer* %91, i8* %92, i32 %93, i8* %94, i32 %95, i32 %96, %struct.re_registers* %97, i32 %98)
  store i32 %call135, i32* %val, align 4
  %99 = load i32, i32* %val, align 4
  %cmp136 = icmp sge i32 %99, 0
  br i1 %cmp136, label %if.then138, label %if.end139

if.then138:                                       ; preds = %if.end134
  %100 = load i32, i32* %startpos.addr, align 4
  store i32 %100, i32* %retval, align 4
  br label %return

if.end139:                                        ; preds = %if.end134
  %101 = load i32, i32* %val, align 4
  %cmp140 = icmp eq i32 %101, -2
  br i1 %cmp140, label %if.then142, label %if.end143

if.then142:                                       ; preds = %if.end139
  store i32 -2, i32* %retval, align 4
  br label %return

if.end143:                                        ; preds = %if.end139
  br label %advance

advance:                                          ; preds = %if.end143, %if.then116
  %102 = load i32, i32* %range.addr, align 4
  %tobool144 = icmp ne i32 %102, 0
  br i1 %tobool144, label %if.else146, label %if.then145

if.then145:                                       ; preds = %advance
  br label %for.end

if.else146:                                       ; preds = %advance
  %103 = load i32, i32* %range.addr, align 4
  %cmp147 = icmp sgt i32 %103, 0
  br i1 %cmp147, label %if.then149, label %if.else151

if.then149:                                       ; preds = %if.else146
  %104 = load i32, i32* %range.addr, align 4
  %dec150 = add nsw i32 %104, -1
  store i32 %dec150, i32* %range.addr, align 4
  %105 = load i32, i32* %startpos.addr, align 4
  %inc = add nsw i32 %105, 1
  store i32 %inc, i32* %startpos.addr, align 4
  br label %if.end154

if.else151:                                       ; preds = %if.else146
  %106 = load i32, i32* %range.addr, align 4
  %inc152 = add nsw i32 %106, 1
  store i32 %inc152, i32* %range.addr, align 4
  %107 = load i32, i32* %startpos.addr, align 4
  %dec153 = add nsw i32 %107, -1
  store i32 %dec153, i32* %startpos.addr, align 4
  br label %if.end154

if.end154:                                        ; preds = %if.else151, %if.then149
  br label %if.end155

if.end155:                                        ; preds = %if.end154
  br label %for.cond

for.end:                                          ; preds = %if.then145
  store i32 -1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then142, %if.then138, %if.then133, %if.then30, %if.then21, %if.then
  %108 = load i32, i32* %retval, align 4
  ret i32 %108
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @re_match_2(%struct.re_pattern_buffer* %bufp, i8* %string1, i32 %size1, i8* %string2, i32 %size2, i32 %pos, %struct.re_registers* %regs, i32 %stop) #0 {
entry:
  %retval = alloca i32, align 4
  %bufp.addr = alloca %struct.re_pattern_buffer*, align 8
  %string1.addr = alloca i8*, align 8
  %size1.addr = alloca i32, align 4
  %string2.addr = alloca i8*, align 8
  %size2.addr = alloca i32, align 4
  %pos.addr = alloca i32, align 4
  %regs.addr = alloca %struct.re_registers*, align 8
  %stop.addr = alloca i32, align 4
  %mcnt = alloca i32, align 4
  %p1 = alloca i8*, align 8
  %end1 = alloca i8*, align 8
  %end2 = alloca i8*, align 8
  %end_match_1 = alloca i8*, align 8
  %end_match_2 = alloca i8*, align 8
  %d = alloca i8*, align 8
  %dend = alloca i8*, align 8
  %p = alloca i8*, align 8
  %pend = alloca i8*, align 8
  %translate = alloca i8*, align 8
  %fail_stack = alloca %struct.fail_stack_type, align 8
  %num_regs = alloca i32, align 4
  %lowest_active_reg = alloca i32, align 4
  %highest_active_reg = alloca i32, align 4
  %regstart = alloca i8**, align 8
  %regend = alloca i8**, align 8
  %old_regstart = alloca i8**, align 8
  %old_regend = alloca i8**, align 8
  %reg_info = alloca %union.register_info_type*, align 8
  %best_regs_set = alloca i32, align 4
  %best_regstart = alloca i8**, align 8
  %best_regend = alloca i8**, align 8
  %match_end = alloca i8*, align 8
  %reg_dummy = alloca i8**, align 8
  %reg_info_dummy = alloca %union.register_info_type*, align 8
  %same_str_p = alloca i8, align 1
  %r = alloca i32, align 4
  %r536 = alloca i32, align 4
  %c = alloca i8, align 1
  %not = alloca i8, align 1
  %r610 = alloca i32, align 4
  %r734 = alloca i8, align 1
  %is_a_jump_n = alloca i8, align 1
  %r834 = alloca i32, align 4
  %destination = alloca i8*, align 8
  %this_reg = alloca i32, align 4
  %d2 = alloca i8*, align 8
  %dend2 = alloca i8*, align 8
  %regno = alloca i32, align 4
  %destination1193 = alloca i8*, align 8
  %this_reg1194 = alloca i32, align 4
  %destination1338 = alloca i8*, align 8
  %this_reg1339 = alloca i32, align 4
  %p2 = alloca i8*, align 8
  %c1486 = alloca i8, align 1
  %not1522 = alloca i32, align 4
  %dummy_low_reg = alloca i32, align 4
  %dummy_high_reg = alloca i32, align 4
  %pdummy = alloca i8*, align 8
  %sdummy = alloca i8*, align 8
  %this_reg1569 = alloca i32, align 4
  %string_temp = alloca i8*, align 8
  %destination1642 = alloca i8*, align 8
  %this_reg1643 = alloca i32, align 4
  %destination1741 = alloca i8*, align 8
  %this_reg1742 = alloca i32, align 4
  %r2232 = alloca i32, align 4
  %r2290 = alloca i32, align 4
  %this_reg2319 = alloca i32, align 4
  %string_temp2320 = alloca i8*, align 8
  %is_a_jump_n2380 = alloca i8, align 1
  store %struct.re_pattern_buffer* %bufp, %struct.re_pattern_buffer** %bufp.addr, align 8
  store i8* %string1, i8** %string1.addr, align 8
  store i32 %size1, i32* %size1.addr, align 4
  store i8* %string2, i8** %string2.addr, align 8
  store i32 %size2, i32* %size2.addr, align 4
  store i32 %pos, i32* %pos.addr, align 4
  store %struct.re_registers* %regs, %struct.re_registers** %regs.addr, align 8
  store i32 %stop, i32* %stop.addr, align 4
  %0 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %0, i32 0, i32 0
  %1 = load i8*, i8** %buffer, align 8
  store i8* %1, i8** %p, align 8
  %2 = load i8*, i8** %p, align 8
  %3 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %used = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %3, i32 0, i32 2
  %4 = load i64, i64* %used, align 8
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 %4
  store i8* %add.ptr, i8** %pend, align 8
  %5 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %translate1 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %5, i32 0, i32 5
  %6 = load i8*, i8** %translate1, align 8
  store i8* %6, i8** %translate, align 8
  %7 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %re_nsub = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %7, i32 0, i32 6
  %8 = load i64, i64* %re_nsub, align 8
  %add = add i64 %8, 1
  %conv = trunc i64 %add to i32
  store i32 %conv, i32* %num_regs, align 4
  store i32 257, i32* %lowest_active_reg, align 4
  store i32 256, i32* %highest_active_reg, align 4
  store i32 0, i32* %best_regs_set, align 4
  store i8* null, i8** %match_end, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %9 = alloca i8, i64 40, align 16
  %10 = bitcast i8* %9 to i8**
  %stack = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  store i8** %10, i8*** %stack, align 8
  %stack2 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %11 = load i8**, i8*** %stack2, align 8
  %cmp = icmp eq i8** %11, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  store i32 -2, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %do.body
  %size = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 1
  store i32 5, i32* %size, align 8
  %avail = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  store i32 0, i32* %avail, align 4
  br label %do.end

do.end:                                           ; preds = %if.end
  %12 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %re_nsub4 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %12, i32 0, i32 6
  %13 = load i64, i64* %re_nsub4, align 8
  %tobool = icmp ne i64 %13, 0
  br i1 %tobool, label %if.then5, label %if.end41

if.then5:                                         ; preds = %do.end
  %14 = load i32, i32* %num_regs, align 4
  %conv6 = zext i32 %14 to i64
  %mul = mul i64 %conv6, 8
  %15 = alloca i8, i64 %mul, align 16
  %16 = bitcast i8* %15 to i8**
  store i8** %16, i8*** %regstart, align 8
  %17 = load i32, i32* %num_regs, align 4
  %conv7 = zext i32 %17 to i64
  %mul8 = mul i64 %conv7, 8
  %18 = alloca i8, i64 %mul8, align 16
  %19 = bitcast i8* %18 to i8**
  store i8** %19, i8*** %regend, align 8
  %20 = load i32, i32* %num_regs, align 4
  %conv9 = zext i32 %20 to i64
  %mul10 = mul i64 %conv9, 8
  %21 = alloca i8, i64 %mul10, align 16
  %22 = bitcast i8* %21 to i8**
  store i8** %22, i8*** %old_regstart, align 8
  %23 = load i32, i32* %num_regs, align 4
  %conv11 = zext i32 %23 to i64
  %mul12 = mul i64 %conv11, 8
  %24 = alloca i8, i64 %mul12, align 16
  %25 = bitcast i8* %24 to i8**
  store i8** %25, i8*** %old_regend, align 8
  %26 = load i32, i32* %num_regs, align 4
  %conv13 = zext i32 %26 to i64
  %mul14 = mul i64 %conv13, 8
  %27 = alloca i8, i64 %mul14, align 16
  %28 = bitcast i8* %27 to i8**
  store i8** %28, i8*** %best_regstart, align 8
  %29 = load i32, i32* %num_regs, align 4
  %conv15 = zext i32 %29 to i64
  %mul16 = mul i64 %conv15, 8
  %30 = alloca i8, i64 %mul16, align 16
  %31 = bitcast i8* %30 to i8**
  store i8** %31, i8*** %best_regend, align 8
  %32 = load i32, i32* %num_regs, align 4
  %conv17 = zext i32 %32 to i64
  %mul18 = mul i64 %conv17, 8
  %33 = alloca i8, i64 %mul18, align 16
  %34 = bitcast i8* %33 to %union.register_info_type*
  store %union.register_info_type* %34, %union.register_info_type** %reg_info, align 8
  %35 = load i32, i32* %num_regs, align 4
  %conv19 = zext i32 %35 to i64
  %mul20 = mul i64 %conv19, 8
  %36 = alloca i8, i64 %mul20, align 16
  %37 = bitcast i8* %36 to i8**
  store i8** %37, i8*** %reg_dummy, align 8
  %38 = load i32, i32* %num_regs, align 4
  %conv21 = zext i32 %38 to i64
  %mul22 = mul i64 %conv21, 8
  %39 = alloca i8, i64 %mul22, align 16
  %40 = bitcast i8* %39 to %union.register_info_type*
  store %union.register_info_type* %40, %union.register_info_type** %reg_info_dummy, align 8
  %41 = load i8**, i8*** %regstart, align 8
  %tobool23 = icmp ne i8** %41, null
  br i1 %tobool23, label %land.lhs.true, label %if.then39

land.lhs.true:                                    ; preds = %if.then5
  %42 = load i8**, i8*** %regend, align 8
  %tobool24 = icmp ne i8** %42, null
  br i1 %tobool24, label %land.lhs.true25, label %if.then39

land.lhs.true25:                                  ; preds = %land.lhs.true
  %43 = load i8**, i8*** %old_regstart, align 8
  %tobool26 = icmp ne i8** %43, null
  br i1 %tobool26, label %land.lhs.true27, label %if.then39

land.lhs.true27:                                  ; preds = %land.lhs.true25
  %44 = load i8**, i8*** %old_regend, align 8
  %tobool28 = icmp ne i8** %44, null
  br i1 %tobool28, label %land.lhs.true29, label %if.then39

land.lhs.true29:                                  ; preds = %land.lhs.true27
  %45 = load %union.register_info_type*, %union.register_info_type** %reg_info, align 8
  %tobool30 = icmp ne %union.register_info_type* %45, null
  br i1 %tobool30, label %land.lhs.true31, label %if.then39

land.lhs.true31:                                  ; preds = %land.lhs.true29
  %46 = load i8**, i8*** %best_regstart, align 8
  %tobool32 = icmp ne i8** %46, null
  br i1 %tobool32, label %land.lhs.true33, label %if.then39

land.lhs.true33:                                  ; preds = %land.lhs.true31
  %47 = load i8**, i8*** %best_regend, align 8
  %tobool34 = icmp ne i8** %47, null
  br i1 %tobool34, label %land.lhs.true35, label %if.then39

land.lhs.true35:                                  ; preds = %land.lhs.true33
  %48 = load i8**, i8*** %reg_dummy, align 8
  %tobool36 = icmp ne i8** %48, null
  br i1 %tobool36, label %land.lhs.true37, label %if.then39

land.lhs.true37:                                  ; preds = %land.lhs.true35
  %49 = load %union.register_info_type*, %union.register_info_type** %reg_info_dummy, align 8
  %tobool38 = icmp ne %union.register_info_type* %49, null
  br i1 %tobool38, label %if.end40, label %if.then39

if.then39:                                        ; preds = %land.lhs.true37, %land.lhs.true35, %land.lhs.true33, %land.lhs.true31, %land.lhs.true29, %land.lhs.true27, %land.lhs.true25, %land.lhs.true, %if.then5
  %50 = alloca i8, i64 0, align 16
  store i32 -2, i32* %retval, align 4
  br label %return

if.end40:                                         ; preds = %land.lhs.true37
  br label %if.end41

if.end41:                                         ; preds = %if.end40, %do.end
  %51 = load i32, i32* %pos.addr, align 4
  %cmp42 = icmp slt i32 %51, 0
  br i1 %cmp42, label %if.then47, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end41
  %52 = load i32, i32* %pos.addr, align 4
  %53 = load i32, i32* %size1.addr, align 4
  %54 = load i32, i32* %size2.addr, align 4
  %add44 = add nsw i32 %53, %54
  %cmp45 = icmp sgt i32 %52, %add44
  br i1 %cmp45, label %if.then47, label %if.end48

if.then47:                                        ; preds = %lor.lhs.false, %if.end41
  %55 = alloca i8, i64 0, align 16
  store i32 -1, i32* %retval, align 4
  br label %return

if.end48:                                         ; preds = %lor.lhs.false
  store i32 1, i32* %mcnt, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end48
  %56 = load i32, i32* %mcnt, align 4
  %57 = load i32, i32* %num_regs, align 4
  %cmp49 = icmp ult i32 %56, %57
  br i1 %cmp49, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %58 = load i8**, i8*** %old_regend, align 8
  %59 = load i32, i32* %mcnt, align 4
  %idxprom = sext i32 %59 to i64
  %arrayidx = getelementptr inbounds i8*, i8** %58, i64 %idxprom
  store i8* inttoptr (i64 -1 to i8*), i8** %arrayidx, align 8
  %60 = load i8**, i8*** %old_regstart, align 8
  %61 = load i32, i32* %mcnt, align 4
  %idxprom51 = sext i32 %61 to i64
  %arrayidx52 = getelementptr inbounds i8*, i8** %60, i64 %idxprom51
  store i8* inttoptr (i64 -1 to i8*), i8** %arrayidx52, align 8
  %62 = load i8**, i8*** %regend, align 8
  %63 = load i32, i32* %mcnt, align 4
  %idxprom53 = sext i32 %63 to i64
  %arrayidx54 = getelementptr inbounds i8*, i8** %62, i64 %idxprom53
  store i8* inttoptr (i64 -1 to i8*), i8** %arrayidx54, align 8
  %64 = load i8**, i8*** %regstart, align 8
  %65 = load i32, i32* %mcnt, align 4
  %idxprom55 = sext i32 %65 to i64
  %arrayidx56 = getelementptr inbounds i8*, i8** %64, i64 %idxprom55
  store i8* inttoptr (i64 -1 to i8*), i8** %arrayidx56, align 8
  %66 = load %union.register_info_type*, %union.register_info_type** %reg_info, align 8
  %67 = load i32, i32* %mcnt, align 4
  %idxprom57 = sext i32 %67 to i64
  %arrayidx58 = getelementptr inbounds %union.register_info_type, %union.register_info_type* %66, i64 %idxprom57
  %bits = bitcast %union.register_info_type* %arrayidx58 to %struct.anon*
  %68 = bitcast %struct.anon* %bits to i8*
  %bf.load = load i8, i8* %68, align 8
  %bf.clear = and i8 %bf.load, -4
  %bf.set = or i8 %bf.clear, 3
  store i8 %bf.set, i8* %68, align 8
  %69 = load %union.register_info_type*, %union.register_info_type** %reg_info, align 8
  %70 = load i32, i32* %mcnt, align 4
  %idxprom59 = sext i32 %70 to i64
  %arrayidx60 = getelementptr inbounds %union.register_info_type, %union.register_info_type* %69, i64 %idxprom59
  %bits61 = bitcast %union.register_info_type* %arrayidx60 to %struct.anon*
  %71 = bitcast %struct.anon* %bits61 to i8*
  %bf.load62 = load i8, i8* %71, align 8
  %bf.clear63 = and i8 %bf.load62, -5
  store i8 %bf.clear63, i8* %71, align 8
  %72 = load %union.register_info_type*, %union.register_info_type** %reg_info, align 8
  %73 = load i32, i32* %mcnt, align 4
  %idxprom64 = sext i32 %73 to i64
  %arrayidx65 = getelementptr inbounds %union.register_info_type, %union.register_info_type* %72, i64 %idxprom64
  %bits66 = bitcast %union.register_info_type* %arrayidx65 to %struct.anon*
  %74 = bitcast %struct.anon* %bits66 to i8*
  %bf.load67 = load i8, i8* %74, align 8
  %bf.clear68 = and i8 %bf.load67, -9
  store i8 %bf.clear68, i8* %74, align 8
  %75 = load %union.register_info_type*, %union.register_info_type** %reg_info, align 8
  %76 = load i32, i32* %mcnt, align 4
  %idxprom69 = sext i32 %76 to i64
  %arrayidx70 = getelementptr inbounds %union.register_info_type, %union.register_info_type* %75, i64 %idxprom69
  %bits71 = bitcast %union.register_info_type* %arrayidx70 to %struct.anon*
  %77 = bitcast %struct.anon* %bits71 to i8*
  %bf.load72 = load i8, i8* %77, align 8
  %bf.clear73 = and i8 %bf.load72, -17
  store i8 %bf.clear73, i8* %77, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %78 = load i32, i32* %mcnt, align 4
  %inc = add nsw i32 %78, 1
  store i32 %inc, i32* %mcnt, align 4
  br label %for.cond, !llvm.loop !22

for.end:                                          ; preds = %for.cond
  %79 = load i32, i32* %size2.addr, align 4
  %cmp74 = icmp eq i32 %79, 0
  br i1 %cmp74, label %land.lhs.true76, label %if.end80

land.lhs.true76:                                  ; preds = %for.end
  %80 = load i8*, i8** %string1.addr, align 8
  %cmp77 = icmp ne i8* %80, null
  br i1 %cmp77, label %if.then79, label %if.end80

if.then79:                                        ; preds = %land.lhs.true76
  %81 = load i8*, i8** %string1.addr, align 8
  store i8* %81, i8** %string2.addr, align 8
  %82 = load i32, i32* %size1.addr, align 4
  store i32 %82, i32* %size2.addr, align 4
  store i8* null, i8** %string1.addr, align 8
  store i32 0, i32* %size1.addr, align 4
  br label %if.end80

if.end80:                                         ; preds = %if.then79, %land.lhs.true76, %for.end
  %83 = load i8*, i8** %string1.addr, align 8
  %84 = load i32, i32* %size1.addr, align 4
  %idx.ext = sext i32 %84 to i64
  %add.ptr81 = getelementptr inbounds i8, i8* %83, i64 %idx.ext
  store i8* %add.ptr81, i8** %end1, align 8
  %85 = load i8*, i8** %string2.addr, align 8
  %86 = load i32, i32* %size2.addr, align 4
  %idx.ext82 = sext i32 %86 to i64
  %add.ptr83 = getelementptr inbounds i8, i8* %85, i64 %idx.ext82
  store i8* %add.ptr83, i8** %end2, align 8
  %87 = load i32, i32* %stop.addr, align 4
  %88 = load i32, i32* %size1.addr, align 4
  %cmp84 = icmp sle i32 %87, %88
  br i1 %cmp84, label %if.then86, label %if.else

if.then86:                                        ; preds = %if.end80
  %89 = load i8*, i8** %string1.addr, align 8
  %90 = load i32, i32* %stop.addr, align 4
  %idx.ext87 = sext i32 %90 to i64
  %add.ptr88 = getelementptr inbounds i8, i8* %89, i64 %idx.ext87
  store i8* %add.ptr88, i8** %end_match_1, align 8
  %91 = load i8*, i8** %string2.addr, align 8
  store i8* %91, i8** %end_match_2, align 8
  br label %if.end93

if.else:                                          ; preds = %if.end80
  %92 = load i8*, i8** %end1, align 8
  store i8* %92, i8** %end_match_1, align 8
  %93 = load i8*, i8** %string2.addr, align 8
  %94 = load i32, i32* %stop.addr, align 4
  %idx.ext89 = sext i32 %94 to i64
  %add.ptr90 = getelementptr inbounds i8, i8* %93, i64 %idx.ext89
  %95 = load i32, i32* %size1.addr, align 4
  %idx.ext91 = sext i32 %95 to i64
  %idx.neg = sub i64 0, %idx.ext91
  %add.ptr92 = getelementptr inbounds i8, i8* %add.ptr90, i64 %idx.neg
  store i8* %add.ptr92, i8** %end_match_2, align 8
  br label %if.end93

if.end93:                                         ; preds = %if.else, %if.then86
  %96 = load i32, i32* %size1.addr, align 4
  %cmp94 = icmp sgt i32 %96, 0
  br i1 %cmp94, label %land.lhs.true96, label %if.else102

land.lhs.true96:                                  ; preds = %if.end93
  %97 = load i32, i32* %pos.addr, align 4
  %98 = load i32, i32* %size1.addr, align 4
  %cmp97 = icmp sle i32 %97, %98
  br i1 %cmp97, label %if.then99, label %if.else102

if.then99:                                        ; preds = %land.lhs.true96
  %99 = load i8*, i8** %string1.addr, align 8
  %100 = load i32, i32* %pos.addr, align 4
  %idx.ext100 = sext i32 %100 to i64
  %add.ptr101 = getelementptr inbounds i8, i8* %99, i64 %idx.ext100
  store i8* %add.ptr101, i8** %d, align 8
  %101 = load i8*, i8** %end_match_1, align 8
  store i8* %101, i8** %dend, align 8
  br label %if.end108

if.else102:                                       ; preds = %land.lhs.true96, %if.end93
  %102 = load i8*, i8** %string2.addr, align 8
  %103 = load i32, i32* %pos.addr, align 4
  %idx.ext103 = sext i32 %103 to i64
  %add.ptr104 = getelementptr inbounds i8, i8* %102, i64 %idx.ext103
  %104 = load i32, i32* %size1.addr, align 4
  %idx.ext105 = sext i32 %104 to i64
  %idx.neg106 = sub i64 0, %idx.ext105
  %add.ptr107 = getelementptr inbounds i8, i8* %add.ptr104, i64 %idx.neg106
  store i8* %add.ptr107, i8** %d, align 8
  %105 = load i8*, i8** %end_match_2, align 8
  store i8* %105, i8** %dend, align 8
  br label %if.end108

if.end108:                                        ; preds = %if.else102, %if.then99
  br label %for.cond109

for.cond109:                                      ; preds = %if.end2425, %sw.epilog2314, %if.end108
  %106 = load i8*, i8** %p, align 8
  %107 = load i8*, i8** %pend, align 8
  %cmp110 = icmp eq i8* %106, %107
  br i1 %cmp110, label %if.then112, label %if.end422

if.then112:                                       ; preds = %for.cond109
  %108 = load i8*, i8** %d, align 8
  %109 = load i8*, i8** %end_match_2, align 8
  %cmp113 = icmp ne i8* %108, %109
  br i1 %cmp113, label %if.then115, label %if.end187

if.then115:                                       ; preds = %if.then112
  %avail116 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %110 = load i32, i32* %avail116, align 4
  %cmp117 = icmp eq i32 %110, 0
  br i1 %cmp117, label %if.else162, label %if.then119

if.then119:                                       ; preds = %if.then115
  %111 = load i32, i32* %size1.addr, align 4
  %tobool120 = icmp ne i32 %111, 0
  br i1 %tobool120, label %land.lhs.true121, label %land.end

land.lhs.true121:                                 ; preds = %if.then119
  %112 = load i8*, i8** %string1.addr, align 8
  %113 = load i8*, i8** %match_end, align 8
  %cmp122 = icmp ule i8* %112, %113
  br i1 %cmp122, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true121
  %114 = load i8*, i8** %match_end, align 8
  %115 = load i8*, i8** %string1.addr, align 8
  %116 = load i32, i32* %size1.addr, align 4
  %idx.ext124 = sext i32 %116 to i64
  %add.ptr125 = getelementptr inbounds i8, i8* %115, i64 %idx.ext124
  %cmp126 = icmp ule i8* %114, %add.ptr125
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true121, %if.then119
  %117 = phi i1 [ false, %land.lhs.true121 ], [ false, %if.then119 ], [ %cmp126, %land.rhs ]
  %land.ext = zext i1 %117 to i32
  %118 = load i8*, i8** %dend, align 8
  %119 = load i8*, i8** %end_match_1, align 8
  %cmp128 = icmp eq i8* %118, %119
  %conv129 = zext i1 %cmp128 to i32
  %cmp130 = icmp eq i32 %land.ext, %conv129
  %conv131 = zext i1 %cmp130 to i32
  %conv132 = trunc i32 %conv131 to i8
  store i8 %conv132, i8* %same_str_p, align 1
  %120 = load i32, i32* %best_regs_set, align 4
  %tobool133 = icmp ne i32 %120, 0
  br i1 %tobool133, label %lor.lhs.false134, label %if.then145

lor.lhs.false134:                                 ; preds = %land.end
  %121 = load i8, i8* %same_str_p, align 1
  %conv135 = sext i8 %121 to i32
  %tobool136 = icmp ne i32 %conv135, 0
  br i1 %tobool136, label %land.lhs.true137, label %lor.lhs.false140

land.lhs.true137:                                 ; preds = %lor.lhs.false134
  %122 = load i8*, i8** %d, align 8
  %123 = load i8*, i8** %match_end, align 8
  %cmp138 = icmp ugt i8* %122, %123
  br i1 %cmp138, label %if.then145, label %lor.lhs.false140

lor.lhs.false140:                                 ; preds = %land.lhs.true137, %lor.lhs.false134
  %124 = load i8, i8* %same_str_p, align 1
  %tobool141 = icmp ne i8 %124, 0
  br i1 %tobool141, label %if.end161, label %land.lhs.true142

land.lhs.true142:                                 ; preds = %lor.lhs.false140
  %125 = load i8*, i8** %dend, align 8
  %126 = load i8*, i8** %end_match_1, align 8
  %cmp143 = icmp eq i8* %125, %126
  br i1 %cmp143, label %if.end161, label %if.then145

if.then145:                                       ; preds = %land.lhs.true142, %land.lhs.true137, %land.end
  store i32 1, i32* %best_regs_set, align 4
  %127 = load i8*, i8** %d, align 8
  store i8* %127, i8** %match_end, align 8
  store i32 1, i32* %mcnt, align 4
  br label %for.cond146

for.cond146:                                      ; preds = %for.inc158, %if.then145
  %128 = load i32, i32* %mcnt, align 4
  %129 = load i32, i32* %num_regs, align 4
  %cmp147 = icmp ult i32 %128, %129
  br i1 %cmp147, label %for.body149, label %for.end160

for.body149:                                      ; preds = %for.cond146
  %130 = load i8**, i8*** %regstart, align 8
  %131 = load i32, i32* %mcnt, align 4
  %idxprom150 = sext i32 %131 to i64
  %arrayidx151 = getelementptr inbounds i8*, i8** %130, i64 %idxprom150
  %132 = load i8*, i8** %arrayidx151, align 8
  %133 = load i8**, i8*** %best_regstart, align 8
  %134 = load i32, i32* %mcnt, align 4
  %idxprom152 = sext i32 %134 to i64
  %arrayidx153 = getelementptr inbounds i8*, i8** %133, i64 %idxprom152
  store i8* %132, i8** %arrayidx153, align 8
  %135 = load i8**, i8*** %regend, align 8
  %136 = load i32, i32* %mcnt, align 4
  %idxprom154 = sext i32 %136 to i64
  %arrayidx155 = getelementptr inbounds i8*, i8** %135, i64 %idxprom154
  %137 = load i8*, i8** %arrayidx155, align 8
  %138 = load i8**, i8*** %best_regend, align 8
  %139 = load i32, i32* %mcnt, align 4
  %idxprom156 = sext i32 %139 to i64
  %arrayidx157 = getelementptr inbounds i8*, i8** %138, i64 %idxprom156
  store i8* %137, i8** %arrayidx157, align 8
  br label %for.inc158

for.inc158:                                       ; preds = %for.body149
  %140 = load i32, i32* %mcnt, align 4
  %inc159 = add nsw i32 %140, 1
  store i32 %inc159, i32* %mcnt, align 4
  br label %for.cond146, !llvm.loop !23

for.end160:                                       ; preds = %for.cond146
  br label %if.end161

if.end161:                                        ; preds = %for.end160, %land.lhs.true142, %lor.lhs.false140
  br label %fail

if.else162:                                       ; preds = %if.then115
  %141 = load i32, i32* %best_regs_set, align 4
  %tobool163 = icmp ne i32 %141, 0
  br i1 %tobool163, label %if.then164, label %if.end185

if.then164:                                       ; preds = %if.else162
  br label %restore_best_regs

restore_best_regs:                                ; preds = %if.then2428, %if.then164
  %142 = load i8*, i8** %match_end, align 8
  store i8* %142, i8** %d, align 8
  %143 = load i8*, i8** %d, align 8
  %144 = load i8*, i8** %string1.addr, align 8
  %cmp165 = icmp uge i8* %143, %144
  br i1 %cmp165, label %land.lhs.true167, label %cond.false

land.lhs.true167:                                 ; preds = %restore_best_regs
  %145 = load i8*, i8** %d, align 8
  %146 = load i8*, i8** %end1, align 8
  %cmp168 = icmp ule i8* %145, %146
  br i1 %cmp168, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true167
  %147 = load i8*, i8** %end_match_1, align 8
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true167, %restore_best_regs
  %148 = load i8*, i8** %end_match_2, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %147, %cond.true ], [ %148, %cond.false ]
  store i8* %cond, i8** %dend, align 8
  store i32 1, i32* %mcnt, align 4
  br label %for.cond170

for.cond170:                                      ; preds = %for.inc182, %cond.end
  %149 = load i32, i32* %mcnt, align 4
  %150 = load i32, i32* %num_regs, align 4
  %cmp171 = icmp ult i32 %149, %150
  br i1 %cmp171, label %for.body173, label %for.end184

for.body173:                                      ; preds = %for.cond170
  %151 = load i8**, i8*** %best_regstart, align 8
  %152 = load i32, i32* %mcnt, align 4
  %idxprom174 = sext i32 %152 to i64
  %arrayidx175 = getelementptr inbounds i8*, i8** %151, i64 %idxprom174
  %153 = load i8*, i8** %arrayidx175, align 8
  %154 = load i8**, i8*** %regstart, align 8
  %155 = load i32, i32* %mcnt, align 4
  %idxprom176 = sext i32 %155 to i64
  %arrayidx177 = getelementptr inbounds i8*, i8** %154, i64 %idxprom176
  store i8* %153, i8** %arrayidx177, align 8
  %156 = load i8**, i8*** %best_regend, align 8
  %157 = load i32, i32* %mcnt, align 4
  %idxprom178 = sext i32 %157 to i64
  %arrayidx179 = getelementptr inbounds i8*, i8** %156, i64 %idxprom178
  %158 = load i8*, i8** %arrayidx179, align 8
  %159 = load i8**, i8*** %regend, align 8
  %160 = load i32, i32* %mcnt, align 4
  %idxprom180 = sext i32 %160 to i64
  %arrayidx181 = getelementptr inbounds i8*, i8** %159, i64 %idxprom180
  store i8* %158, i8** %arrayidx181, align 8
  br label %for.inc182

for.inc182:                                       ; preds = %for.body173
  %161 = load i32, i32* %mcnt, align 4
  %inc183 = add nsw i32 %161, 1
  store i32 %inc183, i32* %mcnt, align 4
  br label %for.cond170, !llvm.loop !24

for.end184:                                       ; preds = %for.cond170
  br label %if.end185

if.end185:                                        ; preds = %for.end184, %if.else162
  br label %if.end186

if.end186:                                        ; preds = %if.end185
  br label %if.end187

if.end187:                                        ; preds = %if.end186, %if.then112
  %162 = load %struct.re_registers*, %struct.re_registers** %regs.addr, align 8
  %tobool188 = icmp ne %struct.re_registers* %162, null
  br i1 %tobool188, label %land.lhs.true189, label %if.end405

land.lhs.true189:                                 ; preds = %if.end187
  %163 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %no_sub = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %163, i32 0, i32 7
  %bf.load190 = load i8, i8* %no_sub, align 8
  %bf.lshr = lshr i8 %bf.load190, 4
  %bf.clear191 = and i8 %bf.lshr, 1
  %bf.cast = zext i8 %bf.clear191 to i32
  %tobool192 = icmp ne i32 %bf.cast, 0
  br i1 %tobool192, label %if.end405, label %if.then193

if.then193:                                       ; preds = %land.lhs.true189
  %164 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %regs_allocated = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %164, i32 0, i32 7
  %bf.load194 = load i8, i8* %regs_allocated, align 8
  %bf.lshr195 = lshr i8 %bf.load194, 1
  %bf.clear196 = and i8 %bf.lshr195, 3
  %bf.cast197 = zext i8 %bf.clear196 to i32
  %cmp198 = icmp eq i32 %bf.cast197, 0
  br i1 %cmp198, label %if.then200, label %if.else230

if.then200:                                       ; preds = %if.then193
  %165 = load i32, i32* %num_regs, align 4
  %add201 = add i32 %165, 1
  %cmp202 = icmp ugt i32 30, %add201
  br i1 %cmp202, label %cond.true204, label %cond.false205

cond.true204:                                     ; preds = %if.then200
  br label %cond.end207

cond.false205:                                    ; preds = %if.then200
  %166 = load i32, i32* %num_regs, align 4
  %add206 = add i32 %166, 1
  br label %cond.end207

cond.end207:                                      ; preds = %cond.false205, %cond.true204
  %cond208 = phi i32 [ 30, %cond.true204 ], [ %add206, %cond.false205 ]
  %167 = load %struct.re_registers*, %struct.re_registers** %regs.addr, align 8
  %num_regs209 = getelementptr inbounds %struct.re_registers, %struct.re_registers* %167, i32 0, i32 0
  store i32 %cond208, i32* %num_regs209, align 8
  %168 = load %struct.re_registers*, %struct.re_registers** %regs.addr, align 8
  %num_regs210 = getelementptr inbounds %struct.re_registers, %struct.re_registers* %168, i32 0, i32 0
  %169 = load i32, i32* %num_regs210, align 8
  %conv211 = zext i32 %169 to i64
  %mul212 = mul i64 %conv211, 4
  %call = call noalias align 16 i8* @malloc(i64 %mul212) #9
  %170 = bitcast i8* %call to i32*
  %171 = load %struct.re_registers*, %struct.re_registers** %regs.addr, align 8
  %start = getelementptr inbounds %struct.re_registers, %struct.re_registers* %171, i32 0, i32 1
  store i32* %170, i32** %start, align 8
  %172 = load %struct.re_registers*, %struct.re_registers** %regs.addr, align 8
  %num_regs213 = getelementptr inbounds %struct.re_registers, %struct.re_registers* %172, i32 0, i32 0
  %173 = load i32, i32* %num_regs213, align 8
  %conv214 = zext i32 %173 to i64
  %mul215 = mul i64 %conv214, 4
  %call216 = call noalias align 16 i8* @malloc(i64 %mul215) #9
  %174 = bitcast i8* %call216 to i32*
  %175 = load %struct.re_registers*, %struct.re_registers** %regs.addr, align 8
  %end = getelementptr inbounds %struct.re_registers, %struct.re_registers* %175, i32 0, i32 2
  store i32* %174, i32** %end, align 8
  %176 = load %struct.re_registers*, %struct.re_registers** %regs.addr, align 8
  %start217 = getelementptr inbounds %struct.re_registers, %struct.re_registers* %176, i32 0, i32 1
  %177 = load i32*, i32** %start217, align 8
  %cmp218 = icmp eq i32* %177, null
  br i1 %cmp218, label %if.then224, label %lor.lhs.false220

lor.lhs.false220:                                 ; preds = %cond.end207
  %178 = load %struct.re_registers*, %struct.re_registers** %regs.addr, align 8
  %end221 = getelementptr inbounds %struct.re_registers, %struct.re_registers* %178, i32 0, i32 2
  %179 = load i32*, i32** %end221, align 8
  %cmp222 = icmp eq i32* %179, null
  br i1 %cmp222, label %if.then224, label %if.end225

if.then224:                                       ; preds = %lor.lhs.false220, %cond.end207
  store i32 -2, i32* %retval, align 4
  br label %return

if.end225:                                        ; preds = %lor.lhs.false220
  %180 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %regs_allocated226 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %180, i32 0, i32 7
  %bf.load227 = load i8, i8* %regs_allocated226, align 8
  %bf.clear228 = and i8 %bf.load227, -7
  %bf.set229 = or i8 %bf.clear228, 2
  store i8 %bf.set229, i8* %regs_allocated226, align 8
  br label %if.end270

if.else230:                                       ; preds = %if.then193
  %181 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %regs_allocated231 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %181, i32 0, i32 7
  %bf.load232 = load i8, i8* %regs_allocated231, align 8
  %bf.lshr233 = lshr i8 %bf.load232, 1
  %bf.clear234 = and i8 %bf.lshr233, 3
  %bf.cast235 = zext i8 %bf.clear234 to i32
  %cmp236 = icmp eq i32 %bf.cast235, 1
  br i1 %cmp236, label %if.then238, label %if.else268

if.then238:                                       ; preds = %if.else230
  %182 = load %struct.re_registers*, %struct.re_registers** %regs.addr, align 8
  %num_regs239 = getelementptr inbounds %struct.re_registers, %struct.re_registers* %182, i32 0, i32 0
  %183 = load i32, i32* %num_regs239, align 8
  %184 = load i32, i32* %num_regs, align 4
  %add240 = add i32 %184, 1
  %cmp241 = icmp ult i32 %183, %add240
  br i1 %cmp241, label %if.then243, label %if.end267

if.then243:                                       ; preds = %if.then238
  %185 = load i32, i32* %num_regs, align 4
  %add244 = add i32 %185, 1
  %186 = load %struct.re_registers*, %struct.re_registers** %regs.addr, align 8
  %num_regs245 = getelementptr inbounds %struct.re_registers, %struct.re_registers* %186, i32 0, i32 0
  store i32 %add244, i32* %num_regs245, align 8
  %187 = load %struct.re_registers*, %struct.re_registers** %regs.addr, align 8
  %start246 = getelementptr inbounds %struct.re_registers, %struct.re_registers* %187, i32 0, i32 1
  %188 = load i32*, i32** %start246, align 8
  %189 = bitcast i32* %188 to i8*
  %190 = load %struct.re_registers*, %struct.re_registers** %regs.addr, align 8
  %num_regs247 = getelementptr inbounds %struct.re_registers, %struct.re_registers* %190, i32 0, i32 0
  %191 = load i32, i32* %num_regs247, align 8
  %conv248 = zext i32 %191 to i64
  %mul249 = mul i64 %conv248, 4
  %call250 = call align 16 i8* @realloc(i8* %189, i64 %mul249) #9
  %192 = bitcast i8* %call250 to i32*
  %193 = load %struct.re_registers*, %struct.re_registers** %regs.addr, align 8
  %start251 = getelementptr inbounds %struct.re_registers, %struct.re_registers* %193, i32 0, i32 1
  store i32* %192, i32** %start251, align 8
  %194 = load %struct.re_registers*, %struct.re_registers** %regs.addr, align 8
  %end252 = getelementptr inbounds %struct.re_registers, %struct.re_registers* %194, i32 0, i32 2
  %195 = load i32*, i32** %end252, align 8
  %196 = bitcast i32* %195 to i8*
  %197 = load %struct.re_registers*, %struct.re_registers** %regs.addr, align 8
  %num_regs253 = getelementptr inbounds %struct.re_registers, %struct.re_registers* %197, i32 0, i32 0
  %198 = load i32, i32* %num_regs253, align 8
  %conv254 = zext i32 %198 to i64
  %mul255 = mul i64 %conv254, 4
  %call256 = call align 16 i8* @realloc(i8* %196, i64 %mul255) #9
  %199 = bitcast i8* %call256 to i32*
  %200 = load %struct.re_registers*, %struct.re_registers** %regs.addr, align 8
  %end257 = getelementptr inbounds %struct.re_registers, %struct.re_registers* %200, i32 0, i32 2
  store i32* %199, i32** %end257, align 8
  %201 = load %struct.re_registers*, %struct.re_registers** %regs.addr, align 8
  %start258 = getelementptr inbounds %struct.re_registers, %struct.re_registers* %201, i32 0, i32 1
  %202 = load i32*, i32** %start258, align 8
  %cmp259 = icmp eq i32* %202, null
  br i1 %cmp259, label %if.then265, label %lor.lhs.false261

lor.lhs.false261:                                 ; preds = %if.then243
  %203 = load %struct.re_registers*, %struct.re_registers** %regs.addr, align 8
  %end262 = getelementptr inbounds %struct.re_registers, %struct.re_registers* %203, i32 0, i32 2
  %204 = load i32*, i32** %end262, align 8
  %cmp263 = icmp eq i32* %204, null
  br i1 %cmp263, label %if.then265, label %if.end266

if.then265:                                       ; preds = %lor.lhs.false261, %if.then243
  store i32 -2, i32* %retval, align 4
  br label %return

if.end266:                                        ; preds = %lor.lhs.false261
  br label %if.end267

if.end267:                                        ; preds = %if.end266, %if.then238
  br label %if.end269

if.else268:                                       ; preds = %if.else230
  br label %if.end269

if.end269:                                        ; preds = %if.else268, %if.end267
  br label %if.end270

if.end270:                                        ; preds = %if.end269, %if.end225
  %205 = load %struct.re_registers*, %struct.re_registers** %regs.addr, align 8
  %num_regs271 = getelementptr inbounds %struct.re_registers, %struct.re_registers* %205, i32 0, i32 0
  %206 = load i32, i32* %num_regs271, align 8
  %cmp272 = icmp ugt i32 %206, 0
  br i1 %cmp272, label %if.then274, label %if.end291

if.then274:                                       ; preds = %if.end270
  %207 = load i32, i32* %pos.addr, align 4
  %208 = load %struct.re_registers*, %struct.re_registers** %regs.addr, align 8
  %start275 = getelementptr inbounds %struct.re_registers, %struct.re_registers* %208, i32 0, i32 1
  %209 = load i32*, i32** %start275, align 8
  %arrayidx276 = getelementptr inbounds i32, i32* %209, i64 0
  store i32 %207, i32* %arrayidx276, align 4
  %210 = load i8*, i8** %dend, align 8
  %211 = load i8*, i8** %end_match_1, align 8
  %cmp277 = icmp eq i8* %210, %211
  br i1 %cmp277, label %cond.true279, label %cond.false280

cond.true279:                                     ; preds = %if.then274
  %212 = load i8*, i8** %d, align 8
  %213 = load i8*, i8** %string1.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %212 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %213 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  br label %cond.end286

cond.false280:                                    ; preds = %if.then274
  %214 = load i8*, i8** %d, align 8
  %215 = load i8*, i8** %string2.addr, align 8
  %sub.ptr.lhs.cast281 = ptrtoint i8* %214 to i64
  %sub.ptr.rhs.cast282 = ptrtoint i8* %215 to i64
  %sub.ptr.sub283 = sub i64 %sub.ptr.lhs.cast281, %sub.ptr.rhs.cast282
  %216 = load i32, i32* %size1.addr, align 4
  %conv284 = sext i32 %216 to i64
  %add285 = add nsw i64 %sub.ptr.sub283, %conv284
  br label %cond.end286

cond.end286:                                      ; preds = %cond.false280, %cond.true279
  %cond287 = phi i64 [ %sub.ptr.sub, %cond.true279 ], [ %add285, %cond.false280 ]
  %conv288 = trunc i64 %cond287 to i32
  %217 = load %struct.re_registers*, %struct.re_registers** %regs.addr, align 8
  %end289 = getelementptr inbounds %struct.re_registers, %struct.re_registers* %217, i32 0, i32 2
  %218 = load i32*, i32** %end289, align 8
  %arrayidx290 = getelementptr inbounds i32, i32* %218, i64 0
  store i32 %conv288, i32* %arrayidx290, align 4
  br label %if.end291

if.end291:                                        ; preds = %cond.end286, %if.end270
  store i32 1, i32* %mcnt, align 4
  br label %for.cond292

for.cond292:                                      ; preds = %for.inc388, %if.end291
  %219 = load i32, i32* %mcnt, align 4
  %220 = load i32, i32* %num_regs, align 4
  %221 = load %struct.re_registers*, %struct.re_registers** %regs.addr, align 8
  %num_regs293 = getelementptr inbounds %struct.re_registers, %struct.re_registers* %221, i32 0, i32 0
  %222 = load i32, i32* %num_regs293, align 8
  %cmp294 = icmp ult i32 %220, %222
  br i1 %cmp294, label %cond.true296, label %cond.false297

cond.true296:                                     ; preds = %for.cond292
  %223 = load i32, i32* %num_regs, align 4
  br label %cond.end299

cond.false297:                                    ; preds = %for.cond292
  %224 = load %struct.re_registers*, %struct.re_registers** %regs.addr, align 8
  %num_regs298 = getelementptr inbounds %struct.re_registers, %struct.re_registers* %224, i32 0, i32 0
  %225 = load i32, i32* %num_regs298, align 8
  br label %cond.end299

cond.end299:                                      ; preds = %cond.false297, %cond.true296
  %cond300 = phi i32 [ %223, %cond.true296 ], [ %225, %cond.false297 ]
  %cmp301 = icmp ult i32 %219, %cond300
  br i1 %cmp301, label %for.body303, label %for.end390

for.body303:                                      ; preds = %cond.end299
  %226 = load i8**, i8*** %regstart, align 8
  %227 = load i32, i32* %mcnt, align 4
  %idxprom304 = sext i32 %227 to i64
  %arrayidx305 = getelementptr inbounds i8*, i8** %226, i64 %idxprom304
  %228 = load i8*, i8** %arrayidx305, align 8
  %cmp306 = icmp eq i8* %228, inttoptr (i64 -1 to i8*)
  br i1 %cmp306, label %if.then313, label %lor.lhs.false308

lor.lhs.false308:                                 ; preds = %for.body303
  %229 = load i8**, i8*** %regend, align 8
  %230 = load i32, i32* %mcnt, align 4
  %idxprom309 = sext i32 %230 to i64
  %arrayidx310 = getelementptr inbounds i8*, i8** %229, i64 %idxprom309
  %231 = load i8*, i8** %arrayidx310, align 8
  %cmp311 = icmp eq i8* %231, inttoptr (i64 -1 to i8*)
  br i1 %cmp311, label %if.then313, label %if.else320

if.then313:                                       ; preds = %lor.lhs.false308, %for.body303
  %232 = load %struct.re_registers*, %struct.re_registers** %regs.addr, align 8
  %end314 = getelementptr inbounds %struct.re_registers, %struct.re_registers* %232, i32 0, i32 2
  %233 = load i32*, i32** %end314, align 8
  %234 = load i32, i32* %mcnt, align 4
  %idxprom315 = sext i32 %234 to i64
  %arrayidx316 = getelementptr inbounds i32, i32* %233, i64 %idxprom315
  store i32 -1, i32* %arrayidx316, align 4
  %235 = load %struct.re_registers*, %struct.re_registers** %regs.addr, align 8
  %start317 = getelementptr inbounds %struct.re_registers, %struct.re_registers* %235, i32 0, i32 1
  %236 = load i32*, i32** %start317, align 8
  %237 = load i32, i32* %mcnt, align 4
  %idxprom318 = sext i32 %237 to i64
  %arrayidx319 = getelementptr inbounds i32, i32* %236, i64 %idxprom318
  store i32 -1, i32* %arrayidx319, align 4
  br label %if.end387

if.else320:                                       ; preds = %lor.lhs.false308
  %238 = load i32, i32* %size1.addr, align 4
  %tobool321 = icmp ne i32 %238, 0
  br i1 %tobool321, label %land.lhs.true322, label %cond.false340

land.lhs.true322:                                 ; preds = %if.else320
  %239 = load i8*, i8** %string1.addr, align 8
  %240 = load i8**, i8*** %regstart, align 8
  %241 = load i32, i32* %mcnt, align 4
  %idxprom323 = sext i32 %241 to i64
  %arrayidx324 = getelementptr inbounds i8*, i8** %240, i64 %idxprom323
  %242 = load i8*, i8** %arrayidx324, align 8
  %cmp325 = icmp ule i8* %239, %242
  br i1 %cmp325, label %land.lhs.true327, label %cond.false340

land.lhs.true327:                                 ; preds = %land.lhs.true322
  %243 = load i8**, i8*** %regstart, align 8
  %244 = load i32, i32* %mcnt, align 4
  %idxprom328 = sext i32 %244 to i64
  %arrayidx329 = getelementptr inbounds i8*, i8** %243, i64 %idxprom328
  %245 = load i8*, i8** %arrayidx329, align 8
  %246 = load i8*, i8** %string1.addr, align 8
  %247 = load i32, i32* %size1.addr, align 4
  %idx.ext330 = sext i32 %247 to i64
  %add.ptr331 = getelementptr inbounds i8, i8* %246, i64 %idx.ext330
  %cmp332 = icmp ule i8* %245, %add.ptr331
  br i1 %cmp332, label %cond.true334, label %cond.false340

cond.true334:                                     ; preds = %land.lhs.true327
  %248 = load i8**, i8*** %regstart, align 8
  %249 = load i32, i32* %mcnt, align 4
  %idxprom335 = sext i32 %249 to i64
  %arrayidx336 = getelementptr inbounds i8*, i8** %248, i64 %idxprom335
  %250 = load i8*, i8** %arrayidx336, align 8
  %251 = load i8*, i8** %string1.addr, align 8
  %sub.ptr.lhs.cast337 = ptrtoint i8* %250 to i64
  %sub.ptr.rhs.cast338 = ptrtoint i8* %251 to i64
  %sub.ptr.sub339 = sub i64 %sub.ptr.lhs.cast337, %sub.ptr.rhs.cast338
  br label %cond.end348

cond.false340:                                    ; preds = %land.lhs.true327, %land.lhs.true322, %if.else320
  %252 = load i8**, i8*** %regstart, align 8
  %253 = load i32, i32* %mcnt, align 4
  %idxprom341 = sext i32 %253 to i64
  %arrayidx342 = getelementptr inbounds i8*, i8** %252, i64 %idxprom341
  %254 = load i8*, i8** %arrayidx342, align 8
  %255 = load i8*, i8** %string2.addr, align 8
  %sub.ptr.lhs.cast343 = ptrtoint i8* %254 to i64
  %sub.ptr.rhs.cast344 = ptrtoint i8* %255 to i64
  %sub.ptr.sub345 = sub i64 %sub.ptr.lhs.cast343, %sub.ptr.rhs.cast344
  %256 = load i32, i32* %size1.addr, align 4
  %conv346 = sext i32 %256 to i64
  %add347 = add nsw i64 %sub.ptr.sub345, %conv346
  br label %cond.end348

cond.end348:                                      ; preds = %cond.false340, %cond.true334
  %cond349 = phi i64 [ %sub.ptr.sub339, %cond.true334 ], [ %add347, %cond.false340 ]
  %conv350 = trunc i64 %cond349 to i32
  %257 = load %struct.re_registers*, %struct.re_registers** %regs.addr, align 8
  %start351 = getelementptr inbounds %struct.re_registers, %struct.re_registers* %257, i32 0, i32 1
  %258 = load i32*, i32** %start351, align 8
  %259 = load i32, i32* %mcnt, align 4
  %idxprom352 = sext i32 %259 to i64
  %arrayidx353 = getelementptr inbounds i32, i32* %258, i64 %idxprom352
  store i32 %conv350, i32* %arrayidx353, align 4
  %260 = load i32, i32* %size1.addr, align 4
  %tobool354 = icmp ne i32 %260, 0
  br i1 %tobool354, label %land.lhs.true355, label %cond.false373

land.lhs.true355:                                 ; preds = %cond.end348
  %261 = load i8*, i8** %string1.addr, align 8
  %262 = load i8**, i8*** %regend, align 8
  %263 = load i32, i32* %mcnt, align 4
  %idxprom356 = sext i32 %263 to i64
  %arrayidx357 = getelementptr inbounds i8*, i8** %262, i64 %idxprom356
  %264 = load i8*, i8** %arrayidx357, align 8
  %cmp358 = icmp ule i8* %261, %264
  br i1 %cmp358, label %land.lhs.true360, label %cond.false373

land.lhs.true360:                                 ; preds = %land.lhs.true355
  %265 = load i8**, i8*** %regend, align 8
  %266 = load i32, i32* %mcnt, align 4
  %idxprom361 = sext i32 %266 to i64
  %arrayidx362 = getelementptr inbounds i8*, i8** %265, i64 %idxprom361
  %267 = load i8*, i8** %arrayidx362, align 8
  %268 = load i8*, i8** %string1.addr, align 8
  %269 = load i32, i32* %size1.addr, align 4
  %idx.ext363 = sext i32 %269 to i64
  %add.ptr364 = getelementptr inbounds i8, i8* %268, i64 %idx.ext363
  %cmp365 = icmp ule i8* %267, %add.ptr364
  br i1 %cmp365, label %cond.true367, label %cond.false373

cond.true367:                                     ; preds = %land.lhs.true360
  %270 = load i8**, i8*** %regend, align 8
  %271 = load i32, i32* %mcnt, align 4
  %idxprom368 = sext i32 %271 to i64
  %arrayidx369 = getelementptr inbounds i8*, i8** %270, i64 %idxprom368
  %272 = load i8*, i8** %arrayidx369, align 8
  %273 = load i8*, i8** %string1.addr, align 8
  %sub.ptr.lhs.cast370 = ptrtoint i8* %272 to i64
  %sub.ptr.rhs.cast371 = ptrtoint i8* %273 to i64
  %sub.ptr.sub372 = sub i64 %sub.ptr.lhs.cast370, %sub.ptr.rhs.cast371
  br label %cond.end381

cond.false373:                                    ; preds = %land.lhs.true360, %land.lhs.true355, %cond.end348
  %274 = load i8**, i8*** %regend, align 8
  %275 = load i32, i32* %mcnt, align 4
  %idxprom374 = sext i32 %275 to i64
  %arrayidx375 = getelementptr inbounds i8*, i8** %274, i64 %idxprom374
  %276 = load i8*, i8** %arrayidx375, align 8
  %277 = load i8*, i8** %string2.addr, align 8
  %sub.ptr.lhs.cast376 = ptrtoint i8* %276 to i64
  %sub.ptr.rhs.cast377 = ptrtoint i8* %277 to i64
  %sub.ptr.sub378 = sub i64 %sub.ptr.lhs.cast376, %sub.ptr.rhs.cast377
  %278 = load i32, i32* %size1.addr, align 4
  %conv379 = sext i32 %278 to i64
  %add380 = add nsw i64 %sub.ptr.sub378, %conv379
  br label %cond.end381

cond.end381:                                      ; preds = %cond.false373, %cond.true367
  %cond382 = phi i64 [ %sub.ptr.sub372, %cond.true367 ], [ %add380, %cond.false373 ]
  %conv383 = trunc i64 %cond382 to i32
  %279 = load %struct.re_registers*, %struct.re_registers** %regs.addr, align 8
  %end384 = getelementptr inbounds %struct.re_registers, %struct.re_registers* %279, i32 0, i32 2
  %280 = load i32*, i32** %end384, align 8
  %281 = load i32, i32* %mcnt, align 4
  %idxprom385 = sext i32 %281 to i64
  %arrayidx386 = getelementptr inbounds i32, i32* %280, i64 %idxprom385
  store i32 %conv383, i32* %arrayidx386, align 4
  br label %if.end387

if.end387:                                        ; preds = %cond.end381, %if.then313
  br label %for.inc388

for.inc388:                                       ; preds = %if.end387
  %282 = load i32, i32* %mcnt, align 4
  %inc389 = add nsw i32 %282, 1
  store i32 %inc389, i32* %mcnt, align 4
  br label %for.cond292, !llvm.loop !25

for.end390:                                       ; preds = %cond.end299
  %283 = load i32, i32* %num_regs, align 4
  store i32 %283, i32* %mcnt, align 4
  br label %for.cond391

for.cond391:                                      ; preds = %for.inc402, %for.end390
  %284 = load i32, i32* %mcnt, align 4
  %285 = load %struct.re_registers*, %struct.re_registers** %regs.addr, align 8
  %num_regs392 = getelementptr inbounds %struct.re_registers, %struct.re_registers* %285, i32 0, i32 0
  %286 = load i32, i32* %num_regs392, align 8
  %cmp393 = icmp ult i32 %284, %286
  br i1 %cmp393, label %for.body395, label %for.end404

for.body395:                                      ; preds = %for.cond391
  %287 = load %struct.re_registers*, %struct.re_registers** %regs.addr, align 8
  %end396 = getelementptr inbounds %struct.re_registers, %struct.re_registers* %287, i32 0, i32 2
  %288 = load i32*, i32** %end396, align 8
  %289 = load i32, i32* %mcnt, align 4
  %idxprom397 = sext i32 %289 to i64
  %arrayidx398 = getelementptr inbounds i32, i32* %288, i64 %idxprom397
  store i32 -1, i32* %arrayidx398, align 4
  %290 = load %struct.re_registers*, %struct.re_registers** %regs.addr, align 8
  %start399 = getelementptr inbounds %struct.re_registers, %struct.re_registers* %290, i32 0, i32 1
  %291 = load i32*, i32** %start399, align 8
  %292 = load i32, i32* %mcnt, align 4
  %idxprom400 = sext i32 %292 to i64
  %arrayidx401 = getelementptr inbounds i32, i32* %291, i64 %idxprom400
  store i32 -1, i32* %arrayidx401, align 4
  br label %for.inc402

for.inc402:                                       ; preds = %for.body395
  %293 = load i32, i32* %mcnt, align 4
  %inc403 = add nsw i32 %293, 1
  store i32 %inc403, i32* %mcnt, align 4
  br label %for.cond391, !llvm.loop !26

for.end404:                                       ; preds = %for.cond391
  br label %if.end405

if.end405:                                        ; preds = %for.end404, %land.lhs.true189, %if.end187
  %294 = alloca i8, i64 0, align 16
  %295 = load i8*, i8** %d, align 8
  %296 = load i32, i32* %pos.addr, align 4
  %idx.ext406 = sext i32 %296 to i64
  %idx.neg407 = sub i64 0, %idx.ext406
  %add.ptr408 = getelementptr inbounds i8, i8* %295, i64 %idx.neg407
  %297 = load i8*, i8** %dend, align 8
  %298 = load i8*, i8** %end_match_1, align 8
  %cmp409 = icmp eq i8* %297, %298
  br i1 %cmp409, label %cond.true411, label %cond.false412

cond.true411:                                     ; preds = %if.end405
  %299 = load i8*, i8** %string1.addr, align 8
  br label %cond.end416

cond.false412:                                    ; preds = %if.end405
  %300 = load i8*, i8** %string2.addr, align 8
  %301 = load i32, i32* %size1.addr, align 4
  %idx.ext413 = sext i32 %301 to i64
  %idx.neg414 = sub i64 0, %idx.ext413
  %add.ptr415 = getelementptr inbounds i8, i8* %300, i64 %idx.neg414
  br label %cond.end416

cond.end416:                                      ; preds = %cond.false412, %cond.true411
  %cond417 = phi i8* [ %299, %cond.true411 ], [ %add.ptr415, %cond.false412 ]
  %sub.ptr.lhs.cast418 = ptrtoint i8* %add.ptr408 to i64
  %sub.ptr.rhs.cast419 = ptrtoint i8* %cond417 to i64
  %sub.ptr.sub420 = sub i64 %sub.ptr.lhs.cast418, %sub.ptr.rhs.cast419
  %conv421 = trunc i64 %sub.ptr.sub420 to i32
  store i32 %conv421, i32* %mcnt, align 4
  %302 = load i32, i32* %mcnt, align 4
  store i32 %302, i32* %retval, align 4
  br label %return

if.end422:                                        ; preds = %for.cond109
  %303 = load i8*, i8** %p, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %303, i32 1
  store i8* %incdec.ptr, i8** %p, align 8
  %304 = load i8, i8* %303, align 1
  %conv423 = zext i8 %304 to i32
  switch i32 %conv423, label %sw.default2313 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb424
    i32 2, label %sw.bb494
    i32 3, label %sw.bb559
    i32 4, label %sw.bb559
    i32 5, label %sw.bb633
    i32 6, label %sw.bb697
    i32 7, label %sw.bb983
    i32 8, label %sw.bb1099
    i32 9, label %sw.bb1130
    i32 10, label %sw.bb1161
    i32 11, label %sw.bb1173
    i32 15, label %sw.bb1178
    i32 14, label %sw.bb1292
    i32 17, label %sw.bb1437
    i32 16, label %sw.bb1568
    i32 12, label %sw.bb1623
    i32 13, label %sw.bb1639
    i32 18, label %sw.bb1640
    i32 19, label %sw.bb1739
    i32 20, label %sw.bb1838
    i32 21, label %sw.bb1875
    i32 22, label %sw.bb1904
    i32 27, label %sw.bb1942
    i32 28, label %sw.bb2007
    i32 25, label %sw.bb2072
    i32 26, label %sw.bb2133
    i32 23, label %sw.bb2197
    i32 24, label %sw.bb2255
  ]

sw.bb:                                            ; preds = %if.end422
  br label %sw.epilog2314

sw.bb424:                                         ; preds = %if.end422
  %305 = load i8*, i8** %p, align 8
  %incdec.ptr425 = getelementptr inbounds i8, i8* %305, i32 1
  store i8* %incdec.ptr425, i8** %p, align 8
  %306 = load i8, i8* %305, align 1
  %conv426 = zext i8 %306 to i32
  store i32 %conv426, i32* %mcnt, align 4
  %307 = load i8*, i8** %translate, align 8
  %tobool427 = icmp ne i8* %307, null
  br i1 %tobool427, label %if.then428, label %if.else448

if.then428:                                       ; preds = %sw.bb424
  br label %do.body429

do.body429:                                       ; preds = %do.cond, %if.then428
  br label %while.cond

while.cond:                                       ; preds = %if.end435, %do.body429
  %308 = load i8*, i8** %d, align 8
  %309 = load i8*, i8** %dend, align 8
  %cmp430 = icmp eq i8* %308, %309
  br i1 %cmp430, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %310 = load i8*, i8** %dend, align 8
  %311 = load i8*, i8** %end_match_2, align 8
  %cmp432 = icmp eq i8* %310, %311
  br i1 %cmp432, label %if.then434, label %if.end435

if.then434:                                       ; preds = %while.body
  br label %fail

if.end435:                                        ; preds = %while.body
  %312 = load i8*, i8** %string2.addr, align 8
  store i8* %312, i8** %d, align 8
  %313 = load i8*, i8** %end_match_2, align 8
  store i8* %313, i8** %dend, align 8
  br label %while.cond, !llvm.loop !27

while.end:                                        ; preds = %while.cond
  %314 = load i8*, i8** %translate, align 8
  %315 = load i8*, i8** %d, align 8
  %incdec.ptr436 = getelementptr inbounds i8, i8* %315, i32 1
  store i8* %incdec.ptr436, i8** %d, align 8
  %316 = load i8, i8* %315, align 1
  %idxprom437 = zext i8 %316 to i64
  %arrayidx438 = getelementptr inbounds i8, i8* %314, i64 %idxprom437
  %317 = load i8, i8* %arrayidx438, align 1
  %conv439 = sext i8 %317 to i32
  %318 = load i8*, i8** %p, align 8
  %incdec.ptr440 = getelementptr inbounds i8, i8* %318, i32 1
  store i8* %incdec.ptr440, i8** %p, align 8
  %319 = load i8, i8* %318, align 1
  %conv441 = sext i8 %319 to i32
  %cmp442 = icmp ne i32 %conv439, %conv441
  br i1 %cmp442, label %if.then444, label %if.end445

if.then444:                                       ; preds = %while.end
  br label %fail

if.end445:                                        ; preds = %while.end
  br label %do.cond

do.cond:                                          ; preds = %if.end445
  %320 = load i32, i32* %mcnt, align 4
  %dec = add nsw i32 %320, -1
  store i32 %dec, i32* %mcnt, align 4
  %tobool446 = icmp ne i32 %dec, 0
  br i1 %tobool446, label %do.body429, label %do.end447, !llvm.loop !28

do.end447:                                        ; preds = %do.cond
  br label %if.end471

if.else448:                                       ; preds = %sw.bb424
  br label %do.body449

do.body449:                                       ; preds = %do.cond467, %if.else448
  br label %while.cond450

while.cond450:                                    ; preds = %if.end457, %do.body449
  %321 = load i8*, i8** %d, align 8
  %322 = load i8*, i8** %dend, align 8
  %cmp451 = icmp eq i8* %321, %322
  br i1 %cmp451, label %while.body453, label %while.end458

while.body453:                                    ; preds = %while.cond450
  %323 = load i8*, i8** %dend, align 8
  %324 = load i8*, i8** %end_match_2, align 8
  %cmp454 = icmp eq i8* %323, %324
  br i1 %cmp454, label %if.then456, label %if.end457

if.then456:                                       ; preds = %while.body453
  br label %fail

if.end457:                                        ; preds = %while.body453
  %325 = load i8*, i8** %string2.addr, align 8
  store i8* %325, i8** %d, align 8
  %326 = load i8*, i8** %end_match_2, align 8
  store i8* %326, i8** %dend, align 8
  br label %while.cond450, !llvm.loop !29

while.end458:                                     ; preds = %while.cond450
  %327 = load i8*, i8** %d, align 8
  %incdec.ptr459 = getelementptr inbounds i8, i8* %327, i32 1
  store i8* %incdec.ptr459, i8** %d, align 8
  %328 = load i8, i8* %327, align 1
  %conv460 = sext i8 %328 to i32
  %329 = load i8*, i8** %p, align 8
  %incdec.ptr461 = getelementptr inbounds i8, i8* %329, i32 1
  store i8* %incdec.ptr461, i8** %p, align 8
  %330 = load i8, i8* %329, align 1
  %conv462 = sext i8 %330 to i32
  %cmp463 = icmp ne i32 %conv460, %conv462
  br i1 %cmp463, label %if.then465, label %if.end466

if.then465:                                       ; preds = %while.end458
  br label %fail

if.end466:                                        ; preds = %while.end458
  br label %do.cond467

do.cond467:                                       ; preds = %if.end466
  %331 = load i32, i32* %mcnt, align 4
  %dec468 = add nsw i32 %331, -1
  store i32 %dec468, i32* %mcnt, align 4
  %tobool469 = icmp ne i32 %dec468, 0
  br i1 %tobool469, label %do.body449, label %do.end470, !llvm.loop !30

do.end470:                                        ; preds = %do.cond467
  br label %if.end471

if.end471:                                        ; preds = %do.end470, %do.end447
  br label %do.body472

do.body472:                                       ; preds = %if.end471
  %332 = load i32, i32* %lowest_active_reg, align 4
  store i32 %332, i32* %r, align 4
  br label %for.cond473

for.cond473:                                      ; preds = %for.inc489, %do.body472
  %333 = load i32, i32* %r, align 4
  %334 = load i32, i32* %highest_active_reg, align 4
  %cmp474 = icmp ule i32 %333, %334
  br i1 %cmp474, label %for.body476, label %for.end491

for.body476:                                      ; preds = %for.cond473
  %335 = load %union.register_info_type*, %union.register_info_type** %reg_info, align 8
  %336 = load i32, i32* %r, align 4
  %idxprom477 = zext i32 %336 to i64
  %arrayidx478 = getelementptr inbounds %union.register_info_type, %union.register_info_type* %335, i64 %idxprom477
  %bits479 = bitcast %union.register_info_type* %arrayidx478 to %struct.anon*
  %337 = bitcast %struct.anon* %bits479 to i8*
  %bf.load480 = load i8, i8* %337, align 8
  %bf.clear481 = and i8 %bf.load480, -17
  %bf.set482 = or i8 %bf.clear481, 16
  store i8 %bf.set482, i8* %337, align 8
  %338 = load %union.register_info_type*, %union.register_info_type** %reg_info, align 8
  %339 = load i32, i32* %r, align 4
  %idxprom483 = zext i32 %339 to i64
  %arrayidx484 = getelementptr inbounds %union.register_info_type, %union.register_info_type* %338, i64 %idxprom483
  %bits485 = bitcast %union.register_info_type* %arrayidx484 to %struct.anon*
  %340 = bitcast %struct.anon* %bits485 to i8*
  %bf.load486 = load i8, i8* %340, align 8
  %bf.clear487 = and i8 %bf.load486, -9
  %bf.set488 = or i8 %bf.clear487, 8
  store i8 %bf.set488, i8* %340, align 8
  br label %for.inc489

for.inc489:                                       ; preds = %for.body476
  %341 = load i32, i32* %r, align 4
  %inc490 = add i32 %341, 1
  store i32 %inc490, i32* %r, align 4
  br label %for.cond473, !llvm.loop !31

for.end491:                                       ; preds = %for.cond473
  br label %do.end493

do.end493:                                        ; preds = %for.end491
  br label %sw.epilog2314

sw.bb494:                                         ; preds = %if.end422
  br label %while.cond495

while.cond495:                                    ; preds = %if.end502, %sw.bb494
  %342 = load i8*, i8** %d, align 8
  %343 = load i8*, i8** %dend, align 8
  %cmp496 = icmp eq i8* %342, %343
  br i1 %cmp496, label %while.body498, label %while.end503

while.body498:                                    ; preds = %while.cond495
  %344 = load i8*, i8** %dend, align 8
  %345 = load i8*, i8** %end_match_2, align 8
  %cmp499 = icmp eq i8* %344, %345
  br i1 %cmp499, label %if.then501, label %if.end502

if.then501:                                       ; preds = %while.body498
  br label %fail

if.end502:                                        ; preds = %while.body498
  %346 = load i8*, i8** %string2.addr, align 8
  store i8* %346, i8** %d, align 8
  %347 = load i8*, i8** %end_match_2, align 8
  store i8* %347, i8** %dend, align 8
  br label %while.cond495, !llvm.loop !32

while.end503:                                     ; preds = %while.cond495
  %348 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %syntax = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %348, i32 0, i32 3
  %349 = load i32, i32* %syntax, align 8
  %and = and i32 %349, 64
  %tobool504 = icmp ne i32 %and, 0
  br i1 %tobool504, label %lor.lhs.false517, label %land.lhs.true505

land.lhs.true505:                                 ; preds = %while.end503
  %350 = load i8*, i8** %translate, align 8
  %tobool506 = icmp ne i8* %350, null
  br i1 %tobool506, label %cond.true507, label %cond.false511

cond.true507:                                     ; preds = %land.lhs.true505
  %351 = load i8*, i8** %translate, align 8
  %352 = load i8*, i8** %d, align 8
  %353 = load i8, i8* %352, align 1
  %idxprom508 = zext i8 %353 to i64
  %arrayidx509 = getelementptr inbounds i8, i8* %351, i64 %idxprom508
  %354 = load i8, i8* %arrayidx509, align 1
  %conv510 = sext i8 %354 to i32
  br label %cond.end513

cond.false511:                                    ; preds = %land.lhs.true505
  %355 = load i8*, i8** %d, align 8
  %356 = load i8, i8* %355, align 1
  %conv512 = sext i8 %356 to i32
  br label %cond.end513

cond.end513:                                      ; preds = %cond.false511, %cond.true507
  %cond514 = phi i32 [ %conv510, %cond.true507 ], [ %conv512, %cond.false511 ]
  %cmp515 = icmp eq i32 %cond514, 10
  br i1 %cmp515, label %if.then533, label %lor.lhs.false517

lor.lhs.false517:                                 ; preds = %cond.end513, %while.end503
  %357 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %syntax518 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %357, i32 0, i32 3
  %358 = load i32, i32* %syntax518, align 8
  %and519 = and i32 %358, 128
  %tobool520 = icmp ne i32 %and519, 0
  br i1 %tobool520, label %land.lhs.true521, label %if.end534

land.lhs.true521:                                 ; preds = %lor.lhs.false517
  %359 = load i8*, i8** %translate, align 8
  %tobool522 = icmp ne i8* %359, null
  br i1 %tobool522, label %cond.true523, label %cond.false527

cond.true523:                                     ; preds = %land.lhs.true521
  %360 = load i8*, i8** %translate, align 8
  %361 = load i8*, i8** %d, align 8
  %362 = load i8, i8* %361, align 1
  %idxprom524 = zext i8 %362 to i64
  %arrayidx525 = getelementptr inbounds i8, i8* %360, i64 %idxprom524
  %363 = load i8, i8* %arrayidx525, align 1
  %conv526 = sext i8 %363 to i32
  br label %cond.end529

cond.false527:                                    ; preds = %land.lhs.true521
  %364 = load i8*, i8** %d, align 8
  %365 = load i8, i8* %364, align 1
  %conv528 = sext i8 %365 to i32
  br label %cond.end529

cond.end529:                                      ; preds = %cond.false527, %cond.true523
  %cond530 = phi i32 [ %conv526, %cond.true523 ], [ %conv528, %cond.false527 ]
  %cmp531 = icmp eq i32 %cond530, 0
  br i1 %cmp531, label %if.then533, label %if.end534

if.then533:                                       ; preds = %cond.end529, %cond.end513
  br label %fail

if.end534:                                        ; preds = %cond.end529, %lor.lhs.false517
  br label %do.body535

do.body535:                                       ; preds = %if.end534
  %366 = load i32, i32* %lowest_active_reg, align 4
  store i32 %366, i32* %r536, align 4
  br label %for.cond537

for.cond537:                                      ; preds = %for.inc553, %do.body535
  %367 = load i32, i32* %r536, align 4
  %368 = load i32, i32* %highest_active_reg, align 4
  %cmp538 = icmp ule i32 %367, %368
  br i1 %cmp538, label %for.body540, label %for.end555

for.body540:                                      ; preds = %for.cond537
  %369 = load %union.register_info_type*, %union.register_info_type** %reg_info, align 8
  %370 = load i32, i32* %r536, align 4
  %idxprom541 = zext i32 %370 to i64
  %arrayidx542 = getelementptr inbounds %union.register_info_type, %union.register_info_type* %369, i64 %idxprom541
  %bits543 = bitcast %union.register_info_type* %arrayidx542 to %struct.anon*
  %371 = bitcast %struct.anon* %bits543 to i8*
  %bf.load544 = load i8, i8* %371, align 8
  %bf.clear545 = and i8 %bf.load544, -17
  %bf.set546 = or i8 %bf.clear545, 16
  store i8 %bf.set546, i8* %371, align 8
  %372 = load %union.register_info_type*, %union.register_info_type** %reg_info, align 8
  %373 = load i32, i32* %r536, align 4
  %idxprom547 = zext i32 %373 to i64
  %arrayidx548 = getelementptr inbounds %union.register_info_type, %union.register_info_type* %372, i64 %idxprom547
  %bits549 = bitcast %union.register_info_type* %arrayidx548 to %struct.anon*
  %374 = bitcast %struct.anon* %bits549 to i8*
  %bf.load550 = load i8, i8* %374, align 8
  %bf.clear551 = and i8 %bf.load550, -9
  %bf.set552 = or i8 %bf.clear551, 8
  store i8 %bf.set552, i8* %374, align 8
  br label %for.inc553

for.inc553:                                       ; preds = %for.body540
  %375 = load i32, i32* %r536, align 4
  %inc554 = add i32 %375, 1
  store i32 %inc554, i32* %r536, align 4
  br label %for.cond537, !llvm.loop !33

for.end555:                                       ; preds = %for.cond537
  br label %do.end557

do.end557:                                        ; preds = %for.end555
  %376 = load i8*, i8** %d, align 8
  %incdec.ptr558 = getelementptr inbounds i8, i8* %376, i32 1
  store i8* %incdec.ptr558, i8** %d, align 8
  br label %sw.epilog2314

sw.bb559:                                         ; preds = %if.end422, %if.end422
  %377 = load i8*, i8** %p, align 8
  %add.ptr560 = getelementptr inbounds i8, i8* %377, i64 -1
  %378 = load i8, i8* %add.ptr560, align 1
  %conv561 = zext i8 %378 to i32
  %cmp562 = icmp eq i32 %conv561, 4
  %conv563 = zext i1 %cmp562 to i32
  %conv564 = trunc i32 %conv563 to i8
  store i8 %conv564, i8* %not, align 1
  br label %while.cond565

while.cond565:                                    ; preds = %if.end572, %sw.bb559
  %379 = load i8*, i8** %d, align 8
  %380 = load i8*, i8** %dend, align 8
  %cmp566 = icmp eq i8* %379, %380
  br i1 %cmp566, label %while.body568, label %while.end573

while.body568:                                    ; preds = %while.cond565
  %381 = load i8*, i8** %dend, align 8
  %382 = load i8*, i8** %end_match_2, align 8
  %cmp569 = icmp eq i8* %381, %382
  br i1 %cmp569, label %if.then571, label %if.end572

if.then571:                                       ; preds = %while.body568
  br label %fail

if.end572:                                        ; preds = %while.body568
  %383 = load i8*, i8** %string2.addr, align 8
  store i8* %383, i8** %d, align 8
  %384 = load i8*, i8** %end_match_2, align 8
  store i8* %384, i8** %dend, align 8
  br label %while.cond565, !llvm.loop !34

while.end573:                                     ; preds = %while.cond565
  %385 = load i8*, i8** %translate, align 8
  %tobool574 = icmp ne i8* %385, null
  br i1 %tobool574, label %cond.true575, label %cond.false579

cond.true575:                                     ; preds = %while.end573
  %386 = load i8*, i8** %translate, align 8
  %387 = load i8*, i8** %d, align 8
  %388 = load i8, i8* %387, align 1
  %idxprom576 = zext i8 %388 to i64
  %arrayidx577 = getelementptr inbounds i8, i8* %386, i64 %idxprom576
  %389 = load i8, i8* %arrayidx577, align 1
  %conv578 = sext i8 %389 to i32
  br label %cond.end581

cond.false579:                                    ; preds = %while.end573
  %390 = load i8*, i8** %d, align 8
  %391 = load i8, i8* %390, align 1
  %conv580 = sext i8 %391 to i32
  br label %cond.end581

cond.end581:                                      ; preds = %cond.false579, %cond.true575
  %cond582 = phi i32 [ %conv578, %cond.true575 ], [ %conv580, %cond.false579 ]
  %conv583 = trunc i32 %cond582 to i8
  store i8 %conv583, i8* %c, align 1
  %392 = load i8, i8* %c, align 1
  %conv584 = zext i8 %392 to i32
  %393 = load i8*, i8** %p, align 8
  %394 = load i8, i8* %393, align 1
  %conv585 = zext i8 %394 to i32
  %mul586 = mul nsw i32 %conv585, 8
  %cmp587 = icmp ult i32 %conv584, %mul586
  br i1 %cmp587, label %land.lhs.true589, label %if.end601

land.lhs.true589:                                 ; preds = %cond.end581
  %395 = load i8*, i8** %p, align 8
  %396 = load i8, i8* %c, align 1
  %conv590 = zext i8 %396 to i32
  %div = sdiv i32 %conv590, 8
  %add591 = add nsw i32 1, %div
  %idxprom592 = sext i32 %add591 to i64
  %arrayidx593 = getelementptr inbounds i8, i8* %395, i64 %idxprom592
  %397 = load i8, i8* %arrayidx593, align 1
  %conv594 = zext i8 %397 to i32
  %398 = load i8, i8* %c, align 1
  %conv595 = zext i8 %398 to i32
  %rem = srem i32 %conv595, 8
  %shl = shl i32 1, %rem
  %and596 = and i32 %conv594, %shl
  %tobool597 = icmp ne i32 %and596, 0
  br i1 %tobool597, label %if.then598, label %if.end601

if.then598:                                       ; preds = %land.lhs.true589
  %399 = load i8, i8* %not, align 1
  %tobool599 = icmp ne i8 %399, 0
  %lnot = xor i1 %tobool599, true
  %lnot.ext = zext i1 %lnot to i32
  %conv600 = trunc i32 %lnot.ext to i8
  store i8 %conv600, i8* %not, align 1
  br label %if.end601

if.end601:                                        ; preds = %if.then598, %land.lhs.true589, %cond.end581
  %400 = load i8*, i8** %p, align 8
  %401 = load i8, i8* %400, align 1
  %conv602 = zext i8 %401 to i32
  %add603 = add nsw i32 1, %conv602
  %402 = load i8*, i8** %p, align 8
  %idx.ext604 = sext i32 %add603 to i64
  %add.ptr605 = getelementptr inbounds i8, i8* %402, i64 %idx.ext604
  store i8* %add.ptr605, i8** %p, align 8
  %403 = load i8, i8* %not, align 1
  %tobool606 = icmp ne i8 %403, 0
  br i1 %tobool606, label %if.end608, label %if.then607

if.then607:                                       ; preds = %if.end601
  br label %fail

if.end608:                                        ; preds = %if.end601
  br label %do.body609

do.body609:                                       ; preds = %if.end608
  %404 = load i32, i32* %lowest_active_reg, align 4
  store i32 %404, i32* %r610, align 4
  br label %for.cond611

for.cond611:                                      ; preds = %for.inc627, %do.body609
  %405 = load i32, i32* %r610, align 4
  %406 = load i32, i32* %highest_active_reg, align 4
  %cmp612 = icmp ule i32 %405, %406
  br i1 %cmp612, label %for.body614, label %for.end629

for.body614:                                      ; preds = %for.cond611
  %407 = load %union.register_info_type*, %union.register_info_type** %reg_info, align 8
  %408 = load i32, i32* %r610, align 4
  %idxprom615 = zext i32 %408 to i64
  %arrayidx616 = getelementptr inbounds %union.register_info_type, %union.register_info_type* %407, i64 %idxprom615
  %bits617 = bitcast %union.register_info_type* %arrayidx616 to %struct.anon*
  %409 = bitcast %struct.anon* %bits617 to i8*
  %bf.load618 = load i8, i8* %409, align 8
  %bf.clear619 = and i8 %bf.load618, -17
  %bf.set620 = or i8 %bf.clear619, 16
  store i8 %bf.set620, i8* %409, align 8
  %410 = load %union.register_info_type*, %union.register_info_type** %reg_info, align 8
  %411 = load i32, i32* %r610, align 4
  %idxprom621 = zext i32 %411 to i64
  %arrayidx622 = getelementptr inbounds %union.register_info_type, %union.register_info_type* %410, i64 %idxprom621
  %bits623 = bitcast %union.register_info_type* %arrayidx622 to %struct.anon*
  %412 = bitcast %struct.anon* %bits623 to i8*
  %bf.load624 = load i8, i8* %412, align 8
  %bf.clear625 = and i8 %bf.load624, -9
  %bf.set626 = or i8 %bf.clear625, 8
  store i8 %bf.set626, i8* %412, align 8
  br label %for.inc627

for.inc627:                                       ; preds = %for.body614
  %413 = load i32, i32* %r610, align 4
  %inc628 = add i32 %413, 1
  store i32 %inc628, i32* %r610, align 4
  br label %for.cond611, !llvm.loop !35

for.end629:                                       ; preds = %for.cond611
  br label %do.end631

do.end631:                                        ; preds = %for.end629
  %414 = load i8*, i8** %d, align 8
  %incdec.ptr632 = getelementptr inbounds i8, i8* %414, i32 1
  store i8* %incdec.ptr632, i8** %d, align 8
  br label %sw.epilog2314

sw.bb633:                                         ; preds = %if.end422
  %415 = load i8*, i8** %p, align 8
  store i8* %415, i8** %p1, align 8
  %416 = load %union.register_info_type*, %union.register_info_type** %reg_info, align 8
  %417 = load i8*, i8** %p, align 8
  %418 = load i8, i8* %417, align 1
  %idxprom634 = zext i8 %418 to i64
  %arrayidx635 = getelementptr inbounds %union.register_info_type, %union.register_info_type* %416, i64 %idxprom634
  %bits636 = bitcast %union.register_info_type* %arrayidx635 to %struct.anon*
  %419 = bitcast %struct.anon* %bits636 to i8*
  %bf.load637 = load i8, i8* %419, align 8
  %bf.clear638 = and i8 %bf.load637, 3
  %bf.cast639 = zext i8 %bf.clear638 to i32
  %cmp640 = icmp eq i32 %bf.cast639, 3
  br i1 %cmp640, label %if.then642, label %if.end651

if.then642:                                       ; preds = %sw.bb633
  %420 = load i8*, i8** %pend, align 8
  %421 = load %union.register_info_type*, %union.register_info_type** %reg_info, align 8
  %call643 = call signext i8 @group_match_null_string_p(i8** %p1, i8* %420, %union.register_info_type* %421)
  %conv644 = sext i8 %call643 to i32
  %422 = load %union.register_info_type*, %union.register_info_type** %reg_info, align 8
  %423 = load i8*, i8** %p, align 8
  %424 = load i8, i8* %423, align 1
  %idxprom645 = zext i8 %424 to i64
  %arrayidx646 = getelementptr inbounds %union.register_info_type, %union.register_info_type* %422, i64 %idxprom645
  %bits647 = bitcast %union.register_info_type* %arrayidx646 to %struct.anon*
  %425 = bitcast %struct.anon* %bits647 to i8*
  %426 = trunc i32 %conv644 to i8
  %bf.load648 = load i8, i8* %425, align 8
  %bf.value = and i8 %426, 3
  %bf.clear649 = and i8 %bf.load648, -4
  %bf.set650 = or i8 %bf.clear649, %bf.value
  store i8 %bf.set650, i8* %425, align 8
  %bf.result.cast = zext i8 %bf.value to i32
  br label %if.end651

if.end651:                                        ; preds = %if.then642, %sw.bb633
  %427 = load %union.register_info_type*, %union.register_info_type** %reg_info, align 8
  %428 = load i8*, i8** %p, align 8
  %429 = load i8, i8* %428, align 1
  %idxprom652 = zext i8 %429 to i64
  %arrayidx653 = getelementptr inbounds %union.register_info_type, %union.register_info_type* %427, i64 %idxprom652
  %bits654 = bitcast %union.register_info_type* %arrayidx653 to %struct.anon*
  %430 = bitcast %struct.anon* %bits654 to i8*
  %bf.load655 = load i8, i8* %430, align 8
  %bf.clear656 = and i8 %bf.load655, 3
  %bf.cast657 = zext i8 %bf.clear656 to i32
  %tobool658 = icmp ne i32 %bf.cast657, 0
  br i1 %tobool658, label %cond.true659, label %cond.false670

cond.true659:                                     ; preds = %if.end651
  %431 = load i8**, i8*** %regstart, align 8
  %432 = load i8*, i8** %p, align 8
  %433 = load i8, i8* %432, align 1
  %idxprom660 = zext i8 %433 to i64
  %arrayidx661 = getelementptr inbounds i8*, i8** %431, i64 %idxprom660
  %434 = load i8*, i8** %arrayidx661, align 8
  %cmp662 = icmp eq i8* %434, inttoptr (i64 -1 to i8*)
  br i1 %cmp662, label %cond.true664, label %cond.false665

cond.true664:                                     ; preds = %cond.true659
  %435 = load i8*, i8** %d, align 8
  br label %cond.end668

cond.false665:                                    ; preds = %cond.true659
  %436 = load i8**, i8*** %regstart, align 8
  %437 = load i8*, i8** %p, align 8
  %438 = load i8, i8* %437, align 1
  %idxprom666 = zext i8 %438 to i64
  %arrayidx667 = getelementptr inbounds i8*, i8** %436, i64 %idxprom666
  %439 = load i8*, i8** %arrayidx667, align 8
  br label %cond.end668

cond.end668:                                      ; preds = %cond.false665, %cond.true664
  %cond669 = phi i8* [ %435, %cond.true664 ], [ %439, %cond.false665 ]
  br label %cond.end673

cond.false670:                                    ; preds = %if.end651
  %440 = load i8**, i8*** %regstart, align 8
  %441 = load i8*, i8** %p, align 8
  %442 = load i8, i8* %441, align 1
  %idxprom671 = zext i8 %442 to i64
  %arrayidx672 = getelementptr inbounds i8*, i8** %440, i64 %idxprom671
  %443 = load i8*, i8** %arrayidx672, align 8
  br label %cond.end673

cond.end673:                                      ; preds = %cond.false670, %cond.end668
  %cond674 = phi i8* [ %cond669, %cond.end668 ], [ %443, %cond.false670 ]
  %444 = load i8**, i8*** %old_regstart, align 8
  %445 = load i8*, i8** %p, align 8
  %446 = load i8, i8* %445, align 1
  %idxprom675 = zext i8 %446 to i64
  %arrayidx676 = getelementptr inbounds i8*, i8** %444, i64 %idxprom675
  store i8* %cond674, i8** %arrayidx676, align 8
  %447 = load i8*, i8** %d, align 8
  %448 = load i8**, i8*** %regstart, align 8
  %449 = load i8*, i8** %p, align 8
  %450 = load i8, i8* %449, align 1
  %idxprom677 = zext i8 %450 to i64
  %arrayidx678 = getelementptr inbounds i8*, i8** %448, i64 %idxprom677
  store i8* %447, i8** %arrayidx678, align 8
  %451 = load %union.register_info_type*, %union.register_info_type** %reg_info, align 8
  %452 = load i8*, i8** %p, align 8
  %453 = load i8, i8* %452, align 1
  %idxprom679 = zext i8 %453 to i64
  %arrayidx680 = getelementptr inbounds %union.register_info_type, %union.register_info_type* %451, i64 %idxprom679
  %bits681 = bitcast %union.register_info_type* %arrayidx680 to %struct.anon*
  %454 = bitcast %struct.anon* %bits681 to i8*
  %bf.load682 = load i8, i8* %454, align 8
  %bf.clear683 = and i8 %bf.load682, -5
  %bf.set684 = or i8 %bf.clear683, 4
  store i8 %bf.set684, i8* %454, align 8
  %455 = load %union.register_info_type*, %union.register_info_type** %reg_info, align 8
  %456 = load i8*, i8** %p, align 8
  %457 = load i8, i8* %456, align 1
  %idxprom685 = zext i8 %457 to i64
  %arrayidx686 = getelementptr inbounds %union.register_info_type, %union.register_info_type* %455, i64 %idxprom685
  %bits687 = bitcast %union.register_info_type* %arrayidx686 to %struct.anon*
  %458 = bitcast %struct.anon* %bits687 to i8*
  %bf.load688 = load i8, i8* %458, align 8
  %bf.clear689 = and i8 %bf.load688, -9
  store i8 %bf.clear689, i8* %458, align 8
  %459 = load i8*, i8** %p, align 8
  %460 = load i8, i8* %459, align 1
  %conv690 = zext i8 %460 to i32
  store i32 %conv690, i32* %highest_active_reg, align 4
  %461 = load i32, i32* %lowest_active_reg, align 4
  %cmp691 = icmp eq i32 %461, 257
  br i1 %cmp691, label %if.then693, label %if.end695

if.then693:                                       ; preds = %cond.end673
  %462 = load i8*, i8** %p, align 8
  %463 = load i8, i8* %462, align 1
  %conv694 = zext i8 %463 to i32
  store i32 %conv694, i32* %lowest_active_reg, align 4
  br label %if.end695

if.end695:                                        ; preds = %if.then693, %cond.end673
  %464 = load i8*, i8** %p, align 8
  %add.ptr696 = getelementptr inbounds i8, i8* %464, i64 2
  store i8* %add.ptr696, i8** %p, align 8
  br label %sw.epilog2314

sw.bb697:                                         ; preds = %if.end422
  %465 = load %union.register_info_type*, %union.register_info_type** %reg_info, align 8
  %466 = load i8*, i8** %p, align 8
  %467 = load i8, i8* %466, align 1
  %idxprom698 = zext i8 %467 to i64
  %arrayidx699 = getelementptr inbounds %union.register_info_type, %union.register_info_type* %465, i64 %idxprom698
  %bits700 = bitcast %union.register_info_type* %arrayidx699 to %struct.anon*
  %468 = bitcast %struct.anon* %bits700 to i8*
  %bf.load701 = load i8, i8* %468, align 8
  %bf.clear702 = and i8 %bf.load701, 3
  %bf.cast703 = zext i8 %bf.clear702 to i32
  %tobool704 = icmp ne i32 %bf.cast703, 0
  br i1 %tobool704, label %cond.true705, label %cond.false716

cond.true705:                                     ; preds = %sw.bb697
  %469 = load i8**, i8*** %regend, align 8
  %470 = load i8*, i8** %p, align 8
  %471 = load i8, i8* %470, align 1
  %idxprom706 = zext i8 %471 to i64
  %arrayidx707 = getelementptr inbounds i8*, i8** %469, i64 %idxprom706
  %472 = load i8*, i8** %arrayidx707, align 8
  %cmp708 = icmp eq i8* %472, inttoptr (i64 -1 to i8*)
  br i1 %cmp708, label %cond.true710, label %cond.false711

cond.true710:                                     ; preds = %cond.true705
  %473 = load i8*, i8** %d, align 8
  br label %cond.end714

cond.false711:                                    ; preds = %cond.true705
  %474 = load i8**, i8*** %regend, align 8
  %475 = load i8*, i8** %p, align 8
  %476 = load i8, i8* %475, align 1
  %idxprom712 = zext i8 %476 to i64
  %arrayidx713 = getelementptr inbounds i8*, i8** %474, i64 %idxprom712
  %477 = load i8*, i8** %arrayidx713, align 8
  br label %cond.end714

cond.end714:                                      ; preds = %cond.false711, %cond.true710
  %cond715 = phi i8* [ %473, %cond.true710 ], [ %477, %cond.false711 ]
  br label %cond.end719

cond.false716:                                    ; preds = %sw.bb697
  %478 = load i8**, i8*** %regend, align 8
  %479 = load i8*, i8** %p, align 8
  %480 = load i8, i8* %479, align 1
  %idxprom717 = zext i8 %480 to i64
  %arrayidx718 = getelementptr inbounds i8*, i8** %478, i64 %idxprom717
  %481 = load i8*, i8** %arrayidx718, align 8
  br label %cond.end719

cond.end719:                                      ; preds = %cond.false716, %cond.end714
  %cond720 = phi i8* [ %cond715, %cond.end714 ], [ %481, %cond.false716 ]
  %482 = load i8**, i8*** %old_regend, align 8
  %483 = load i8*, i8** %p, align 8
  %484 = load i8, i8* %483, align 1
  %idxprom721 = zext i8 %484 to i64
  %arrayidx722 = getelementptr inbounds i8*, i8** %482, i64 %idxprom721
  store i8* %cond720, i8** %arrayidx722, align 8
  %485 = load i8*, i8** %d, align 8
  %486 = load i8**, i8*** %regend, align 8
  %487 = load i8*, i8** %p, align 8
  %488 = load i8, i8* %487, align 1
  %idxprom723 = zext i8 %488 to i64
  %arrayidx724 = getelementptr inbounds i8*, i8** %486, i64 %idxprom723
  store i8* %485, i8** %arrayidx724, align 8
  %489 = load %union.register_info_type*, %union.register_info_type** %reg_info, align 8
  %490 = load i8*, i8** %p, align 8
  %491 = load i8, i8* %490, align 1
  %idxprom725 = zext i8 %491 to i64
  %arrayidx726 = getelementptr inbounds %union.register_info_type, %union.register_info_type* %489, i64 %idxprom725
  %bits727 = bitcast %union.register_info_type* %arrayidx726 to %struct.anon*
  %492 = bitcast %struct.anon* %bits727 to i8*
  %bf.load728 = load i8, i8* %492, align 8
  %bf.clear729 = and i8 %bf.load728, -5
  store i8 %bf.clear729, i8* %492, align 8
  %493 = load i32, i32* %lowest_active_reg, align 4
  %494 = load i32, i32* %highest_active_reg, align 4
  %cmp730 = icmp eq i32 %493, %494
  br i1 %cmp730, label %if.then732, label %if.else733

if.then732:                                       ; preds = %cond.end719
  store i32 257, i32* %lowest_active_reg, align 4
  store i32 256, i32* %highest_active_reg, align 4
  br label %if.end764

if.else733:                                       ; preds = %cond.end719
  %495 = load i8*, i8** %p, align 8
  %496 = load i8, i8* %495, align 1
  %conv735 = zext i8 %496 to i32
  %sub = sub nsw i32 %conv735, 1
  %conv736 = trunc i32 %sub to i8
  store i8 %conv736, i8* %r734, align 1
  br label %while.cond737

while.cond737:                                    ; preds = %while.body754, %if.else733
  %497 = load i8, i8* %r734, align 1
  %conv738 = zext i8 %497 to i32
  %cmp739 = icmp sgt i32 %conv738, 0
  br i1 %cmp739, label %land.rhs741, label %land.end752

land.rhs741:                                      ; preds = %while.cond737
  %498 = load %union.register_info_type*, %union.register_info_type** %reg_info, align 8
  %499 = load i8, i8* %r734, align 1
  %idxprom742 = zext i8 %499 to i64
  %arrayidx743 = getelementptr inbounds %union.register_info_type, %union.register_info_type* %498, i64 %idxprom742
  %bits744 = bitcast %union.register_info_type* %arrayidx743 to %struct.anon*
  %500 = bitcast %struct.anon* %bits744 to i8*
  %bf.load745 = load i8, i8* %500, align 8
  %bf.lshr746 = lshr i8 %bf.load745, 2
  %bf.clear747 = and i8 %bf.lshr746, 1
  %bf.cast748 = zext i8 %bf.clear747 to i32
  %tobool749 = icmp ne i32 %bf.cast748, 0
  %lnot750 = xor i1 %tobool749, true
  br label %land.end752

land.end752:                                      ; preds = %land.rhs741, %while.cond737
  %501 = phi i1 [ false, %while.cond737 ], [ %lnot750, %land.rhs741 ]
  br i1 %501, label %while.body754, label %while.end756

while.body754:                                    ; preds = %land.end752
  %502 = load i8, i8* %r734, align 1
  %dec755 = add i8 %502, -1
  store i8 %dec755, i8* %r734, align 1
  br label %while.cond737, !llvm.loop !36

while.end756:                                     ; preds = %land.end752
  %503 = load i8, i8* %r734, align 1
  %conv757 = zext i8 %503 to i32
  %cmp758 = icmp eq i32 %conv757, 0
  br i1 %cmp758, label %if.then760, label %if.else761

if.then760:                                       ; preds = %while.end756
  store i32 257, i32* %lowest_active_reg, align 4
  store i32 256, i32* %highest_active_reg, align 4
  br label %if.end763

if.else761:                                       ; preds = %while.end756
  %504 = load i8, i8* %r734, align 1
  %conv762 = zext i8 %504 to i32
  store i32 %conv762, i32* %highest_active_reg, align 4
  br label %if.end763

if.end763:                                        ; preds = %if.else761, %if.then760
  br label %if.end764

if.end764:                                        ; preds = %if.end763, %if.then732
  %505 = load %union.register_info_type*, %union.register_info_type** %reg_info, align 8
  %506 = load i8*, i8** %p, align 8
  %507 = load i8, i8* %506, align 1
  %idxprom765 = zext i8 %507 to i64
  %arrayidx766 = getelementptr inbounds %union.register_info_type, %union.register_info_type* %505, i64 %idxprom765
  %bits767 = bitcast %union.register_info_type* %arrayidx766 to %struct.anon*
  %508 = bitcast %struct.anon* %bits767 to i8*
  %bf.load768 = load i8, i8* %508, align 8
  %bf.lshr769 = lshr i8 %bf.load768, 3
  %bf.clear770 = and i8 %bf.lshr769, 1
  %bf.cast771 = zext i8 %bf.clear770 to i32
  %tobool772 = icmp ne i32 %bf.cast771, 0
  br i1 %tobool772, label %lor.lhs.false773, label %land.lhs.true778

lor.lhs.false773:                                 ; preds = %if.end764
  %509 = load i8*, i8** %p, align 8
  %arrayidx774 = getelementptr inbounds i8, i8* %509, i64 -3
  %510 = load i8, i8* %arrayidx774, align 1
  %conv775 = zext i8 %510 to i32
  %cmp776 = icmp eq i32 %conv775, 5
  br i1 %cmp776, label %land.lhs.true778, label %if.end981

land.lhs.true778:                                 ; preds = %lor.lhs.false773, %if.end764
  %511 = load i8*, i8** %p, align 8
  %add.ptr779 = getelementptr inbounds i8, i8* %511, i64 2
  %512 = load i8*, i8** %pend, align 8
  %cmp780 = icmp ult i8* %add.ptr779, %512
  br i1 %cmp780, label %if.then782, label %if.end981

if.then782:                                       ; preds = %land.lhs.true778
  store i8 0, i8* %is_a_jump_n, align 1
  %513 = load i8*, i8** %p, align 8
  %add.ptr783 = getelementptr inbounds i8, i8* %513, i64 2
  store i8* %add.ptr783, i8** %p1, align 8
  store i32 0, i32* %mcnt, align 4
  %514 = load i8*, i8** %p1, align 8
  %incdec.ptr784 = getelementptr inbounds i8, i8* %514, i32 1
  store i8* %incdec.ptr784, i8** %p1, align 8
  %515 = load i8, i8* %514, align 1
  %conv785 = zext i8 %515 to i32
  switch i32 %conv785, label %sw.default [
    i32 21, label %sw.bb786
    i32 16, label %sw.bb787
    i32 17, label %sw.bb787
    i32 12, label %sw.bb787
    i32 18, label %sw.bb787
  ]

sw.bb786:                                         ; preds = %if.then782
  store i8 1, i8* %is_a_jump_n, align 1
  br label %sw.bb787

sw.bb787:                                         ; preds = %if.then782, %if.then782, %if.then782, %if.then782, %sw.bb786
  br label %do.body788

do.body788:                                       ; preds = %sw.bb787
  br label %do.body789

do.body789:                                       ; preds = %do.body788
  %516 = load i8*, i8** %p1, align 8
  %517 = load i8, i8* %516, align 1
  %conv790 = zext i8 %517 to i32
  %and791 = and i32 %conv790, 255
  store i32 %and791, i32* %mcnt, align 4
  %518 = load i8*, i8** %p1, align 8
  %add.ptr792 = getelementptr inbounds i8, i8* %518, i64 1
  %519 = load i8, i8* %add.ptr792, align 1
  %conv793 = sext i8 %519 to i32
  %shl794 = shl i32 %conv793, 8
  %520 = load i32, i32* %mcnt, align 4
  %add795 = add nsw i32 %520, %shl794
  store i32 %add795, i32* %mcnt, align 4
  br label %do.end797

do.end797:                                        ; preds = %do.body789
  %521 = load i8*, i8** %p1, align 8
  %add.ptr798 = getelementptr inbounds i8, i8* %521, i64 2
  store i8* %add.ptr798, i8** %p1, align 8
  br label %do.end800

do.end800:                                        ; preds = %do.end797
  %522 = load i8, i8* %is_a_jump_n, align 1
  %tobool801 = icmp ne i8 %522, 0
  br i1 %tobool801, label %if.then802, label %if.end804

if.then802:                                       ; preds = %do.end800
  %523 = load i8*, i8** %p1, align 8
  %add.ptr803 = getelementptr inbounds i8, i8* %523, i64 2
  store i8* %add.ptr803, i8** %p1, align 8
  br label %if.end804

if.end804:                                        ; preds = %if.then802, %do.end800
  br label %sw.epilog

sw.default:                                       ; preds = %if.then782
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.end804
  %524 = load i32, i32* %mcnt, align 4
  %525 = load i8*, i8** %p1, align 8
  %idx.ext805 = sext i32 %524 to i64
  %add.ptr806 = getelementptr inbounds i8, i8* %525, i64 %idx.ext805
  store i8* %add.ptr806, i8** %p1, align 8
  %526 = load i32, i32* %mcnt, align 4
  %cmp807 = icmp slt i32 %526, 0
  br i1 %cmp807, label %land.lhs.true809, label %if.end980

land.lhs.true809:                                 ; preds = %sw.epilog
  %527 = load i8*, i8** %p1, align 8
  %528 = load i8, i8* %527, align 1
  %conv810 = zext i8 %528 to i32
  %cmp811 = icmp eq i32 %conv810, 14
  br i1 %cmp811, label %land.lhs.true813, label %if.end980

land.lhs.true813:                                 ; preds = %land.lhs.true809
  %529 = load i8*, i8** %p1, align 8
  %arrayidx814 = getelementptr inbounds i8, i8* %529, i64 3
  %530 = load i8, i8* %arrayidx814, align 1
  %conv815 = zext i8 %530 to i32
  %cmp816 = icmp eq i32 %conv815, 5
  br i1 %cmp816, label %land.lhs.true818, label %if.end980

land.lhs.true818:                                 ; preds = %land.lhs.true813
  %531 = load i8*, i8** %p1, align 8
  %arrayidx819 = getelementptr inbounds i8, i8* %531, i64 4
  %532 = load i8, i8* %arrayidx819, align 1
  %conv820 = zext i8 %532 to i32
  %533 = load i8*, i8** %p, align 8
  %534 = load i8, i8* %533, align 1
  %conv821 = zext i8 %534 to i32
  %cmp822 = icmp eq i32 %conv820, %conv821
  br i1 %cmp822, label %if.then824, label %if.end980

if.then824:                                       ; preds = %land.lhs.true818
  %535 = load %union.register_info_type*, %union.register_info_type** %reg_info, align 8
  %536 = load i8*, i8** %p, align 8
  %537 = load i8, i8* %536, align 1
  %idxprom825 = zext i8 %537 to i64
  %arrayidx826 = getelementptr inbounds %union.register_info_type, %union.register_info_type* %535, i64 %idxprom825
  %bits827 = bitcast %union.register_info_type* %arrayidx826 to %struct.anon*
  %538 = bitcast %struct.anon* %bits827 to i8*
  %bf.load828 = load i8, i8* %538, align 8
  %bf.lshr829 = lshr i8 %bf.load828, 4
  %bf.clear830 = and i8 %bf.lshr829, 1
  %bf.cast831 = zext i8 %bf.clear830 to i32
  %tobool832 = icmp ne i32 %bf.cast831, 0
  br i1 %tobool832, label %if.then833, label %if.end868

if.then833:                                       ; preds = %if.then824
  %539 = load %union.register_info_type*, %union.register_info_type** %reg_info, align 8
  %540 = load i8*, i8** %p, align 8
  %541 = load i8, i8* %540, align 1
  %idxprom835 = zext i8 %541 to i64
  %arrayidx836 = getelementptr inbounds %union.register_info_type, %union.register_info_type* %539, i64 %idxprom835
  %bits837 = bitcast %union.register_info_type* %arrayidx836 to %struct.anon*
  %542 = bitcast %struct.anon* %bits837 to i8*
  %bf.load838 = load i8, i8* %542, align 8
  %bf.clear839 = and i8 %bf.load838, -17
  store i8 %bf.clear839, i8* %542, align 8
  %543 = load i8*, i8** %p, align 8
  %544 = load i8, i8* %543, align 1
  %conv840 = zext i8 %544 to i32
  store i32 %conv840, i32* %r834, align 4
  br label %for.cond841

for.cond841:                                      ; preds = %for.inc865, %if.then833
  %545 = load i32, i32* %r834, align 4
  %546 = load i8*, i8** %p, align 8
  %547 = load i8, i8* %546, align 1
  %conv842 = zext i8 %547 to i32
  %548 = load i8*, i8** %p, align 8
  %add.ptr843 = getelementptr inbounds i8, i8* %548, i64 1
  %549 = load i8, i8* %add.ptr843, align 1
  %conv844 = zext i8 %549 to i32
  %add845 = add nsw i32 %conv842, %conv844
  %cmp846 = icmp ult i32 %545, %add845
  br i1 %cmp846, label %for.body848, label %for.end867

for.body848:                                      ; preds = %for.cond841
  %550 = load i8**, i8*** %old_regstart, align 8
  %551 = load i32, i32* %r834, align 4
  %idxprom849 = zext i32 %551 to i64
  %arrayidx850 = getelementptr inbounds i8*, i8** %550, i64 %idxprom849
  %552 = load i8*, i8** %arrayidx850, align 8
  %553 = load i8**, i8*** %regstart, align 8
  %554 = load i32, i32* %r834, align 4
  %idxprom851 = zext i32 %554 to i64
  %arrayidx852 = getelementptr inbounds i8*, i8** %553, i64 %idxprom851
  store i8* %552, i8** %arrayidx852, align 8
  %555 = load i8**, i8*** %old_regend, align 8
  %556 = load i32, i32* %r834, align 4
  %idxprom853 = zext i32 %556 to i64
  %arrayidx854 = getelementptr inbounds i8*, i8** %555, i64 %idxprom853
  %557 = load i8*, i8** %arrayidx854, align 8
  %558 = ptrtoint i8* %557 to i32
  %559 = load i8**, i8*** %regstart, align 8
  %560 = load i32, i32* %r834, align 4
  %idxprom855 = zext i32 %560 to i64
  %arrayidx856 = getelementptr inbounds i8*, i8** %559, i64 %idxprom855
  %561 = load i8*, i8** %arrayidx856, align 8
  %562 = ptrtoint i8* %561 to i32
  %cmp857 = icmp sge i32 %558, %562
  br i1 %cmp857, label %if.then859, label %if.end864

if.then859:                                       ; preds = %for.body848
  %563 = load i8**, i8*** %old_regend, align 8
  %564 = load i32, i32* %r834, align 4
  %idxprom860 = zext i32 %564 to i64
  %arrayidx861 = getelementptr inbounds i8*, i8** %563, i64 %idxprom860
  %565 = load i8*, i8** %arrayidx861, align 8
  %566 = load i8**, i8*** %regend, align 8
  %567 = load i32, i32* %r834, align 4
  %idxprom862 = zext i32 %567 to i64
  %arrayidx863 = getelementptr inbounds i8*, i8** %566, i64 %idxprom862
  store i8* %565, i8** %arrayidx863, align 8
  br label %if.end864

if.end864:                                        ; preds = %if.then859, %for.body848
  br label %for.inc865

for.inc865:                                       ; preds = %if.end864
  %568 = load i32, i32* %r834, align 4
  %inc866 = add i32 %568, 1
  store i32 %inc866, i32* %r834, align 4
  br label %for.cond841, !llvm.loop !37

for.end867:                                       ; preds = %for.cond841
  br label %if.end868

if.end868:                                        ; preds = %for.end867, %if.then824
  %569 = load i8*, i8** %p1, align 8
  %incdec.ptr869 = getelementptr inbounds i8, i8* %569, i32 1
  store i8* %incdec.ptr869, i8** %p1, align 8
  br label %do.body870

do.body870:                                       ; preds = %if.end868
  br label %do.body871

do.body871:                                       ; preds = %do.body870
  %570 = load i8*, i8** %p1, align 8
  %571 = load i8, i8* %570, align 1
  %conv872 = zext i8 %571 to i32
  %and873 = and i32 %conv872, 255
  store i32 %and873, i32* %mcnt, align 4
  %572 = load i8*, i8** %p1, align 8
  %add.ptr874 = getelementptr inbounds i8, i8* %572, i64 1
  %573 = load i8, i8* %add.ptr874, align 1
  %conv875 = sext i8 %573 to i32
  %shl876 = shl i32 %conv875, 8
  %574 = load i32, i32* %mcnt, align 4
  %add877 = add nsw i32 %574, %shl876
  store i32 %add877, i32* %mcnt, align 4
  br label %do.end879

do.end879:                                        ; preds = %do.body871
  %575 = load i8*, i8** %p1, align 8
  %add.ptr880 = getelementptr inbounds i8, i8* %575, i64 2
  store i8* %add.ptr880, i8** %p1, align 8
  br label %do.end882

do.end882:                                        ; preds = %do.end879
  br label %do.body883

do.body883:                                       ; preds = %do.end882
  br label %while.cond884

while.cond884:                                    ; preds = %if.end924, %do.body883
  %size885 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 1
  %576 = load i32, i32* %size885, align 8
  %avail886 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %577 = load i32, i32* %avail886, align 4
  %sub887 = sub i32 %576, %577
  %578 = load i32, i32* %highest_active_reg, align 4
  %579 = load i32, i32* %lowest_active_reg, align 4
  %sub888 = sub i32 %578, %579
  %add889 = add i32 %sub888, 1
  %mul890 = mul i32 %add889, 3
  %add891 = add i32 %mul890, 4
  %cmp892 = icmp ult i32 %sub887, %add891
  br i1 %cmp892, label %while.body894, label %while.end925

while.body894:                                    ; preds = %while.cond884
  %size895 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 1
  %580 = load i32, i32* %size895, align 8
  %581 = load i32, i32* @re_max_failures, align 4
  %582 = load i32, i32* %num_regs, align 4
  %sub896 = sub i32 %582, 1
  %mul897 = mul i32 %sub896, 3
  %add898 = add i32 %mul897, 4
  %mul899 = mul i32 %581, %add898
  %cmp900 = icmp ugt i32 %580, %mul899
  br i1 %cmp900, label %cond.true902, label %cond.false903

cond.true902:                                     ; preds = %while.body894
  br i1 false, label %if.end924, label %if.then923

cond.false903:                                    ; preds = %while.body894
  %size904 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 1
  %583 = load i32, i32* %size904, align 8
  %shl905 = shl i32 %583, 1
  %conv906 = zext i32 %shl905 to i64
  %mul907 = mul i64 %conv906, 8
  %584 = alloca i8, i64 %mul907, align 16
  store i8* %584, i8** %destination, align 8
  %585 = load i8*, i8** %destination, align 8
  %stack908 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %586 = load i8**, i8*** %stack908, align 8
  %587 = bitcast i8** %586 to i8*
  %size909 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 1
  %588 = load i32, i32* %size909, align 8
  %conv910 = zext i32 %588 to i64
  %mul911 = mul i64 %conv910, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %585, i8* align 8 %587, i64 %mul911, i1 false)
  %589 = load i8*, i8** %destination, align 8
  %590 = bitcast i8* %589 to i8**
  %stack912 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  store i8** %590, i8*** %stack912, align 8
  %stack913 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %591 = load i8**, i8*** %stack913, align 8
  %cmp914 = icmp eq i8** %591, null
  br i1 %cmp914, label %cond.true916, label %cond.false917

cond.true916:                                     ; preds = %cond.false903
  br label %cond.end920

cond.false917:                                    ; preds = %cond.false903
  %size918 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 1
  %592 = load i32, i32* %size918, align 8
  %shl919 = shl i32 %592, 1
  store i32 %shl919, i32* %size918, align 8
  br label %cond.end920

cond.end920:                                      ; preds = %cond.false917, %cond.true916
  %cond921 = phi i32 [ 0, %cond.true916 ], [ 1, %cond.false917 ]
  %tobool922 = icmp ne i32 %cond921, 0
  br i1 %tobool922, label %if.end924, label %if.then923

if.then923:                                       ; preds = %cond.end920, %cond.true902
  store i32 -2, i32* %retval, align 4
  br label %return

if.end924:                                        ; preds = %cond.end920, %cond.true902
  br label %while.cond884, !llvm.loop !38

while.end925:                                     ; preds = %while.cond884
  %593 = load i32, i32* %lowest_active_reg, align 4
  store i32 %593, i32* %this_reg, align 4
  br label %for.cond926

for.cond926:                                      ; preds = %for.inc951, %while.end925
  %594 = load i32, i32* %this_reg, align 4
  %595 = load i32, i32* %highest_active_reg, align 4
  %cmp927 = icmp ule i32 %594, %595
  br i1 %cmp927, label %for.body929, label %for.end953

for.body929:                                      ; preds = %for.cond926
  %596 = load i8**, i8*** %regstart, align 8
  %597 = load i32, i32* %this_reg, align 4
  %idxprom930 = sext i32 %597 to i64
  %arrayidx931 = getelementptr inbounds i8*, i8** %596, i64 %idxprom930
  %598 = load i8*, i8** %arrayidx931, align 8
  %stack932 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %599 = load i8**, i8*** %stack932, align 8
  %avail933 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %600 = load i32, i32* %avail933, align 4
  %inc934 = add i32 %600, 1
  store i32 %inc934, i32* %avail933, align 4
  %idxprom935 = zext i32 %600 to i64
  %arrayidx936 = getelementptr inbounds i8*, i8** %599, i64 %idxprom935
  store i8* %598, i8** %arrayidx936, align 8
  %601 = load i8**, i8*** %regend, align 8
  %602 = load i32, i32* %this_reg, align 4
  %idxprom937 = sext i32 %602 to i64
  %arrayidx938 = getelementptr inbounds i8*, i8** %601, i64 %idxprom937
  %603 = load i8*, i8** %arrayidx938, align 8
  %stack939 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %604 = load i8**, i8*** %stack939, align 8
  %avail940 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %605 = load i32, i32* %avail940, align 4
  %inc941 = add i32 %605, 1
  store i32 %inc941, i32* %avail940, align 4
  %idxprom942 = zext i32 %605 to i64
  %arrayidx943 = getelementptr inbounds i8*, i8** %604, i64 %idxprom942
  store i8* %603, i8** %arrayidx943, align 8
  %606 = load %union.register_info_type*, %union.register_info_type** %reg_info, align 8
  %607 = load i32, i32* %this_reg, align 4
  %idxprom944 = sext i32 %607 to i64
  %arrayidx945 = getelementptr inbounds %union.register_info_type, %union.register_info_type* %606, i64 %idxprom944
  %word = bitcast %union.register_info_type* %arrayidx945 to i8**
  %608 = load i8*, i8** %word, align 8
  %stack946 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %609 = load i8**, i8*** %stack946, align 8
  %avail947 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %610 = load i32, i32* %avail947, align 4
  %inc948 = add i32 %610, 1
  store i32 %inc948, i32* %avail947, align 4
  %idxprom949 = zext i32 %610 to i64
  %arrayidx950 = getelementptr inbounds i8*, i8** %609, i64 %idxprom949
  store i8* %608, i8** %arrayidx950, align 8
  br label %for.inc951

for.inc951:                                       ; preds = %for.body929
  %611 = load i32, i32* %this_reg, align 4
  %inc952 = add nsw i32 %611, 1
  store i32 %inc952, i32* %this_reg, align 4
  br label %for.cond926, !llvm.loop !39

for.end953:                                       ; preds = %for.cond926
  %612 = load i32, i32* %lowest_active_reg, align 4
  %conv954 = zext i32 %612 to i64
  %613 = inttoptr i64 %conv954 to i8*
  %stack955 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %614 = load i8**, i8*** %stack955, align 8
  %avail956 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %615 = load i32, i32* %avail956, align 4
  %inc957 = add i32 %615, 1
  store i32 %inc957, i32* %avail956, align 4
  %idxprom958 = zext i32 %615 to i64
  %arrayidx959 = getelementptr inbounds i8*, i8** %614, i64 %idxprom958
  store i8* %613, i8** %arrayidx959, align 8
  %616 = load i32, i32* %highest_active_reg, align 4
  %conv960 = zext i32 %616 to i64
  %617 = inttoptr i64 %conv960 to i8*
  %stack961 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %618 = load i8**, i8*** %stack961, align 8
  %avail962 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %619 = load i32, i32* %avail962, align 4
  %inc963 = add i32 %619, 1
  store i32 %inc963, i32* %avail962, align 4
  %idxprom964 = zext i32 %619 to i64
  %arrayidx965 = getelementptr inbounds i8*, i8** %618, i64 %idxprom964
  store i8* %617, i8** %arrayidx965, align 8
  %620 = load i8*, i8** %p1, align 8
  %621 = load i32, i32* %mcnt, align 4
  %idx.ext966 = sext i32 %621 to i64
  %add.ptr967 = getelementptr inbounds i8, i8* %620, i64 %idx.ext966
  %stack968 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %622 = load i8**, i8*** %stack968, align 8
  %avail969 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %623 = load i32, i32* %avail969, align 4
  %inc970 = add i32 %623, 1
  store i32 %inc970, i32* %avail969, align 4
  %idxprom971 = zext i32 %623 to i64
  %arrayidx972 = getelementptr inbounds i8*, i8** %622, i64 %idxprom971
  store i8* %add.ptr967, i8** %arrayidx972, align 8
  %624 = load i8*, i8** %d, align 8
  %stack973 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %625 = load i8**, i8*** %stack973, align 8
  %avail974 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %626 = load i32, i32* %avail974, align 4
  %inc975 = add i32 %626, 1
  store i32 %inc975, i32* %avail974, align 4
  %idxprom976 = zext i32 %626 to i64
  %arrayidx977 = getelementptr inbounds i8*, i8** %625, i64 %idxprom976
  store i8* %624, i8** %arrayidx977, align 8
  br label %do.end979

do.end979:                                        ; preds = %for.end953
  br label %fail

if.end980:                                        ; preds = %land.lhs.true818, %land.lhs.true813, %land.lhs.true809, %sw.epilog
  br label %if.end981

if.end981:                                        ; preds = %if.end980, %land.lhs.true778, %lor.lhs.false773
  %627 = load i8*, i8** %p, align 8
  %add.ptr982 = getelementptr inbounds i8, i8* %627, i64 2
  store i8* %add.ptr982, i8** %p, align 8
  br label %sw.epilog2314

sw.bb983:                                         ; preds = %if.end422
  %628 = load i8*, i8** %p, align 8
  %incdec.ptr984 = getelementptr inbounds i8, i8* %628, i32 1
  store i8* %incdec.ptr984, i8** %p, align 8
  %629 = load i8, i8* %628, align 1
  %conv985 = zext i8 %629 to i32
  store i32 %conv985, i32* %regno, align 4
  %630 = load i8**, i8*** %regstart, align 8
  %631 = load i32, i32* %regno, align 4
  %idxprom986 = sext i32 %631 to i64
  %arrayidx987 = getelementptr inbounds i8*, i8** %630, i64 %idxprom986
  %632 = load i8*, i8** %arrayidx987, align 8
  %cmp988 = icmp eq i8* %632, inttoptr (i64 -1 to i8*)
  br i1 %cmp988, label %if.then995, label %lor.lhs.false990

lor.lhs.false990:                                 ; preds = %sw.bb983
  %633 = load i8**, i8*** %regend, align 8
  %634 = load i32, i32* %regno, align 4
  %idxprom991 = sext i32 %634 to i64
  %arrayidx992 = getelementptr inbounds i8*, i8** %633, i64 %idxprom991
  %635 = load i8*, i8** %arrayidx992, align 8
  %cmp993 = icmp eq i8* %635, inttoptr (i64 -1 to i8*)
  br i1 %cmp993, label %if.then995, label %if.end996

if.then995:                                       ; preds = %lor.lhs.false990, %sw.bb983
  br label %fail

if.end996:                                        ; preds = %lor.lhs.false990
  %636 = load i8**, i8*** %regstart, align 8
  %637 = load i32, i32* %regno, align 4
  %idxprom997 = sext i32 %637 to i64
  %arrayidx998 = getelementptr inbounds i8*, i8** %636, i64 %idxprom997
  %638 = load i8*, i8** %arrayidx998, align 8
  store i8* %638, i8** %d2, align 8
  %639 = load i32, i32* %size1.addr, align 4
  %tobool999 = icmp ne i32 %639, 0
  br i1 %tobool999, label %land.lhs.true1000, label %land.end1012

land.lhs.true1000:                                ; preds = %if.end996
  %640 = load i8*, i8** %string1.addr, align 8
  %641 = load i8**, i8*** %regstart, align 8
  %642 = load i32, i32* %regno, align 4
  %idxprom1001 = sext i32 %642 to i64
  %arrayidx1002 = getelementptr inbounds i8*, i8** %641, i64 %idxprom1001
  %643 = load i8*, i8** %arrayidx1002, align 8
  %cmp1003 = icmp ule i8* %640, %643
  br i1 %cmp1003, label %land.rhs1005, label %land.end1012

land.rhs1005:                                     ; preds = %land.lhs.true1000
  %644 = load i8**, i8*** %regstart, align 8
  %645 = load i32, i32* %regno, align 4
  %idxprom1006 = sext i32 %645 to i64
  %arrayidx1007 = getelementptr inbounds i8*, i8** %644, i64 %idxprom1006
  %646 = load i8*, i8** %arrayidx1007, align 8
  %647 = load i8*, i8** %string1.addr, align 8
  %648 = load i32, i32* %size1.addr, align 4
  %idx.ext1008 = sext i32 %648 to i64
  %add.ptr1009 = getelementptr inbounds i8, i8* %647, i64 %idx.ext1008
  %cmp1010 = icmp ule i8* %646, %add.ptr1009
  br label %land.end1012

land.end1012:                                     ; preds = %land.rhs1005, %land.lhs.true1000, %if.end996
  %649 = phi i1 [ false, %land.lhs.true1000 ], [ false, %if.end996 ], [ %cmp1010, %land.rhs1005 ]
  %land.ext1013 = zext i1 %649 to i32
  %650 = load i32, i32* %size1.addr, align 4
  %tobool1014 = icmp ne i32 %650, 0
  br i1 %tobool1014, label %land.lhs.true1015, label %land.end1027

land.lhs.true1015:                                ; preds = %land.end1012
  %651 = load i8*, i8** %string1.addr, align 8
  %652 = load i8**, i8*** %regend, align 8
  %653 = load i32, i32* %regno, align 4
  %idxprom1016 = sext i32 %653 to i64
  %arrayidx1017 = getelementptr inbounds i8*, i8** %652, i64 %idxprom1016
  %654 = load i8*, i8** %arrayidx1017, align 8
  %cmp1018 = icmp ule i8* %651, %654
  br i1 %cmp1018, label %land.rhs1020, label %land.end1027

land.rhs1020:                                     ; preds = %land.lhs.true1015
  %655 = load i8**, i8*** %regend, align 8
  %656 = load i32, i32* %regno, align 4
  %idxprom1021 = sext i32 %656 to i64
  %arrayidx1022 = getelementptr inbounds i8*, i8** %655, i64 %idxprom1021
  %657 = load i8*, i8** %arrayidx1022, align 8
  %658 = load i8*, i8** %string1.addr, align 8
  %659 = load i32, i32* %size1.addr, align 4
  %idx.ext1023 = sext i32 %659 to i64
  %add.ptr1024 = getelementptr inbounds i8, i8* %658, i64 %idx.ext1023
  %cmp1025 = icmp ule i8* %657, %add.ptr1024
  br label %land.end1027

land.end1027:                                     ; preds = %land.rhs1020, %land.lhs.true1015, %land.end1012
  %660 = phi i1 [ false, %land.lhs.true1015 ], [ false, %land.end1012 ], [ %cmp1025, %land.rhs1020 ]
  %land.ext1028 = zext i1 %660 to i32
  %cmp1029 = icmp eq i32 %land.ext1013, %land.ext1028
  br i1 %cmp1029, label %cond.true1031, label %cond.false1034

cond.true1031:                                    ; preds = %land.end1027
  %661 = load i8**, i8*** %regend, align 8
  %662 = load i32, i32* %regno, align 4
  %idxprom1032 = sext i32 %662 to i64
  %arrayidx1033 = getelementptr inbounds i8*, i8** %661, i64 %idxprom1032
  %663 = load i8*, i8** %arrayidx1033, align 8
  br label %cond.end1035

cond.false1034:                                   ; preds = %land.end1027
  %664 = load i8*, i8** %end_match_1, align 8
  br label %cond.end1035

cond.end1035:                                     ; preds = %cond.false1034, %cond.true1031
  %cond1036 = phi i8* [ %663, %cond.true1031 ], [ %664, %cond.false1034 ]
  store i8* %cond1036, i8** %dend2, align 8
  br label %for.cond1037

for.cond1037:                                     ; preds = %if.end1093, %cond.end1035
  br label %while.cond1038

while.cond1038:                                   ; preds = %if.end1051, %for.cond1037
  %665 = load i8*, i8** %d2, align 8
  %666 = load i8*, i8** %dend2, align 8
  %cmp1039 = icmp eq i8* %665, %666
  br i1 %cmp1039, label %while.body1041, label %while.end1054

while.body1041:                                   ; preds = %while.cond1038
  %667 = load i8*, i8** %dend2, align 8
  %668 = load i8*, i8** %end_match_2, align 8
  %cmp1042 = icmp eq i8* %667, %668
  br i1 %cmp1042, label %if.then1044, label %if.end1045

if.then1044:                                      ; preds = %while.body1041
  br label %while.end1054

if.end1045:                                       ; preds = %while.body1041
  %669 = load i8*, i8** %dend2, align 8
  %670 = load i8**, i8*** %regend, align 8
  %671 = load i32, i32* %regno, align 4
  %idxprom1046 = sext i32 %671 to i64
  %arrayidx1047 = getelementptr inbounds i8*, i8** %670, i64 %idxprom1046
  %672 = load i8*, i8** %arrayidx1047, align 8
  %cmp1048 = icmp eq i8* %669, %672
  br i1 %cmp1048, label %if.then1050, label %if.end1051

if.then1050:                                      ; preds = %if.end1045
  br label %while.end1054

if.end1051:                                       ; preds = %if.end1045
  %673 = load i8*, i8** %string2.addr, align 8
  store i8* %673, i8** %d2, align 8
  %674 = load i8**, i8*** %regend, align 8
  %675 = load i32, i32* %regno, align 4
  %idxprom1052 = sext i32 %675 to i64
  %arrayidx1053 = getelementptr inbounds i8*, i8** %674, i64 %idxprom1052
  %676 = load i8*, i8** %arrayidx1053, align 8
  store i8* %676, i8** %dend2, align 8
  br label %while.cond1038, !llvm.loop !40

while.end1054:                                    ; preds = %if.then1050, %if.then1044, %while.cond1038
  %677 = load i8*, i8** %d2, align 8
  %678 = load i8*, i8** %dend2, align 8
  %cmp1055 = icmp eq i8* %677, %678
  br i1 %cmp1055, label %if.then1057, label %if.end1058

if.then1057:                                      ; preds = %while.end1054
  br label %for.end1098

if.end1058:                                       ; preds = %while.end1054
  br label %while.cond1059

while.cond1059:                                   ; preds = %if.end1066, %if.end1058
  %679 = load i8*, i8** %d, align 8
  %680 = load i8*, i8** %dend, align 8
  %cmp1060 = icmp eq i8* %679, %680
  br i1 %cmp1060, label %while.body1062, label %while.end1067

while.body1062:                                   ; preds = %while.cond1059
  %681 = load i8*, i8** %dend, align 8
  %682 = load i8*, i8** %end_match_2, align 8
  %cmp1063 = icmp eq i8* %681, %682
  br i1 %cmp1063, label %if.then1065, label %if.end1066

if.then1065:                                      ; preds = %while.body1062
  br label %fail

if.end1066:                                       ; preds = %while.body1062
  %683 = load i8*, i8** %string2.addr, align 8
  store i8* %683, i8** %d, align 8
  %684 = load i8*, i8** %end_match_2, align 8
  store i8* %684, i8** %dend, align 8
  br label %while.cond1059, !llvm.loop !41

while.end1067:                                    ; preds = %while.cond1059
  %685 = load i8*, i8** %dend, align 8
  %686 = load i8*, i8** %d, align 8
  %sub.ptr.lhs.cast1068 = ptrtoint i8* %685 to i64
  %sub.ptr.rhs.cast1069 = ptrtoint i8* %686 to i64
  %sub.ptr.sub1070 = sub i64 %sub.ptr.lhs.cast1068, %sub.ptr.rhs.cast1069
  %conv1071 = trunc i64 %sub.ptr.sub1070 to i32
  store i32 %conv1071, i32* %mcnt, align 4
  %687 = load i32, i32* %mcnt, align 4
  %conv1072 = sext i32 %687 to i64
  %688 = load i8*, i8** %dend2, align 8
  %689 = load i8*, i8** %d2, align 8
  %sub.ptr.lhs.cast1073 = ptrtoint i8* %688 to i64
  %sub.ptr.rhs.cast1074 = ptrtoint i8* %689 to i64
  %sub.ptr.sub1075 = sub i64 %sub.ptr.lhs.cast1073, %sub.ptr.rhs.cast1074
  %cmp1076 = icmp sgt i64 %conv1072, %sub.ptr.sub1075
  br i1 %cmp1076, label %if.then1078, label %if.end1083

if.then1078:                                      ; preds = %while.end1067
  %690 = load i8*, i8** %dend2, align 8
  %691 = load i8*, i8** %d2, align 8
  %sub.ptr.lhs.cast1079 = ptrtoint i8* %690 to i64
  %sub.ptr.rhs.cast1080 = ptrtoint i8* %691 to i64
  %sub.ptr.sub1081 = sub i64 %sub.ptr.lhs.cast1079, %sub.ptr.rhs.cast1080
  %conv1082 = trunc i64 %sub.ptr.sub1081 to i32
  store i32 %conv1082, i32* %mcnt, align 4
  br label %if.end1083

if.end1083:                                       ; preds = %if.then1078, %while.end1067
  %692 = load i8*, i8** %translate, align 8
  %tobool1084 = icmp ne i8* %692, null
  br i1 %tobool1084, label %cond.true1085, label %cond.false1088

cond.true1085:                                    ; preds = %if.end1083
  %693 = load i8*, i8** %d, align 8
  %694 = load i8*, i8** %d2, align 8
  %695 = load i32, i32* %mcnt, align 4
  %696 = load i8*, i8** %translate, align 8
  %call1086 = call i32 @bcmp_translate(i8* %693, i8* %694, i32 %695, i8* %696)
  %tobool1087 = icmp ne i32 %call1086, 0
  br i1 %tobool1087, label %if.then1092, label %if.end1093

cond.false1088:                                   ; preds = %if.end1083
  %697 = load i8*, i8** %d, align 8
  %698 = load i8*, i8** %d2, align 8
  %699 = load i32, i32* %mcnt, align 4
  %conv1089 = sext i32 %699 to i64
  %call1090 = call i32 @memcmp(i8* %697, i8* %698, i64 %conv1089) #11
  %tobool1091 = icmp ne i32 %call1090, 0
  br i1 %tobool1091, label %if.then1092, label %if.end1093

if.then1092:                                      ; preds = %cond.false1088, %cond.true1085
  br label %fail

if.end1093:                                       ; preds = %cond.false1088, %cond.true1085
  %700 = load i32, i32* %mcnt, align 4
  %701 = load i8*, i8** %d, align 8
  %idx.ext1094 = sext i32 %700 to i64
  %add.ptr1095 = getelementptr inbounds i8, i8* %701, i64 %idx.ext1094
  store i8* %add.ptr1095, i8** %d, align 8
  %702 = load i32, i32* %mcnt, align 4
  %703 = load i8*, i8** %d2, align 8
  %idx.ext1096 = sext i32 %702 to i64
  %add.ptr1097 = getelementptr inbounds i8, i8* %703, i64 %idx.ext1096
  store i8* %add.ptr1097, i8** %d2, align 8
  br label %for.cond1037

for.end1098:                                      ; preds = %if.then1057
  br label %sw.epilog2314

sw.bb1099:                                        ; preds = %if.end422
  %704 = load i8*, i8** %d, align 8
  %705 = load i32, i32* %size1.addr, align 4
  %tobool1100 = icmp ne i32 %705, 0
  br i1 %tobool1100, label %cond.true1101, label %cond.false1102

cond.true1101:                                    ; preds = %sw.bb1099
  %706 = load i8*, i8** %string1.addr, align 8
  br label %cond.end1103

cond.false1102:                                   ; preds = %sw.bb1099
  %707 = load i8*, i8** %string2.addr, align 8
  br label %cond.end1103

cond.end1103:                                     ; preds = %cond.false1102, %cond.true1101
  %cond1104 = phi i8* [ %706, %cond.true1101 ], [ %707, %cond.false1102 ]
  %cmp1105 = icmp eq i8* %704, %cond1104
  br i1 %cmp1105, label %if.then1109, label %lor.lhs.false1107

lor.lhs.false1107:                                ; preds = %cond.end1103
  %708 = load i32, i32* %size2.addr, align 4
  %tobool1108 = icmp ne i32 %708, 0
  br i1 %tobool1108, label %if.else1117, label %if.then1109

if.then1109:                                      ; preds = %lor.lhs.false1107, %cond.end1103
  %709 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %not_bol = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %709, i32 0, i32 7
  %bf.load1110 = load i8, i8* %not_bol, align 8
  %bf.lshr1111 = lshr i8 %bf.load1110, 5
  %bf.clear1112 = and i8 %bf.lshr1111, 1
  %bf.cast1113 = zext i8 %bf.clear1112 to i32
  %tobool1114 = icmp ne i32 %bf.cast1113, 0
  br i1 %tobool1114, label %if.end1116, label %if.then1115

if.then1115:                                      ; preds = %if.then1109
  br label %sw.epilog2314

if.end1116:                                       ; preds = %if.then1109
  br label %if.end1129

if.else1117:                                      ; preds = %lor.lhs.false1107
  %710 = load i8*, i8** %d, align 8
  %arrayidx1118 = getelementptr inbounds i8, i8* %710, i64 -1
  %711 = load i8, i8* %arrayidx1118, align 1
  %conv1119 = sext i8 %711 to i32
  %cmp1120 = icmp eq i32 %conv1119, 10
  br i1 %cmp1120, label %land.lhs.true1122, label %if.end1128

land.lhs.true1122:                                ; preds = %if.else1117
  %712 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %newline_anchor = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %712, i32 0, i32 7
  %bf.load1123 = load i8, i8* %newline_anchor, align 8
  %bf.lshr1124 = lshr i8 %bf.load1123, 7
  %bf.cast1125 = zext i8 %bf.lshr1124 to i32
  %tobool1126 = icmp ne i32 %bf.cast1125, 0
  br i1 %tobool1126, label %if.then1127, label %if.end1128

if.then1127:                                      ; preds = %land.lhs.true1122
  br label %sw.epilog2314

if.end1128:                                       ; preds = %land.lhs.true1122, %if.else1117
  br label %if.end1129

if.end1129:                                       ; preds = %if.end1128, %if.end1116
  br label %fail

sw.bb1130:                                        ; preds = %if.end422
  %713 = load i8*, i8** %d, align 8
  %714 = load i8*, i8** %end2, align 8
  %cmp1131 = icmp eq i8* %713, %714
  br i1 %cmp1131, label %if.then1133, label %if.else1141

if.then1133:                                      ; preds = %sw.bb1130
  %715 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %not_eol = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %715, i32 0, i32 7
  %bf.load1134 = load i8, i8* %not_eol, align 8
  %bf.lshr1135 = lshr i8 %bf.load1134, 6
  %bf.clear1136 = and i8 %bf.lshr1135, 1
  %bf.cast1137 = zext i8 %bf.clear1136 to i32
  %tobool1138 = icmp ne i32 %bf.cast1137, 0
  br i1 %tobool1138, label %if.end1140, label %if.then1139

if.then1139:                                      ; preds = %if.then1133
  br label %sw.epilog2314

if.end1140:                                       ; preds = %if.then1133
  br label %if.end1160

if.else1141:                                      ; preds = %sw.bb1130
  %716 = load i8*, i8** %d, align 8
  %717 = load i8*, i8** %end1, align 8
  %cmp1142 = icmp eq i8* %716, %717
  br i1 %cmp1142, label %cond.true1144, label %cond.false1146

cond.true1144:                                    ; preds = %if.else1141
  %718 = load i8*, i8** %string2.addr, align 8
  %719 = load i8, i8* %718, align 1
  %conv1145 = sext i8 %719 to i32
  br label %cond.end1148

cond.false1146:                                   ; preds = %if.else1141
  %720 = load i8*, i8** %d, align 8
  %721 = load i8, i8* %720, align 1
  %conv1147 = sext i8 %721 to i32
  br label %cond.end1148

cond.end1148:                                     ; preds = %cond.false1146, %cond.true1144
  %cond1149 = phi i32 [ %conv1145, %cond.true1144 ], [ %conv1147, %cond.false1146 ]
  %cmp1150 = icmp eq i32 %cond1149, 10
  br i1 %cmp1150, label %land.lhs.true1152, label %if.end1159

land.lhs.true1152:                                ; preds = %cond.end1148
  %722 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %newline_anchor1153 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %722, i32 0, i32 7
  %bf.load1154 = load i8, i8* %newline_anchor1153, align 8
  %bf.lshr1155 = lshr i8 %bf.load1154, 7
  %bf.cast1156 = zext i8 %bf.lshr1155 to i32
  %tobool1157 = icmp ne i32 %bf.cast1156, 0
  br i1 %tobool1157, label %if.then1158, label %if.end1159

if.then1158:                                      ; preds = %land.lhs.true1152
  br label %sw.epilog2314

if.end1159:                                       ; preds = %land.lhs.true1152, %cond.end1148
  br label %if.end1160

if.end1160:                                       ; preds = %if.end1159, %if.end1140
  br label %fail

sw.bb1161:                                        ; preds = %if.end422
  %723 = load i8*, i8** %d, align 8
  %724 = load i32, i32* %size1.addr, align 4
  %tobool1162 = icmp ne i32 %724, 0
  br i1 %tobool1162, label %cond.true1163, label %cond.false1164

cond.true1163:                                    ; preds = %sw.bb1161
  %725 = load i8*, i8** %string1.addr, align 8
  br label %cond.end1165

cond.false1164:                                   ; preds = %sw.bb1161
  %726 = load i8*, i8** %string2.addr, align 8
  br label %cond.end1165

cond.end1165:                                     ; preds = %cond.false1164, %cond.true1163
  %cond1166 = phi i8* [ %725, %cond.true1163 ], [ %726, %cond.false1164 ]
  %cmp1167 = icmp eq i8* %723, %cond1166
  br i1 %cmp1167, label %if.then1171, label %lor.lhs.false1169

lor.lhs.false1169:                                ; preds = %cond.end1165
  %727 = load i32, i32* %size2.addr, align 4
  %tobool1170 = icmp ne i32 %727, 0
  br i1 %tobool1170, label %if.end1172, label %if.then1171

if.then1171:                                      ; preds = %lor.lhs.false1169, %cond.end1165
  br label %sw.epilog2314

if.end1172:                                       ; preds = %lor.lhs.false1169
  br label %fail

sw.bb1173:                                        ; preds = %if.end422
  %728 = load i8*, i8** %d, align 8
  %729 = load i8*, i8** %end2, align 8
  %cmp1174 = icmp eq i8* %728, %729
  br i1 %cmp1174, label %if.then1176, label %if.end1177

if.then1176:                                      ; preds = %sw.bb1173
  br label %sw.epilog2314

if.end1177:                                       ; preds = %sw.bb1173
  br label %fail

sw.bb1178:                                        ; preds = %if.end422
  br label %do.body1179

do.body1179:                                      ; preds = %sw.bb1178
  br label %do.body1180

do.body1180:                                      ; preds = %do.body1179
  %730 = load i8*, i8** %p, align 8
  %731 = load i8, i8* %730, align 1
  %conv1181 = zext i8 %731 to i32
  %and1182 = and i32 %conv1181, 255
  store i32 %and1182, i32* %mcnt, align 4
  %732 = load i8*, i8** %p, align 8
  %add.ptr1183 = getelementptr inbounds i8, i8* %732, i64 1
  %733 = load i8, i8* %add.ptr1183, align 1
  %conv1184 = sext i8 %733 to i32
  %shl1185 = shl i32 %conv1184, 8
  %734 = load i32, i32* %mcnt, align 4
  %add1186 = add nsw i32 %734, %shl1185
  store i32 %add1186, i32* %mcnt, align 4
  br label %do.end1188

do.end1188:                                       ; preds = %do.body1180
  %735 = load i8*, i8** %p, align 8
  %add.ptr1189 = getelementptr inbounds i8, i8* %735, i64 2
  store i8* %add.ptr1189, i8** %p, align 8
  br label %do.end1191

do.end1191:                                       ; preds = %do.end1188
  br label %do.body1192

do.body1192:                                      ; preds = %do.end1191
  br label %while.cond1195

while.cond1195:                                   ; preds = %if.end1235, %do.body1192
  %size1196 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 1
  %736 = load i32, i32* %size1196, align 8
  %avail1197 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %737 = load i32, i32* %avail1197, align 4
  %sub1198 = sub i32 %736, %737
  %738 = load i32, i32* %highest_active_reg, align 4
  %739 = load i32, i32* %lowest_active_reg, align 4
  %sub1199 = sub i32 %738, %739
  %add1200 = add i32 %sub1199, 1
  %mul1201 = mul i32 %add1200, 3
  %add1202 = add i32 %mul1201, 4
  %cmp1203 = icmp ult i32 %sub1198, %add1202
  br i1 %cmp1203, label %while.body1205, label %while.end1236

while.body1205:                                   ; preds = %while.cond1195
  %size1206 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 1
  %740 = load i32, i32* %size1206, align 8
  %741 = load i32, i32* @re_max_failures, align 4
  %742 = load i32, i32* %num_regs, align 4
  %sub1207 = sub i32 %742, 1
  %mul1208 = mul i32 %sub1207, 3
  %add1209 = add i32 %mul1208, 4
  %mul1210 = mul i32 %741, %add1209
  %cmp1211 = icmp ugt i32 %740, %mul1210
  br i1 %cmp1211, label %cond.true1213, label %cond.false1214

cond.true1213:                                    ; preds = %while.body1205
  br i1 false, label %if.end1235, label %if.then1234

cond.false1214:                                   ; preds = %while.body1205
  %size1215 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 1
  %743 = load i32, i32* %size1215, align 8
  %shl1216 = shl i32 %743, 1
  %conv1217 = zext i32 %shl1216 to i64
  %mul1218 = mul i64 %conv1217, 8
  %744 = alloca i8, i64 %mul1218, align 16
  store i8* %744, i8** %destination1193, align 8
  %745 = load i8*, i8** %destination1193, align 8
  %stack1219 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %746 = load i8**, i8*** %stack1219, align 8
  %747 = bitcast i8** %746 to i8*
  %size1220 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 1
  %748 = load i32, i32* %size1220, align 8
  %conv1221 = zext i32 %748 to i64
  %mul1222 = mul i64 %conv1221, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %745, i8* align 8 %747, i64 %mul1222, i1 false)
  %749 = load i8*, i8** %destination1193, align 8
  %750 = bitcast i8* %749 to i8**
  %stack1223 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  store i8** %750, i8*** %stack1223, align 8
  %stack1224 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %751 = load i8**, i8*** %stack1224, align 8
  %cmp1225 = icmp eq i8** %751, null
  br i1 %cmp1225, label %cond.true1227, label %cond.false1228

cond.true1227:                                    ; preds = %cond.false1214
  br label %cond.end1231

cond.false1228:                                   ; preds = %cond.false1214
  %size1229 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 1
  %752 = load i32, i32* %size1229, align 8
  %shl1230 = shl i32 %752, 1
  store i32 %shl1230, i32* %size1229, align 8
  br label %cond.end1231

cond.end1231:                                     ; preds = %cond.false1228, %cond.true1227
  %cond1232 = phi i32 [ 0, %cond.true1227 ], [ 1, %cond.false1228 ]
  %tobool1233 = icmp ne i32 %cond1232, 0
  br i1 %tobool1233, label %if.end1235, label %if.then1234

if.then1234:                                      ; preds = %cond.end1231, %cond.true1213
  store i32 -2, i32* %retval, align 4
  br label %return

if.end1235:                                       ; preds = %cond.end1231, %cond.true1213
  br label %while.cond1195, !llvm.loop !42

while.end1236:                                    ; preds = %while.cond1195
  %753 = load i32, i32* %lowest_active_reg, align 4
  store i32 %753, i32* %this_reg1194, align 4
  br label %for.cond1237

for.cond1237:                                     ; preds = %for.inc1263, %while.end1236
  %754 = load i32, i32* %this_reg1194, align 4
  %755 = load i32, i32* %highest_active_reg, align 4
  %cmp1238 = icmp ule i32 %754, %755
  br i1 %cmp1238, label %for.body1240, label %for.end1265

for.body1240:                                     ; preds = %for.cond1237
  %756 = load i8**, i8*** %regstart, align 8
  %757 = load i32, i32* %this_reg1194, align 4
  %idxprom1241 = sext i32 %757 to i64
  %arrayidx1242 = getelementptr inbounds i8*, i8** %756, i64 %idxprom1241
  %758 = load i8*, i8** %arrayidx1242, align 8
  %stack1243 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %759 = load i8**, i8*** %stack1243, align 8
  %avail1244 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %760 = load i32, i32* %avail1244, align 4
  %inc1245 = add i32 %760, 1
  store i32 %inc1245, i32* %avail1244, align 4
  %idxprom1246 = zext i32 %760 to i64
  %arrayidx1247 = getelementptr inbounds i8*, i8** %759, i64 %idxprom1246
  store i8* %758, i8** %arrayidx1247, align 8
  %761 = load i8**, i8*** %regend, align 8
  %762 = load i32, i32* %this_reg1194, align 4
  %idxprom1248 = sext i32 %762 to i64
  %arrayidx1249 = getelementptr inbounds i8*, i8** %761, i64 %idxprom1248
  %763 = load i8*, i8** %arrayidx1249, align 8
  %stack1250 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %764 = load i8**, i8*** %stack1250, align 8
  %avail1251 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %765 = load i32, i32* %avail1251, align 4
  %inc1252 = add i32 %765, 1
  store i32 %inc1252, i32* %avail1251, align 4
  %idxprom1253 = zext i32 %765 to i64
  %arrayidx1254 = getelementptr inbounds i8*, i8** %764, i64 %idxprom1253
  store i8* %763, i8** %arrayidx1254, align 8
  %766 = load %union.register_info_type*, %union.register_info_type** %reg_info, align 8
  %767 = load i32, i32* %this_reg1194, align 4
  %idxprom1255 = sext i32 %767 to i64
  %arrayidx1256 = getelementptr inbounds %union.register_info_type, %union.register_info_type* %766, i64 %idxprom1255
  %word1257 = bitcast %union.register_info_type* %arrayidx1256 to i8**
  %768 = load i8*, i8** %word1257, align 8
  %stack1258 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %769 = load i8**, i8*** %stack1258, align 8
  %avail1259 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %770 = load i32, i32* %avail1259, align 4
  %inc1260 = add i32 %770, 1
  store i32 %inc1260, i32* %avail1259, align 4
  %idxprom1261 = zext i32 %770 to i64
  %arrayidx1262 = getelementptr inbounds i8*, i8** %769, i64 %idxprom1261
  store i8* %768, i8** %arrayidx1262, align 8
  br label %for.inc1263

for.inc1263:                                      ; preds = %for.body1240
  %771 = load i32, i32* %this_reg1194, align 4
  %inc1264 = add nsw i32 %771, 1
  store i32 %inc1264, i32* %this_reg1194, align 4
  br label %for.cond1237, !llvm.loop !43

for.end1265:                                      ; preds = %for.cond1237
  %772 = load i32, i32* %lowest_active_reg, align 4
  %conv1266 = zext i32 %772 to i64
  %773 = inttoptr i64 %conv1266 to i8*
  %stack1267 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %774 = load i8**, i8*** %stack1267, align 8
  %avail1268 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %775 = load i32, i32* %avail1268, align 4
  %inc1269 = add i32 %775, 1
  store i32 %inc1269, i32* %avail1268, align 4
  %idxprom1270 = zext i32 %775 to i64
  %arrayidx1271 = getelementptr inbounds i8*, i8** %774, i64 %idxprom1270
  store i8* %773, i8** %arrayidx1271, align 8
  %776 = load i32, i32* %highest_active_reg, align 4
  %conv1272 = zext i32 %776 to i64
  %777 = inttoptr i64 %conv1272 to i8*
  %stack1273 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %778 = load i8**, i8*** %stack1273, align 8
  %avail1274 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %779 = load i32, i32* %avail1274, align 4
  %inc1275 = add i32 %779, 1
  store i32 %inc1275, i32* %avail1274, align 4
  %idxprom1276 = zext i32 %779 to i64
  %arrayidx1277 = getelementptr inbounds i8*, i8** %778, i64 %idxprom1276
  store i8* %777, i8** %arrayidx1277, align 8
  %780 = load i8*, i8** %p, align 8
  %781 = load i32, i32* %mcnt, align 4
  %idx.ext1278 = sext i32 %781 to i64
  %add.ptr1279 = getelementptr inbounds i8, i8* %780, i64 %idx.ext1278
  %stack1280 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %782 = load i8**, i8*** %stack1280, align 8
  %avail1281 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %783 = load i32, i32* %avail1281, align 4
  %inc1282 = add i32 %783, 1
  store i32 %inc1282, i32* %avail1281, align 4
  %idxprom1283 = zext i32 %783 to i64
  %arrayidx1284 = getelementptr inbounds i8*, i8** %782, i64 %idxprom1283
  store i8* %add.ptr1279, i8** %arrayidx1284, align 8
  %stack1285 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %784 = load i8**, i8*** %stack1285, align 8
  %avail1286 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %785 = load i32, i32* %avail1286, align 4
  %inc1287 = add i32 %785, 1
  store i32 %inc1287, i32* %avail1286, align 4
  %idxprom1288 = zext i32 %785 to i64
  %arrayidx1289 = getelementptr inbounds i8*, i8** %784, i64 %idxprom1288
  store i8* null, i8** %arrayidx1289, align 8
  br label %do.end1291

do.end1291:                                       ; preds = %for.end1265
  br label %sw.epilog2314

sw.bb1292:                                        ; preds = %if.end422
  br label %on_failure

on_failure:                                       ; preds = %if.then1870, %sw.bb1292
  br label %do.body1293

do.body1293:                                      ; preds = %on_failure
  br label %do.body1294

do.body1294:                                      ; preds = %do.body1293
  %786 = load i8*, i8** %p, align 8
  %787 = load i8, i8* %786, align 1
  %conv1295 = zext i8 %787 to i32
  %and1296 = and i32 %conv1295, 255
  store i32 %and1296, i32* %mcnt, align 4
  %788 = load i8*, i8** %p, align 8
  %add.ptr1297 = getelementptr inbounds i8, i8* %788, i64 1
  %789 = load i8, i8* %add.ptr1297, align 1
  %conv1298 = sext i8 %789 to i32
  %shl1299 = shl i32 %conv1298, 8
  %790 = load i32, i32* %mcnt, align 4
  %add1300 = add nsw i32 %790, %shl1299
  store i32 %add1300, i32* %mcnt, align 4
  br label %do.end1302

do.end1302:                                       ; preds = %do.body1294
  %791 = load i8*, i8** %p, align 8
  %add.ptr1303 = getelementptr inbounds i8, i8* %791, i64 2
  store i8* %add.ptr1303, i8** %p, align 8
  br label %do.end1305

do.end1305:                                       ; preds = %do.end1302
  %792 = load i8*, i8** %p, align 8
  store i8* %792, i8** %p1, align 8
  br label %while.cond1306

while.cond1306:                                   ; preds = %while.body1315, %do.end1305
  %793 = load i8*, i8** %p1, align 8
  %794 = load i8*, i8** %pend, align 8
  %cmp1307 = icmp ult i8* %793, %794
  br i1 %cmp1307, label %land.rhs1309, label %land.end1313

land.rhs1309:                                     ; preds = %while.cond1306
  %795 = load i8*, i8** %p1, align 8
  %796 = load i8, i8* %795, align 1
  %conv1310 = zext i8 %796 to i32
  %cmp1311 = icmp eq i32 %conv1310, 0
  br label %land.end1313

land.end1313:                                     ; preds = %land.rhs1309, %while.cond1306
  %797 = phi i1 [ false, %while.cond1306 ], [ %cmp1311, %land.rhs1309 ]
  br i1 %797, label %while.body1315, label %while.end1317

while.body1315:                                   ; preds = %land.end1313
  %798 = load i8*, i8** %p1, align 8
  %incdec.ptr1316 = getelementptr inbounds i8, i8* %798, i32 1
  store i8* %incdec.ptr1316, i8** %p1, align 8
  br label %while.cond1306, !llvm.loop !44

while.end1317:                                    ; preds = %land.end1313
  %799 = load i8*, i8** %p1, align 8
  %800 = load i8*, i8** %pend, align 8
  %cmp1318 = icmp ult i8* %799, %800
  br i1 %cmp1318, label %land.lhs.true1320, label %if.end1336

land.lhs.true1320:                                ; preds = %while.end1317
  %801 = load i8*, i8** %p1, align 8
  %802 = load i8, i8* %801, align 1
  %conv1321 = zext i8 %802 to i32
  %cmp1322 = icmp eq i32 %conv1321, 5
  br i1 %cmp1322, label %if.then1324, label %if.end1336

if.then1324:                                      ; preds = %land.lhs.true1320
  %803 = load i8*, i8** %p1, align 8
  %add.ptr1325 = getelementptr inbounds i8, i8* %803, i64 1
  %804 = load i8, i8* %add.ptr1325, align 1
  %conv1326 = zext i8 %804 to i32
  %805 = load i8*, i8** %p1, align 8
  %add.ptr1327 = getelementptr inbounds i8, i8* %805, i64 2
  %806 = load i8, i8* %add.ptr1327, align 1
  %conv1328 = zext i8 %806 to i32
  %add1329 = add nsw i32 %conv1326, %conv1328
  store i32 %add1329, i32* %highest_active_reg, align 4
  %807 = load i32, i32* %lowest_active_reg, align 4
  %cmp1330 = icmp eq i32 %807, 257
  br i1 %cmp1330, label %if.then1332, label %if.end1335

if.then1332:                                      ; preds = %if.then1324
  %808 = load i8*, i8** %p1, align 8
  %add.ptr1333 = getelementptr inbounds i8, i8* %808, i64 1
  %809 = load i8, i8* %add.ptr1333, align 1
  %conv1334 = zext i8 %809 to i32
  store i32 %conv1334, i32* %lowest_active_reg, align 4
  br label %if.end1335

if.end1335:                                       ; preds = %if.then1332, %if.then1324
  br label %if.end1336

if.end1336:                                       ; preds = %if.end1335, %land.lhs.true1320, %while.end1317
  br label %do.body1337

do.body1337:                                      ; preds = %if.end1336
  br label %while.cond1340

while.cond1340:                                   ; preds = %if.end1380, %do.body1337
  %size1341 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 1
  %810 = load i32, i32* %size1341, align 8
  %avail1342 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %811 = load i32, i32* %avail1342, align 4
  %sub1343 = sub i32 %810, %811
  %812 = load i32, i32* %highest_active_reg, align 4
  %813 = load i32, i32* %lowest_active_reg, align 4
  %sub1344 = sub i32 %812, %813
  %add1345 = add i32 %sub1344, 1
  %mul1346 = mul i32 %add1345, 3
  %add1347 = add i32 %mul1346, 4
  %cmp1348 = icmp ult i32 %sub1343, %add1347
  br i1 %cmp1348, label %while.body1350, label %while.end1381

while.body1350:                                   ; preds = %while.cond1340
  %size1351 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 1
  %814 = load i32, i32* %size1351, align 8
  %815 = load i32, i32* @re_max_failures, align 4
  %816 = load i32, i32* %num_regs, align 4
  %sub1352 = sub i32 %816, 1
  %mul1353 = mul i32 %sub1352, 3
  %add1354 = add i32 %mul1353, 4
  %mul1355 = mul i32 %815, %add1354
  %cmp1356 = icmp ugt i32 %814, %mul1355
  br i1 %cmp1356, label %cond.true1358, label %cond.false1359

cond.true1358:                                    ; preds = %while.body1350
  br i1 false, label %if.end1380, label %if.then1379

cond.false1359:                                   ; preds = %while.body1350
  %size1360 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 1
  %817 = load i32, i32* %size1360, align 8
  %shl1361 = shl i32 %817, 1
  %conv1362 = zext i32 %shl1361 to i64
  %mul1363 = mul i64 %conv1362, 8
  %818 = alloca i8, i64 %mul1363, align 16
  store i8* %818, i8** %destination1338, align 8
  %819 = load i8*, i8** %destination1338, align 8
  %stack1364 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %820 = load i8**, i8*** %stack1364, align 8
  %821 = bitcast i8** %820 to i8*
  %size1365 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 1
  %822 = load i32, i32* %size1365, align 8
  %conv1366 = zext i32 %822 to i64
  %mul1367 = mul i64 %conv1366, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %819, i8* align 8 %821, i64 %mul1367, i1 false)
  %823 = load i8*, i8** %destination1338, align 8
  %824 = bitcast i8* %823 to i8**
  %stack1368 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  store i8** %824, i8*** %stack1368, align 8
  %stack1369 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %825 = load i8**, i8*** %stack1369, align 8
  %cmp1370 = icmp eq i8** %825, null
  br i1 %cmp1370, label %cond.true1372, label %cond.false1373

cond.true1372:                                    ; preds = %cond.false1359
  br label %cond.end1376

cond.false1373:                                   ; preds = %cond.false1359
  %size1374 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 1
  %826 = load i32, i32* %size1374, align 8
  %shl1375 = shl i32 %826, 1
  store i32 %shl1375, i32* %size1374, align 8
  br label %cond.end1376

cond.end1376:                                     ; preds = %cond.false1373, %cond.true1372
  %cond1377 = phi i32 [ 0, %cond.true1372 ], [ 1, %cond.false1373 ]
  %tobool1378 = icmp ne i32 %cond1377, 0
  br i1 %tobool1378, label %if.end1380, label %if.then1379

if.then1379:                                      ; preds = %cond.end1376, %cond.true1358
  store i32 -2, i32* %retval, align 4
  br label %return

if.end1380:                                       ; preds = %cond.end1376, %cond.true1358
  br label %while.cond1340, !llvm.loop !45

while.end1381:                                    ; preds = %while.cond1340
  %827 = load i32, i32* %lowest_active_reg, align 4
  store i32 %827, i32* %this_reg1339, align 4
  br label %for.cond1382

for.cond1382:                                     ; preds = %for.inc1408, %while.end1381
  %828 = load i32, i32* %this_reg1339, align 4
  %829 = load i32, i32* %highest_active_reg, align 4
  %cmp1383 = icmp ule i32 %828, %829
  br i1 %cmp1383, label %for.body1385, label %for.end1410

for.body1385:                                     ; preds = %for.cond1382
  %830 = load i8**, i8*** %regstart, align 8
  %831 = load i32, i32* %this_reg1339, align 4
  %idxprom1386 = sext i32 %831 to i64
  %arrayidx1387 = getelementptr inbounds i8*, i8** %830, i64 %idxprom1386
  %832 = load i8*, i8** %arrayidx1387, align 8
  %stack1388 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %833 = load i8**, i8*** %stack1388, align 8
  %avail1389 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %834 = load i32, i32* %avail1389, align 4
  %inc1390 = add i32 %834, 1
  store i32 %inc1390, i32* %avail1389, align 4
  %idxprom1391 = zext i32 %834 to i64
  %arrayidx1392 = getelementptr inbounds i8*, i8** %833, i64 %idxprom1391
  store i8* %832, i8** %arrayidx1392, align 8
  %835 = load i8**, i8*** %regend, align 8
  %836 = load i32, i32* %this_reg1339, align 4
  %idxprom1393 = sext i32 %836 to i64
  %arrayidx1394 = getelementptr inbounds i8*, i8** %835, i64 %idxprom1393
  %837 = load i8*, i8** %arrayidx1394, align 8
  %stack1395 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %838 = load i8**, i8*** %stack1395, align 8
  %avail1396 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %839 = load i32, i32* %avail1396, align 4
  %inc1397 = add i32 %839, 1
  store i32 %inc1397, i32* %avail1396, align 4
  %idxprom1398 = zext i32 %839 to i64
  %arrayidx1399 = getelementptr inbounds i8*, i8** %838, i64 %idxprom1398
  store i8* %837, i8** %arrayidx1399, align 8
  %840 = load %union.register_info_type*, %union.register_info_type** %reg_info, align 8
  %841 = load i32, i32* %this_reg1339, align 4
  %idxprom1400 = sext i32 %841 to i64
  %arrayidx1401 = getelementptr inbounds %union.register_info_type, %union.register_info_type* %840, i64 %idxprom1400
  %word1402 = bitcast %union.register_info_type* %arrayidx1401 to i8**
  %842 = load i8*, i8** %word1402, align 8
  %stack1403 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %843 = load i8**, i8*** %stack1403, align 8
  %avail1404 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %844 = load i32, i32* %avail1404, align 4
  %inc1405 = add i32 %844, 1
  store i32 %inc1405, i32* %avail1404, align 4
  %idxprom1406 = zext i32 %844 to i64
  %arrayidx1407 = getelementptr inbounds i8*, i8** %843, i64 %idxprom1406
  store i8* %842, i8** %arrayidx1407, align 8
  br label %for.inc1408

for.inc1408:                                      ; preds = %for.body1385
  %845 = load i32, i32* %this_reg1339, align 4
  %inc1409 = add nsw i32 %845, 1
  store i32 %inc1409, i32* %this_reg1339, align 4
  br label %for.cond1382, !llvm.loop !46

for.end1410:                                      ; preds = %for.cond1382
  %846 = load i32, i32* %lowest_active_reg, align 4
  %conv1411 = zext i32 %846 to i64
  %847 = inttoptr i64 %conv1411 to i8*
  %stack1412 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %848 = load i8**, i8*** %stack1412, align 8
  %avail1413 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %849 = load i32, i32* %avail1413, align 4
  %inc1414 = add i32 %849, 1
  store i32 %inc1414, i32* %avail1413, align 4
  %idxprom1415 = zext i32 %849 to i64
  %arrayidx1416 = getelementptr inbounds i8*, i8** %848, i64 %idxprom1415
  store i8* %847, i8** %arrayidx1416, align 8
  %850 = load i32, i32* %highest_active_reg, align 4
  %conv1417 = zext i32 %850 to i64
  %851 = inttoptr i64 %conv1417 to i8*
  %stack1418 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %852 = load i8**, i8*** %stack1418, align 8
  %avail1419 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %853 = load i32, i32* %avail1419, align 4
  %inc1420 = add i32 %853, 1
  store i32 %inc1420, i32* %avail1419, align 4
  %idxprom1421 = zext i32 %853 to i64
  %arrayidx1422 = getelementptr inbounds i8*, i8** %852, i64 %idxprom1421
  store i8* %851, i8** %arrayidx1422, align 8
  %854 = load i8*, i8** %p, align 8
  %855 = load i32, i32* %mcnt, align 4
  %idx.ext1423 = sext i32 %855 to i64
  %add.ptr1424 = getelementptr inbounds i8, i8* %854, i64 %idx.ext1423
  %stack1425 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %856 = load i8**, i8*** %stack1425, align 8
  %avail1426 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %857 = load i32, i32* %avail1426, align 4
  %inc1427 = add i32 %857, 1
  store i32 %inc1427, i32* %avail1426, align 4
  %idxprom1428 = zext i32 %857 to i64
  %arrayidx1429 = getelementptr inbounds i8*, i8** %856, i64 %idxprom1428
  store i8* %add.ptr1424, i8** %arrayidx1429, align 8
  %858 = load i8*, i8** %d, align 8
  %stack1430 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %859 = load i8**, i8*** %stack1430, align 8
  %avail1431 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %860 = load i32, i32* %avail1431, align 4
  %inc1432 = add i32 %860, 1
  store i32 %inc1432, i32* %avail1431, align 4
  %idxprom1433 = zext i32 %860 to i64
  %arrayidx1434 = getelementptr inbounds i8*, i8** %859, i64 %idxprom1433
  store i8* %858, i8** %arrayidx1434, align 8
  br label %do.end1436

do.end1436:                                       ; preds = %for.end1410
  br label %sw.epilog2314

sw.bb1437:                                        ; preds = %if.end422
  br label %do.body1438

do.body1438:                                      ; preds = %sw.bb1437
  br label %do.body1439

do.body1439:                                      ; preds = %do.body1438
  %861 = load i8*, i8** %p, align 8
  %862 = load i8, i8* %861, align 1
  %conv1440 = zext i8 %862 to i32
  %and1441 = and i32 %conv1440, 255
  store i32 %and1441, i32* %mcnt, align 4
  %863 = load i8*, i8** %p, align 8
  %add.ptr1442 = getelementptr inbounds i8, i8* %863, i64 1
  %864 = load i8, i8* %add.ptr1442, align 1
  %conv1443 = sext i8 %864 to i32
  %shl1444 = shl i32 %conv1443, 8
  %865 = load i32, i32* %mcnt, align 4
  %add1445 = add nsw i32 %865, %shl1444
  store i32 %add1445, i32* %mcnt, align 4
  br label %do.end1447

do.end1447:                                       ; preds = %do.body1439
  %866 = load i8*, i8** %p, align 8
  %add.ptr1448 = getelementptr inbounds i8, i8* %866, i64 2
  store i8* %add.ptr1448, i8** %p, align 8
  br label %do.end1450

do.end1450:                                       ; preds = %do.end1447
  %867 = load i8*, i8** %p, align 8
  store i8* %867, i8** %p2, align 8
  br label %while.cond1451

while.cond1451:                                   ; preds = %while.body1464, %do.end1450
  %868 = load i8*, i8** %p2, align 8
  %add.ptr1452 = getelementptr inbounds i8, i8* %868, i64 2
  %869 = load i8*, i8** %pend, align 8
  %cmp1453 = icmp ult i8* %add.ptr1452, %869
  br i1 %cmp1453, label %land.rhs1455, label %land.end1462

land.rhs1455:                                     ; preds = %while.cond1451
  %870 = load i8*, i8** %p2, align 8
  %871 = load i8, i8* %870, align 1
  %conv1456 = zext i8 %871 to i32
  %cmp1457 = icmp eq i32 %conv1456, 6
  br i1 %cmp1457, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs1455
  %872 = load i8*, i8** %p2, align 8
  %873 = load i8, i8* %872, align 1
  %conv1459 = zext i8 %873 to i32
  %cmp1460 = icmp eq i32 %conv1459, 5
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.rhs1455
  %874 = phi i1 [ true, %land.rhs1455 ], [ %cmp1460, %lor.rhs ]
  br label %land.end1462

land.end1462:                                     ; preds = %lor.end, %while.cond1451
  %875 = phi i1 [ false, %while.cond1451 ], [ %874, %lor.end ]
  br i1 %875, label %while.body1464, label %while.end1466

while.body1464:                                   ; preds = %land.end1462
  %876 = load i8*, i8** %p2, align 8
  %add.ptr1465 = getelementptr inbounds i8, i8* %876, i64 3
  store i8* %add.ptr1465, i8** %p2, align 8
  br label %while.cond1451, !llvm.loop !47

while.end1466:                                    ; preds = %land.end1462
  %877 = load i8*, i8** %p2, align 8
  %878 = load i8*, i8** %pend, align 8
  %cmp1467 = icmp eq i8* %877, %878
  br i1 %cmp1467, label %if.then1469, label %if.else1471

if.then1469:                                      ; preds = %while.end1466
  %879 = load i8*, i8** %p, align 8
  %arrayidx1470 = getelementptr inbounds i8, i8* %879, i64 -3
  store i8 16, i8* %arrayidx1470, align 1
  br label %if.end1559

if.else1471:                                      ; preds = %while.end1466
  %880 = load i8*, i8** %p2, align 8
  %881 = load i8, i8* %880, align 1
  %conv1472 = zext i8 %881 to i32
  %cmp1473 = icmp eq i32 %conv1472, 1
  br i1 %cmp1473, label %if.then1485, label %lor.lhs.false1475

lor.lhs.false1475:                                ; preds = %if.else1471
  %882 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %newline_anchor1476 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %882, i32 0, i32 7
  %bf.load1477 = load i8, i8* %newline_anchor1476, align 8
  %bf.lshr1478 = lshr i8 %bf.load1477, 7
  %bf.cast1479 = zext i8 %bf.lshr1478 to i32
  %tobool1480 = icmp ne i32 %bf.cast1479, 0
  br i1 %tobool1480, label %land.lhs.true1481, label %if.end1558

land.lhs.true1481:                                ; preds = %lor.lhs.false1475
  %883 = load i8*, i8** %p2, align 8
  %884 = load i8, i8* %883, align 1
  %conv1482 = zext i8 %884 to i32
  %cmp1483 = icmp eq i32 %conv1482, 9
  br i1 %cmp1483, label %if.then1485, label %if.end1558

if.then1485:                                      ; preds = %land.lhs.true1481, %if.else1471
  %885 = load i8*, i8** %p2, align 8
  %886 = load i8, i8* %885, align 1
  %conv1487 = zext i8 %886 to i32
  %cmp1488 = icmp eq i32 %conv1487, 9
  br i1 %cmp1488, label %cond.true1490, label %cond.false1491

cond.true1490:                                    ; preds = %if.then1485
  br label %cond.end1494

cond.false1491:                                   ; preds = %if.then1485
  %887 = load i8*, i8** %p2, align 8
  %arrayidx1492 = getelementptr inbounds i8, i8* %887, i64 2
  %888 = load i8, i8* %arrayidx1492, align 1
  %conv1493 = zext i8 %888 to i32
  br label %cond.end1494

cond.end1494:                                     ; preds = %cond.false1491, %cond.true1490
  %cond1495 = phi i32 [ 10, %cond.true1490 ], [ %conv1493, %cond.false1491 ]
  %conv1496 = trunc i32 %cond1495 to i8
  store i8 %conv1496, i8* %c1486, align 1
  %889 = load i8*, i8** %p, align 8
  %890 = load i32, i32* %mcnt, align 4
  %idx.ext1497 = sext i32 %890 to i64
  %add.ptr1498 = getelementptr inbounds i8, i8* %889, i64 %idx.ext1497
  store i8* %add.ptr1498, i8** %p1, align 8
  %891 = load i8*, i8** %p1, align 8
  %arrayidx1499 = getelementptr inbounds i8, i8* %891, i64 3
  %892 = load i8, i8* %arrayidx1499, align 1
  %conv1500 = zext i8 %892 to i32
  %cmp1501 = icmp eq i32 %conv1500, 1
  br i1 %cmp1501, label %land.lhs.true1503, label %if.else1511

land.lhs.true1503:                                ; preds = %cond.end1494
  %893 = load i8*, i8** %p1, align 8
  %arrayidx1504 = getelementptr inbounds i8, i8* %893, i64 5
  %894 = load i8, i8* %arrayidx1504, align 1
  %conv1505 = zext i8 %894 to i32
  %895 = load i8, i8* %c1486, align 1
  %conv1506 = zext i8 %895 to i32
  %cmp1507 = icmp ne i32 %conv1505, %conv1506
  br i1 %cmp1507, label %if.then1509, label %if.else1511

if.then1509:                                      ; preds = %land.lhs.true1503
  %896 = load i8*, i8** %p, align 8
  %arrayidx1510 = getelementptr inbounds i8, i8* %896, i64 -3
  store i8 16, i8* %arrayidx1510, align 1
  br label %if.end1557

if.else1511:                                      ; preds = %land.lhs.true1503, %cond.end1494
  %897 = load i8*, i8** %p1, align 8
  %arrayidx1512 = getelementptr inbounds i8, i8* %897, i64 3
  %898 = load i8, i8* %arrayidx1512, align 1
  %conv1513 = zext i8 %898 to i32
  %cmp1514 = icmp eq i32 %conv1513, 3
  br i1 %cmp1514, label %if.then1521, label %lor.lhs.false1516

lor.lhs.false1516:                                ; preds = %if.else1511
  %899 = load i8*, i8** %p1, align 8
  %arrayidx1517 = getelementptr inbounds i8, i8* %899, i64 3
  %900 = load i8, i8* %arrayidx1517, align 1
  %conv1518 = zext i8 %900 to i32
  %cmp1519 = icmp eq i32 %conv1518, 4
  br i1 %cmp1519, label %if.then1521, label %if.end1556

if.then1521:                                      ; preds = %lor.lhs.false1516, %if.else1511
  %901 = load i8*, i8** %p1, align 8
  %arrayidx1523 = getelementptr inbounds i8, i8* %901, i64 3
  %902 = load i8, i8* %arrayidx1523, align 1
  %conv1524 = zext i8 %902 to i32
  %cmp1525 = icmp eq i32 %conv1524, 4
  %conv1526 = zext i1 %cmp1525 to i32
  store i32 %conv1526, i32* %not1522, align 4
  %903 = load i8, i8* %c1486, align 1
  %conv1527 = zext i8 %903 to i32
  %904 = load i8*, i8** %p1, align 8
  %arrayidx1528 = getelementptr inbounds i8, i8* %904, i64 4
  %905 = load i8, i8* %arrayidx1528, align 1
  %conv1529 = zext i8 %905 to i32
  %mul1530 = mul nsw i32 %conv1529, 8
  %conv1531 = trunc i32 %mul1530 to i8
  %conv1532 = zext i8 %conv1531 to i32
  %cmp1533 = icmp slt i32 %conv1527, %conv1532
  br i1 %cmp1533, label %land.lhs.true1535, label %if.end1551

land.lhs.true1535:                                ; preds = %if.then1521
  %906 = load i8*, i8** %p1, align 8
  %907 = load i8, i8* %c1486, align 1
  %conv1536 = zext i8 %907 to i32
  %div1537 = sdiv i32 %conv1536, 8
  %add1538 = add nsw i32 5, %div1537
  %idxprom1539 = sext i32 %add1538 to i64
  %arrayidx1540 = getelementptr inbounds i8, i8* %906, i64 %idxprom1539
  %908 = load i8, i8* %arrayidx1540, align 1
  %conv1541 = zext i8 %908 to i32
  %909 = load i8, i8* %c1486, align 1
  %conv1542 = zext i8 %909 to i32
  %rem1543 = srem i32 %conv1542, 8
  %shl1544 = shl i32 1, %rem1543
  %and1545 = and i32 %conv1541, %shl1544
  %tobool1546 = icmp ne i32 %and1545, 0
  br i1 %tobool1546, label %if.then1547, label %if.end1551

if.then1547:                                      ; preds = %land.lhs.true1535
  %910 = load i32, i32* %not1522, align 4
  %tobool1548 = icmp ne i32 %910, 0
  %lnot1549 = xor i1 %tobool1548, true
  %lnot.ext1550 = zext i1 %lnot1549 to i32
  store i32 %lnot.ext1550, i32* %not1522, align 4
  br label %if.end1551

if.end1551:                                       ; preds = %if.then1547, %land.lhs.true1535, %if.then1521
  %911 = load i32, i32* %not1522, align 4
  %tobool1552 = icmp ne i32 %911, 0
  br i1 %tobool1552, label %if.end1555, label %if.then1553

if.then1553:                                      ; preds = %if.end1551
  %912 = load i8*, i8** %p, align 8
  %arrayidx1554 = getelementptr inbounds i8, i8* %912, i64 -3
  store i8 16, i8* %arrayidx1554, align 1
  br label %if.end1555

if.end1555:                                       ; preds = %if.then1553, %if.end1551
  br label %if.end1556

if.end1556:                                       ; preds = %if.end1555, %lor.lhs.false1516
  br label %if.end1557

if.end1557:                                       ; preds = %if.end1556, %if.then1509
  br label %if.end1558

if.end1558:                                       ; preds = %if.end1557, %land.lhs.true1481, %lor.lhs.false1475
  br label %if.end1559

if.end1559:                                       ; preds = %if.end1558, %if.then1469
  %913 = load i8*, i8** %p, align 8
  %add.ptr1560 = getelementptr inbounds i8, i8* %913, i64 -2
  store i8* %add.ptr1560, i8** %p, align 8
  %914 = load i8*, i8** %p, align 8
  %arrayidx1561 = getelementptr inbounds i8, i8* %914, i64 -1
  %915 = load i8, i8* %arrayidx1561, align 1
  %conv1562 = zext i8 %915 to i32
  %cmp1563 = icmp ne i32 %conv1562, 16
  br i1 %cmp1563, label %if.then1565, label %if.end1567

if.then1565:                                      ; preds = %if.end1559
  %916 = load i8*, i8** %p, align 8
  %arrayidx1566 = getelementptr inbounds i8, i8* %916, i64 -1
  store i8 12, i8* %arrayidx1566, align 1
  br label %unconditional_jump

if.end1567:                                       ; preds = %if.end1559
  br label %sw.bb1568

sw.bb1568:                                        ; preds = %if.end422, %if.end1567
  %stack1570 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %917 = load i8**, i8*** %stack1570, align 8
  %avail1571 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %918 = load i32, i32* %avail1571, align 4
  %dec1572 = add i32 %918, -1
  store i32 %dec1572, i32* %avail1571, align 4
  %idxprom1573 = zext i32 %dec1572 to i64
  %arrayidx1574 = getelementptr inbounds i8*, i8** %917, i64 %idxprom1573
  %919 = load i8*, i8** %arrayidx1574, align 8
  store i8* %919, i8** %string_temp, align 8
  %920 = load i8*, i8** %string_temp, align 8
  %cmp1575 = icmp ne i8* %920, null
  br i1 %cmp1575, label %if.then1577, label %if.end1578

if.then1577:                                      ; preds = %sw.bb1568
  %921 = load i8*, i8** %string_temp, align 8
  store i8* %921, i8** %sdummy, align 8
  br label %if.end1578

if.end1578:                                       ; preds = %if.then1577, %sw.bb1568
  %stack1579 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %922 = load i8**, i8*** %stack1579, align 8
  %avail1580 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %923 = load i32, i32* %avail1580, align 4
  %dec1581 = add i32 %923, -1
  store i32 %dec1581, i32* %avail1580, align 4
  %idxprom1582 = zext i32 %dec1581 to i64
  %arrayidx1583 = getelementptr inbounds i8*, i8** %922, i64 %idxprom1582
  %924 = load i8*, i8** %arrayidx1583, align 8
  store i8* %924, i8** %pdummy, align 8
  %stack1584 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %925 = load i8**, i8*** %stack1584, align 8
  %avail1585 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %926 = load i32, i32* %avail1585, align 4
  %dec1586 = add i32 %926, -1
  store i32 %dec1586, i32* %avail1585, align 4
  %idxprom1587 = zext i32 %dec1586 to i64
  %arrayidx1588 = getelementptr inbounds i8*, i8** %925, i64 %idxprom1587
  %927 = load i8*, i8** %arrayidx1588, align 8
  %928 = ptrtoint i8* %927 to i32
  store i32 %928, i32* %dummy_high_reg, align 4
  %stack1589 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %929 = load i8**, i8*** %stack1589, align 8
  %avail1590 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %930 = load i32, i32* %avail1590, align 4
  %dec1591 = add i32 %930, -1
  store i32 %dec1591, i32* %avail1590, align 4
  %idxprom1592 = zext i32 %dec1591 to i64
  %arrayidx1593 = getelementptr inbounds i8*, i8** %929, i64 %idxprom1592
  %931 = load i8*, i8** %arrayidx1593, align 8
  %932 = ptrtoint i8* %931 to i32
  store i32 %932, i32* %dummy_low_reg, align 4
  %933 = load i32, i32* %dummy_high_reg, align 4
  store i32 %933, i32* %this_reg1569, align 4
  br label %for.cond1594

for.cond1594:                                     ; preds = %for.inc1620, %if.end1578
  %934 = load i32, i32* %this_reg1569, align 4
  %935 = load i32, i32* %dummy_low_reg, align 4
  %cmp1595 = icmp uge i32 %934, %935
  br i1 %cmp1595, label %for.body1597, label %for.end1622

for.body1597:                                     ; preds = %for.cond1594
  %stack1598 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %936 = load i8**, i8*** %stack1598, align 8
  %avail1599 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %937 = load i32, i32* %avail1599, align 4
  %dec1600 = add i32 %937, -1
  store i32 %dec1600, i32* %avail1599, align 4
  %idxprom1601 = zext i32 %dec1600 to i64
  %arrayidx1602 = getelementptr inbounds i8*, i8** %936, i64 %idxprom1601
  %938 = load i8*, i8** %arrayidx1602, align 8
  %939 = load %union.register_info_type*, %union.register_info_type** %reg_info_dummy, align 8
  %940 = load i32, i32* %this_reg1569, align 4
  %idxprom1603 = sext i32 %940 to i64
  %arrayidx1604 = getelementptr inbounds %union.register_info_type, %union.register_info_type* %939, i64 %idxprom1603
  %word1605 = bitcast %union.register_info_type* %arrayidx1604 to i8**
  store i8* %938, i8** %word1605, align 8
  %stack1606 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %941 = load i8**, i8*** %stack1606, align 8
  %avail1607 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %942 = load i32, i32* %avail1607, align 4
  %dec1608 = add i32 %942, -1
  store i32 %dec1608, i32* %avail1607, align 4
  %idxprom1609 = zext i32 %dec1608 to i64
  %arrayidx1610 = getelementptr inbounds i8*, i8** %941, i64 %idxprom1609
  %943 = load i8*, i8** %arrayidx1610, align 8
  %944 = load i8**, i8*** %reg_dummy, align 8
  %945 = load i32, i32* %this_reg1569, align 4
  %idxprom1611 = sext i32 %945 to i64
  %arrayidx1612 = getelementptr inbounds i8*, i8** %944, i64 %idxprom1611
  store i8* %943, i8** %arrayidx1612, align 8
  %stack1613 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %946 = load i8**, i8*** %stack1613, align 8
  %avail1614 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %947 = load i32, i32* %avail1614, align 4
  %dec1615 = add i32 %947, -1
  store i32 %dec1615, i32* %avail1614, align 4
  %idxprom1616 = zext i32 %dec1615 to i64
  %arrayidx1617 = getelementptr inbounds i8*, i8** %946, i64 %idxprom1616
  %948 = load i8*, i8** %arrayidx1617, align 8
  %949 = load i8**, i8*** %reg_dummy, align 8
  %950 = load i32, i32* %this_reg1569, align 4
  %idxprom1618 = sext i32 %950 to i64
  %arrayidx1619 = getelementptr inbounds i8*, i8** %949, i64 %idxprom1618
  store i8* %948, i8** %arrayidx1619, align 8
  br label %for.inc1620

for.inc1620:                                      ; preds = %for.body1597
  %951 = load i32, i32* %this_reg1569, align 4
  %dec1621 = add nsw i32 %951, -1
  store i32 %dec1621, i32* %this_reg1569, align 4
  br label %for.cond1594, !llvm.loop !48

for.end1622:                                      ; preds = %for.cond1594
  br label %sw.bb1623

sw.bb1623:                                        ; preds = %if.end422, %for.end1622
  br label %unconditional_jump

unconditional_jump:                               ; preds = %do.end1900, %do.end1738, %sw.bb1639, %sw.bb1623, %if.then1565
  br label %do.body1624

do.body1624:                                      ; preds = %unconditional_jump
  br label %do.body1625

do.body1625:                                      ; preds = %do.body1624
  %952 = load i8*, i8** %p, align 8
  %953 = load i8, i8* %952, align 1
  %conv1626 = zext i8 %953 to i32
  %and1627 = and i32 %conv1626, 255
  store i32 %and1627, i32* %mcnt, align 4
  %954 = load i8*, i8** %p, align 8
  %add.ptr1628 = getelementptr inbounds i8, i8* %954, i64 1
  %955 = load i8, i8* %add.ptr1628, align 1
  %conv1629 = sext i8 %955 to i32
  %shl1630 = shl i32 %conv1629, 8
  %956 = load i32, i32* %mcnt, align 4
  %add1631 = add nsw i32 %956, %shl1630
  store i32 %add1631, i32* %mcnt, align 4
  br label %do.end1633

do.end1633:                                       ; preds = %do.body1625
  %957 = load i8*, i8** %p, align 8
  %add.ptr1634 = getelementptr inbounds i8, i8* %957, i64 2
  store i8* %add.ptr1634, i8** %p, align 8
  br label %do.end1636

do.end1636:                                       ; preds = %do.end1633
  %958 = load i32, i32* %mcnt, align 4
  %959 = load i8*, i8** %p, align 8
  %idx.ext1637 = sext i32 %958 to i64
  %add.ptr1638 = getelementptr inbounds i8, i8* %959, i64 %idx.ext1637
  store i8* %add.ptr1638, i8** %p, align 8
  br label %sw.epilog2314

sw.bb1639:                                        ; preds = %if.end422
  br label %unconditional_jump

sw.bb1640:                                        ; preds = %if.end422
  br label %do.body1641

do.body1641:                                      ; preds = %sw.bb1640
  br label %while.cond1644

while.cond1644:                                   ; preds = %if.end1684, %do.body1641
  %size1645 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 1
  %960 = load i32, i32* %size1645, align 8
  %avail1646 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %961 = load i32, i32* %avail1646, align 4
  %sub1647 = sub i32 %960, %961
  %962 = load i32, i32* %highest_active_reg, align 4
  %963 = load i32, i32* %lowest_active_reg, align 4
  %sub1648 = sub i32 %962, %963
  %add1649 = add i32 %sub1648, 1
  %mul1650 = mul i32 %add1649, 3
  %add1651 = add i32 %mul1650, 4
  %cmp1652 = icmp ult i32 %sub1647, %add1651
  br i1 %cmp1652, label %while.body1654, label %while.end1685

while.body1654:                                   ; preds = %while.cond1644
  %size1655 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 1
  %964 = load i32, i32* %size1655, align 8
  %965 = load i32, i32* @re_max_failures, align 4
  %966 = load i32, i32* %num_regs, align 4
  %sub1656 = sub i32 %966, 1
  %mul1657 = mul i32 %sub1656, 3
  %add1658 = add i32 %mul1657, 4
  %mul1659 = mul i32 %965, %add1658
  %cmp1660 = icmp ugt i32 %964, %mul1659
  br i1 %cmp1660, label %cond.true1662, label %cond.false1663

cond.true1662:                                    ; preds = %while.body1654
  br i1 false, label %if.end1684, label %if.then1683

cond.false1663:                                   ; preds = %while.body1654
  %size1664 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 1
  %967 = load i32, i32* %size1664, align 8
  %shl1665 = shl i32 %967, 1
  %conv1666 = zext i32 %shl1665 to i64
  %mul1667 = mul i64 %conv1666, 8
  %968 = alloca i8, i64 %mul1667, align 16
  store i8* %968, i8** %destination1642, align 8
  %969 = load i8*, i8** %destination1642, align 8
  %stack1668 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %970 = load i8**, i8*** %stack1668, align 8
  %971 = bitcast i8** %970 to i8*
  %size1669 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 1
  %972 = load i32, i32* %size1669, align 8
  %conv1670 = zext i32 %972 to i64
  %mul1671 = mul i64 %conv1670, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %969, i8* align 8 %971, i64 %mul1671, i1 false)
  %973 = load i8*, i8** %destination1642, align 8
  %974 = bitcast i8* %973 to i8**
  %stack1672 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  store i8** %974, i8*** %stack1672, align 8
  %stack1673 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %975 = load i8**, i8*** %stack1673, align 8
  %cmp1674 = icmp eq i8** %975, null
  br i1 %cmp1674, label %cond.true1676, label %cond.false1677

cond.true1676:                                    ; preds = %cond.false1663
  br label %cond.end1680

cond.false1677:                                   ; preds = %cond.false1663
  %size1678 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 1
  %976 = load i32, i32* %size1678, align 8
  %shl1679 = shl i32 %976, 1
  store i32 %shl1679, i32* %size1678, align 8
  br label %cond.end1680

cond.end1680:                                     ; preds = %cond.false1677, %cond.true1676
  %cond1681 = phi i32 [ 0, %cond.true1676 ], [ 1, %cond.false1677 ]
  %tobool1682 = icmp ne i32 %cond1681, 0
  br i1 %tobool1682, label %if.end1684, label %if.then1683

if.then1683:                                      ; preds = %cond.end1680, %cond.true1662
  store i32 -2, i32* %retval, align 4
  br label %return

if.end1684:                                       ; preds = %cond.end1680, %cond.true1662
  br label %while.cond1644, !llvm.loop !49

while.end1685:                                    ; preds = %while.cond1644
  %977 = load i32, i32* %lowest_active_reg, align 4
  store i32 %977, i32* %this_reg1643, align 4
  br label %for.cond1686

for.cond1686:                                     ; preds = %for.inc1712, %while.end1685
  %978 = load i32, i32* %this_reg1643, align 4
  %979 = load i32, i32* %highest_active_reg, align 4
  %cmp1687 = icmp ule i32 %978, %979
  br i1 %cmp1687, label %for.body1689, label %for.end1714

for.body1689:                                     ; preds = %for.cond1686
  %980 = load i8**, i8*** %regstart, align 8
  %981 = load i32, i32* %this_reg1643, align 4
  %idxprom1690 = sext i32 %981 to i64
  %arrayidx1691 = getelementptr inbounds i8*, i8** %980, i64 %idxprom1690
  %982 = load i8*, i8** %arrayidx1691, align 8
  %stack1692 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %983 = load i8**, i8*** %stack1692, align 8
  %avail1693 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %984 = load i32, i32* %avail1693, align 4
  %inc1694 = add i32 %984, 1
  store i32 %inc1694, i32* %avail1693, align 4
  %idxprom1695 = zext i32 %984 to i64
  %arrayidx1696 = getelementptr inbounds i8*, i8** %983, i64 %idxprom1695
  store i8* %982, i8** %arrayidx1696, align 8
  %985 = load i8**, i8*** %regend, align 8
  %986 = load i32, i32* %this_reg1643, align 4
  %idxprom1697 = sext i32 %986 to i64
  %arrayidx1698 = getelementptr inbounds i8*, i8** %985, i64 %idxprom1697
  %987 = load i8*, i8** %arrayidx1698, align 8
  %stack1699 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %988 = load i8**, i8*** %stack1699, align 8
  %avail1700 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %989 = load i32, i32* %avail1700, align 4
  %inc1701 = add i32 %989, 1
  store i32 %inc1701, i32* %avail1700, align 4
  %idxprom1702 = zext i32 %989 to i64
  %arrayidx1703 = getelementptr inbounds i8*, i8** %988, i64 %idxprom1702
  store i8* %987, i8** %arrayidx1703, align 8
  %990 = load %union.register_info_type*, %union.register_info_type** %reg_info, align 8
  %991 = load i32, i32* %this_reg1643, align 4
  %idxprom1704 = sext i32 %991 to i64
  %arrayidx1705 = getelementptr inbounds %union.register_info_type, %union.register_info_type* %990, i64 %idxprom1704
  %word1706 = bitcast %union.register_info_type* %arrayidx1705 to i8**
  %992 = load i8*, i8** %word1706, align 8
  %stack1707 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %993 = load i8**, i8*** %stack1707, align 8
  %avail1708 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %994 = load i32, i32* %avail1708, align 4
  %inc1709 = add i32 %994, 1
  store i32 %inc1709, i32* %avail1708, align 4
  %idxprom1710 = zext i32 %994 to i64
  %arrayidx1711 = getelementptr inbounds i8*, i8** %993, i64 %idxprom1710
  store i8* %992, i8** %arrayidx1711, align 8
  br label %for.inc1712

for.inc1712:                                      ; preds = %for.body1689
  %995 = load i32, i32* %this_reg1643, align 4
  %inc1713 = add nsw i32 %995, 1
  store i32 %inc1713, i32* %this_reg1643, align 4
  br label %for.cond1686, !llvm.loop !50

for.end1714:                                      ; preds = %for.cond1686
  %996 = load i32, i32* %lowest_active_reg, align 4
  %conv1715 = zext i32 %996 to i64
  %997 = inttoptr i64 %conv1715 to i8*
  %stack1716 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %998 = load i8**, i8*** %stack1716, align 8
  %avail1717 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %999 = load i32, i32* %avail1717, align 4
  %inc1718 = add i32 %999, 1
  store i32 %inc1718, i32* %avail1717, align 4
  %idxprom1719 = zext i32 %999 to i64
  %arrayidx1720 = getelementptr inbounds i8*, i8** %998, i64 %idxprom1719
  store i8* %997, i8** %arrayidx1720, align 8
  %1000 = load i32, i32* %highest_active_reg, align 4
  %conv1721 = zext i32 %1000 to i64
  %1001 = inttoptr i64 %conv1721 to i8*
  %stack1722 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %1002 = load i8**, i8*** %stack1722, align 8
  %avail1723 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %1003 = load i32, i32* %avail1723, align 4
  %inc1724 = add i32 %1003, 1
  store i32 %inc1724, i32* %avail1723, align 4
  %idxprom1725 = zext i32 %1003 to i64
  %arrayidx1726 = getelementptr inbounds i8*, i8** %1002, i64 %idxprom1725
  store i8* %1001, i8** %arrayidx1726, align 8
  %stack1727 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %1004 = load i8**, i8*** %stack1727, align 8
  %avail1728 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %1005 = load i32, i32* %avail1728, align 4
  %inc1729 = add i32 %1005, 1
  store i32 %inc1729, i32* %avail1728, align 4
  %idxprom1730 = zext i32 %1005 to i64
  %arrayidx1731 = getelementptr inbounds i8*, i8** %1004, i64 %idxprom1730
  store i8* null, i8** %arrayidx1731, align 8
  %stack1732 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %1006 = load i8**, i8*** %stack1732, align 8
  %avail1733 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %1007 = load i32, i32* %avail1733, align 4
  %inc1734 = add i32 %1007, 1
  store i32 %inc1734, i32* %avail1733, align 4
  %idxprom1735 = zext i32 %1007 to i64
  %arrayidx1736 = getelementptr inbounds i8*, i8** %1006, i64 %idxprom1735
  store i8* null, i8** %arrayidx1736, align 8
  br label %do.end1738

do.end1738:                                       ; preds = %for.end1714
  br label %unconditional_jump

sw.bb1739:                                        ; preds = %if.end422
  br label %do.body1740

do.body1740:                                      ; preds = %sw.bb1739
  br label %while.cond1743

while.cond1743:                                   ; preds = %if.end1783, %do.body1740
  %size1744 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 1
  %1008 = load i32, i32* %size1744, align 8
  %avail1745 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %1009 = load i32, i32* %avail1745, align 4
  %sub1746 = sub i32 %1008, %1009
  %1010 = load i32, i32* %highest_active_reg, align 4
  %1011 = load i32, i32* %lowest_active_reg, align 4
  %sub1747 = sub i32 %1010, %1011
  %add1748 = add i32 %sub1747, 1
  %mul1749 = mul i32 %add1748, 3
  %add1750 = add i32 %mul1749, 4
  %cmp1751 = icmp ult i32 %sub1746, %add1750
  br i1 %cmp1751, label %while.body1753, label %while.end1784

while.body1753:                                   ; preds = %while.cond1743
  %size1754 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 1
  %1012 = load i32, i32* %size1754, align 8
  %1013 = load i32, i32* @re_max_failures, align 4
  %1014 = load i32, i32* %num_regs, align 4
  %sub1755 = sub i32 %1014, 1
  %mul1756 = mul i32 %sub1755, 3
  %add1757 = add i32 %mul1756, 4
  %mul1758 = mul i32 %1013, %add1757
  %cmp1759 = icmp ugt i32 %1012, %mul1758
  br i1 %cmp1759, label %cond.true1761, label %cond.false1762

cond.true1761:                                    ; preds = %while.body1753
  br i1 false, label %if.end1783, label %if.then1782

cond.false1762:                                   ; preds = %while.body1753
  %size1763 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 1
  %1015 = load i32, i32* %size1763, align 8
  %shl1764 = shl i32 %1015, 1
  %conv1765 = zext i32 %shl1764 to i64
  %mul1766 = mul i64 %conv1765, 8
  %1016 = alloca i8, i64 %mul1766, align 16
  store i8* %1016, i8** %destination1741, align 8
  %1017 = load i8*, i8** %destination1741, align 8
  %stack1767 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %1018 = load i8**, i8*** %stack1767, align 8
  %1019 = bitcast i8** %1018 to i8*
  %size1768 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 1
  %1020 = load i32, i32* %size1768, align 8
  %conv1769 = zext i32 %1020 to i64
  %mul1770 = mul i64 %conv1769, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1017, i8* align 8 %1019, i64 %mul1770, i1 false)
  %1021 = load i8*, i8** %destination1741, align 8
  %1022 = bitcast i8* %1021 to i8**
  %stack1771 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  store i8** %1022, i8*** %stack1771, align 8
  %stack1772 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %1023 = load i8**, i8*** %stack1772, align 8
  %cmp1773 = icmp eq i8** %1023, null
  br i1 %cmp1773, label %cond.true1775, label %cond.false1776

cond.true1775:                                    ; preds = %cond.false1762
  br label %cond.end1779

cond.false1776:                                   ; preds = %cond.false1762
  %size1777 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 1
  %1024 = load i32, i32* %size1777, align 8
  %shl1778 = shl i32 %1024, 1
  store i32 %shl1778, i32* %size1777, align 8
  br label %cond.end1779

cond.end1779:                                     ; preds = %cond.false1776, %cond.true1775
  %cond1780 = phi i32 [ 0, %cond.true1775 ], [ 1, %cond.false1776 ]
  %tobool1781 = icmp ne i32 %cond1780, 0
  br i1 %tobool1781, label %if.end1783, label %if.then1782

if.then1782:                                      ; preds = %cond.end1779, %cond.true1761
  store i32 -2, i32* %retval, align 4
  br label %return

if.end1783:                                       ; preds = %cond.end1779, %cond.true1761
  br label %while.cond1743, !llvm.loop !51

while.end1784:                                    ; preds = %while.cond1743
  %1025 = load i32, i32* %lowest_active_reg, align 4
  store i32 %1025, i32* %this_reg1742, align 4
  br label %for.cond1785

for.cond1785:                                     ; preds = %for.inc1811, %while.end1784
  %1026 = load i32, i32* %this_reg1742, align 4
  %1027 = load i32, i32* %highest_active_reg, align 4
  %cmp1786 = icmp ule i32 %1026, %1027
  br i1 %cmp1786, label %for.body1788, label %for.end1813

for.body1788:                                     ; preds = %for.cond1785
  %1028 = load i8**, i8*** %regstart, align 8
  %1029 = load i32, i32* %this_reg1742, align 4
  %idxprom1789 = sext i32 %1029 to i64
  %arrayidx1790 = getelementptr inbounds i8*, i8** %1028, i64 %idxprom1789
  %1030 = load i8*, i8** %arrayidx1790, align 8
  %stack1791 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %1031 = load i8**, i8*** %stack1791, align 8
  %avail1792 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %1032 = load i32, i32* %avail1792, align 4
  %inc1793 = add i32 %1032, 1
  store i32 %inc1793, i32* %avail1792, align 4
  %idxprom1794 = zext i32 %1032 to i64
  %arrayidx1795 = getelementptr inbounds i8*, i8** %1031, i64 %idxprom1794
  store i8* %1030, i8** %arrayidx1795, align 8
  %1033 = load i8**, i8*** %regend, align 8
  %1034 = load i32, i32* %this_reg1742, align 4
  %idxprom1796 = sext i32 %1034 to i64
  %arrayidx1797 = getelementptr inbounds i8*, i8** %1033, i64 %idxprom1796
  %1035 = load i8*, i8** %arrayidx1797, align 8
  %stack1798 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %1036 = load i8**, i8*** %stack1798, align 8
  %avail1799 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %1037 = load i32, i32* %avail1799, align 4
  %inc1800 = add i32 %1037, 1
  store i32 %inc1800, i32* %avail1799, align 4
  %idxprom1801 = zext i32 %1037 to i64
  %arrayidx1802 = getelementptr inbounds i8*, i8** %1036, i64 %idxprom1801
  store i8* %1035, i8** %arrayidx1802, align 8
  %1038 = load %union.register_info_type*, %union.register_info_type** %reg_info, align 8
  %1039 = load i32, i32* %this_reg1742, align 4
  %idxprom1803 = sext i32 %1039 to i64
  %arrayidx1804 = getelementptr inbounds %union.register_info_type, %union.register_info_type* %1038, i64 %idxprom1803
  %word1805 = bitcast %union.register_info_type* %arrayidx1804 to i8**
  %1040 = load i8*, i8** %word1805, align 8
  %stack1806 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %1041 = load i8**, i8*** %stack1806, align 8
  %avail1807 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %1042 = load i32, i32* %avail1807, align 4
  %inc1808 = add i32 %1042, 1
  store i32 %inc1808, i32* %avail1807, align 4
  %idxprom1809 = zext i32 %1042 to i64
  %arrayidx1810 = getelementptr inbounds i8*, i8** %1041, i64 %idxprom1809
  store i8* %1040, i8** %arrayidx1810, align 8
  br label %for.inc1811

for.inc1811:                                      ; preds = %for.body1788
  %1043 = load i32, i32* %this_reg1742, align 4
  %inc1812 = add nsw i32 %1043, 1
  store i32 %inc1812, i32* %this_reg1742, align 4
  br label %for.cond1785, !llvm.loop !52

for.end1813:                                      ; preds = %for.cond1785
  %1044 = load i32, i32* %lowest_active_reg, align 4
  %conv1814 = zext i32 %1044 to i64
  %1045 = inttoptr i64 %conv1814 to i8*
  %stack1815 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %1046 = load i8**, i8*** %stack1815, align 8
  %avail1816 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %1047 = load i32, i32* %avail1816, align 4
  %inc1817 = add i32 %1047, 1
  store i32 %inc1817, i32* %avail1816, align 4
  %idxprom1818 = zext i32 %1047 to i64
  %arrayidx1819 = getelementptr inbounds i8*, i8** %1046, i64 %idxprom1818
  store i8* %1045, i8** %arrayidx1819, align 8
  %1048 = load i32, i32* %highest_active_reg, align 4
  %conv1820 = zext i32 %1048 to i64
  %1049 = inttoptr i64 %conv1820 to i8*
  %stack1821 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %1050 = load i8**, i8*** %stack1821, align 8
  %avail1822 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %1051 = load i32, i32* %avail1822, align 4
  %inc1823 = add i32 %1051, 1
  store i32 %inc1823, i32* %avail1822, align 4
  %idxprom1824 = zext i32 %1051 to i64
  %arrayidx1825 = getelementptr inbounds i8*, i8** %1050, i64 %idxprom1824
  store i8* %1049, i8** %arrayidx1825, align 8
  %stack1826 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %1052 = load i8**, i8*** %stack1826, align 8
  %avail1827 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %1053 = load i32, i32* %avail1827, align 4
  %inc1828 = add i32 %1053, 1
  store i32 %inc1828, i32* %avail1827, align 4
  %idxprom1829 = zext i32 %1053 to i64
  %arrayidx1830 = getelementptr inbounds i8*, i8** %1052, i64 %idxprom1829
  store i8* null, i8** %arrayidx1830, align 8
  %stack1831 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %1054 = load i8**, i8*** %stack1831, align 8
  %avail1832 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %1055 = load i32, i32* %avail1832, align 4
  %inc1833 = add i32 %1055, 1
  store i32 %inc1833, i32* %avail1832, align 4
  %idxprom1834 = zext i32 %1055 to i64
  %arrayidx1835 = getelementptr inbounds i8*, i8** %1054, i64 %idxprom1834
  store i8* null, i8** %arrayidx1835, align 8
  br label %do.end1837

do.end1837:                                       ; preds = %for.end1813
  br label %sw.epilog2314

sw.bb1838:                                        ; preds = %if.end422
  br label %do.body1839

do.body1839:                                      ; preds = %sw.bb1838
  %1056 = load i8*, i8** %p, align 8
  %add.ptr1840 = getelementptr inbounds i8, i8* %1056, i64 2
  %1057 = load i8, i8* %add.ptr1840, align 1
  %conv1841 = zext i8 %1057 to i32
  %and1842 = and i32 %conv1841, 255
  store i32 %and1842, i32* %mcnt, align 4
  %1058 = load i8*, i8** %p, align 8
  %add.ptr1843 = getelementptr inbounds i8, i8* %1058, i64 2
  %add.ptr1844 = getelementptr inbounds i8, i8* %add.ptr1843, i64 1
  %1059 = load i8, i8* %add.ptr1844, align 1
  %conv1845 = sext i8 %1059 to i32
  %shl1846 = shl i32 %conv1845, 8
  %1060 = load i32, i32* %mcnt, align 4
  %add1847 = add nsw i32 %1060, %shl1846
  store i32 %add1847, i32* %mcnt, align 4
  br label %do.end1849

do.end1849:                                       ; preds = %do.body1839
  %1061 = load i32, i32* %mcnt, align 4
  %cmp1850 = icmp sgt i32 %1061, 0
  br i1 %cmp1850, label %if.then1852, label %if.else1867

if.then1852:                                      ; preds = %do.end1849
  %1062 = load i32, i32* %mcnt, align 4
  %dec1853 = add nsw i32 %1062, -1
  store i32 %dec1853, i32* %mcnt, align 4
  %1063 = load i8*, i8** %p, align 8
  %add.ptr1854 = getelementptr inbounds i8, i8* %1063, i64 2
  store i8* %add.ptr1854, i8** %p, align 8
  br label %do.body1855

do.body1855:                                      ; preds = %if.then1852
  br label %do.body1856

do.body1856:                                      ; preds = %do.body1855
  %1064 = load i32, i32* %mcnt, align 4
  %and1857 = and i32 %1064, 255
  %conv1858 = trunc i32 %and1857 to i8
  %1065 = load i8*, i8** %p, align 8
  %arrayidx1859 = getelementptr inbounds i8, i8* %1065, i64 0
  store i8 %conv1858, i8* %arrayidx1859, align 1
  %1066 = load i32, i32* %mcnt, align 4
  %shr = ashr i32 %1066, 8
  %conv1860 = trunc i32 %shr to i8
  %1067 = load i8*, i8** %p, align 8
  %arrayidx1861 = getelementptr inbounds i8, i8* %1067, i64 1
  store i8 %conv1860, i8* %arrayidx1861, align 1
  br label %do.end1863

do.end1863:                                       ; preds = %do.body1856
  %1068 = load i8*, i8** %p, align 8
  %add.ptr1864 = getelementptr inbounds i8, i8* %1068, i64 2
  store i8* %add.ptr1864, i8** %p, align 8
  br label %do.end1866

do.end1866:                                       ; preds = %do.end1863
  br label %if.end1874

if.else1867:                                      ; preds = %do.end1849
  %1069 = load i32, i32* %mcnt, align 4
  %cmp1868 = icmp eq i32 %1069, 0
  br i1 %cmp1868, label %if.then1870, label %if.end1873

if.then1870:                                      ; preds = %if.else1867
  %1070 = load i8*, i8** %p, align 8
  %arrayidx1871 = getelementptr inbounds i8, i8* %1070, i64 2
  store i8 0, i8* %arrayidx1871, align 1
  %1071 = load i8*, i8** %p, align 8
  %arrayidx1872 = getelementptr inbounds i8, i8* %1071, i64 3
  store i8 0, i8* %arrayidx1872, align 1
  br label %on_failure

if.end1873:                                       ; preds = %if.else1867
  br label %if.end1874

if.end1874:                                       ; preds = %if.end1873, %do.end1866
  br label %sw.epilog2314

sw.bb1875:                                        ; preds = %if.end422
  br label %do.body1876

do.body1876:                                      ; preds = %sw.bb1875
  %1072 = load i8*, i8** %p, align 8
  %add.ptr1877 = getelementptr inbounds i8, i8* %1072, i64 2
  %1073 = load i8, i8* %add.ptr1877, align 1
  %conv1878 = zext i8 %1073 to i32
  %and1879 = and i32 %conv1878, 255
  store i32 %and1879, i32* %mcnt, align 4
  %1074 = load i8*, i8** %p, align 8
  %add.ptr1880 = getelementptr inbounds i8, i8* %1074, i64 2
  %add.ptr1881 = getelementptr inbounds i8, i8* %add.ptr1880, i64 1
  %1075 = load i8, i8* %add.ptr1881, align 1
  %conv1882 = sext i8 %1075 to i32
  %shl1883 = shl i32 %conv1882, 8
  %1076 = load i32, i32* %mcnt, align 4
  %add1884 = add nsw i32 %1076, %shl1883
  store i32 %add1884, i32* %mcnt, align 4
  br label %do.end1886

do.end1886:                                       ; preds = %do.body1876
  %1077 = load i32, i32* %mcnt, align 4
  %tobool1887 = icmp ne i32 %1077, 0
  br i1 %tobool1887, label %if.then1888, label %if.else1901

if.then1888:                                      ; preds = %do.end1886
  %1078 = load i32, i32* %mcnt, align 4
  %dec1889 = add nsw i32 %1078, -1
  store i32 %dec1889, i32* %mcnt, align 4
  br label %do.body1890

do.body1890:                                      ; preds = %if.then1888
  %1079 = load i32, i32* %mcnt, align 4
  %and1891 = and i32 %1079, 255
  %conv1892 = trunc i32 %and1891 to i8
  %1080 = load i8*, i8** %p, align 8
  %add.ptr1893 = getelementptr inbounds i8, i8* %1080, i64 2
  %arrayidx1894 = getelementptr inbounds i8, i8* %add.ptr1893, i64 0
  store i8 %conv1892, i8* %arrayidx1894, align 1
  %1081 = load i32, i32* %mcnt, align 4
  %shr1895 = ashr i32 %1081, 8
  %conv1896 = trunc i32 %shr1895 to i8
  %1082 = load i8*, i8** %p, align 8
  %add.ptr1897 = getelementptr inbounds i8, i8* %1082, i64 2
  %arrayidx1898 = getelementptr inbounds i8, i8* %add.ptr1897, i64 1
  store i8 %conv1896, i8* %arrayidx1898, align 1
  br label %do.end1900

do.end1900:                                       ; preds = %do.body1890
  br label %unconditional_jump

if.else1901:                                      ; preds = %do.end1886
  %1083 = load i8*, i8** %p, align 8
  %add.ptr1902 = getelementptr inbounds i8, i8* %1083, i64 4
  store i8* %add.ptr1902, i8** %p, align 8
  br label %if.end1903

if.end1903:                                       ; preds = %if.else1901
  br label %sw.epilog2314

sw.bb1904:                                        ; preds = %if.end422
  br label %do.body1905

do.body1905:                                      ; preds = %sw.bb1904
  br label %do.body1906

do.body1906:                                      ; preds = %do.body1905
  %1084 = load i8*, i8** %p, align 8
  %1085 = load i8, i8* %1084, align 1
  %conv1907 = zext i8 %1085 to i32
  %and1908 = and i32 %conv1907, 255
  store i32 %and1908, i32* %mcnt, align 4
  %1086 = load i8*, i8** %p, align 8
  %add.ptr1909 = getelementptr inbounds i8, i8* %1086, i64 1
  %1087 = load i8, i8* %add.ptr1909, align 1
  %conv1910 = sext i8 %1087 to i32
  %shl1911 = shl i32 %conv1910, 8
  %1088 = load i32, i32* %mcnt, align 4
  %add1912 = add nsw i32 %1088, %shl1911
  store i32 %add1912, i32* %mcnt, align 4
  br label %do.end1914

do.end1914:                                       ; preds = %do.body1906
  %1089 = load i8*, i8** %p, align 8
  %add.ptr1915 = getelementptr inbounds i8, i8* %1089, i64 2
  store i8* %add.ptr1915, i8** %p, align 8
  br label %do.end1917

do.end1917:                                       ; preds = %do.end1914
  %1090 = load i8*, i8** %p, align 8
  %1091 = load i32, i32* %mcnt, align 4
  %idx.ext1918 = sext i32 %1091 to i64
  %add.ptr1919 = getelementptr inbounds i8, i8* %1090, i64 %idx.ext1918
  store i8* %add.ptr1919, i8** %p1, align 8
  br label %do.body1920

do.body1920:                                      ; preds = %do.end1917
  br label %do.body1921

do.body1921:                                      ; preds = %do.body1920
  %1092 = load i8*, i8** %p, align 8
  %1093 = load i8, i8* %1092, align 1
  %conv1922 = zext i8 %1093 to i32
  %and1923 = and i32 %conv1922, 255
  store i32 %and1923, i32* %mcnt, align 4
  %1094 = load i8*, i8** %p, align 8
  %add.ptr1924 = getelementptr inbounds i8, i8* %1094, i64 1
  %1095 = load i8, i8* %add.ptr1924, align 1
  %conv1925 = sext i8 %1095 to i32
  %shl1926 = shl i32 %conv1925, 8
  %1096 = load i32, i32* %mcnt, align 4
  %add1927 = add nsw i32 %1096, %shl1926
  store i32 %add1927, i32* %mcnt, align 4
  br label %do.end1929

do.end1929:                                       ; preds = %do.body1921
  %1097 = load i8*, i8** %p, align 8
  %add.ptr1930 = getelementptr inbounds i8, i8* %1097, i64 2
  store i8* %add.ptr1930, i8** %p, align 8
  br label %do.end1932

do.end1932:                                       ; preds = %do.end1929
  br label %do.body1933

do.body1933:                                      ; preds = %do.end1932
  %1098 = load i32, i32* %mcnt, align 4
  %and1934 = and i32 %1098, 255
  %conv1935 = trunc i32 %and1934 to i8
  %1099 = load i8*, i8** %p1, align 8
  %arrayidx1936 = getelementptr inbounds i8, i8* %1099, i64 0
  store i8 %conv1935, i8* %arrayidx1936, align 1
  %1100 = load i32, i32* %mcnt, align 4
  %shr1937 = ashr i32 %1100, 8
  %conv1938 = trunc i32 %shr1937 to i8
  %1101 = load i8*, i8** %p1, align 8
  %arrayidx1939 = getelementptr inbounds i8, i8* %1101, i64 1
  store i8 %conv1938, i8* %arrayidx1939, align 1
  br label %do.end1941

do.end1941:                                       ; preds = %do.body1933
  br label %sw.epilog2314

sw.bb1942:                                        ; preds = %if.end422
  %1102 = load i8*, i8** %d, align 8
  %1103 = load i32, i32* %size1.addr, align 4
  %tobool1943 = icmp ne i32 %1103, 0
  br i1 %tobool1943, label %cond.true1944, label %cond.false1945

cond.true1944:                                    ; preds = %sw.bb1942
  %1104 = load i8*, i8** %string1.addr, align 8
  br label %cond.end1946

cond.false1945:                                   ; preds = %sw.bb1942
  %1105 = load i8*, i8** %string2.addr, align 8
  br label %cond.end1946

cond.end1946:                                     ; preds = %cond.false1945, %cond.true1944
  %cond1947 = phi i8* [ %1104, %cond.true1944 ], [ %1105, %cond.false1945 ]
  %cmp1948 = icmp eq i8* %1102, %cond1947
  br i1 %cmp1948, label %if.then2005, label %lor.lhs.false1950

lor.lhs.false1950:                                ; preds = %cond.end1946
  %1106 = load i32, i32* %size2.addr, align 4
  %tobool1951 = icmp ne i32 %1106, 0
  br i1 %tobool1951, label %lor.lhs.false1952, label %if.then2005

lor.lhs.false1952:                                ; preds = %lor.lhs.false1950
  %1107 = load i8*, i8** %d, align 8
  %1108 = load i8*, i8** %end2, align 8
  %cmp1953 = icmp eq i8* %1107, %1108
  br i1 %cmp1953, label %if.then2005, label %lor.lhs.false1955

lor.lhs.false1955:                                ; preds = %lor.lhs.false1952
  %1109 = load i8*, i8** %d, align 8
  %add.ptr1956 = getelementptr inbounds i8, i8* %1109, i64 -1
  %1110 = load i8*, i8** %end1, align 8
  %cmp1957 = icmp eq i8* %add.ptr1956, %1110
  br i1 %cmp1957, label %cond.true1959, label %cond.false1961

cond.true1959:                                    ; preds = %lor.lhs.false1955
  %1111 = load i8*, i8** %string2.addr, align 8
  %1112 = load i8, i8* %1111, align 1
  %conv1960 = sext i8 %1112 to i32
  br label %cond.end1974

cond.false1961:                                   ; preds = %lor.lhs.false1955
  %1113 = load i8*, i8** %d, align 8
  %add.ptr1962 = getelementptr inbounds i8, i8* %1113, i64 -1
  %1114 = load i8*, i8** %string2.addr, align 8
  %add.ptr1963 = getelementptr inbounds i8, i8* %1114, i64 -1
  %cmp1964 = icmp eq i8* %add.ptr1962, %add.ptr1963
  br i1 %cmp1964, label %cond.true1966, label %cond.false1969

cond.true1966:                                    ; preds = %cond.false1961
  %1115 = load i8*, i8** %end1, align 8
  %add.ptr1967 = getelementptr inbounds i8, i8* %1115, i64 -1
  %1116 = load i8, i8* %add.ptr1967, align 1
  %conv1968 = sext i8 %1116 to i32
  br label %cond.end1972

cond.false1969:                                   ; preds = %cond.false1961
  %1117 = load i8*, i8** %d, align 8
  %add.ptr1970 = getelementptr inbounds i8, i8* %1117, i64 -1
  %1118 = load i8, i8* %add.ptr1970, align 1
  %conv1971 = sext i8 %1118 to i32
  br label %cond.end1972

cond.end1972:                                     ; preds = %cond.false1969, %cond.true1966
  %cond1973 = phi i32 [ %conv1968, %cond.true1966 ], [ %conv1971, %cond.false1969 ]
  br label %cond.end1974

cond.end1974:                                     ; preds = %cond.end1972, %cond.true1959
  %cond1975 = phi i32 [ %conv1960, %cond.true1959 ], [ %cond1973, %cond.end1972 ]
  %idxprom1976 = sext i32 %cond1975 to i64
  %arrayidx1977 = getelementptr inbounds [256 x i8], [256 x i8]* @re_syntax_table, i64 0, i64 %idxprom1976
  %1119 = load i8, i8* %arrayidx1977, align 1
  %conv1978 = sext i8 %1119 to i32
  %cmp1979 = icmp eq i32 %conv1978, 1
  %conv1980 = zext i1 %cmp1979 to i32
  %1120 = load i8*, i8** %d, align 8
  %1121 = load i8*, i8** %end1, align 8
  %cmp1981 = icmp eq i8* %1120, %1121
  br i1 %cmp1981, label %cond.true1983, label %cond.false1985

cond.true1983:                                    ; preds = %cond.end1974
  %1122 = load i8*, i8** %string2.addr, align 8
  %1123 = load i8, i8* %1122, align 1
  %conv1984 = sext i8 %1123 to i32
  br label %cond.end1996

cond.false1985:                                   ; preds = %cond.end1974
  %1124 = load i8*, i8** %d, align 8
  %1125 = load i8*, i8** %string2.addr, align 8
  %add.ptr1986 = getelementptr inbounds i8, i8* %1125, i64 -1
  %cmp1987 = icmp eq i8* %1124, %add.ptr1986
  br i1 %cmp1987, label %cond.true1989, label %cond.false1992

cond.true1989:                                    ; preds = %cond.false1985
  %1126 = load i8*, i8** %end1, align 8
  %add.ptr1990 = getelementptr inbounds i8, i8* %1126, i64 -1
  %1127 = load i8, i8* %add.ptr1990, align 1
  %conv1991 = sext i8 %1127 to i32
  br label %cond.end1994

cond.false1992:                                   ; preds = %cond.false1985
  %1128 = load i8*, i8** %d, align 8
  %1129 = load i8, i8* %1128, align 1
  %conv1993 = sext i8 %1129 to i32
  br label %cond.end1994

cond.end1994:                                     ; preds = %cond.false1992, %cond.true1989
  %cond1995 = phi i32 [ %conv1991, %cond.true1989 ], [ %conv1993, %cond.false1992 ]
  br label %cond.end1996

cond.end1996:                                     ; preds = %cond.end1994, %cond.true1983
  %cond1997 = phi i32 [ %conv1984, %cond.true1983 ], [ %cond1995, %cond.end1994 ]
  %idxprom1998 = sext i32 %cond1997 to i64
  %arrayidx1999 = getelementptr inbounds [256 x i8], [256 x i8]* @re_syntax_table, i64 0, i64 %idxprom1998
  %1130 = load i8, i8* %arrayidx1999, align 1
  %conv2000 = sext i8 %1130 to i32
  %cmp2001 = icmp eq i32 %conv2000, 1
  %conv2002 = zext i1 %cmp2001 to i32
  %cmp2003 = icmp ne i32 %conv1980, %conv2002
  br i1 %cmp2003, label %if.then2005, label %if.end2006

if.then2005:                                      ; preds = %cond.end1996, %lor.lhs.false1952, %lor.lhs.false1950, %cond.end1946
  br label %sw.epilog2314

if.end2006:                                       ; preds = %cond.end1996
  br label %fail

sw.bb2007:                                        ; preds = %if.end422
  %1131 = load i8*, i8** %d, align 8
  %1132 = load i32, i32* %size1.addr, align 4
  %tobool2008 = icmp ne i32 %1132, 0
  br i1 %tobool2008, label %cond.true2009, label %cond.false2010

cond.true2009:                                    ; preds = %sw.bb2007
  %1133 = load i8*, i8** %string1.addr, align 8
  br label %cond.end2011

cond.false2010:                                   ; preds = %sw.bb2007
  %1134 = load i8*, i8** %string2.addr, align 8
  br label %cond.end2011

cond.end2011:                                     ; preds = %cond.false2010, %cond.true2009
  %cond2012 = phi i8* [ %1133, %cond.true2009 ], [ %1134, %cond.false2010 ]
  %cmp2013 = icmp eq i8* %1131, %cond2012
  br i1 %cmp2013, label %if.then2070, label %lor.lhs.false2015

lor.lhs.false2015:                                ; preds = %cond.end2011
  %1135 = load i32, i32* %size2.addr, align 4
  %tobool2016 = icmp ne i32 %1135, 0
  br i1 %tobool2016, label %lor.lhs.false2017, label %if.then2070

lor.lhs.false2017:                                ; preds = %lor.lhs.false2015
  %1136 = load i8*, i8** %d, align 8
  %1137 = load i8*, i8** %end2, align 8
  %cmp2018 = icmp eq i8* %1136, %1137
  br i1 %cmp2018, label %if.then2070, label %lor.lhs.false2020

lor.lhs.false2020:                                ; preds = %lor.lhs.false2017
  %1138 = load i8*, i8** %d, align 8
  %add.ptr2021 = getelementptr inbounds i8, i8* %1138, i64 -1
  %1139 = load i8*, i8** %end1, align 8
  %cmp2022 = icmp eq i8* %add.ptr2021, %1139
  br i1 %cmp2022, label %cond.true2024, label %cond.false2026

cond.true2024:                                    ; preds = %lor.lhs.false2020
  %1140 = load i8*, i8** %string2.addr, align 8
  %1141 = load i8, i8* %1140, align 1
  %conv2025 = sext i8 %1141 to i32
  br label %cond.end2039

cond.false2026:                                   ; preds = %lor.lhs.false2020
  %1142 = load i8*, i8** %d, align 8
  %add.ptr2027 = getelementptr inbounds i8, i8* %1142, i64 -1
  %1143 = load i8*, i8** %string2.addr, align 8
  %add.ptr2028 = getelementptr inbounds i8, i8* %1143, i64 -1
  %cmp2029 = icmp eq i8* %add.ptr2027, %add.ptr2028
  br i1 %cmp2029, label %cond.true2031, label %cond.false2034

cond.true2031:                                    ; preds = %cond.false2026
  %1144 = load i8*, i8** %end1, align 8
  %add.ptr2032 = getelementptr inbounds i8, i8* %1144, i64 -1
  %1145 = load i8, i8* %add.ptr2032, align 1
  %conv2033 = sext i8 %1145 to i32
  br label %cond.end2037

cond.false2034:                                   ; preds = %cond.false2026
  %1146 = load i8*, i8** %d, align 8
  %add.ptr2035 = getelementptr inbounds i8, i8* %1146, i64 -1
  %1147 = load i8, i8* %add.ptr2035, align 1
  %conv2036 = sext i8 %1147 to i32
  br label %cond.end2037

cond.end2037:                                     ; preds = %cond.false2034, %cond.true2031
  %cond2038 = phi i32 [ %conv2033, %cond.true2031 ], [ %conv2036, %cond.false2034 ]
  br label %cond.end2039

cond.end2039:                                     ; preds = %cond.end2037, %cond.true2024
  %cond2040 = phi i32 [ %conv2025, %cond.true2024 ], [ %cond2038, %cond.end2037 ]
  %idxprom2041 = sext i32 %cond2040 to i64
  %arrayidx2042 = getelementptr inbounds [256 x i8], [256 x i8]* @re_syntax_table, i64 0, i64 %idxprom2041
  %1148 = load i8, i8* %arrayidx2042, align 1
  %conv2043 = sext i8 %1148 to i32
  %cmp2044 = icmp eq i32 %conv2043, 1
  %conv2045 = zext i1 %cmp2044 to i32
  %1149 = load i8*, i8** %d, align 8
  %1150 = load i8*, i8** %end1, align 8
  %cmp2046 = icmp eq i8* %1149, %1150
  br i1 %cmp2046, label %cond.true2048, label %cond.false2050

cond.true2048:                                    ; preds = %cond.end2039
  %1151 = load i8*, i8** %string2.addr, align 8
  %1152 = load i8, i8* %1151, align 1
  %conv2049 = sext i8 %1152 to i32
  br label %cond.end2061

cond.false2050:                                   ; preds = %cond.end2039
  %1153 = load i8*, i8** %d, align 8
  %1154 = load i8*, i8** %string2.addr, align 8
  %add.ptr2051 = getelementptr inbounds i8, i8* %1154, i64 -1
  %cmp2052 = icmp eq i8* %1153, %add.ptr2051
  br i1 %cmp2052, label %cond.true2054, label %cond.false2057

cond.true2054:                                    ; preds = %cond.false2050
  %1155 = load i8*, i8** %end1, align 8
  %add.ptr2055 = getelementptr inbounds i8, i8* %1155, i64 -1
  %1156 = load i8, i8* %add.ptr2055, align 1
  %conv2056 = sext i8 %1156 to i32
  br label %cond.end2059

cond.false2057:                                   ; preds = %cond.false2050
  %1157 = load i8*, i8** %d, align 8
  %1158 = load i8, i8* %1157, align 1
  %conv2058 = sext i8 %1158 to i32
  br label %cond.end2059

cond.end2059:                                     ; preds = %cond.false2057, %cond.true2054
  %cond2060 = phi i32 [ %conv2056, %cond.true2054 ], [ %conv2058, %cond.false2057 ]
  br label %cond.end2061

cond.end2061:                                     ; preds = %cond.end2059, %cond.true2048
  %cond2062 = phi i32 [ %conv2049, %cond.true2048 ], [ %cond2060, %cond.end2059 ]
  %idxprom2063 = sext i32 %cond2062 to i64
  %arrayidx2064 = getelementptr inbounds [256 x i8], [256 x i8]* @re_syntax_table, i64 0, i64 %idxprom2063
  %1159 = load i8, i8* %arrayidx2064, align 1
  %conv2065 = sext i8 %1159 to i32
  %cmp2066 = icmp eq i32 %conv2065, 1
  %conv2067 = zext i1 %cmp2066 to i32
  %cmp2068 = icmp ne i32 %conv2045, %conv2067
  br i1 %cmp2068, label %if.then2070, label %if.end2071

if.then2070:                                      ; preds = %cond.end2061, %lor.lhs.false2017, %lor.lhs.false2015, %cond.end2011
  br label %fail

if.end2071:                                       ; preds = %cond.end2061
  br label %sw.epilog2314

sw.bb2072:                                        ; preds = %if.end422
  %1160 = load i8*, i8** %d, align 8
  %1161 = load i8*, i8** %end1, align 8
  %cmp2073 = icmp eq i8* %1160, %1161
  br i1 %cmp2073, label %cond.true2075, label %cond.false2077

cond.true2075:                                    ; preds = %sw.bb2072
  %1162 = load i8*, i8** %string2.addr, align 8
  %1163 = load i8, i8* %1162, align 1
  %conv2076 = sext i8 %1163 to i32
  br label %cond.end2088

cond.false2077:                                   ; preds = %sw.bb2072
  %1164 = load i8*, i8** %d, align 8
  %1165 = load i8*, i8** %string2.addr, align 8
  %add.ptr2078 = getelementptr inbounds i8, i8* %1165, i64 -1
  %cmp2079 = icmp eq i8* %1164, %add.ptr2078
  br i1 %cmp2079, label %cond.true2081, label %cond.false2084

cond.true2081:                                    ; preds = %cond.false2077
  %1166 = load i8*, i8** %end1, align 8
  %add.ptr2082 = getelementptr inbounds i8, i8* %1166, i64 -1
  %1167 = load i8, i8* %add.ptr2082, align 1
  %conv2083 = sext i8 %1167 to i32
  br label %cond.end2086

cond.false2084:                                   ; preds = %cond.false2077
  %1168 = load i8*, i8** %d, align 8
  %1169 = load i8, i8* %1168, align 1
  %conv2085 = sext i8 %1169 to i32
  br label %cond.end2086

cond.end2086:                                     ; preds = %cond.false2084, %cond.true2081
  %cond2087 = phi i32 [ %conv2083, %cond.true2081 ], [ %conv2085, %cond.false2084 ]
  br label %cond.end2088

cond.end2088:                                     ; preds = %cond.end2086, %cond.true2075
  %cond2089 = phi i32 [ %conv2076, %cond.true2075 ], [ %cond2087, %cond.end2086 ]
  %idxprom2090 = sext i32 %cond2089 to i64
  %arrayidx2091 = getelementptr inbounds [256 x i8], [256 x i8]* @re_syntax_table, i64 0, i64 %idxprom2090
  %1170 = load i8, i8* %arrayidx2091, align 1
  %conv2092 = sext i8 %1170 to i32
  %cmp2093 = icmp eq i32 %conv2092, 1
  br i1 %cmp2093, label %land.lhs.true2095, label %if.end2132

land.lhs.true2095:                                ; preds = %cond.end2088
  %1171 = load i8*, i8** %d, align 8
  %1172 = load i32, i32* %size1.addr, align 4
  %tobool2096 = icmp ne i32 %1172, 0
  br i1 %tobool2096, label %cond.true2097, label %cond.false2098

cond.true2097:                                    ; preds = %land.lhs.true2095
  %1173 = load i8*, i8** %string1.addr, align 8
  br label %cond.end2099

cond.false2098:                                   ; preds = %land.lhs.true2095
  %1174 = load i8*, i8** %string2.addr, align 8
  br label %cond.end2099

cond.end2099:                                     ; preds = %cond.false2098, %cond.true2097
  %cond2100 = phi i8* [ %1173, %cond.true2097 ], [ %1174, %cond.false2098 ]
  %cmp2101 = icmp eq i8* %1171, %cond2100
  br i1 %cmp2101, label %if.then2131, label %lor.lhs.false2103

lor.lhs.false2103:                                ; preds = %cond.end2099
  %1175 = load i32, i32* %size2.addr, align 4
  %tobool2104 = icmp ne i32 %1175, 0
  br i1 %tobool2104, label %lor.lhs.false2105, label %if.then2131

lor.lhs.false2105:                                ; preds = %lor.lhs.false2103
  %1176 = load i8*, i8** %d, align 8
  %add.ptr2106 = getelementptr inbounds i8, i8* %1176, i64 -1
  %1177 = load i8*, i8** %end1, align 8
  %cmp2107 = icmp eq i8* %add.ptr2106, %1177
  br i1 %cmp2107, label %cond.true2109, label %cond.false2111

cond.true2109:                                    ; preds = %lor.lhs.false2105
  %1178 = load i8*, i8** %string2.addr, align 8
  %1179 = load i8, i8* %1178, align 1
  %conv2110 = sext i8 %1179 to i32
  br label %cond.end2124

cond.false2111:                                   ; preds = %lor.lhs.false2105
  %1180 = load i8*, i8** %d, align 8
  %add.ptr2112 = getelementptr inbounds i8, i8* %1180, i64 -1
  %1181 = load i8*, i8** %string2.addr, align 8
  %add.ptr2113 = getelementptr inbounds i8, i8* %1181, i64 -1
  %cmp2114 = icmp eq i8* %add.ptr2112, %add.ptr2113
  br i1 %cmp2114, label %cond.true2116, label %cond.false2119

cond.true2116:                                    ; preds = %cond.false2111
  %1182 = load i8*, i8** %end1, align 8
  %add.ptr2117 = getelementptr inbounds i8, i8* %1182, i64 -1
  %1183 = load i8, i8* %add.ptr2117, align 1
  %conv2118 = sext i8 %1183 to i32
  br label %cond.end2122

cond.false2119:                                   ; preds = %cond.false2111
  %1184 = load i8*, i8** %d, align 8
  %add.ptr2120 = getelementptr inbounds i8, i8* %1184, i64 -1
  %1185 = load i8, i8* %add.ptr2120, align 1
  %conv2121 = sext i8 %1185 to i32
  br label %cond.end2122

cond.end2122:                                     ; preds = %cond.false2119, %cond.true2116
  %cond2123 = phi i32 [ %conv2118, %cond.true2116 ], [ %conv2121, %cond.false2119 ]
  br label %cond.end2124

cond.end2124:                                     ; preds = %cond.end2122, %cond.true2109
  %cond2125 = phi i32 [ %conv2110, %cond.true2109 ], [ %cond2123, %cond.end2122 ]
  %idxprom2126 = sext i32 %cond2125 to i64
  %arrayidx2127 = getelementptr inbounds [256 x i8], [256 x i8]* @re_syntax_table, i64 0, i64 %idxprom2126
  %1186 = load i8, i8* %arrayidx2127, align 1
  %conv2128 = sext i8 %1186 to i32
  %cmp2129 = icmp eq i32 %conv2128, 1
  br i1 %cmp2129, label %if.end2132, label %if.then2131

if.then2131:                                      ; preds = %cond.end2124, %lor.lhs.false2103, %cond.end2099
  br label %sw.epilog2314

if.end2132:                                       ; preds = %cond.end2124, %cond.end2088
  br label %fail

sw.bb2133:                                        ; preds = %if.end422
  %1187 = load i8*, i8** %d, align 8
  %1188 = load i32, i32* %size1.addr, align 4
  %tobool2134 = icmp ne i32 %1188, 0
  br i1 %tobool2134, label %cond.true2135, label %cond.false2136

cond.true2135:                                    ; preds = %sw.bb2133
  %1189 = load i8*, i8** %string1.addr, align 8
  br label %cond.end2137

cond.false2136:                                   ; preds = %sw.bb2133
  %1190 = load i8*, i8** %string2.addr, align 8
  br label %cond.end2137

cond.end2137:                                     ; preds = %cond.false2136, %cond.true2135
  %cond2138 = phi i8* [ %1189, %cond.true2135 ], [ %1190, %cond.false2136 ]
  %cmp2139 = icmp eq i8* %1187, %cond2138
  br i1 %cmp2139, label %if.end2196, label %lor.lhs.false2141

lor.lhs.false2141:                                ; preds = %cond.end2137
  %1191 = load i32, i32* %size2.addr, align 4
  %tobool2142 = icmp ne i32 %1191, 0
  br i1 %tobool2142, label %land.lhs.true2143, label %if.end2196

land.lhs.true2143:                                ; preds = %lor.lhs.false2141
  %1192 = load i8*, i8** %d, align 8
  %add.ptr2144 = getelementptr inbounds i8, i8* %1192, i64 -1
  %1193 = load i8*, i8** %end1, align 8
  %cmp2145 = icmp eq i8* %add.ptr2144, %1193
  br i1 %cmp2145, label %cond.true2147, label %cond.false2149

cond.true2147:                                    ; preds = %land.lhs.true2143
  %1194 = load i8*, i8** %string2.addr, align 8
  %1195 = load i8, i8* %1194, align 1
  %conv2148 = sext i8 %1195 to i32
  br label %cond.end2162

cond.false2149:                                   ; preds = %land.lhs.true2143
  %1196 = load i8*, i8** %d, align 8
  %add.ptr2150 = getelementptr inbounds i8, i8* %1196, i64 -1
  %1197 = load i8*, i8** %string2.addr, align 8
  %add.ptr2151 = getelementptr inbounds i8, i8* %1197, i64 -1
  %cmp2152 = icmp eq i8* %add.ptr2150, %add.ptr2151
  br i1 %cmp2152, label %cond.true2154, label %cond.false2157

cond.true2154:                                    ; preds = %cond.false2149
  %1198 = load i8*, i8** %end1, align 8
  %add.ptr2155 = getelementptr inbounds i8, i8* %1198, i64 -1
  %1199 = load i8, i8* %add.ptr2155, align 1
  %conv2156 = sext i8 %1199 to i32
  br label %cond.end2160

cond.false2157:                                   ; preds = %cond.false2149
  %1200 = load i8*, i8** %d, align 8
  %add.ptr2158 = getelementptr inbounds i8, i8* %1200, i64 -1
  %1201 = load i8, i8* %add.ptr2158, align 1
  %conv2159 = sext i8 %1201 to i32
  br label %cond.end2160

cond.end2160:                                     ; preds = %cond.false2157, %cond.true2154
  %cond2161 = phi i32 [ %conv2156, %cond.true2154 ], [ %conv2159, %cond.false2157 ]
  br label %cond.end2162

cond.end2162:                                     ; preds = %cond.end2160, %cond.true2147
  %cond2163 = phi i32 [ %conv2148, %cond.true2147 ], [ %cond2161, %cond.end2160 ]
  %idxprom2164 = sext i32 %cond2163 to i64
  %arrayidx2165 = getelementptr inbounds [256 x i8], [256 x i8]* @re_syntax_table, i64 0, i64 %idxprom2164
  %1202 = load i8, i8* %arrayidx2165, align 1
  %conv2166 = sext i8 %1202 to i32
  %cmp2167 = icmp eq i32 %conv2166, 1
  br i1 %cmp2167, label %land.lhs.true2169, label %if.end2196

land.lhs.true2169:                                ; preds = %cond.end2162
  %1203 = load i8*, i8** %d, align 8
  %1204 = load i8*, i8** %end1, align 8
  %cmp2170 = icmp eq i8* %1203, %1204
  br i1 %cmp2170, label %cond.true2172, label %cond.false2174

cond.true2172:                                    ; preds = %land.lhs.true2169
  %1205 = load i8*, i8** %string2.addr, align 8
  %1206 = load i8, i8* %1205, align 1
  %conv2173 = sext i8 %1206 to i32
  br label %cond.end2185

cond.false2174:                                   ; preds = %land.lhs.true2169
  %1207 = load i8*, i8** %d, align 8
  %1208 = load i8*, i8** %string2.addr, align 8
  %add.ptr2175 = getelementptr inbounds i8, i8* %1208, i64 -1
  %cmp2176 = icmp eq i8* %1207, %add.ptr2175
  br i1 %cmp2176, label %cond.true2178, label %cond.false2181

cond.true2178:                                    ; preds = %cond.false2174
  %1209 = load i8*, i8** %end1, align 8
  %add.ptr2179 = getelementptr inbounds i8, i8* %1209, i64 -1
  %1210 = load i8, i8* %add.ptr2179, align 1
  %conv2180 = sext i8 %1210 to i32
  br label %cond.end2183

cond.false2181:                                   ; preds = %cond.false2174
  %1211 = load i8*, i8** %d, align 8
  %1212 = load i8, i8* %1211, align 1
  %conv2182 = sext i8 %1212 to i32
  br label %cond.end2183

cond.end2183:                                     ; preds = %cond.false2181, %cond.true2178
  %cond2184 = phi i32 [ %conv2180, %cond.true2178 ], [ %conv2182, %cond.false2181 ]
  br label %cond.end2185

cond.end2185:                                     ; preds = %cond.end2183, %cond.true2172
  %cond2186 = phi i32 [ %conv2173, %cond.true2172 ], [ %cond2184, %cond.end2183 ]
  %idxprom2187 = sext i32 %cond2186 to i64
  %arrayidx2188 = getelementptr inbounds [256 x i8], [256 x i8]* @re_syntax_table, i64 0, i64 %idxprom2187
  %1213 = load i8, i8* %arrayidx2188, align 1
  %conv2189 = sext i8 %1213 to i32
  %cmp2190 = icmp eq i32 %conv2189, 1
  br i1 %cmp2190, label %lor.lhs.false2192, label %if.then2195

lor.lhs.false2192:                                ; preds = %cond.end2185
  %1214 = load i8*, i8** %d, align 8
  %1215 = load i8*, i8** %end2, align 8
  %cmp2193 = icmp eq i8* %1214, %1215
  br i1 %cmp2193, label %if.then2195, label %if.end2196

if.then2195:                                      ; preds = %lor.lhs.false2192, %cond.end2185
  br label %sw.epilog2314

if.end2196:                                       ; preds = %lor.lhs.false2192, %cond.end2162, %lor.lhs.false2141, %cond.end2137
  br label %fail

sw.bb2197:                                        ; preds = %if.end422
  br label %while.cond2198

while.cond2198:                                   ; preds = %if.end2205, %sw.bb2197
  %1216 = load i8*, i8** %d, align 8
  %1217 = load i8*, i8** %dend, align 8
  %cmp2199 = icmp eq i8* %1216, %1217
  br i1 %cmp2199, label %while.body2201, label %while.end2206

while.body2201:                                   ; preds = %while.cond2198
  %1218 = load i8*, i8** %dend, align 8
  %1219 = load i8*, i8** %end_match_2, align 8
  %cmp2202 = icmp eq i8* %1218, %1219
  br i1 %cmp2202, label %if.then2204, label %if.end2205

if.then2204:                                      ; preds = %while.body2201
  br label %fail

if.end2205:                                       ; preds = %while.body2201
  %1220 = load i8*, i8** %string2.addr, align 8
  store i8* %1220, i8** %d, align 8
  %1221 = load i8*, i8** %end_match_2, align 8
  store i8* %1221, i8** %dend, align 8
  br label %while.cond2198, !llvm.loop !53

while.end2206:                                    ; preds = %while.cond2198
  %1222 = load i8*, i8** %d, align 8
  %1223 = load i8*, i8** %end1, align 8
  %cmp2207 = icmp eq i8* %1222, %1223
  br i1 %cmp2207, label %cond.true2209, label %cond.false2211

cond.true2209:                                    ; preds = %while.end2206
  %1224 = load i8*, i8** %string2.addr, align 8
  %1225 = load i8, i8* %1224, align 1
  %conv2210 = sext i8 %1225 to i32
  br label %cond.end2222

cond.false2211:                                   ; preds = %while.end2206
  %1226 = load i8*, i8** %d, align 8
  %1227 = load i8*, i8** %string2.addr, align 8
  %add.ptr2212 = getelementptr inbounds i8, i8* %1227, i64 -1
  %cmp2213 = icmp eq i8* %1226, %add.ptr2212
  br i1 %cmp2213, label %cond.true2215, label %cond.false2218

cond.true2215:                                    ; preds = %cond.false2211
  %1228 = load i8*, i8** %end1, align 8
  %add.ptr2216 = getelementptr inbounds i8, i8* %1228, i64 -1
  %1229 = load i8, i8* %add.ptr2216, align 1
  %conv2217 = sext i8 %1229 to i32
  br label %cond.end2220

cond.false2218:                                   ; preds = %cond.false2211
  %1230 = load i8*, i8** %d, align 8
  %1231 = load i8, i8* %1230, align 1
  %conv2219 = sext i8 %1231 to i32
  br label %cond.end2220

cond.end2220:                                     ; preds = %cond.false2218, %cond.true2215
  %cond2221 = phi i32 [ %conv2217, %cond.true2215 ], [ %conv2219, %cond.false2218 ]
  br label %cond.end2222

cond.end2222:                                     ; preds = %cond.end2220, %cond.true2209
  %cond2223 = phi i32 [ %conv2210, %cond.true2209 ], [ %cond2221, %cond.end2220 ]
  %idxprom2224 = sext i32 %cond2223 to i64
  %arrayidx2225 = getelementptr inbounds [256 x i8], [256 x i8]* @re_syntax_table, i64 0, i64 %idxprom2224
  %1232 = load i8, i8* %arrayidx2225, align 1
  %conv2226 = sext i8 %1232 to i32
  %cmp2227 = icmp eq i32 %conv2226, 1
  br i1 %cmp2227, label %if.end2230, label %if.then2229

if.then2229:                                      ; preds = %cond.end2222
  br label %fail

if.end2230:                                       ; preds = %cond.end2222
  br label %do.body2231

do.body2231:                                      ; preds = %if.end2230
  %1233 = load i32, i32* %lowest_active_reg, align 4
  store i32 %1233, i32* %r2232, align 4
  br label %for.cond2233

for.cond2233:                                     ; preds = %for.inc2249, %do.body2231
  %1234 = load i32, i32* %r2232, align 4
  %1235 = load i32, i32* %highest_active_reg, align 4
  %cmp2234 = icmp ule i32 %1234, %1235
  br i1 %cmp2234, label %for.body2236, label %for.end2251

for.body2236:                                     ; preds = %for.cond2233
  %1236 = load %union.register_info_type*, %union.register_info_type** %reg_info, align 8
  %1237 = load i32, i32* %r2232, align 4
  %idxprom2237 = zext i32 %1237 to i64
  %arrayidx2238 = getelementptr inbounds %union.register_info_type, %union.register_info_type* %1236, i64 %idxprom2237
  %bits2239 = bitcast %union.register_info_type* %arrayidx2238 to %struct.anon*
  %1238 = bitcast %struct.anon* %bits2239 to i8*
  %bf.load2240 = load i8, i8* %1238, align 8
  %bf.clear2241 = and i8 %bf.load2240, -17
  %bf.set2242 = or i8 %bf.clear2241, 16
  store i8 %bf.set2242, i8* %1238, align 8
  %1239 = load %union.register_info_type*, %union.register_info_type** %reg_info, align 8
  %1240 = load i32, i32* %r2232, align 4
  %idxprom2243 = zext i32 %1240 to i64
  %arrayidx2244 = getelementptr inbounds %union.register_info_type, %union.register_info_type* %1239, i64 %idxprom2243
  %bits2245 = bitcast %union.register_info_type* %arrayidx2244 to %struct.anon*
  %1241 = bitcast %struct.anon* %bits2245 to i8*
  %bf.load2246 = load i8, i8* %1241, align 8
  %bf.clear2247 = and i8 %bf.load2246, -9
  %bf.set2248 = or i8 %bf.clear2247, 8
  store i8 %bf.set2248, i8* %1241, align 8
  br label %for.inc2249

for.inc2249:                                      ; preds = %for.body2236
  %1242 = load i32, i32* %r2232, align 4
  %inc2250 = add i32 %1242, 1
  store i32 %inc2250, i32* %r2232, align 4
  br label %for.cond2233, !llvm.loop !54

for.end2251:                                      ; preds = %for.cond2233
  br label %do.end2253

do.end2253:                                       ; preds = %for.end2251
  %1243 = load i8*, i8** %d, align 8
  %incdec.ptr2254 = getelementptr inbounds i8, i8* %1243, i32 1
  store i8* %incdec.ptr2254, i8** %d, align 8
  br label %sw.epilog2314

sw.bb2255:                                        ; preds = %if.end422
  br label %while.cond2256

while.cond2256:                                   ; preds = %if.end2263, %sw.bb2255
  %1244 = load i8*, i8** %d, align 8
  %1245 = load i8*, i8** %dend, align 8
  %cmp2257 = icmp eq i8* %1244, %1245
  br i1 %cmp2257, label %while.body2259, label %while.end2264

while.body2259:                                   ; preds = %while.cond2256
  %1246 = load i8*, i8** %dend, align 8
  %1247 = load i8*, i8** %end_match_2, align 8
  %cmp2260 = icmp eq i8* %1246, %1247
  br i1 %cmp2260, label %if.then2262, label %if.end2263

if.then2262:                                      ; preds = %while.body2259
  br label %fail

if.end2263:                                       ; preds = %while.body2259
  %1248 = load i8*, i8** %string2.addr, align 8
  store i8* %1248, i8** %d, align 8
  %1249 = load i8*, i8** %end_match_2, align 8
  store i8* %1249, i8** %dend, align 8
  br label %while.cond2256, !llvm.loop !55

while.end2264:                                    ; preds = %while.cond2256
  %1250 = load i8*, i8** %d, align 8
  %1251 = load i8*, i8** %end1, align 8
  %cmp2265 = icmp eq i8* %1250, %1251
  br i1 %cmp2265, label %cond.true2267, label %cond.false2269

cond.true2267:                                    ; preds = %while.end2264
  %1252 = load i8*, i8** %string2.addr, align 8
  %1253 = load i8, i8* %1252, align 1
  %conv2268 = sext i8 %1253 to i32
  br label %cond.end2280

cond.false2269:                                   ; preds = %while.end2264
  %1254 = load i8*, i8** %d, align 8
  %1255 = load i8*, i8** %string2.addr, align 8
  %add.ptr2270 = getelementptr inbounds i8, i8* %1255, i64 -1
  %cmp2271 = icmp eq i8* %1254, %add.ptr2270
  br i1 %cmp2271, label %cond.true2273, label %cond.false2276

cond.true2273:                                    ; preds = %cond.false2269
  %1256 = load i8*, i8** %end1, align 8
  %add.ptr2274 = getelementptr inbounds i8, i8* %1256, i64 -1
  %1257 = load i8, i8* %add.ptr2274, align 1
  %conv2275 = sext i8 %1257 to i32
  br label %cond.end2278

cond.false2276:                                   ; preds = %cond.false2269
  %1258 = load i8*, i8** %d, align 8
  %1259 = load i8, i8* %1258, align 1
  %conv2277 = sext i8 %1259 to i32
  br label %cond.end2278

cond.end2278:                                     ; preds = %cond.false2276, %cond.true2273
  %cond2279 = phi i32 [ %conv2275, %cond.true2273 ], [ %conv2277, %cond.false2276 ]
  br label %cond.end2280

cond.end2280:                                     ; preds = %cond.end2278, %cond.true2267
  %cond2281 = phi i32 [ %conv2268, %cond.true2267 ], [ %cond2279, %cond.end2278 ]
  %idxprom2282 = sext i32 %cond2281 to i64
  %arrayidx2283 = getelementptr inbounds [256 x i8], [256 x i8]* @re_syntax_table, i64 0, i64 %idxprom2282
  %1260 = load i8, i8* %arrayidx2283, align 1
  %conv2284 = sext i8 %1260 to i32
  %cmp2285 = icmp eq i32 %conv2284, 1
  br i1 %cmp2285, label %if.then2287, label %if.end2288

if.then2287:                                      ; preds = %cond.end2280
  br label %fail

if.end2288:                                       ; preds = %cond.end2280
  br label %do.body2289

do.body2289:                                      ; preds = %if.end2288
  %1261 = load i32, i32* %lowest_active_reg, align 4
  store i32 %1261, i32* %r2290, align 4
  br label %for.cond2291

for.cond2291:                                     ; preds = %for.inc2307, %do.body2289
  %1262 = load i32, i32* %r2290, align 4
  %1263 = load i32, i32* %highest_active_reg, align 4
  %cmp2292 = icmp ule i32 %1262, %1263
  br i1 %cmp2292, label %for.body2294, label %for.end2309

for.body2294:                                     ; preds = %for.cond2291
  %1264 = load %union.register_info_type*, %union.register_info_type** %reg_info, align 8
  %1265 = load i32, i32* %r2290, align 4
  %idxprom2295 = zext i32 %1265 to i64
  %arrayidx2296 = getelementptr inbounds %union.register_info_type, %union.register_info_type* %1264, i64 %idxprom2295
  %bits2297 = bitcast %union.register_info_type* %arrayidx2296 to %struct.anon*
  %1266 = bitcast %struct.anon* %bits2297 to i8*
  %bf.load2298 = load i8, i8* %1266, align 8
  %bf.clear2299 = and i8 %bf.load2298, -17
  %bf.set2300 = or i8 %bf.clear2299, 16
  store i8 %bf.set2300, i8* %1266, align 8
  %1267 = load %union.register_info_type*, %union.register_info_type** %reg_info, align 8
  %1268 = load i32, i32* %r2290, align 4
  %idxprom2301 = zext i32 %1268 to i64
  %arrayidx2302 = getelementptr inbounds %union.register_info_type, %union.register_info_type* %1267, i64 %idxprom2301
  %bits2303 = bitcast %union.register_info_type* %arrayidx2302 to %struct.anon*
  %1269 = bitcast %struct.anon* %bits2303 to i8*
  %bf.load2304 = load i8, i8* %1269, align 8
  %bf.clear2305 = and i8 %bf.load2304, -9
  %bf.set2306 = or i8 %bf.clear2305, 8
  store i8 %bf.set2306, i8* %1269, align 8
  br label %for.inc2307

for.inc2307:                                      ; preds = %for.body2294
  %1270 = load i32, i32* %r2290, align 4
  %inc2308 = add i32 %1270, 1
  store i32 %inc2308, i32* %r2290, align 4
  br label %for.cond2291, !llvm.loop !56

for.end2309:                                      ; preds = %for.cond2291
  br label %do.end2311

do.end2311:                                       ; preds = %for.end2309
  %1271 = load i8*, i8** %d, align 8
  %incdec.ptr2312 = getelementptr inbounds i8, i8* %1271, i32 1
  store i8* %incdec.ptr2312, i8** %d, align 8
  br label %sw.epilog2314

sw.default2313:                                   ; preds = %if.end422
  call void @abort() #8
  unreachable

sw.epilog2314:                                    ; preds = %do.end2311, %do.end2253, %if.then2195, %if.then2131, %if.end2071, %if.then2005, %do.end1941, %if.end1903, %if.end1874, %do.end1837, %do.end1636, %do.end1436, %do.end1291, %if.then1176, %if.then1171, %if.then1158, %if.then1139, %if.then1127, %if.then1115, %for.end1098, %if.end981, %if.end695, %do.end631, %do.end557, %do.end493, %sw.bb
  br label %for.cond109

fail:                                             ; preds = %if.then2412, %if.then2375, %if.then2287, %if.then2262, %if.then2229, %if.then2204, %if.end2196, %if.end2132, %if.then2070, %if.end2006, %if.end1177, %if.end1172, %if.end1160, %if.end1129, %if.then1092, %if.then1065, %if.then995, %do.end979, %if.then607, %if.then571, %if.then533, %if.then501, %if.then465, %if.then456, %if.then444, %if.then434, %if.end161
  %avail2315 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %1272 = load i32, i32* %avail2315, align 4
  %cmp2316 = icmp eq i32 %1272, 0
  br i1 %cmp2316, label %if.else2424, label %if.then2318

if.then2318:                                      ; preds = %fail
  %stack2321 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %1273 = load i8**, i8*** %stack2321, align 8
  %avail2322 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %1274 = load i32, i32* %avail2322, align 4
  %dec2323 = add i32 %1274, -1
  store i32 %dec2323, i32* %avail2322, align 4
  %idxprom2324 = zext i32 %dec2323 to i64
  %arrayidx2325 = getelementptr inbounds i8*, i8** %1273, i64 %idxprom2324
  %1275 = load i8*, i8** %arrayidx2325, align 8
  store i8* %1275, i8** %string_temp2320, align 8
  %1276 = load i8*, i8** %string_temp2320, align 8
  %cmp2326 = icmp ne i8* %1276, null
  br i1 %cmp2326, label %if.then2328, label %if.end2329

if.then2328:                                      ; preds = %if.then2318
  %1277 = load i8*, i8** %string_temp2320, align 8
  store i8* %1277, i8** %d, align 8
  br label %if.end2329

if.end2329:                                       ; preds = %if.then2328, %if.then2318
  %stack2330 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %1278 = load i8**, i8*** %stack2330, align 8
  %avail2331 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %1279 = load i32, i32* %avail2331, align 4
  %dec2332 = add i32 %1279, -1
  store i32 %dec2332, i32* %avail2331, align 4
  %idxprom2333 = zext i32 %dec2332 to i64
  %arrayidx2334 = getelementptr inbounds i8*, i8** %1278, i64 %idxprom2333
  %1280 = load i8*, i8** %arrayidx2334, align 8
  store i8* %1280, i8** %p, align 8
  %stack2335 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %1281 = load i8**, i8*** %stack2335, align 8
  %avail2336 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %1282 = load i32, i32* %avail2336, align 4
  %dec2337 = add i32 %1282, -1
  store i32 %dec2337, i32* %avail2336, align 4
  %idxprom2338 = zext i32 %dec2337 to i64
  %arrayidx2339 = getelementptr inbounds i8*, i8** %1281, i64 %idxprom2338
  %1283 = load i8*, i8** %arrayidx2339, align 8
  %1284 = ptrtoint i8* %1283 to i32
  store i32 %1284, i32* %highest_active_reg, align 4
  %stack2340 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %1285 = load i8**, i8*** %stack2340, align 8
  %avail2341 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %1286 = load i32, i32* %avail2341, align 4
  %dec2342 = add i32 %1286, -1
  store i32 %dec2342, i32* %avail2341, align 4
  %idxprom2343 = zext i32 %dec2342 to i64
  %arrayidx2344 = getelementptr inbounds i8*, i8** %1285, i64 %idxprom2343
  %1287 = load i8*, i8** %arrayidx2344, align 8
  %1288 = ptrtoint i8* %1287 to i32
  store i32 %1288, i32* %lowest_active_reg, align 4
  %1289 = load i32, i32* %highest_active_reg, align 4
  store i32 %1289, i32* %this_reg2319, align 4
  br label %for.cond2345

for.cond2345:                                     ; preds = %for.inc2371, %if.end2329
  %1290 = load i32, i32* %this_reg2319, align 4
  %1291 = load i32, i32* %lowest_active_reg, align 4
  %cmp2346 = icmp uge i32 %1290, %1291
  br i1 %cmp2346, label %for.body2348, label %for.end2373

for.body2348:                                     ; preds = %for.cond2345
  %stack2349 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %1292 = load i8**, i8*** %stack2349, align 8
  %avail2350 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %1293 = load i32, i32* %avail2350, align 4
  %dec2351 = add i32 %1293, -1
  store i32 %dec2351, i32* %avail2350, align 4
  %idxprom2352 = zext i32 %dec2351 to i64
  %arrayidx2353 = getelementptr inbounds i8*, i8** %1292, i64 %idxprom2352
  %1294 = load i8*, i8** %arrayidx2353, align 8
  %1295 = load %union.register_info_type*, %union.register_info_type** %reg_info, align 8
  %1296 = load i32, i32* %this_reg2319, align 4
  %idxprom2354 = sext i32 %1296 to i64
  %arrayidx2355 = getelementptr inbounds %union.register_info_type, %union.register_info_type* %1295, i64 %idxprom2354
  %word2356 = bitcast %union.register_info_type* %arrayidx2355 to i8**
  store i8* %1294, i8** %word2356, align 8
  %stack2357 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %1297 = load i8**, i8*** %stack2357, align 8
  %avail2358 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %1298 = load i32, i32* %avail2358, align 4
  %dec2359 = add i32 %1298, -1
  store i32 %dec2359, i32* %avail2358, align 4
  %idxprom2360 = zext i32 %dec2359 to i64
  %arrayidx2361 = getelementptr inbounds i8*, i8** %1297, i64 %idxprom2360
  %1299 = load i8*, i8** %arrayidx2361, align 8
  %1300 = load i8**, i8*** %regend, align 8
  %1301 = load i32, i32* %this_reg2319, align 4
  %idxprom2362 = sext i32 %1301 to i64
  %arrayidx2363 = getelementptr inbounds i8*, i8** %1300, i64 %idxprom2362
  store i8* %1299, i8** %arrayidx2363, align 8
  %stack2364 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 0
  %1302 = load i8**, i8*** %stack2364, align 8
  %avail2365 = getelementptr inbounds %struct.fail_stack_type, %struct.fail_stack_type* %fail_stack, i32 0, i32 2
  %1303 = load i32, i32* %avail2365, align 4
  %dec2366 = add i32 %1303, -1
  store i32 %dec2366, i32* %avail2365, align 4
  %idxprom2367 = zext i32 %dec2366 to i64
  %arrayidx2368 = getelementptr inbounds i8*, i8** %1302, i64 %idxprom2367
  %1304 = load i8*, i8** %arrayidx2368, align 8
  %1305 = load i8**, i8*** %regstart, align 8
  %1306 = load i32, i32* %this_reg2319, align 4
  %idxprom2369 = sext i32 %1306 to i64
  %arrayidx2370 = getelementptr inbounds i8*, i8** %1305, i64 %idxprom2369
  store i8* %1304, i8** %arrayidx2370, align 8
  br label %for.inc2371

for.inc2371:                                      ; preds = %for.body2348
  %1307 = load i32, i32* %this_reg2319, align 4
  %dec2372 = add nsw i32 %1307, -1
  store i32 %dec2372, i32* %this_reg2319, align 4
  br label %for.cond2345, !llvm.loop !57

for.end2373:                                      ; preds = %for.cond2345
  %1308 = load i8*, i8** %p, align 8
  %tobool2374 = icmp ne i8* %1308, null
  br i1 %tobool2374, label %if.end2376, label %if.then2375

if.then2375:                                      ; preds = %for.end2373
  br label %fail

if.end2376:                                       ; preds = %for.end2373
  %1309 = load i8*, i8** %p, align 8
  %1310 = load i8*, i8** %pend, align 8
  %cmp2377 = icmp ult i8* %1309, %1310
  br i1 %cmp2377, label %if.then2379, label %if.end2416

if.then2379:                                      ; preds = %if.end2376
  store i8 0, i8* %is_a_jump_n2380, align 1
  %1311 = load i8*, i8** %p, align 8
  %1312 = load i8, i8* %1311, align 1
  %conv2381 = zext i8 %1312 to i32
  switch i32 %conv2381, label %sw.default2414 [
    i32 21, label %sw.bb2382
    i32 17, label %sw.bb2383
    i32 16, label %sw.bb2383
    i32 12, label %sw.bb2383
  ]

sw.bb2382:                                        ; preds = %if.then2379
  store i8 1, i8* %is_a_jump_n2380, align 1
  br label %sw.bb2383

sw.bb2383:                                        ; preds = %if.then2379, %if.then2379, %if.then2379, %sw.bb2382
  %1313 = load i8*, i8** %p, align 8
  %add.ptr2384 = getelementptr inbounds i8, i8* %1313, i64 1
  store i8* %add.ptr2384, i8** %p1, align 8
  br label %do.body2385

do.body2385:                                      ; preds = %sw.bb2383
  br label %do.body2386

do.body2386:                                      ; preds = %do.body2385
  %1314 = load i8*, i8** %p1, align 8
  %1315 = load i8, i8* %1314, align 1
  %conv2387 = zext i8 %1315 to i32
  %and2388 = and i32 %conv2387, 255
  store i32 %and2388, i32* %mcnt, align 4
  %1316 = load i8*, i8** %p1, align 8
  %add.ptr2389 = getelementptr inbounds i8, i8* %1316, i64 1
  %1317 = load i8, i8* %add.ptr2389, align 1
  %conv2390 = sext i8 %1317 to i32
  %shl2391 = shl i32 %conv2390, 8
  %1318 = load i32, i32* %mcnt, align 4
  %add2392 = add nsw i32 %1318, %shl2391
  store i32 %add2392, i32* %mcnt, align 4
  br label %do.end2394

do.end2394:                                       ; preds = %do.body2386
  %1319 = load i8*, i8** %p1, align 8
  %add.ptr2395 = getelementptr inbounds i8, i8* %1319, i64 2
  store i8* %add.ptr2395, i8** %p1, align 8
  br label %do.end2397

do.end2397:                                       ; preds = %do.end2394
  %1320 = load i32, i32* %mcnt, align 4
  %1321 = load i8*, i8** %p1, align 8
  %idx.ext2398 = sext i32 %1320 to i64
  %add.ptr2399 = getelementptr inbounds i8, i8* %1321, i64 %idx.ext2398
  store i8* %add.ptr2399, i8** %p1, align 8
  %1322 = load i8, i8* %is_a_jump_n2380, align 1
  %conv2400 = sext i8 %1322 to i32
  %tobool2401 = icmp ne i32 %conv2400, 0
  br i1 %tobool2401, label %land.lhs.true2402, label %lor.lhs.false2406

land.lhs.true2402:                                ; preds = %do.end2397
  %1323 = load i8*, i8** %p1, align 8
  %1324 = load i8, i8* %1323, align 1
  %conv2403 = zext i8 %1324 to i32
  %cmp2404 = icmp eq i32 %conv2403, 20
  br i1 %cmp2404, label %if.then2412, label %lor.lhs.false2406

lor.lhs.false2406:                                ; preds = %land.lhs.true2402, %do.end2397
  %1325 = load i8, i8* %is_a_jump_n2380, align 1
  %tobool2407 = icmp ne i8 %1325, 0
  br i1 %tobool2407, label %if.end2413, label %land.lhs.true2408

land.lhs.true2408:                                ; preds = %lor.lhs.false2406
  %1326 = load i8*, i8** %p1, align 8
  %1327 = load i8, i8* %1326, align 1
  %conv2409 = zext i8 %1327 to i32
  %cmp2410 = icmp eq i32 %conv2409, 14
  br i1 %cmp2410, label %if.then2412, label %if.end2413

if.then2412:                                      ; preds = %land.lhs.true2408, %land.lhs.true2402
  br label %fail

if.end2413:                                       ; preds = %land.lhs.true2408, %lor.lhs.false2406
  br label %sw.epilog2415

sw.default2414:                                   ; preds = %if.then2379
  br label %sw.epilog2415

sw.epilog2415:                                    ; preds = %sw.default2414, %if.end2413
  br label %if.end2416

if.end2416:                                       ; preds = %sw.epilog2415, %if.end2376
  %1328 = load i8*, i8** %d, align 8
  %1329 = load i8*, i8** %string1.addr, align 8
  %cmp2417 = icmp uge i8* %1328, %1329
  br i1 %cmp2417, label %land.lhs.true2419, label %if.end2423

land.lhs.true2419:                                ; preds = %if.end2416
  %1330 = load i8*, i8** %d, align 8
  %1331 = load i8*, i8** %end1, align 8
  %cmp2420 = icmp ule i8* %1330, %1331
  br i1 %cmp2420, label %if.then2422, label %if.end2423

if.then2422:                                      ; preds = %land.lhs.true2419
  %1332 = load i8*, i8** %end_match_1, align 8
  store i8* %1332, i8** %dend, align 8
  br label %if.end2423

if.end2423:                                       ; preds = %if.then2422, %land.lhs.true2419, %if.end2416
  br label %if.end2425

if.else2424:                                      ; preds = %fail
  br label %for.end2426

if.end2425:                                       ; preds = %if.end2423
  br label %for.cond109

for.end2426:                                      ; preds = %if.else2424
  %1333 = load i32, i32* %best_regs_set, align 4
  %tobool2427 = icmp ne i32 %1333, 0
  br i1 %tobool2427, label %if.then2428, label %if.end2429

if.then2428:                                      ; preds = %for.end2426
  br label %restore_best_regs

if.end2429:                                       ; preds = %for.end2426
  %1334 = alloca i8, i64 0, align 16
  store i32 -1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end2429, %if.then1782, %if.then1683, %if.then1379, %if.then1234, %if.then923, %cond.end416, %if.then265, %if.then224, %if.then47, %if.then39, %if.then
  %1335 = load i32, i32* %retval, align 4
  ret i32 %1335
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @re_match(%struct.re_pattern_buffer* %bufp, i8* %string, i32 %size, i32 %pos, %struct.re_registers* %regs) #0 {
entry:
  %bufp.addr = alloca %struct.re_pattern_buffer*, align 8
  %string.addr = alloca i8*, align 8
  %size.addr = alloca i32, align 4
  %pos.addr = alloca i32, align 4
  %regs.addr = alloca %struct.re_registers*, align 8
  store %struct.re_pattern_buffer* %bufp, %struct.re_pattern_buffer** %bufp.addr, align 8
  store i8* %string, i8** %string.addr, align 8
  store i32 %size, i32* %size.addr, align 4
  store i32 %pos, i32* %pos.addr, align 4
  store %struct.re_registers* %regs, %struct.re_registers** %regs.addr, align 8
  %0 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %1 = load i8*, i8** %string.addr, align 8
  %2 = load i32, i32* %size.addr, align 4
  %3 = load i32, i32* %pos.addr, align 4
  %4 = load %struct.re_registers*, %struct.re_registers** %regs.addr, align 8
  %5 = load i32, i32* %size.addr, align 4
  %call = call i32 @re_match_2(%struct.re_pattern_buffer* %0, i8* null, i32 0, i8* %1, i32 %2, i32 %3, %struct.re_registers* %4, i32 %5)
  ret i32 %call
}

; Function Attrs: nocallback nounwind readonly willreturn
declare dso_local i32 @memcmp(i8*, i8*, i64) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @re_compile_pattern(i8* %pattern, i32 %length, %struct.re_pattern_buffer* %bufp) #0 {
entry:
  %pattern.addr = alloca i8*, align 8
  %length.addr = alloca i32, align 4
  %bufp.addr = alloca %struct.re_pattern_buffer*, align 8
  %ret = alloca i32, align 4
  store i8* %pattern, i8** %pattern.addr, align 8
  store i32 %length, i32* %length.addr, align 4
  store %struct.re_pattern_buffer* %bufp, %struct.re_pattern_buffer** %bufp.addr, align 8
  %0 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %regs_allocated = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %0, i32 0, i32 7
  %bf.load = load i8, i8* %regs_allocated, align 8
  %bf.clear = and i8 %bf.load, -7
  store i8 %bf.clear, i8* %regs_allocated, align 8
  %1 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %no_sub = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1, i32 0, i32 7
  %bf.load1 = load i8, i8* %no_sub, align 8
  %bf.clear2 = and i8 %bf.load1, -17
  store i8 %bf.clear2, i8* %no_sub, align 8
  %2 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %newline_anchor = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %2, i32 0, i32 7
  %bf.load3 = load i8, i8* %newline_anchor, align 8
  %bf.clear4 = and i8 %bf.load3, 127
  %bf.set = or i8 %bf.clear4, -128
  store i8 %bf.set, i8* %newline_anchor, align 8
  %3 = load i8*, i8** %pattern.addr, align 8
  %4 = load i32, i32* %length.addr, align 4
  %5 = load i32, i32* @re_syntax_options, align 4
  %6 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %call = call i32 @regex_compile(i8* %3, i32 %4, i32 %5, %struct.re_pattern_buffer* %6)
  store i32 %call, i32* %ret, align 4
  %7 = load i32, i32* %ret, align 4
  %idxprom = sext i32 %7 to i64
  %arrayidx = getelementptr inbounds [17 x i8*], [17 x i8*]* @re_error_msg, i64 0, i64 %idxprom
  %8 = load i8*, i8** %arrayidx, align 8
  ret i8* %8
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @regex_compile(i8* %pattern, i32 %size, i32 %syntax, %struct.re_pattern_buffer* %bufp) #0 {
entry:
  %retval = alloca i32, align 4
  %pattern.addr = alloca i8*, align 8
  %size.addr = alloca i32, align 4
  %syntax.addr = alloca i32, align 4
  %bufp.addr = alloca %struct.re_pattern_buffer*, align 8
  %c = alloca i8, align 1
  %c1 = alloca i8, align 1
  %p1 = alloca i8*, align 8
  %b = alloca i8*, align 8
  %compile_stack = alloca %struct.compile_stack_type, align 8
  %p = alloca i8*, align 8
  %pend = alloca i8*, align 8
  %translate = alloca i8*, align 8
  %pending_exact = alloca i8*, align 8
  %laststart = alloca i8*, align 8
  %begalt = alloca i8*, align 8
  %beg_interval = alloca i8*, align 8
  %fixup_alt_jump = alloca i8*, align 8
  %regnum = alloca i32, align 4
  %old_buffer = alloca i8*, align 8
  %old_buffer138 = alloca i8*, align 8
  %keep_string_p = alloca i8, align 1
  %zero_times_ok = alloca i8, align 1
  %many_times_ok = alloca i8, align 1
  %old_buffer324 = alloca i8*, align 8
  %old_buffer457 = alloca i8*, align 8
  %old_buffer544 = alloca i8*, align 8
  %old_buffer629 = alloca i8*, align 8
  %had_char_class = alloca i8, align 1
  %old_buffer712 = alloca i8*, align 8
  %old_buffer789 = alloca i8*, align 8
  %old_buffer879 = alloca i8*, align 8
  %ret = alloca i32, align 4
  %ret1076 = alloca i32, align 4
  %str = alloca [7 x i8], align 1
  %ch = alloca i32, align 4
  %is_alnum = alloca i8, align 1
  %is_alpha = alloca i8, align 1
  %is_blank = alloca i8, align 1
  %is_cntrl = alloca i8, align 1
  %is_digit = alloca i8, align 1
  %is_graph = alloca i8, align 1
  %is_lower = alloca i8, align 1
  %is_print = alloca i8, align 1
  %is_punct = alloca i8, align 1
  %is_space = alloca i8, align 1
  %is_upper = alloca i8, align 1
  %is_xdigit = alloca i8, align 1
  %old_buffer1622 = alloca i8*, align 8
  %old_buffer1723 = alloca i8*, align 8
  %this_group_regnum = alloca i32, align 4
  %inner_group_loc = alloca i8*, align 8
  %old_buffer1872 = alloca i8*, align 8
  %old_buffer1968 = alloca i8*, align 8
  %old_buffer2057 = alloca i8*, align 8
  %lower_bound = alloca i32, align 4
  %upper_bound = alloca i32, align 4
  %old_buffer2331 = alloca i8*, align 8
  %nbytes = alloca i32, align 4
  %old_buffer2419 = alloca i8*, align 8
  %old_buffer2551 = alloca i8*, align 8
  %old_buffer2631 = alloca i8*, align 8
  %old_buffer2711 = alloca i8*, align 8
  %old_buffer2791 = alloca i8*, align 8
  %old_buffer2871 = alloca i8*, align 8
  %old_buffer2951 = alloca i8*, align 8
  %old_buffer3031 = alloca i8*, align 8
  %old_buffer3111 = alloca i8*, align 8
  %old_buffer3208 = alloca i8*, align 8
  %old_buffer3370 = alloca i8*, align 8
  %old_buffer3452 = alloca i8*, align 8
  store i8* %pattern, i8** %pattern.addr, align 8
  store i32 %size, i32* %size.addr, align 4
  store i32 %syntax, i32* %syntax.addr, align 4
  store %struct.re_pattern_buffer* %bufp, %struct.re_pattern_buffer** %bufp.addr, align 8
  %0 = load i8*, i8** %pattern.addr, align 8
  store i8* %0, i8** %p, align 8
  %1 = load i8*, i8** %pattern.addr, align 8
  %2 = load i32, i32* %size.addr, align 4
  %idx.ext = sext i32 %2 to i64
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 %idx.ext
  store i8* %add.ptr, i8** %pend, align 8
  %3 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %translate1 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %3, i32 0, i32 5
  %4 = load i8*, i8** %translate1, align 8
  store i8* %4, i8** %translate, align 8
  store i8* null, i8** %pending_exact, align 8
  store i8* null, i8** %laststart, align 8
  store i8* null, i8** %fixup_alt_jump, align 8
  store i32 0, i32* %regnum, align 4
  %call = call noalias align 16 i8* @malloc(i64 640) #9
  %5 = bitcast i8* %call to %struct.compile_stack_elt_t*
  %stack = getelementptr inbounds %struct.compile_stack_type, %struct.compile_stack_type* %compile_stack, i32 0, i32 0
  store %struct.compile_stack_elt_t* %5, %struct.compile_stack_elt_t** %stack, align 8
  %stack2 = getelementptr inbounds %struct.compile_stack_type, %struct.compile_stack_type* %compile_stack, i32 0, i32 0
  %6 = load %struct.compile_stack_elt_t*, %struct.compile_stack_elt_t** %stack2, align 8
  %cmp = icmp eq %struct.compile_stack_elt_t* %6, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 12, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %size3 = getelementptr inbounds %struct.compile_stack_type, %struct.compile_stack_type* %compile_stack, i32 0, i32 1
  store i32 32, i32* %size3, align 8
  %avail = getelementptr inbounds %struct.compile_stack_type, %struct.compile_stack_type* %compile_stack, i32 0, i32 2
  store i32 0, i32* %avail, align 4
  %7 = load i32, i32* %syntax.addr, align 4
  %8 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %syntax4 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %8, i32 0, i32 3
  store i32 %7, i32* %syntax4, align 8
  %9 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %fastmap_accurate = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %9, i32 0, i32 7
  %bf.load = load i8, i8* %fastmap_accurate, align 8
  %bf.clear = and i8 %bf.load, -9
  store i8 %bf.clear, i8* %fastmap_accurate, align 8
  %10 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %not_eol = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %10, i32 0, i32 7
  %bf.load5 = load i8, i8* %not_eol, align 8
  %bf.clear6 = and i8 %bf.load5, -65
  store i8 %bf.clear6, i8* %not_eol, align 8
  %11 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %not_bol = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %11, i32 0, i32 7
  %bf.load7 = load i8, i8* %not_bol, align 8
  %bf.clear8 = and i8 %bf.load7, -33
  store i8 %bf.clear8, i8* %not_bol, align 8
  %12 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %used = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %12, i32 0, i32 2
  store i64 0, i64* %used, align 8
  %13 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %re_nsub = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %13, i32 0, i32 6
  store i64 0, i64* %re_nsub, align 8
  call void @init_syntax_once()
  %14 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %14, i32 0, i32 1
  %15 = load i64, i64* %allocated, align 8
  %cmp9 = icmp eq i64 %15, 0
  br i1 %cmp9, label %if.then10, label %if.end23

if.then10:                                        ; preds = %if.end
  %16 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %16, i32 0, i32 0
  %17 = load i8*, i8** %buffer, align 8
  %tobool = icmp ne i8* %17, null
  br i1 %tobool, label %if.then11, label %if.else

if.then11:                                        ; preds = %if.then10
  %18 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer12 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %18, i32 0, i32 0
  %19 = load i8*, i8** %buffer12, align 8
  %call13 = call align 16 i8* @realloc(i8* %19, i64 32) #9
  %20 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer14 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %20, i32 0, i32 0
  store i8* %call13, i8** %buffer14, align 8
  br label %if.end17

if.else:                                          ; preds = %if.then10
  %call15 = call noalias align 16 i8* @malloc(i64 32) #9
  %21 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer16 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %21, i32 0, i32 0
  store i8* %call15, i8** %buffer16, align 8
  br label %if.end17

if.end17:                                         ; preds = %if.else, %if.then11
  %22 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer18 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %22, i32 0, i32 0
  %23 = load i8*, i8** %buffer18, align 8
  %tobool19 = icmp ne i8* %23, null
  br i1 %tobool19, label %if.end21, label %if.then20

if.then20:                                        ; preds = %if.end17
  store i32 12, i32* %retval, align 4
  br label %return

if.end21:                                         ; preds = %if.end17
  %24 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated22 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %24, i32 0, i32 1
  store i64 32, i64* %allocated22, align 8
  br label %if.end23

if.end23:                                         ; preds = %if.end21, %if.end
  %25 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer24 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %25, i32 0, i32 0
  %26 = load i8*, i8** %buffer24, align 8
  store i8* %26, i8** %b, align 8
  store i8* %26, i8** %begalt, align 8
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog3520, %if.end23
  %27 = load i8*, i8** %p, align 8
  %28 = load i8*, i8** %pend, align 8
  %cmp25 = icmp ne i8* %27, %28
  br i1 %cmp25, label %while.body, label %while.end3521

while.body:                                       ; preds = %while.cond
  br label %do.body

do.body:                                          ; preds = %while.body
  %29 = load i8*, i8** %p, align 8
  %30 = load i8*, i8** %pend, align 8
  %cmp26 = icmp eq i8* %29, %30
  br i1 %cmp26, label %if.then27, label %if.end28

if.then27:                                        ; preds = %do.body
  store i32 14, i32* %retval, align 4
  br label %return

if.end28:                                         ; preds = %do.body
  %31 = load i8*, i8** %p, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %31, i32 1
  store i8* %incdec.ptr, i8** %p, align 8
  %32 = load i8, i8* %31, align 1
  store i8 %32, i8* %c, align 1
  %33 = load i8*, i8** %translate, align 8
  %tobool29 = icmp ne i8* %33, null
  br i1 %tobool29, label %if.then30, label %if.end31

if.then30:                                        ; preds = %if.end28
  %34 = load i8*, i8** %translate, align 8
  %35 = load i8, i8* %c, align 1
  %idxprom = zext i8 %35 to i64
  %arrayidx = getelementptr inbounds i8, i8* %34, i64 %idxprom
  %36 = load i8, i8* %arrayidx, align 1
  store i8 %36, i8* %c, align 1
  br label %if.end31

if.end31:                                         ; preds = %if.then30, %if.end28
  br label %do.end

do.end:                                           ; preds = %if.end31
  %37 = load i8, i8* %c, align 1
  %conv = zext i8 %37 to i32
  switch i32 %conv, label %sw.default3291 [
    i32 94, label %sw.bb
    i32 36, label %sw.bb115
    i32 43, label %sw.bb207
    i32 63, label %sw.bb207
    i32 42, label %sw.bb215
    i32 46, label %sw.bb616
    i32 91, label %sw.bb696
    i32 40, label %sw.bb1490
    i32 41, label %sw.bb1495
    i32 10, label %sw.bb1500
    i32 124, label %sw.bb1505
    i32 123, label %sw.bb1510
    i32 92, label %sw.bb1518
  ]

sw.bb:                                            ; preds = %do.end
  %38 = load i8*, i8** %p, align 8
  %39 = load i8*, i8** %pattern.addr, align 8
  %add.ptr32 = getelementptr inbounds i8, i8* %39, i64 1
  %cmp33 = icmp eq i8* %38, %add.ptr32
  br i1 %cmp33, label %if.then40, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %sw.bb
  %40 = load i32, i32* %syntax.addr, align 4
  %and = and i32 %40, 8
  %tobool35 = icmp ne i32 %and, 0
  br i1 %tobool35, label %if.then40, label %lor.lhs.false36

lor.lhs.false36:                                  ; preds = %lor.lhs.false
  %41 = load i8*, i8** %pattern.addr, align 8
  %42 = load i8*, i8** %p, align 8
  %43 = load i32, i32* %syntax.addr, align 4
  %call37 = call signext i8 @at_begline_loc_p(i8* %41, i8* %42, i32 %43)
  %conv38 = sext i8 %call37 to i32
  %tobool39 = icmp ne i32 %conv38, 0
  br i1 %tobool39, label %if.then40, label %if.else113

if.then40:                                        ; preds = %lor.lhs.false36, %lor.lhs.false, %sw.bb
  br label %do.body41

do.body41:                                        ; preds = %if.then40
  br label %while.cond42

while.cond42:                                     ; preds = %do.end110, %do.body41
  %44 = load i8*, i8** %b, align 8
  %45 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer43 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %45, i32 0, i32 0
  %46 = load i8*, i8** %buffer43, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %44 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %46 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %add = add nsw i64 %sub.ptr.sub, 1
  %47 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated44 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %47, i32 0, i32 1
  %48 = load i64, i64* %allocated44, align 8
  %cmp45 = icmp ugt i64 %add, %48
  br i1 %cmp45, label %while.body47, label %while.end

while.body47:                                     ; preds = %while.cond42
  br label %do.body48

do.body48:                                        ; preds = %while.body47
  %49 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer49 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %49, i32 0, i32 0
  %50 = load i8*, i8** %buffer49, align 8
  store i8* %50, i8** %old_buffer, align 8
  %51 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated50 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %51, i32 0, i32 1
  %52 = load i64, i64* %allocated50, align 8
  %cmp51 = icmp eq i64 %52, 65536
  br i1 %cmp51, label %if.then53, label %if.end54

if.then53:                                        ; preds = %do.body48
  store i32 15, i32* %retval, align 4
  br label %return

if.end54:                                         ; preds = %do.body48
  %53 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated55 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %53, i32 0, i32 1
  %54 = load i64, i64* %allocated55, align 8
  %shl = shl i64 %54, 1
  store i64 %shl, i64* %allocated55, align 8
  %55 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated56 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %55, i32 0, i32 1
  %56 = load i64, i64* %allocated56, align 8
  %cmp57 = icmp ugt i64 %56, 65536
  br i1 %cmp57, label %if.then59, label %if.end61

if.then59:                                        ; preds = %if.end54
  %57 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated60 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %57, i32 0, i32 1
  store i64 65536, i64* %allocated60, align 8
  br label %if.end61

if.end61:                                         ; preds = %if.then59, %if.end54
  %58 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer62 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %58, i32 0, i32 0
  %59 = load i8*, i8** %buffer62, align 8
  %60 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated63 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %60, i32 0, i32 1
  %61 = load i64, i64* %allocated63, align 8
  %call64 = call align 16 i8* @realloc(i8* %59, i64 %61) #9
  %62 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer65 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %62, i32 0, i32 0
  store i8* %call64, i8** %buffer65, align 8
  %63 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer66 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %63, i32 0, i32 0
  %64 = load i8*, i8** %buffer66, align 8
  %cmp67 = icmp eq i8* %64, null
  br i1 %cmp67, label %if.then69, label %if.end70

if.then69:                                        ; preds = %if.end61
  store i32 12, i32* %retval, align 4
  br label %return

if.end70:                                         ; preds = %if.end61
  %65 = load i8*, i8** %old_buffer, align 8
  %66 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer71 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %66, i32 0, i32 0
  %67 = load i8*, i8** %buffer71, align 8
  %cmp72 = icmp ne i8* %65, %67
  br i1 %cmp72, label %if.then74, label %if.end109

if.then74:                                        ; preds = %if.end70
  %68 = load i8*, i8** %b, align 8
  %69 = load i8*, i8** %old_buffer, align 8
  %sub.ptr.lhs.cast75 = ptrtoint i8* %68 to i64
  %sub.ptr.rhs.cast76 = ptrtoint i8* %69 to i64
  %sub.ptr.sub77 = sub i64 %sub.ptr.lhs.cast75, %sub.ptr.rhs.cast76
  %70 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer78 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %70, i32 0, i32 0
  %71 = load i8*, i8** %buffer78, align 8
  %add.ptr79 = getelementptr inbounds i8, i8* %71, i64 %sub.ptr.sub77
  store i8* %add.ptr79, i8** %b, align 8
  %72 = load i8*, i8** %begalt, align 8
  %73 = load i8*, i8** %old_buffer, align 8
  %sub.ptr.lhs.cast80 = ptrtoint i8* %72 to i64
  %sub.ptr.rhs.cast81 = ptrtoint i8* %73 to i64
  %sub.ptr.sub82 = sub i64 %sub.ptr.lhs.cast80, %sub.ptr.rhs.cast81
  %74 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer83 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %74, i32 0, i32 0
  %75 = load i8*, i8** %buffer83, align 8
  %add.ptr84 = getelementptr inbounds i8, i8* %75, i64 %sub.ptr.sub82
  store i8* %add.ptr84, i8** %begalt, align 8
  %76 = load i8*, i8** %fixup_alt_jump, align 8
  %tobool85 = icmp ne i8* %76, null
  br i1 %tobool85, label %if.then86, label %if.end92

if.then86:                                        ; preds = %if.then74
  %77 = load i8*, i8** %fixup_alt_jump, align 8
  %78 = load i8*, i8** %old_buffer, align 8
  %sub.ptr.lhs.cast87 = ptrtoint i8* %77 to i64
  %sub.ptr.rhs.cast88 = ptrtoint i8* %78 to i64
  %sub.ptr.sub89 = sub i64 %sub.ptr.lhs.cast87, %sub.ptr.rhs.cast88
  %79 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer90 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %79, i32 0, i32 0
  %80 = load i8*, i8** %buffer90, align 8
  %add.ptr91 = getelementptr inbounds i8, i8* %80, i64 %sub.ptr.sub89
  store i8* %add.ptr91, i8** %fixup_alt_jump, align 8
  br label %if.end92

if.end92:                                         ; preds = %if.then86, %if.then74
  %81 = load i8*, i8** %laststart, align 8
  %tobool93 = icmp ne i8* %81, null
  br i1 %tobool93, label %if.then94, label %if.end100

if.then94:                                        ; preds = %if.end92
  %82 = load i8*, i8** %laststart, align 8
  %83 = load i8*, i8** %old_buffer, align 8
  %sub.ptr.lhs.cast95 = ptrtoint i8* %82 to i64
  %sub.ptr.rhs.cast96 = ptrtoint i8* %83 to i64
  %sub.ptr.sub97 = sub i64 %sub.ptr.lhs.cast95, %sub.ptr.rhs.cast96
  %84 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer98 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %84, i32 0, i32 0
  %85 = load i8*, i8** %buffer98, align 8
  %add.ptr99 = getelementptr inbounds i8, i8* %85, i64 %sub.ptr.sub97
  store i8* %add.ptr99, i8** %laststart, align 8
  br label %if.end100

if.end100:                                        ; preds = %if.then94, %if.end92
  %86 = load i8*, i8** %pending_exact, align 8
  %tobool101 = icmp ne i8* %86, null
  br i1 %tobool101, label %if.then102, label %if.end108

if.then102:                                       ; preds = %if.end100
  %87 = load i8*, i8** %pending_exact, align 8
  %88 = load i8*, i8** %old_buffer, align 8
  %sub.ptr.lhs.cast103 = ptrtoint i8* %87 to i64
  %sub.ptr.rhs.cast104 = ptrtoint i8* %88 to i64
  %sub.ptr.sub105 = sub i64 %sub.ptr.lhs.cast103, %sub.ptr.rhs.cast104
  %89 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer106 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %89, i32 0, i32 0
  %90 = load i8*, i8** %buffer106, align 8
  %add.ptr107 = getelementptr inbounds i8, i8* %90, i64 %sub.ptr.sub105
  store i8* %add.ptr107, i8** %pending_exact, align 8
  br label %if.end108

if.end108:                                        ; preds = %if.then102, %if.end100
  br label %if.end109

if.end109:                                        ; preds = %if.end108, %if.end70
  br label %do.end110

do.end110:                                        ; preds = %if.end109
  br label %while.cond42, !llvm.loop !58

while.end:                                        ; preds = %while.cond42
  %91 = load i8*, i8** %b, align 8
  %incdec.ptr111 = getelementptr inbounds i8, i8* %91, i32 1
  store i8* %incdec.ptr111, i8** %b, align 8
  store i8 8, i8* %91, align 1
  br label %do.end112

do.end112:                                        ; preds = %while.end
  br label %if.end114

if.else113:                                       ; preds = %lor.lhs.false36
  br label %normal_char

if.end114:                                        ; preds = %do.end112
  br label %sw.epilog3520

sw.bb115:                                         ; preds = %do.end
  %92 = load i8*, i8** %p, align 8
  %93 = load i8*, i8** %pend, align 8
  %cmp116 = icmp eq i8* %92, %93
  br i1 %cmp116, label %if.then125, label %lor.lhs.false118

lor.lhs.false118:                                 ; preds = %sw.bb115
  %94 = load i32, i32* %syntax.addr, align 4
  %and119 = and i32 %94, 8
  %tobool120 = icmp ne i32 %and119, 0
  br i1 %tobool120, label %if.then125, label %lor.lhs.false121

lor.lhs.false121:                                 ; preds = %lor.lhs.false118
  %95 = load i8*, i8** %p, align 8
  %96 = load i8*, i8** %pend, align 8
  %97 = load i32, i32* %syntax.addr, align 4
  %call122 = call signext i8 @at_endline_loc_p(i8* %95, i8* %96, i32 %97)
  %conv123 = sext i8 %call122 to i32
  %tobool124 = icmp ne i32 %conv123, 0
  br i1 %tobool124, label %if.then125, label %if.else205

if.then125:                                       ; preds = %lor.lhs.false121, %lor.lhs.false118, %sw.bb115
  br label %do.body126

do.body126:                                       ; preds = %if.then125
  br label %while.cond127

while.cond127:                                    ; preds = %do.end201, %do.body126
  %98 = load i8*, i8** %b, align 8
  %99 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer128 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %99, i32 0, i32 0
  %100 = load i8*, i8** %buffer128, align 8
  %sub.ptr.lhs.cast129 = ptrtoint i8* %98 to i64
  %sub.ptr.rhs.cast130 = ptrtoint i8* %100 to i64
  %sub.ptr.sub131 = sub i64 %sub.ptr.lhs.cast129, %sub.ptr.rhs.cast130
  %add132 = add nsw i64 %sub.ptr.sub131, 1
  %101 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated133 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %101, i32 0, i32 1
  %102 = load i64, i64* %allocated133, align 8
  %cmp134 = icmp ugt i64 %add132, %102
  br i1 %cmp134, label %while.body136, label %while.end202

while.body136:                                    ; preds = %while.cond127
  br label %do.body137

do.body137:                                       ; preds = %while.body136
  %103 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer139 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %103, i32 0, i32 0
  %104 = load i8*, i8** %buffer139, align 8
  store i8* %104, i8** %old_buffer138, align 8
  %105 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated140 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %105, i32 0, i32 1
  %106 = load i64, i64* %allocated140, align 8
  %cmp141 = icmp eq i64 %106, 65536
  br i1 %cmp141, label %if.then143, label %if.end144

if.then143:                                       ; preds = %do.body137
  store i32 15, i32* %retval, align 4
  br label %return

if.end144:                                        ; preds = %do.body137
  %107 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated145 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %107, i32 0, i32 1
  %108 = load i64, i64* %allocated145, align 8
  %shl146 = shl i64 %108, 1
  store i64 %shl146, i64* %allocated145, align 8
  %109 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated147 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %109, i32 0, i32 1
  %110 = load i64, i64* %allocated147, align 8
  %cmp148 = icmp ugt i64 %110, 65536
  br i1 %cmp148, label %if.then150, label %if.end152

if.then150:                                       ; preds = %if.end144
  %111 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated151 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %111, i32 0, i32 1
  store i64 65536, i64* %allocated151, align 8
  br label %if.end152

if.end152:                                        ; preds = %if.then150, %if.end144
  %112 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer153 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %112, i32 0, i32 0
  %113 = load i8*, i8** %buffer153, align 8
  %114 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated154 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %114, i32 0, i32 1
  %115 = load i64, i64* %allocated154, align 8
  %call155 = call align 16 i8* @realloc(i8* %113, i64 %115) #9
  %116 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer156 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %116, i32 0, i32 0
  store i8* %call155, i8** %buffer156, align 8
  %117 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer157 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %117, i32 0, i32 0
  %118 = load i8*, i8** %buffer157, align 8
  %cmp158 = icmp eq i8* %118, null
  br i1 %cmp158, label %if.then160, label %if.end161

if.then160:                                       ; preds = %if.end152
  store i32 12, i32* %retval, align 4
  br label %return

if.end161:                                        ; preds = %if.end152
  %119 = load i8*, i8** %old_buffer138, align 8
  %120 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer162 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %120, i32 0, i32 0
  %121 = load i8*, i8** %buffer162, align 8
  %cmp163 = icmp ne i8* %119, %121
  br i1 %cmp163, label %if.then165, label %if.end200

if.then165:                                       ; preds = %if.end161
  %122 = load i8*, i8** %b, align 8
  %123 = load i8*, i8** %old_buffer138, align 8
  %sub.ptr.lhs.cast166 = ptrtoint i8* %122 to i64
  %sub.ptr.rhs.cast167 = ptrtoint i8* %123 to i64
  %sub.ptr.sub168 = sub i64 %sub.ptr.lhs.cast166, %sub.ptr.rhs.cast167
  %124 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer169 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %124, i32 0, i32 0
  %125 = load i8*, i8** %buffer169, align 8
  %add.ptr170 = getelementptr inbounds i8, i8* %125, i64 %sub.ptr.sub168
  store i8* %add.ptr170, i8** %b, align 8
  %126 = load i8*, i8** %begalt, align 8
  %127 = load i8*, i8** %old_buffer138, align 8
  %sub.ptr.lhs.cast171 = ptrtoint i8* %126 to i64
  %sub.ptr.rhs.cast172 = ptrtoint i8* %127 to i64
  %sub.ptr.sub173 = sub i64 %sub.ptr.lhs.cast171, %sub.ptr.rhs.cast172
  %128 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer174 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %128, i32 0, i32 0
  %129 = load i8*, i8** %buffer174, align 8
  %add.ptr175 = getelementptr inbounds i8, i8* %129, i64 %sub.ptr.sub173
  store i8* %add.ptr175, i8** %begalt, align 8
  %130 = load i8*, i8** %fixup_alt_jump, align 8
  %tobool176 = icmp ne i8* %130, null
  br i1 %tobool176, label %if.then177, label %if.end183

if.then177:                                       ; preds = %if.then165
  %131 = load i8*, i8** %fixup_alt_jump, align 8
  %132 = load i8*, i8** %old_buffer138, align 8
  %sub.ptr.lhs.cast178 = ptrtoint i8* %131 to i64
  %sub.ptr.rhs.cast179 = ptrtoint i8* %132 to i64
  %sub.ptr.sub180 = sub i64 %sub.ptr.lhs.cast178, %sub.ptr.rhs.cast179
  %133 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer181 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %133, i32 0, i32 0
  %134 = load i8*, i8** %buffer181, align 8
  %add.ptr182 = getelementptr inbounds i8, i8* %134, i64 %sub.ptr.sub180
  store i8* %add.ptr182, i8** %fixup_alt_jump, align 8
  br label %if.end183

if.end183:                                        ; preds = %if.then177, %if.then165
  %135 = load i8*, i8** %laststart, align 8
  %tobool184 = icmp ne i8* %135, null
  br i1 %tobool184, label %if.then185, label %if.end191

if.then185:                                       ; preds = %if.end183
  %136 = load i8*, i8** %laststart, align 8
  %137 = load i8*, i8** %old_buffer138, align 8
  %sub.ptr.lhs.cast186 = ptrtoint i8* %136 to i64
  %sub.ptr.rhs.cast187 = ptrtoint i8* %137 to i64
  %sub.ptr.sub188 = sub i64 %sub.ptr.lhs.cast186, %sub.ptr.rhs.cast187
  %138 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer189 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %138, i32 0, i32 0
  %139 = load i8*, i8** %buffer189, align 8
  %add.ptr190 = getelementptr inbounds i8, i8* %139, i64 %sub.ptr.sub188
  store i8* %add.ptr190, i8** %laststart, align 8
  br label %if.end191

if.end191:                                        ; preds = %if.then185, %if.end183
  %140 = load i8*, i8** %pending_exact, align 8
  %tobool192 = icmp ne i8* %140, null
  br i1 %tobool192, label %if.then193, label %if.end199

if.then193:                                       ; preds = %if.end191
  %141 = load i8*, i8** %pending_exact, align 8
  %142 = load i8*, i8** %old_buffer138, align 8
  %sub.ptr.lhs.cast194 = ptrtoint i8* %141 to i64
  %sub.ptr.rhs.cast195 = ptrtoint i8* %142 to i64
  %sub.ptr.sub196 = sub i64 %sub.ptr.lhs.cast194, %sub.ptr.rhs.cast195
  %143 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer197 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %143, i32 0, i32 0
  %144 = load i8*, i8** %buffer197, align 8
  %add.ptr198 = getelementptr inbounds i8, i8* %144, i64 %sub.ptr.sub196
  store i8* %add.ptr198, i8** %pending_exact, align 8
  br label %if.end199

if.end199:                                        ; preds = %if.then193, %if.end191
  br label %if.end200

if.end200:                                        ; preds = %if.end199, %if.end161
  br label %do.end201

do.end201:                                        ; preds = %if.end200
  br label %while.cond127, !llvm.loop !59

while.end202:                                     ; preds = %while.cond127
  %145 = load i8*, i8** %b, align 8
  %incdec.ptr203 = getelementptr inbounds i8, i8* %145, i32 1
  store i8* %incdec.ptr203, i8** %b, align 8
  store i8 9, i8* %145, align 1
  br label %do.end204

do.end204:                                        ; preds = %while.end202
  br label %if.end206

if.else205:                                       ; preds = %lor.lhs.false121
  br label %normal_char

if.end206:                                        ; preds = %do.end204
  br label %sw.epilog3520

sw.bb207:                                         ; preds = %do.end, %do.end
  %146 = load i32, i32* %syntax.addr, align 4
  %and208 = and i32 %146, 2
  %tobool209 = icmp ne i32 %and208, 0
  br i1 %tobool209, label %if.then213, label %lor.lhs.false210

lor.lhs.false210:                                 ; preds = %sw.bb207
  %147 = load i32, i32* %syntax.addr, align 4
  %and211 = and i32 %147, 1024
  %tobool212 = icmp ne i32 %and211, 0
  br i1 %tobool212, label %if.then213, label %if.end214

if.then213:                                       ; preds = %lor.lhs.false210, %sw.bb207
  br label %normal_char

if.end214:                                        ; preds = %lor.lhs.false210
  br label %handle_plus

handle_plus:                                      ; preds = %if.then3279, %if.end214
  br label %sw.bb215

sw.bb215:                                         ; preds = %do.end, %handle_plus
  %148 = load i8*, i8** %laststart, align 8
  %tobool216 = icmp ne i8* %148, null
  br i1 %tobool216, label %if.end227, label %if.then217

if.then217:                                       ; preds = %sw.bb215
  %149 = load i32, i32* %syntax.addr, align 4
  %and218 = and i32 %149, 32
  %tobool219 = icmp ne i32 %and218, 0
  br i1 %tobool219, label %if.then220, label %if.else221

if.then220:                                       ; preds = %if.then217
  store i32 13, i32* %retval, align 4
  br label %return

if.else221:                                       ; preds = %if.then217
  %150 = load i32, i32* %syntax.addr, align 4
  %and222 = and i32 %150, 16
  %tobool223 = icmp ne i32 %and222, 0
  br i1 %tobool223, label %if.end225, label %if.then224

if.then224:                                       ; preds = %if.else221
  br label %normal_char

if.end225:                                        ; preds = %if.else221
  br label %if.end226

if.end226:                                        ; preds = %if.end225
  br label %if.end227

if.end227:                                        ; preds = %if.end226, %sw.bb215
  store i8 0, i8* %keep_string_p, align 1
  store i8 0, i8* %zero_times_ok, align 1
  store i8 0, i8* %many_times_ok, align 1
  br label %for.cond

for.cond:                                         ; preds = %if.end307, %if.end227
  %151 = load i8, i8* %c, align 1
  %conv228 = zext i8 %151 to i32
  %cmp229 = icmp ne i32 %conv228, 43
  %conv230 = zext i1 %cmp229 to i32
  %152 = load i8, i8* %zero_times_ok, align 1
  %conv231 = sext i8 %152 to i32
  %or = or i32 %conv231, %conv230
  %conv232 = trunc i32 %or to i8
  store i8 %conv232, i8* %zero_times_ok, align 1
  %153 = load i8, i8* %c, align 1
  %conv233 = zext i8 %153 to i32
  %cmp234 = icmp ne i32 %conv233, 63
  %conv235 = zext i1 %cmp234 to i32
  %154 = load i8, i8* %many_times_ok, align 1
  %conv236 = sext i8 %154 to i32
  %or237 = or i32 %conv236, %conv235
  %conv238 = trunc i32 %or237 to i8
  store i8 %conv238, i8* %many_times_ok, align 1
  %155 = load i8*, i8** %p, align 8
  %156 = load i8*, i8** %pend, align 8
  %cmp239 = icmp eq i8* %155, %156
  br i1 %cmp239, label %if.then241, label %if.end242

if.then241:                                       ; preds = %for.cond
  br label %for.end

if.end242:                                        ; preds = %for.cond
  br label %do.body243

do.body243:                                       ; preds = %if.end242
  %157 = load i8*, i8** %p, align 8
  %158 = load i8*, i8** %pend, align 8
  %cmp244 = icmp eq i8* %157, %158
  br i1 %cmp244, label %if.then246, label %if.end247

if.then246:                                       ; preds = %do.body243
  store i32 14, i32* %retval, align 4
  br label %return

if.end247:                                        ; preds = %do.body243
  %159 = load i8*, i8** %p, align 8
  %incdec.ptr248 = getelementptr inbounds i8, i8* %159, i32 1
  store i8* %incdec.ptr248, i8** %p, align 8
  %160 = load i8, i8* %159, align 1
  store i8 %160, i8* %c, align 1
  %161 = load i8*, i8** %translate, align 8
  %tobool249 = icmp ne i8* %161, null
  br i1 %tobool249, label %if.then250, label %if.end253

if.then250:                                       ; preds = %if.end247
  %162 = load i8*, i8** %translate, align 8
  %163 = load i8, i8* %c, align 1
  %idxprom251 = zext i8 %163 to i64
  %arrayidx252 = getelementptr inbounds i8, i8* %162, i64 %idxprom251
  %164 = load i8, i8* %arrayidx252, align 1
  store i8 %164, i8* %c, align 1
  br label %if.end253

if.end253:                                        ; preds = %if.then250, %if.end247
  br label %do.end254

do.end254:                                        ; preds = %if.end253
  %165 = load i8, i8* %c, align 1
  %conv255 = zext i8 %165 to i32
  %cmp256 = icmp eq i32 %conv255, 42
  br i1 %cmp256, label %if.then268, label %lor.lhs.false258

lor.lhs.false258:                                 ; preds = %do.end254
  %166 = load i32, i32* %syntax.addr, align 4
  %and259 = and i32 %166, 2
  %tobool260 = icmp ne i32 %and259, 0
  br i1 %tobool260, label %if.else269, label %land.lhs.true

land.lhs.true:                                    ; preds = %lor.lhs.false258
  %167 = load i8, i8* %c, align 1
  %conv261 = zext i8 %167 to i32
  %cmp262 = icmp eq i32 %conv261, 43
  br i1 %cmp262, label %if.then268, label %lor.lhs.false264

lor.lhs.false264:                                 ; preds = %land.lhs.true
  %168 = load i8, i8* %c, align 1
  %conv265 = zext i8 %168 to i32
  %cmp266 = icmp eq i32 %conv265, 63
  br i1 %cmp266, label %if.then268, label %if.else269

if.then268:                                       ; preds = %lor.lhs.false264, %land.lhs.true, %do.end254
  br label %if.end307

if.else269:                                       ; preds = %lor.lhs.false264, %lor.lhs.false258
  %169 = load i32, i32* %syntax.addr, align 4
  %and270 = and i32 %169, 2
  %tobool271 = icmp ne i32 %and270, 0
  br i1 %tobool271, label %land.lhs.true272, label %if.else304

land.lhs.true272:                                 ; preds = %if.else269
  %170 = load i8, i8* %c, align 1
  %conv273 = zext i8 %170 to i32
  %cmp274 = icmp eq i32 %conv273, 92
  br i1 %cmp274, label %if.then276, label %if.else304

if.then276:                                       ; preds = %land.lhs.true272
  %171 = load i8*, i8** %p, align 8
  %172 = load i8*, i8** %pend, align 8
  %cmp277 = icmp eq i8* %171, %172
  br i1 %cmp277, label %if.then279, label %if.end280

if.then279:                                       ; preds = %if.then276
  store i32 5, i32* %retval, align 4
  br label %return

if.end280:                                        ; preds = %if.then276
  br label %do.body281

do.body281:                                       ; preds = %if.end280
  %173 = load i8*, i8** %p, align 8
  %174 = load i8*, i8** %pend, align 8
  %cmp282 = icmp eq i8* %173, %174
  br i1 %cmp282, label %if.then284, label %if.end285

if.then284:                                       ; preds = %do.body281
  store i32 14, i32* %retval, align 4
  br label %return

if.end285:                                        ; preds = %do.body281
  %175 = load i8*, i8** %p, align 8
  %incdec.ptr286 = getelementptr inbounds i8, i8* %175, i32 1
  store i8* %incdec.ptr286, i8** %p, align 8
  %176 = load i8, i8* %175, align 1
  store i8 %176, i8* %c1, align 1
  %177 = load i8*, i8** %translate, align 8
  %tobool287 = icmp ne i8* %177, null
  br i1 %tobool287, label %if.then288, label %if.end291

if.then288:                                       ; preds = %if.end285
  %178 = load i8*, i8** %translate, align 8
  %179 = load i8, i8* %c1, align 1
  %idxprom289 = zext i8 %179 to i64
  %arrayidx290 = getelementptr inbounds i8, i8* %178, i64 %idxprom289
  %180 = load i8, i8* %arrayidx290, align 1
  store i8 %180, i8* %c1, align 1
  br label %if.end291

if.end291:                                        ; preds = %if.then288, %if.end285
  br label %do.end292

do.end292:                                        ; preds = %if.end291
  %181 = load i8, i8* %c1, align 1
  %conv293 = zext i8 %181 to i32
  %cmp294 = icmp eq i32 %conv293, 43
  br i1 %cmp294, label %if.end303, label %lor.lhs.false296

lor.lhs.false296:                                 ; preds = %do.end292
  %182 = load i8, i8* %c1, align 1
  %conv297 = zext i8 %182 to i32
  %cmp298 = icmp eq i32 %conv297, 63
  br i1 %cmp298, label %if.end303, label %if.then300

if.then300:                                       ; preds = %lor.lhs.false296
  %183 = load i8*, i8** %p, align 8
  %incdec.ptr301 = getelementptr inbounds i8, i8* %183, i32 -1
  store i8* %incdec.ptr301, i8** %p, align 8
  %184 = load i8*, i8** %p, align 8
  %incdec.ptr302 = getelementptr inbounds i8, i8* %184, i32 -1
  store i8* %incdec.ptr302, i8** %p, align 8
  br label %for.end

if.end303:                                        ; preds = %lor.lhs.false296, %do.end292
  %185 = load i8, i8* %c1, align 1
  store i8 %185, i8* %c, align 1
  br label %if.end306

if.else304:                                       ; preds = %land.lhs.true272, %if.else269
  %186 = load i8*, i8** %p, align 8
  %incdec.ptr305 = getelementptr inbounds i8, i8* %186, i32 -1
  store i8* %incdec.ptr305, i8** %p, align 8
  br label %for.end

if.end306:                                        ; preds = %if.end303
  br label %if.end307

if.end307:                                        ; preds = %if.end306, %if.then268
  br label %for.cond

for.end:                                          ; preds = %if.else304, %if.then300, %if.then241
  %187 = load i8*, i8** %laststart, align 8
  %tobool308 = icmp ne i8* %187, null
  br i1 %tobool308, label %if.end310, label %if.then309

if.then309:                                       ; preds = %for.end
  br label %sw.epilog3520

if.end310:                                        ; preds = %for.end
  %188 = load i8, i8* %many_times_ok, align 1
  %tobool311 = icmp ne i8 %188, 0
  br i1 %tobool311, label %if.then312, label %if.end445

if.then312:                                       ; preds = %if.end310
  br label %while.cond313

while.cond313:                                    ; preds = %do.end387, %if.then312
  %189 = load i8*, i8** %b, align 8
  %190 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer314 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %190, i32 0, i32 0
  %191 = load i8*, i8** %buffer314, align 8
  %sub.ptr.lhs.cast315 = ptrtoint i8* %189 to i64
  %sub.ptr.rhs.cast316 = ptrtoint i8* %191 to i64
  %sub.ptr.sub317 = sub i64 %sub.ptr.lhs.cast315, %sub.ptr.rhs.cast316
  %add318 = add nsw i64 %sub.ptr.sub317, 3
  %192 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated319 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %192, i32 0, i32 1
  %193 = load i64, i64* %allocated319, align 8
  %cmp320 = icmp ugt i64 %add318, %193
  br i1 %cmp320, label %while.body322, label %while.end388

while.body322:                                    ; preds = %while.cond313
  br label %do.body323

do.body323:                                       ; preds = %while.body322
  %194 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer325 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %194, i32 0, i32 0
  %195 = load i8*, i8** %buffer325, align 8
  store i8* %195, i8** %old_buffer324, align 8
  %196 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated326 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %196, i32 0, i32 1
  %197 = load i64, i64* %allocated326, align 8
  %cmp327 = icmp eq i64 %197, 65536
  br i1 %cmp327, label %if.then329, label %if.end330

if.then329:                                       ; preds = %do.body323
  store i32 15, i32* %retval, align 4
  br label %return

if.end330:                                        ; preds = %do.body323
  %198 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated331 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %198, i32 0, i32 1
  %199 = load i64, i64* %allocated331, align 8
  %shl332 = shl i64 %199, 1
  store i64 %shl332, i64* %allocated331, align 8
  %200 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated333 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %200, i32 0, i32 1
  %201 = load i64, i64* %allocated333, align 8
  %cmp334 = icmp ugt i64 %201, 65536
  br i1 %cmp334, label %if.then336, label %if.end338

if.then336:                                       ; preds = %if.end330
  %202 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated337 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %202, i32 0, i32 1
  store i64 65536, i64* %allocated337, align 8
  br label %if.end338

if.end338:                                        ; preds = %if.then336, %if.end330
  %203 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer339 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %203, i32 0, i32 0
  %204 = load i8*, i8** %buffer339, align 8
  %205 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated340 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %205, i32 0, i32 1
  %206 = load i64, i64* %allocated340, align 8
  %call341 = call align 16 i8* @realloc(i8* %204, i64 %206) #9
  %207 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer342 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %207, i32 0, i32 0
  store i8* %call341, i8** %buffer342, align 8
  %208 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer343 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %208, i32 0, i32 0
  %209 = load i8*, i8** %buffer343, align 8
  %cmp344 = icmp eq i8* %209, null
  br i1 %cmp344, label %if.then346, label %if.end347

if.then346:                                       ; preds = %if.end338
  store i32 12, i32* %retval, align 4
  br label %return

if.end347:                                        ; preds = %if.end338
  %210 = load i8*, i8** %old_buffer324, align 8
  %211 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer348 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %211, i32 0, i32 0
  %212 = load i8*, i8** %buffer348, align 8
  %cmp349 = icmp ne i8* %210, %212
  br i1 %cmp349, label %if.then351, label %if.end386

if.then351:                                       ; preds = %if.end347
  %213 = load i8*, i8** %b, align 8
  %214 = load i8*, i8** %old_buffer324, align 8
  %sub.ptr.lhs.cast352 = ptrtoint i8* %213 to i64
  %sub.ptr.rhs.cast353 = ptrtoint i8* %214 to i64
  %sub.ptr.sub354 = sub i64 %sub.ptr.lhs.cast352, %sub.ptr.rhs.cast353
  %215 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer355 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %215, i32 0, i32 0
  %216 = load i8*, i8** %buffer355, align 8
  %add.ptr356 = getelementptr inbounds i8, i8* %216, i64 %sub.ptr.sub354
  store i8* %add.ptr356, i8** %b, align 8
  %217 = load i8*, i8** %begalt, align 8
  %218 = load i8*, i8** %old_buffer324, align 8
  %sub.ptr.lhs.cast357 = ptrtoint i8* %217 to i64
  %sub.ptr.rhs.cast358 = ptrtoint i8* %218 to i64
  %sub.ptr.sub359 = sub i64 %sub.ptr.lhs.cast357, %sub.ptr.rhs.cast358
  %219 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer360 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %219, i32 0, i32 0
  %220 = load i8*, i8** %buffer360, align 8
  %add.ptr361 = getelementptr inbounds i8, i8* %220, i64 %sub.ptr.sub359
  store i8* %add.ptr361, i8** %begalt, align 8
  %221 = load i8*, i8** %fixup_alt_jump, align 8
  %tobool362 = icmp ne i8* %221, null
  br i1 %tobool362, label %if.then363, label %if.end369

if.then363:                                       ; preds = %if.then351
  %222 = load i8*, i8** %fixup_alt_jump, align 8
  %223 = load i8*, i8** %old_buffer324, align 8
  %sub.ptr.lhs.cast364 = ptrtoint i8* %222 to i64
  %sub.ptr.rhs.cast365 = ptrtoint i8* %223 to i64
  %sub.ptr.sub366 = sub i64 %sub.ptr.lhs.cast364, %sub.ptr.rhs.cast365
  %224 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer367 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %224, i32 0, i32 0
  %225 = load i8*, i8** %buffer367, align 8
  %add.ptr368 = getelementptr inbounds i8, i8* %225, i64 %sub.ptr.sub366
  store i8* %add.ptr368, i8** %fixup_alt_jump, align 8
  br label %if.end369

if.end369:                                        ; preds = %if.then363, %if.then351
  %226 = load i8*, i8** %laststart, align 8
  %tobool370 = icmp ne i8* %226, null
  br i1 %tobool370, label %if.then371, label %if.end377

if.then371:                                       ; preds = %if.end369
  %227 = load i8*, i8** %laststart, align 8
  %228 = load i8*, i8** %old_buffer324, align 8
  %sub.ptr.lhs.cast372 = ptrtoint i8* %227 to i64
  %sub.ptr.rhs.cast373 = ptrtoint i8* %228 to i64
  %sub.ptr.sub374 = sub i64 %sub.ptr.lhs.cast372, %sub.ptr.rhs.cast373
  %229 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer375 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %229, i32 0, i32 0
  %230 = load i8*, i8** %buffer375, align 8
  %add.ptr376 = getelementptr inbounds i8, i8* %230, i64 %sub.ptr.sub374
  store i8* %add.ptr376, i8** %laststart, align 8
  br label %if.end377

if.end377:                                        ; preds = %if.then371, %if.end369
  %231 = load i8*, i8** %pending_exact, align 8
  %tobool378 = icmp ne i8* %231, null
  br i1 %tobool378, label %if.then379, label %if.end385

if.then379:                                       ; preds = %if.end377
  %232 = load i8*, i8** %pending_exact, align 8
  %233 = load i8*, i8** %old_buffer324, align 8
  %sub.ptr.lhs.cast380 = ptrtoint i8* %232 to i64
  %sub.ptr.rhs.cast381 = ptrtoint i8* %233 to i64
  %sub.ptr.sub382 = sub i64 %sub.ptr.lhs.cast380, %sub.ptr.rhs.cast381
  %234 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer383 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %234, i32 0, i32 0
  %235 = load i8*, i8** %buffer383, align 8
  %add.ptr384 = getelementptr inbounds i8, i8* %235, i64 %sub.ptr.sub382
  store i8* %add.ptr384, i8** %pending_exact, align 8
  br label %if.end385

if.end385:                                        ; preds = %if.then379, %if.end377
  br label %if.end386

if.end386:                                        ; preds = %if.end385, %if.end347
  br label %do.end387

do.end387:                                        ; preds = %if.end386
  br label %while.cond313, !llvm.loop !60

while.end388:                                     ; preds = %while.cond313
  %236 = load i8*, i8** %translate, align 8
  %tobool389 = icmp ne i8* %236, null
  br i1 %tobool389, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.end388
  %237 = load i8*, i8** %translate, align 8
  %238 = load i8*, i8** %p, align 8
  %add.ptr390 = getelementptr inbounds i8, i8* %238, i64 -2
  %239 = load i8, i8* %add.ptr390, align 1
  %idxprom391 = zext i8 %239 to i64
  %arrayidx392 = getelementptr inbounds i8, i8* %237, i64 %idxprom391
  %240 = load i8, i8* %arrayidx392, align 1
  %conv393 = sext i8 %240 to i32
  br label %cond.end

cond.false:                                       ; preds = %while.end388
  %241 = load i8*, i8** %p, align 8
  %add.ptr394 = getelementptr inbounds i8, i8* %241, i64 -2
  %242 = load i8, i8* %add.ptr394, align 1
  %conv395 = sext i8 %242 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv393, %cond.true ], [ %conv395, %cond.false ]
  %243 = load i8*, i8** %translate, align 8
  %tobool396 = icmp ne i8* %243, null
  br i1 %tobool396, label %cond.true397, label %cond.false400

cond.true397:                                     ; preds = %cond.end
  %244 = load i8*, i8** %translate, align 8
  %arrayidx398 = getelementptr inbounds i8, i8* %244, i64 46
  %245 = load i8, i8* %arrayidx398, align 1
  %conv399 = sext i8 %245 to i32
  br label %cond.end401

cond.false400:                                    ; preds = %cond.end
  br label %cond.end401

cond.end401:                                      ; preds = %cond.false400, %cond.true397
  %cond402 = phi i32 [ %conv399, %cond.true397 ], [ 46, %cond.false400 ]
  %cmp403 = icmp eq i32 %cond, %cond402
  br i1 %cmp403, label %land.lhs.true405, label %if.else437

land.lhs.true405:                                 ; preds = %cond.end401
  %246 = load i8, i8* %zero_times_ok, align 1
  %conv406 = sext i8 %246 to i32
  %tobool407 = icmp ne i32 %conv406, 0
  br i1 %tobool407, label %land.lhs.true408, label %if.else437

land.lhs.true408:                                 ; preds = %land.lhs.true405
  %247 = load i8*, i8** %p, align 8
  %248 = load i8*, i8** %pend, align 8
  %cmp409 = icmp ult i8* %247, %248
  br i1 %cmp409, label %land.lhs.true411, label %if.else437

land.lhs.true411:                                 ; preds = %land.lhs.true408
  %249 = load i8*, i8** %translate, align 8
  %tobool412 = icmp ne i8* %249, null
  br i1 %tobool412, label %cond.true413, label %cond.false417

cond.true413:                                     ; preds = %land.lhs.true411
  %250 = load i8*, i8** %translate, align 8
  %251 = load i8*, i8** %p, align 8
  %252 = load i8, i8* %251, align 1
  %idxprom414 = zext i8 %252 to i64
  %arrayidx415 = getelementptr inbounds i8, i8* %250, i64 %idxprom414
  %253 = load i8, i8* %arrayidx415, align 1
  %conv416 = sext i8 %253 to i32
  br label %cond.end419

cond.false417:                                    ; preds = %land.lhs.true411
  %254 = load i8*, i8** %p, align 8
  %255 = load i8, i8* %254, align 1
  %conv418 = sext i8 %255 to i32
  br label %cond.end419

cond.end419:                                      ; preds = %cond.false417, %cond.true413
  %cond420 = phi i32 [ %conv416, %cond.true413 ], [ %conv418, %cond.false417 ]
  %256 = load i8*, i8** %translate, align 8
  %tobool421 = icmp ne i8* %256, null
  br i1 %tobool421, label %cond.true422, label %cond.false425

cond.true422:                                     ; preds = %cond.end419
  %257 = load i8*, i8** %translate, align 8
  %arrayidx423 = getelementptr inbounds i8, i8* %257, i64 10
  %258 = load i8, i8* %arrayidx423, align 1
  %conv424 = sext i8 %258 to i32
  br label %cond.end426

cond.false425:                                    ; preds = %cond.end419
  br label %cond.end426

cond.end426:                                      ; preds = %cond.false425, %cond.true422
  %cond427 = phi i32 [ %conv424, %cond.true422 ], [ 10, %cond.false425 ]
  %cmp428 = icmp eq i32 %cond420, %cond427
  br i1 %cmp428, label %land.lhs.true430, label %if.else437

land.lhs.true430:                                 ; preds = %cond.end426
  %259 = load i32, i32* %syntax.addr, align 4
  %and431 = and i32 %259, 64
  %tobool432 = icmp ne i32 %and431, 0
  br i1 %tobool432, label %if.else437, label %if.then433

if.then433:                                       ; preds = %land.lhs.true430
  %260 = load i8*, i8** %b, align 8
  %261 = load i8*, i8** %laststart, align 8
  %262 = load i8*, i8** %b, align 8
  %sub.ptr.lhs.cast434 = ptrtoint i8* %261 to i64
  %sub.ptr.rhs.cast435 = ptrtoint i8* %262 to i64
  %sub.ptr.sub436 = sub i64 %sub.ptr.lhs.cast434, %sub.ptr.rhs.cast435
  %sub = sub nsw i64 %sub.ptr.sub436, 3
  call void (i32, i8*, i64, ...) bitcast (void (i32, i8*, i32)* @store_op1 to void (i32, i8*, i64, ...)*)(i32 12, i8* %260, i64 %sub)
  store i8 1, i8* %keep_string_p, align 1
  br label %if.end443

if.else437:                                       ; preds = %land.lhs.true430, %cond.end426, %land.lhs.true408, %land.lhs.true405, %cond.end401
  %263 = load i8*, i8** %b, align 8
  %264 = load i8*, i8** %laststart, align 8
  %add.ptr438 = getelementptr inbounds i8, i8* %264, i64 -3
  %265 = load i8*, i8** %b, align 8
  %sub.ptr.lhs.cast439 = ptrtoint i8* %add.ptr438 to i64
  %sub.ptr.rhs.cast440 = ptrtoint i8* %265 to i64
  %sub.ptr.sub441 = sub i64 %sub.ptr.lhs.cast439, %sub.ptr.rhs.cast440
  %sub442 = sub nsw i64 %sub.ptr.sub441, 3
  call void (i32, i8*, i64, ...) bitcast (void (i32, i8*, i32)* @store_op1 to void (i32, i8*, i64, ...)*)(i32 17, i8* %263, i64 %sub442)
  br label %if.end443

if.end443:                                        ; preds = %if.else437, %if.then433
  %266 = load i8*, i8** %b, align 8
  %add.ptr444 = getelementptr inbounds i8, i8* %266, i64 3
  store i8* %add.ptr444, i8** %b, align 8
  br label %if.end445

if.end445:                                        ; preds = %if.end443, %if.end310
  br label %while.cond446

while.cond446:                                    ; preds = %do.end520, %if.end445
  %267 = load i8*, i8** %b, align 8
  %268 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer447 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %268, i32 0, i32 0
  %269 = load i8*, i8** %buffer447, align 8
  %sub.ptr.lhs.cast448 = ptrtoint i8* %267 to i64
  %sub.ptr.rhs.cast449 = ptrtoint i8* %269 to i64
  %sub.ptr.sub450 = sub i64 %sub.ptr.lhs.cast448, %sub.ptr.rhs.cast449
  %add451 = add nsw i64 %sub.ptr.sub450, 3
  %270 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated452 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %270, i32 0, i32 1
  %271 = load i64, i64* %allocated452, align 8
  %cmp453 = icmp ugt i64 %add451, %271
  br i1 %cmp453, label %while.body455, label %while.end521

while.body455:                                    ; preds = %while.cond446
  br label %do.body456

do.body456:                                       ; preds = %while.body455
  %272 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer458 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %272, i32 0, i32 0
  %273 = load i8*, i8** %buffer458, align 8
  store i8* %273, i8** %old_buffer457, align 8
  %274 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated459 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %274, i32 0, i32 1
  %275 = load i64, i64* %allocated459, align 8
  %cmp460 = icmp eq i64 %275, 65536
  br i1 %cmp460, label %if.then462, label %if.end463

if.then462:                                       ; preds = %do.body456
  store i32 15, i32* %retval, align 4
  br label %return

if.end463:                                        ; preds = %do.body456
  %276 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated464 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %276, i32 0, i32 1
  %277 = load i64, i64* %allocated464, align 8
  %shl465 = shl i64 %277, 1
  store i64 %shl465, i64* %allocated464, align 8
  %278 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated466 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %278, i32 0, i32 1
  %279 = load i64, i64* %allocated466, align 8
  %cmp467 = icmp ugt i64 %279, 65536
  br i1 %cmp467, label %if.then469, label %if.end471

if.then469:                                       ; preds = %if.end463
  %280 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated470 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %280, i32 0, i32 1
  store i64 65536, i64* %allocated470, align 8
  br label %if.end471

if.end471:                                        ; preds = %if.then469, %if.end463
  %281 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer472 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %281, i32 0, i32 0
  %282 = load i8*, i8** %buffer472, align 8
  %283 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated473 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %283, i32 0, i32 1
  %284 = load i64, i64* %allocated473, align 8
  %call474 = call align 16 i8* @realloc(i8* %282, i64 %284) #9
  %285 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer475 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %285, i32 0, i32 0
  store i8* %call474, i8** %buffer475, align 8
  %286 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer476 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %286, i32 0, i32 0
  %287 = load i8*, i8** %buffer476, align 8
  %cmp477 = icmp eq i8* %287, null
  br i1 %cmp477, label %if.then479, label %if.end480

if.then479:                                       ; preds = %if.end471
  store i32 12, i32* %retval, align 4
  br label %return

if.end480:                                        ; preds = %if.end471
  %288 = load i8*, i8** %old_buffer457, align 8
  %289 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer481 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %289, i32 0, i32 0
  %290 = load i8*, i8** %buffer481, align 8
  %cmp482 = icmp ne i8* %288, %290
  br i1 %cmp482, label %if.then484, label %if.end519

if.then484:                                       ; preds = %if.end480
  %291 = load i8*, i8** %b, align 8
  %292 = load i8*, i8** %old_buffer457, align 8
  %sub.ptr.lhs.cast485 = ptrtoint i8* %291 to i64
  %sub.ptr.rhs.cast486 = ptrtoint i8* %292 to i64
  %sub.ptr.sub487 = sub i64 %sub.ptr.lhs.cast485, %sub.ptr.rhs.cast486
  %293 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer488 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %293, i32 0, i32 0
  %294 = load i8*, i8** %buffer488, align 8
  %add.ptr489 = getelementptr inbounds i8, i8* %294, i64 %sub.ptr.sub487
  store i8* %add.ptr489, i8** %b, align 8
  %295 = load i8*, i8** %begalt, align 8
  %296 = load i8*, i8** %old_buffer457, align 8
  %sub.ptr.lhs.cast490 = ptrtoint i8* %295 to i64
  %sub.ptr.rhs.cast491 = ptrtoint i8* %296 to i64
  %sub.ptr.sub492 = sub i64 %sub.ptr.lhs.cast490, %sub.ptr.rhs.cast491
  %297 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer493 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %297, i32 0, i32 0
  %298 = load i8*, i8** %buffer493, align 8
  %add.ptr494 = getelementptr inbounds i8, i8* %298, i64 %sub.ptr.sub492
  store i8* %add.ptr494, i8** %begalt, align 8
  %299 = load i8*, i8** %fixup_alt_jump, align 8
  %tobool495 = icmp ne i8* %299, null
  br i1 %tobool495, label %if.then496, label %if.end502

if.then496:                                       ; preds = %if.then484
  %300 = load i8*, i8** %fixup_alt_jump, align 8
  %301 = load i8*, i8** %old_buffer457, align 8
  %sub.ptr.lhs.cast497 = ptrtoint i8* %300 to i64
  %sub.ptr.rhs.cast498 = ptrtoint i8* %301 to i64
  %sub.ptr.sub499 = sub i64 %sub.ptr.lhs.cast497, %sub.ptr.rhs.cast498
  %302 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer500 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %302, i32 0, i32 0
  %303 = load i8*, i8** %buffer500, align 8
  %add.ptr501 = getelementptr inbounds i8, i8* %303, i64 %sub.ptr.sub499
  store i8* %add.ptr501, i8** %fixup_alt_jump, align 8
  br label %if.end502

if.end502:                                        ; preds = %if.then496, %if.then484
  %304 = load i8*, i8** %laststart, align 8
  %tobool503 = icmp ne i8* %304, null
  br i1 %tobool503, label %if.then504, label %if.end510

if.then504:                                       ; preds = %if.end502
  %305 = load i8*, i8** %laststart, align 8
  %306 = load i8*, i8** %old_buffer457, align 8
  %sub.ptr.lhs.cast505 = ptrtoint i8* %305 to i64
  %sub.ptr.rhs.cast506 = ptrtoint i8* %306 to i64
  %sub.ptr.sub507 = sub i64 %sub.ptr.lhs.cast505, %sub.ptr.rhs.cast506
  %307 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer508 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %307, i32 0, i32 0
  %308 = load i8*, i8** %buffer508, align 8
  %add.ptr509 = getelementptr inbounds i8, i8* %308, i64 %sub.ptr.sub507
  store i8* %add.ptr509, i8** %laststart, align 8
  br label %if.end510

if.end510:                                        ; preds = %if.then504, %if.end502
  %309 = load i8*, i8** %pending_exact, align 8
  %tobool511 = icmp ne i8* %309, null
  br i1 %tobool511, label %if.then512, label %if.end518

if.then512:                                       ; preds = %if.end510
  %310 = load i8*, i8** %pending_exact, align 8
  %311 = load i8*, i8** %old_buffer457, align 8
  %sub.ptr.lhs.cast513 = ptrtoint i8* %310 to i64
  %sub.ptr.rhs.cast514 = ptrtoint i8* %311 to i64
  %sub.ptr.sub515 = sub i64 %sub.ptr.lhs.cast513, %sub.ptr.rhs.cast514
  %312 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer516 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %312, i32 0, i32 0
  %313 = load i8*, i8** %buffer516, align 8
  %add.ptr517 = getelementptr inbounds i8, i8* %313, i64 %sub.ptr.sub515
  store i8* %add.ptr517, i8** %pending_exact, align 8
  br label %if.end518

if.end518:                                        ; preds = %if.then512, %if.end510
  br label %if.end519

if.end519:                                        ; preds = %if.end518, %if.end480
  br label %do.end520

do.end520:                                        ; preds = %if.end519
  br label %while.cond446, !llvm.loop !61

while.end521:                                     ; preds = %while.cond446
  %314 = load i8, i8* %keep_string_p, align 1
  %conv522 = sext i8 %314 to i32
  %tobool523 = icmp ne i32 %conv522, 0
  %315 = zext i1 %tobool523 to i64
  %cond524 = select i1 %tobool523, i32 15, i32 14
  %316 = load i8*, i8** %laststart, align 8
  %317 = load i8*, i8** %b, align 8
  %add.ptr525 = getelementptr inbounds i8, i8* %317, i64 3
  %318 = load i8*, i8** %laststart, align 8
  %sub.ptr.lhs.cast526 = ptrtoint i8* %add.ptr525 to i64
  %sub.ptr.rhs.cast527 = ptrtoint i8* %318 to i64
  %sub.ptr.sub528 = sub i64 %sub.ptr.lhs.cast526, %sub.ptr.rhs.cast527
  %sub529 = sub nsw i64 %sub.ptr.sub528, 3
  %319 = load i8*, i8** %b, align 8
  call void (i32, i8*, i64, i8*, ...) bitcast (void (i32, i8*, i32, i8*)* @insert_op1 to void (i32, i8*, i64, i8*, ...)*)(i32 %cond524, i8* %316, i64 %sub529, i8* %319)
  store i8* null, i8** %pending_exact, align 8
  %320 = load i8*, i8** %b, align 8
  %add.ptr530 = getelementptr inbounds i8, i8* %320, i64 3
  store i8* %add.ptr530, i8** %b, align 8
  %321 = load i8, i8* %zero_times_ok, align 1
  %tobool531 = icmp ne i8 %321, 0
  br i1 %tobool531, label %if.end615, label %if.then532

if.then532:                                       ; preds = %while.end521
  br label %while.cond533

while.cond533:                                    ; preds = %do.end607, %if.then532
  %322 = load i8*, i8** %b, align 8
  %323 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer534 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %323, i32 0, i32 0
  %324 = load i8*, i8** %buffer534, align 8
  %sub.ptr.lhs.cast535 = ptrtoint i8* %322 to i64
  %sub.ptr.rhs.cast536 = ptrtoint i8* %324 to i64
  %sub.ptr.sub537 = sub i64 %sub.ptr.lhs.cast535, %sub.ptr.rhs.cast536
  %add538 = add nsw i64 %sub.ptr.sub537, 3
  %325 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated539 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %325, i32 0, i32 1
  %326 = load i64, i64* %allocated539, align 8
  %cmp540 = icmp ugt i64 %add538, %326
  br i1 %cmp540, label %while.body542, label %while.end608

while.body542:                                    ; preds = %while.cond533
  br label %do.body543

do.body543:                                       ; preds = %while.body542
  %327 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer545 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %327, i32 0, i32 0
  %328 = load i8*, i8** %buffer545, align 8
  store i8* %328, i8** %old_buffer544, align 8
  %329 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated546 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %329, i32 0, i32 1
  %330 = load i64, i64* %allocated546, align 8
  %cmp547 = icmp eq i64 %330, 65536
  br i1 %cmp547, label %if.then549, label %if.end550

if.then549:                                       ; preds = %do.body543
  store i32 15, i32* %retval, align 4
  br label %return

if.end550:                                        ; preds = %do.body543
  %331 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated551 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %331, i32 0, i32 1
  %332 = load i64, i64* %allocated551, align 8
  %shl552 = shl i64 %332, 1
  store i64 %shl552, i64* %allocated551, align 8
  %333 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated553 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %333, i32 0, i32 1
  %334 = load i64, i64* %allocated553, align 8
  %cmp554 = icmp ugt i64 %334, 65536
  br i1 %cmp554, label %if.then556, label %if.end558

if.then556:                                       ; preds = %if.end550
  %335 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated557 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %335, i32 0, i32 1
  store i64 65536, i64* %allocated557, align 8
  br label %if.end558

if.end558:                                        ; preds = %if.then556, %if.end550
  %336 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer559 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %336, i32 0, i32 0
  %337 = load i8*, i8** %buffer559, align 8
  %338 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated560 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %338, i32 0, i32 1
  %339 = load i64, i64* %allocated560, align 8
  %call561 = call align 16 i8* @realloc(i8* %337, i64 %339) #9
  %340 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer562 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %340, i32 0, i32 0
  store i8* %call561, i8** %buffer562, align 8
  %341 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer563 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %341, i32 0, i32 0
  %342 = load i8*, i8** %buffer563, align 8
  %cmp564 = icmp eq i8* %342, null
  br i1 %cmp564, label %if.then566, label %if.end567

if.then566:                                       ; preds = %if.end558
  store i32 12, i32* %retval, align 4
  br label %return

if.end567:                                        ; preds = %if.end558
  %343 = load i8*, i8** %old_buffer544, align 8
  %344 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer568 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %344, i32 0, i32 0
  %345 = load i8*, i8** %buffer568, align 8
  %cmp569 = icmp ne i8* %343, %345
  br i1 %cmp569, label %if.then571, label %if.end606

if.then571:                                       ; preds = %if.end567
  %346 = load i8*, i8** %b, align 8
  %347 = load i8*, i8** %old_buffer544, align 8
  %sub.ptr.lhs.cast572 = ptrtoint i8* %346 to i64
  %sub.ptr.rhs.cast573 = ptrtoint i8* %347 to i64
  %sub.ptr.sub574 = sub i64 %sub.ptr.lhs.cast572, %sub.ptr.rhs.cast573
  %348 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer575 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %348, i32 0, i32 0
  %349 = load i8*, i8** %buffer575, align 8
  %add.ptr576 = getelementptr inbounds i8, i8* %349, i64 %sub.ptr.sub574
  store i8* %add.ptr576, i8** %b, align 8
  %350 = load i8*, i8** %begalt, align 8
  %351 = load i8*, i8** %old_buffer544, align 8
  %sub.ptr.lhs.cast577 = ptrtoint i8* %350 to i64
  %sub.ptr.rhs.cast578 = ptrtoint i8* %351 to i64
  %sub.ptr.sub579 = sub i64 %sub.ptr.lhs.cast577, %sub.ptr.rhs.cast578
  %352 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer580 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %352, i32 0, i32 0
  %353 = load i8*, i8** %buffer580, align 8
  %add.ptr581 = getelementptr inbounds i8, i8* %353, i64 %sub.ptr.sub579
  store i8* %add.ptr581, i8** %begalt, align 8
  %354 = load i8*, i8** %fixup_alt_jump, align 8
  %tobool582 = icmp ne i8* %354, null
  br i1 %tobool582, label %if.then583, label %if.end589

if.then583:                                       ; preds = %if.then571
  %355 = load i8*, i8** %fixup_alt_jump, align 8
  %356 = load i8*, i8** %old_buffer544, align 8
  %sub.ptr.lhs.cast584 = ptrtoint i8* %355 to i64
  %sub.ptr.rhs.cast585 = ptrtoint i8* %356 to i64
  %sub.ptr.sub586 = sub i64 %sub.ptr.lhs.cast584, %sub.ptr.rhs.cast585
  %357 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer587 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %357, i32 0, i32 0
  %358 = load i8*, i8** %buffer587, align 8
  %add.ptr588 = getelementptr inbounds i8, i8* %358, i64 %sub.ptr.sub586
  store i8* %add.ptr588, i8** %fixup_alt_jump, align 8
  br label %if.end589

if.end589:                                        ; preds = %if.then583, %if.then571
  %359 = load i8*, i8** %laststart, align 8
  %tobool590 = icmp ne i8* %359, null
  br i1 %tobool590, label %if.then591, label %if.end597

if.then591:                                       ; preds = %if.end589
  %360 = load i8*, i8** %laststart, align 8
  %361 = load i8*, i8** %old_buffer544, align 8
  %sub.ptr.lhs.cast592 = ptrtoint i8* %360 to i64
  %sub.ptr.rhs.cast593 = ptrtoint i8* %361 to i64
  %sub.ptr.sub594 = sub i64 %sub.ptr.lhs.cast592, %sub.ptr.rhs.cast593
  %362 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer595 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %362, i32 0, i32 0
  %363 = load i8*, i8** %buffer595, align 8
  %add.ptr596 = getelementptr inbounds i8, i8* %363, i64 %sub.ptr.sub594
  store i8* %add.ptr596, i8** %laststart, align 8
  br label %if.end597

if.end597:                                        ; preds = %if.then591, %if.end589
  %364 = load i8*, i8** %pending_exact, align 8
  %tobool598 = icmp ne i8* %364, null
  br i1 %tobool598, label %if.then599, label %if.end605

if.then599:                                       ; preds = %if.end597
  %365 = load i8*, i8** %pending_exact, align 8
  %366 = load i8*, i8** %old_buffer544, align 8
  %sub.ptr.lhs.cast600 = ptrtoint i8* %365 to i64
  %sub.ptr.rhs.cast601 = ptrtoint i8* %366 to i64
  %sub.ptr.sub602 = sub i64 %sub.ptr.lhs.cast600, %sub.ptr.rhs.cast601
  %367 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer603 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %367, i32 0, i32 0
  %368 = load i8*, i8** %buffer603, align 8
  %add.ptr604 = getelementptr inbounds i8, i8* %368, i64 %sub.ptr.sub602
  store i8* %add.ptr604, i8** %pending_exact, align 8
  br label %if.end605

if.end605:                                        ; preds = %if.then599, %if.end597
  br label %if.end606

if.end606:                                        ; preds = %if.end605, %if.end567
  br label %do.end607

do.end607:                                        ; preds = %if.end606
  br label %while.cond533, !llvm.loop !62

while.end608:                                     ; preds = %while.cond533
  %369 = load i8*, i8** %laststart, align 8
  %370 = load i8*, i8** %laststart, align 8
  %add.ptr609 = getelementptr inbounds i8, i8* %370, i64 6
  %371 = load i8*, i8** %laststart, align 8
  %sub.ptr.lhs.cast610 = ptrtoint i8* %add.ptr609 to i64
  %sub.ptr.rhs.cast611 = ptrtoint i8* %371 to i64
  %sub.ptr.sub612 = sub i64 %sub.ptr.lhs.cast610, %sub.ptr.rhs.cast611
  %sub613 = sub nsw i64 %sub.ptr.sub612, 3
  %372 = load i8*, i8** %b, align 8
  call void (i32, i8*, i64, i8*, ...) bitcast (void (i32, i8*, i32, i8*)* @insert_op1 to void (i32, i8*, i64, i8*, ...)*)(i32 18, i8* %369, i64 %sub613, i8* %372)
  %373 = load i8*, i8** %b, align 8
  %add.ptr614 = getelementptr inbounds i8, i8* %373, i64 3
  store i8* %add.ptr614, i8** %b, align 8
  br label %if.end615

if.end615:                                        ; preds = %while.end608, %while.end521
  br label %sw.epilog3520

sw.bb616:                                         ; preds = %do.end
  %374 = load i8*, i8** %b, align 8
  store i8* %374, i8** %laststart, align 8
  br label %do.body617

do.body617:                                       ; preds = %sw.bb616
  br label %while.cond618

while.cond618:                                    ; preds = %do.end692, %do.body617
  %375 = load i8*, i8** %b, align 8
  %376 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer619 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %376, i32 0, i32 0
  %377 = load i8*, i8** %buffer619, align 8
  %sub.ptr.lhs.cast620 = ptrtoint i8* %375 to i64
  %sub.ptr.rhs.cast621 = ptrtoint i8* %377 to i64
  %sub.ptr.sub622 = sub i64 %sub.ptr.lhs.cast620, %sub.ptr.rhs.cast621
  %add623 = add nsw i64 %sub.ptr.sub622, 1
  %378 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated624 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %378, i32 0, i32 1
  %379 = load i64, i64* %allocated624, align 8
  %cmp625 = icmp ugt i64 %add623, %379
  br i1 %cmp625, label %while.body627, label %while.end693

while.body627:                                    ; preds = %while.cond618
  br label %do.body628

do.body628:                                       ; preds = %while.body627
  %380 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer630 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %380, i32 0, i32 0
  %381 = load i8*, i8** %buffer630, align 8
  store i8* %381, i8** %old_buffer629, align 8
  %382 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated631 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %382, i32 0, i32 1
  %383 = load i64, i64* %allocated631, align 8
  %cmp632 = icmp eq i64 %383, 65536
  br i1 %cmp632, label %if.then634, label %if.end635

if.then634:                                       ; preds = %do.body628
  store i32 15, i32* %retval, align 4
  br label %return

if.end635:                                        ; preds = %do.body628
  %384 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated636 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %384, i32 0, i32 1
  %385 = load i64, i64* %allocated636, align 8
  %shl637 = shl i64 %385, 1
  store i64 %shl637, i64* %allocated636, align 8
  %386 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated638 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %386, i32 0, i32 1
  %387 = load i64, i64* %allocated638, align 8
  %cmp639 = icmp ugt i64 %387, 65536
  br i1 %cmp639, label %if.then641, label %if.end643

if.then641:                                       ; preds = %if.end635
  %388 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated642 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %388, i32 0, i32 1
  store i64 65536, i64* %allocated642, align 8
  br label %if.end643

if.end643:                                        ; preds = %if.then641, %if.end635
  %389 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer644 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %389, i32 0, i32 0
  %390 = load i8*, i8** %buffer644, align 8
  %391 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated645 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %391, i32 0, i32 1
  %392 = load i64, i64* %allocated645, align 8
  %call646 = call align 16 i8* @realloc(i8* %390, i64 %392) #9
  %393 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer647 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %393, i32 0, i32 0
  store i8* %call646, i8** %buffer647, align 8
  %394 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer648 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %394, i32 0, i32 0
  %395 = load i8*, i8** %buffer648, align 8
  %cmp649 = icmp eq i8* %395, null
  br i1 %cmp649, label %if.then651, label %if.end652

if.then651:                                       ; preds = %if.end643
  store i32 12, i32* %retval, align 4
  br label %return

if.end652:                                        ; preds = %if.end643
  %396 = load i8*, i8** %old_buffer629, align 8
  %397 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer653 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %397, i32 0, i32 0
  %398 = load i8*, i8** %buffer653, align 8
  %cmp654 = icmp ne i8* %396, %398
  br i1 %cmp654, label %if.then656, label %if.end691

if.then656:                                       ; preds = %if.end652
  %399 = load i8*, i8** %b, align 8
  %400 = load i8*, i8** %old_buffer629, align 8
  %sub.ptr.lhs.cast657 = ptrtoint i8* %399 to i64
  %sub.ptr.rhs.cast658 = ptrtoint i8* %400 to i64
  %sub.ptr.sub659 = sub i64 %sub.ptr.lhs.cast657, %sub.ptr.rhs.cast658
  %401 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer660 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %401, i32 0, i32 0
  %402 = load i8*, i8** %buffer660, align 8
  %add.ptr661 = getelementptr inbounds i8, i8* %402, i64 %sub.ptr.sub659
  store i8* %add.ptr661, i8** %b, align 8
  %403 = load i8*, i8** %begalt, align 8
  %404 = load i8*, i8** %old_buffer629, align 8
  %sub.ptr.lhs.cast662 = ptrtoint i8* %403 to i64
  %sub.ptr.rhs.cast663 = ptrtoint i8* %404 to i64
  %sub.ptr.sub664 = sub i64 %sub.ptr.lhs.cast662, %sub.ptr.rhs.cast663
  %405 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer665 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %405, i32 0, i32 0
  %406 = load i8*, i8** %buffer665, align 8
  %add.ptr666 = getelementptr inbounds i8, i8* %406, i64 %sub.ptr.sub664
  store i8* %add.ptr666, i8** %begalt, align 8
  %407 = load i8*, i8** %fixup_alt_jump, align 8
  %tobool667 = icmp ne i8* %407, null
  br i1 %tobool667, label %if.then668, label %if.end674

if.then668:                                       ; preds = %if.then656
  %408 = load i8*, i8** %fixup_alt_jump, align 8
  %409 = load i8*, i8** %old_buffer629, align 8
  %sub.ptr.lhs.cast669 = ptrtoint i8* %408 to i64
  %sub.ptr.rhs.cast670 = ptrtoint i8* %409 to i64
  %sub.ptr.sub671 = sub i64 %sub.ptr.lhs.cast669, %sub.ptr.rhs.cast670
  %410 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer672 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %410, i32 0, i32 0
  %411 = load i8*, i8** %buffer672, align 8
  %add.ptr673 = getelementptr inbounds i8, i8* %411, i64 %sub.ptr.sub671
  store i8* %add.ptr673, i8** %fixup_alt_jump, align 8
  br label %if.end674

if.end674:                                        ; preds = %if.then668, %if.then656
  %412 = load i8*, i8** %laststart, align 8
  %tobool675 = icmp ne i8* %412, null
  br i1 %tobool675, label %if.then676, label %if.end682

if.then676:                                       ; preds = %if.end674
  %413 = load i8*, i8** %laststart, align 8
  %414 = load i8*, i8** %old_buffer629, align 8
  %sub.ptr.lhs.cast677 = ptrtoint i8* %413 to i64
  %sub.ptr.rhs.cast678 = ptrtoint i8* %414 to i64
  %sub.ptr.sub679 = sub i64 %sub.ptr.lhs.cast677, %sub.ptr.rhs.cast678
  %415 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer680 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %415, i32 0, i32 0
  %416 = load i8*, i8** %buffer680, align 8
  %add.ptr681 = getelementptr inbounds i8, i8* %416, i64 %sub.ptr.sub679
  store i8* %add.ptr681, i8** %laststart, align 8
  br label %if.end682

if.end682:                                        ; preds = %if.then676, %if.end674
  %417 = load i8*, i8** %pending_exact, align 8
  %tobool683 = icmp ne i8* %417, null
  br i1 %tobool683, label %if.then684, label %if.end690

if.then684:                                       ; preds = %if.end682
  %418 = load i8*, i8** %pending_exact, align 8
  %419 = load i8*, i8** %old_buffer629, align 8
  %sub.ptr.lhs.cast685 = ptrtoint i8* %418 to i64
  %sub.ptr.rhs.cast686 = ptrtoint i8* %419 to i64
  %sub.ptr.sub687 = sub i64 %sub.ptr.lhs.cast685, %sub.ptr.rhs.cast686
  %420 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer688 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %420, i32 0, i32 0
  %421 = load i8*, i8** %buffer688, align 8
  %add.ptr689 = getelementptr inbounds i8, i8* %421, i64 %sub.ptr.sub687
  store i8* %add.ptr689, i8** %pending_exact, align 8
  br label %if.end690

if.end690:                                        ; preds = %if.then684, %if.end682
  br label %if.end691

if.end691:                                        ; preds = %if.end690, %if.end652
  br label %do.end692

do.end692:                                        ; preds = %if.end691
  br label %while.cond618, !llvm.loop !63

while.end693:                                     ; preds = %while.cond618
  %422 = load i8*, i8** %b, align 8
  %incdec.ptr694 = getelementptr inbounds i8, i8* %422, i32 1
  store i8* %incdec.ptr694, i8** %b, align 8
  store i8 2, i8* %422, align 1
  br label %do.end695

do.end695:                                        ; preds = %while.end693
  br label %sw.epilog3520

sw.bb696:                                         ; preds = %do.end
  store i8 0, i8* %had_char_class, align 1
  %423 = load i8*, i8** %p, align 8
  %424 = load i8*, i8** %pend, align 8
  %cmp697 = icmp eq i8* %423, %424
  br i1 %cmp697, label %if.then699, label %if.end700

if.then699:                                       ; preds = %sw.bb696
  store i32 7, i32* %retval, align 4
  br label %return

if.end700:                                        ; preds = %sw.bb696
  br label %while.cond701

while.cond701:                                    ; preds = %do.end775, %if.end700
  %425 = load i8*, i8** %b, align 8
  %426 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer702 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %426, i32 0, i32 0
  %427 = load i8*, i8** %buffer702, align 8
  %sub.ptr.lhs.cast703 = ptrtoint i8* %425 to i64
  %sub.ptr.rhs.cast704 = ptrtoint i8* %427 to i64
  %sub.ptr.sub705 = sub i64 %sub.ptr.lhs.cast703, %sub.ptr.rhs.cast704
  %add706 = add nsw i64 %sub.ptr.sub705, 34
  %428 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated707 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %428, i32 0, i32 1
  %429 = load i64, i64* %allocated707, align 8
  %cmp708 = icmp ugt i64 %add706, %429
  br i1 %cmp708, label %while.body710, label %while.end776

while.body710:                                    ; preds = %while.cond701
  br label %do.body711

do.body711:                                       ; preds = %while.body710
  %430 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer713 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %430, i32 0, i32 0
  %431 = load i8*, i8** %buffer713, align 8
  store i8* %431, i8** %old_buffer712, align 8
  %432 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated714 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %432, i32 0, i32 1
  %433 = load i64, i64* %allocated714, align 8
  %cmp715 = icmp eq i64 %433, 65536
  br i1 %cmp715, label %if.then717, label %if.end718

if.then717:                                       ; preds = %do.body711
  store i32 15, i32* %retval, align 4
  br label %return

if.end718:                                        ; preds = %do.body711
  %434 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated719 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %434, i32 0, i32 1
  %435 = load i64, i64* %allocated719, align 8
  %shl720 = shl i64 %435, 1
  store i64 %shl720, i64* %allocated719, align 8
  %436 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated721 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %436, i32 0, i32 1
  %437 = load i64, i64* %allocated721, align 8
  %cmp722 = icmp ugt i64 %437, 65536
  br i1 %cmp722, label %if.then724, label %if.end726

if.then724:                                       ; preds = %if.end718
  %438 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated725 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %438, i32 0, i32 1
  store i64 65536, i64* %allocated725, align 8
  br label %if.end726

if.end726:                                        ; preds = %if.then724, %if.end718
  %439 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer727 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %439, i32 0, i32 0
  %440 = load i8*, i8** %buffer727, align 8
  %441 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated728 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %441, i32 0, i32 1
  %442 = load i64, i64* %allocated728, align 8
  %call729 = call align 16 i8* @realloc(i8* %440, i64 %442) #9
  %443 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer730 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %443, i32 0, i32 0
  store i8* %call729, i8** %buffer730, align 8
  %444 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer731 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %444, i32 0, i32 0
  %445 = load i8*, i8** %buffer731, align 8
  %cmp732 = icmp eq i8* %445, null
  br i1 %cmp732, label %if.then734, label %if.end735

if.then734:                                       ; preds = %if.end726
  store i32 12, i32* %retval, align 4
  br label %return

if.end735:                                        ; preds = %if.end726
  %446 = load i8*, i8** %old_buffer712, align 8
  %447 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer736 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %447, i32 0, i32 0
  %448 = load i8*, i8** %buffer736, align 8
  %cmp737 = icmp ne i8* %446, %448
  br i1 %cmp737, label %if.then739, label %if.end774

if.then739:                                       ; preds = %if.end735
  %449 = load i8*, i8** %b, align 8
  %450 = load i8*, i8** %old_buffer712, align 8
  %sub.ptr.lhs.cast740 = ptrtoint i8* %449 to i64
  %sub.ptr.rhs.cast741 = ptrtoint i8* %450 to i64
  %sub.ptr.sub742 = sub i64 %sub.ptr.lhs.cast740, %sub.ptr.rhs.cast741
  %451 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer743 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %451, i32 0, i32 0
  %452 = load i8*, i8** %buffer743, align 8
  %add.ptr744 = getelementptr inbounds i8, i8* %452, i64 %sub.ptr.sub742
  store i8* %add.ptr744, i8** %b, align 8
  %453 = load i8*, i8** %begalt, align 8
  %454 = load i8*, i8** %old_buffer712, align 8
  %sub.ptr.lhs.cast745 = ptrtoint i8* %453 to i64
  %sub.ptr.rhs.cast746 = ptrtoint i8* %454 to i64
  %sub.ptr.sub747 = sub i64 %sub.ptr.lhs.cast745, %sub.ptr.rhs.cast746
  %455 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer748 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %455, i32 0, i32 0
  %456 = load i8*, i8** %buffer748, align 8
  %add.ptr749 = getelementptr inbounds i8, i8* %456, i64 %sub.ptr.sub747
  store i8* %add.ptr749, i8** %begalt, align 8
  %457 = load i8*, i8** %fixup_alt_jump, align 8
  %tobool750 = icmp ne i8* %457, null
  br i1 %tobool750, label %if.then751, label %if.end757

if.then751:                                       ; preds = %if.then739
  %458 = load i8*, i8** %fixup_alt_jump, align 8
  %459 = load i8*, i8** %old_buffer712, align 8
  %sub.ptr.lhs.cast752 = ptrtoint i8* %458 to i64
  %sub.ptr.rhs.cast753 = ptrtoint i8* %459 to i64
  %sub.ptr.sub754 = sub i64 %sub.ptr.lhs.cast752, %sub.ptr.rhs.cast753
  %460 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer755 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %460, i32 0, i32 0
  %461 = load i8*, i8** %buffer755, align 8
  %add.ptr756 = getelementptr inbounds i8, i8* %461, i64 %sub.ptr.sub754
  store i8* %add.ptr756, i8** %fixup_alt_jump, align 8
  br label %if.end757

if.end757:                                        ; preds = %if.then751, %if.then739
  %462 = load i8*, i8** %laststart, align 8
  %tobool758 = icmp ne i8* %462, null
  br i1 %tobool758, label %if.then759, label %if.end765

if.then759:                                       ; preds = %if.end757
  %463 = load i8*, i8** %laststart, align 8
  %464 = load i8*, i8** %old_buffer712, align 8
  %sub.ptr.lhs.cast760 = ptrtoint i8* %463 to i64
  %sub.ptr.rhs.cast761 = ptrtoint i8* %464 to i64
  %sub.ptr.sub762 = sub i64 %sub.ptr.lhs.cast760, %sub.ptr.rhs.cast761
  %465 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer763 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %465, i32 0, i32 0
  %466 = load i8*, i8** %buffer763, align 8
  %add.ptr764 = getelementptr inbounds i8, i8* %466, i64 %sub.ptr.sub762
  store i8* %add.ptr764, i8** %laststart, align 8
  br label %if.end765

if.end765:                                        ; preds = %if.then759, %if.end757
  %467 = load i8*, i8** %pending_exact, align 8
  %tobool766 = icmp ne i8* %467, null
  br i1 %tobool766, label %if.then767, label %if.end773

if.then767:                                       ; preds = %if.end765
  %468 = load i8*, i8** %pending_exact, align 8
  %469 = load i8*, i8** %old_buffer712, align 8
  %sub.ptr.lhs.cast768 = ptrtoint i8* %468 to i64
  %sub.ptr.rhs.cast769 = ptrtoint i8* %469 to i64
  %sub.ptr.sub770 = sub i64 %sub.ptr.lhs.cast768, %sub.ptr.rhs.cast769
  %470 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer771 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %470, i32 0, i32 0
  %471 = load i8*, i8** %buffer771, align 8
  %add.ptr772 = getelementptr inbounds i8, i8* %471, i64 %sub.ptr.sub770
  store i8* %add.ptr772, i8** %pending_exact, align 8
  br label %if.end773

if.end773:                                        ; preds = %if.then767, %if.end765
  br label %if.end774

if.end774:                                        ; preds = %if.end773, %if.end735
  br label %do.end775

do.end775:                                        ; preds = %if.end774
  br label %while.cond701, !llvm.loop !64

while.end776:                                     ; preds = %while.cond701
  %472 = load i8*, i8** %b, align 8
  store i8* %472, i8** %laststart, align 8
  br label %do.body777

do.body777:                                       ; preds = %while.end776
  br label %while.cond778

while.cond778:                                    ; preds = %do.end852, %do.body777
  %473 = load i8*, i8** %b, align 8
  %474 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer779 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %474, i32 0, i32 0
  %475 = load i8*, i8** %buffer779, align 8
  %sub.ptr.lhs.cast780 = ptrtoint i8* %473 to i64
  %sub.ptr.rhs.cast781 = ptrtoint i8* %475 to i64
  %sub.ptr.sub782 = sub i64 %sub.ptr.lhs.cast780, %sub.ptr.rhs.cast781
  %add783 = add nsw i64 %sub.ptr.sub782, 1
  %476 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated784 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %476, i32 0, i32 1
  %477 = load i64, i64* %allocated784, align 8
  %cmp785 = icmp ugt i64 %add783, %477
  br i1 %cmp785, label %while.body787, label %while.end853

while.body787:                                    ; preds = %while.cond778
  br label %do.body788

do.body788:                                       ; preds = %while.body787
  %478 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer790 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %478, i32 0, i32 0
  %479 = load i8*, i8** %buffer790, align 8
  store i8* %479, i8** %old_buffer789, align 8
  %480 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated791 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %480, i32 0, i32 1
  %481 = load i64, i64* %allocated791, align 8
  %cmp792 = icmp eq i64 %481, 65536
  br i1 %cmp792, label %if.then794, label %if.end795

if.then794:                                       ; preds = %do.body788
  store i32 15, i32* %retval, align 4
  br label %return

if.end795:                                        ; preds = %do.body788
  %482 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated796 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %482, i32 0, i32 1
  %483 = load i64, i64* %allocated796, align 8
  %shl797 = shl i64 %483, 1
  store i64 %shl797, i64* %allocated796, align 8
  %484 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated798 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %484, i32 0, i32 1
  %485 = load i64, i64* %allocated798, align 8
  %cmp799 = icmp ugt i64 %485, 65536
  br i1 %cmp799, label %if.then801, label %if.end803

if.then801:                                       ; preds = %if.end795
  %486 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated802 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %486, i32 0, i32 1
  store i64 65536, i64* %allocated802, align 8
  br label %if.end803

if.end803:                                        ; preds = %if.then801, %if.end795
  %487 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer804 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %487, i32 0, i32 0
  %488 = load i8*, i8** %buffer804, align 8
  %489 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated805 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %489, i32 0, i32 1
  %490 = load i64, i64* %allocated805, align 8
  %call806 = call align 16 i8* @realloc(i8* %488, i64 %490) #9
  %491 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer807 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %491, i32 0, i32 0
  store i8* %call806, i8** %buffer807, align 8
  %492 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer808 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %492, i32 0, i32 0
  %493 = load i8*, i8** %buffer808, align 8
  %cmp809 = icmp eq i8* %493, null
  br i1 %cmp809, label %if.then811, label %if.end812

if.then811:                                       ; preds = %if.end803
  store i32 12, i32* %retval, align 4
  br label %return

if.end812:                                        ; preds = %if.end803
  %494 = load i8*, i8** %old_buffer789, align 8
  %495 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer813 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %495, i32 0, i32 0
  %496 = load i8*, i8** %buffer813, align 8
  %cmp814 = icmp ne i8* %494, %496
  br i1 %cmp814, label %if.then816, label %if.end851

if.then816:                                       ; preds = %if.end812
  %497 = load i8*, i8** %b, align 8
  %498 = load i8*, i8** %old_buffer789, align 8
  %sub.ptr.lhs.cast817 = ptrtoint i8* %497 to i64
  %sub.ptr.rhs.cast818 = ptrtoint i8* %498 to i64
  %sub.ptr.sub819 = sub i64 %sub.ptr.lhs.cast817, %sub.ptr.rhs.cast818
  %499 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer820 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %499, i32 0, i32 0
  %500 = load i8*, i8** %buffer820, align 8
  %add.ptr821 = getelementptr inbounds i8, i8* %500, i64 %sub.ptr.sub819
  store i8* %add.ptr821, i8** %b, align 8
  %501 = load i8*, i8** %begalt, align 8
  %502 = load i8*, i8** %old_buffer789, align 8
  %sub.ptr.lhs.cast822 = ptrtoint i8* %501 to i64
  %sub.ptr.rhs.cast823 = ptrtoint i8* %502 to i64
  %sub.ptr.sub824 = sub i64 %sub.ptr.lhs.cast822, %sub.ptr.rhs.cast823
  %503 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer825 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %503, i32 0, i32 0
  %504 = load i8*, i8** %buffer825, align 8
  %add.ptr826 = getelementptr inbounds i8, i8* %504, i64 %sub.ptr.sub824
  store i8* %add.ptr826, i8** %begalt, align 8
  %505 = load i8*, i8** %fixup_alt_jump, align 8
  %tobool827 = icmp ne i8* %505, null
  br i1 %tobool827, label %if.then828, label %if.end834

if.then828:                                       ; preds = %if.then816
  %506 = load i8*, i8** %fixup_alt_jump, align 8
  %507 = load i8*, i8** %old_buffer789, align 8
  %sub.ptr.lhs.cast829 = ptrtoint i8* %506 to i64
  %sub.ptr.rhs.cast830 = ptrtoint i8* %507 to i64
  %sub.ptr.sub831 = sub i64 %sub.ptr.lhs.cast829, %sub.ptr.rhs.cast830
  %508 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer832 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %508, i32 0, i32 0
  %509 = load i8*, i8** %buffer832, align 8
  %add.ptr833 = getelementptr inbounds i8, i8* %509, i64 %sub.ptr.sub831
  store i8* %add.ptr833, i8** %fixup_alt_jump, align 8
  br label %if.end834

if.end834:                                        ; preds = %if.then828, %if.then816
  %510 = load i8*, i8** %laststart, align 8
  %tobool835 = icmp ne i8* %510, null
  br i1 %tobool835, label %if.then836, label %if.end842

if.then836:                                       ; preds = %if.end834
  %511 = load i8*, i8** %laststart, align 8
  %512 = load i8*, i8** %old_buffer789, align 8
  %sub.ptr.lhs.cast837 = ptrtoint i8* %511 to i64
  %sub.ptr.rhs.cast838 = ptrtoint i8* %512 to i64
  %sub.ptr.sub839 = sub i64 %sub.ptr.lhs.cast837, %sub.ptr.rhs.cast838
  %513 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer840 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %513, i32 0, i32 0
  %514 = load i8*, i8** %buffer840, align 8
  %add.ptr841 = getelementptr inbounds i8, i8* %514, i64 %sub.ptr.sub839
  store i8* %add.ptr841, i8** %laststart, align 8
  br label %if.end842

if.end842:                                        ; preds = %if.then836, %if.end834
  %515 = load i8*, i8** %pending_exact, align 8
  %tobool843 = icmp ne i8* %515, null
  br i1 %tobool843, label %if.then844, label %if.end850

if.then844:                                       ; preds = %if.end842
  %516 = load i8*, i8** %pending_exact, align 8
  %517 = load i8*, i8** %old_buffer789, align 8
  %sub.ptr.lhs.cast845 = ptrtoint i8* %516 to i64
  %sub.ptr.rhs.cast846 = ptrtoint i8* %517 to i64
  %sub.ptr.sub847 = sub i64 %sub.ptr.lhs.cast845, %sub.ptr.rhs.cast846
  %518 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer848 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %518, i32 0, i32 0
  %519 = load i8*, i8** %buffer848, align 8
  %add.ptr849 = getelementptr inbounds i8, i8* %519, i64 %sub.ptr.sub847
  store i8* %add.ptr849, i8** %pending_exact, align 8
  br label %if.end850

if.end850:                                        ; preds = %if.then844, %if.end842
  br label %if.end851

if.end851:                                        ; preds = %if.end850, %if.end812
  br label %do.end852

do.end852:                                        ; preds = %if.end851
  br label %while.cond778, !llvm.loop !65

while.end853:                                     ; preds = %while.cond778
  %520 = load i8*, i8** %p, align 8
  %521 = load i8, i8* %520, align 1
  %conv854 = sext i8 %521 to i32
  %cmp855 = icmp eq i32 %conv854, 94
  %522 = zext i1 %cmp855 to i64
  %cond857 = select i1 %cmp855, i32 4, i32 3
  %conv858 = trunc i32 %cond857 to i8
  %523 = load i8*, i8** %b, align 8
  %incdec.ptr859 = getelementptr inbounds i8, i8* %523, i32 1
  store i8* %incdec.ptr859, i8** %b, align 8
  store i8 %conv858, i8* %523, align 1
  br label %do.end860

do.end860:                                        ; preds = %while.end853
  %524 = load i8*, i8** %p, align 8
  %525 = load i8, i8* %524, align 1
  %conv861 = sext i8 %525 to i32
  %cmp862 = icmp eq i32 %conv861, 94
  br i1 %cmp862, label %if.then864, label %if.end866

if.then864:                                       ; preds = %do.end860
  %526 = load i8*, i8** %p, align 8
  %incdec.ptr865 = getelementptr inbounds i8, i8* %526, i32 1
  store i8* %incdec.ptr865, i8** %p, align 8
  br label %if.end866

if.end866:                                        ; preds = %if.then864, %do.end860
  %527 = load i8*, i8** %p, align 8
  store i8* %527, i8** %p1, align 8
  br label %do.body867

do.body867:                                       ; preds = %if.end866
  br label %while.cond868

while.cond868:                                    ; preds = %do.end942, %do.body867
  %528 = load i8*, i8** %b, align 8
  %529 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer869 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %529, i32 0, i32 0
  %530 = load i8*, i8** %buffer869, align 8
  %sub.ptr.lhs.cast870 = ptrtoint i8* %528 to i64
  %sub.ptr.rhs.cast871 = ptrtoint i8* %530 to i64
  %sub.ptr.sub872 = sub i64 %sub.ptr.lhs.cast870, %sub.ptr.rhs.cast871
  %add873 = add nsw i64 %sub.ptr.sub872, 1
  %531 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated874 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %531, i32 0, i32 1
  %532 = load i64, i64* %allocated874, align 8
  %cmp875 = icmp ugt i64 %add873, %532
  br i1 %cmp875, label %while.body877, label %while.end943

while.body877:                                    ; preds = %while.cond868
  br label %do.body878

do.body878:                                       ; preds = %while.body877
  %533 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer880 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %533, i32 0, i32 0
  %534 = load i8*, i8** %buffer880, align 8
  store i8* %534, i8** %old_buffer879, align 8
  %535 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated881 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %535, i32 0, i32 1
  %536 = load i64, i64* %allocated881, align 8
  %cmp882 = icmp eq i64 %536, 65536
  br i1 %cmp882, label %if.then884, label %if.end885

if.then884:                                       ; preds = %do.body878
  store i32 15, i32* %retval, align 4
  br label %return

if.end885:                                        ; preds = %do.body878
  %537 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated886 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %537, i32 0, i32 1
  %538 = load i64, i64* %allocated886, align 8
  %shl887 = shl i64 %538, 1
  store i64 %shl887, i64* %allocated886, align 8
  %539 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated888 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %539, i32 0, i32 1
  %540 = load i64, i64* %allocated888, align 8
  %cmp889 = icmp ugt i64 %540, 65536
  br i1 %cmp889, label %if.then891, label %if.end893

if.then891:                                       ; preds = %if.end885
  %541 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated892 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %541, i32 0, i32 1
  store i64 65536, i64* %allocated892, align 8
  br label %if.end893

if.end893:                                        ; preds = %if.then891, %if.end885
  %542 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer894 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %542, i32 0, i32 0
  %543 = load i8*, i8** %buffer894, align 8
  %544 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated895 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %544, i32 0, i32 1
  %545 = load i64, i64* %allocated895, align 8
  %call896 = call align 16 i8* @realloc(i8* %543, i64 %545) #9
  %546 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer897 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %546, i32 0, i32 0
  store i8* %call896, i8** %buffer897, align 8
  %547 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer898 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %547, i32 0, i32 0
  %548 = load i8*, i8** %buffer898, align 8
  %cmp899 = icmp eq i8* %548, null
  br i1 %cmp899, label %if.then901, label %if.end902

if.then901:                                       ; preds = %if.end893
  store i32 12, i32* %retval, align 4
  br label %return

if.end902:                                        ; preds = %if.end893
  %549 = load i8*, i8** %old_buffer879, align 8
  %550 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer903 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %550, i32 0, i32 0
  %551 = load i8*, i8** %buffer903, align 8
  %cmp904 = icmp ne i8* %549, %551
  br i1 %cmp904, label %if.then906, label %if.end941

if.then906:                                       ; preds = %if.end902
  %552 = load i8*, i8** %b, align 8
  %553 = load i8*, i8** %old_buffer879, align 8
  %sub.ptr.lhs.cast907 = ptrtoint i8* %552 to i64
  %sub.ptr.rhs.cast908 = ptrtoint i8* %553 to i64
  %sub.ptr.sub909 = sub i64 %sub.ptr.lhs.cast907, %sub.ptr.rhs.cast908
  %554 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer910 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %554, i32 0, i32 0
  %555 = load i8*, i8** %buffer910, align 8
  %add.ptr911 = getelementptr inbounds i8, i8* %555, i64 %sub.ptr.sub909
  store i8* %add.ptr911, i8** %b, align 8
  %556 = load i8*, i8** %begalt, align 8
  %557 = load i8*, i8** %old_buffer879, align 8
  %sub.ptr.lhs.cast912 = ptrtoint i8* %556 to i64
  %sub.ptr.rhs.cast913 = ptrtoint i8* %557 to i64
  %sub.ptr.sub914 = sub i64 %sub.ptr.lhs.cast912, %sub.ptr.rhs.cast913
  %558 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer915 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %558, i32 0, i32 0
  %559 = load i8*, i8** %buffer915, align 8
  %add.ptr916 = getelementptr inbounds i8, i8* %559, i64 %sub.ptr.sub914
  store i8* %add.ptr916, i8** %begalt, align 8
  %560 = load i8*, i8** %fixup_alt_jump, align 8
  %tobool917 = icmp ne i8* %560, null
  br i1 %tobool917, label %if.then918, label %if.end924

if.then918:                                       ; preds = %if.then906
  %561 = load i8*, i8** %fixup_alt_jump, align 8
  %562 = load i8*, i8** %old_buffer879, align 8
  %sub.ptr.lhs.cast919 = ptrtoint i8* %561 to i64
  %sub.ptr.rhs.cast920 = ptrtoint i8* %562 to i64
  %sub.ptr.sub921 = sub i64 %sub.ptr.lhs.cast919, %sub.ptr.rhs.cast920
  %563 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer922 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %563, i32 0, i32 0
  %564 = load i8*, i8** %buffer922, align 8
  %add.ptr923 = getelementptr inbounds i8, i8* %564, i64 %sub.ptr.sub921
  store i8* %add.ptr923, i8** %fixup_alt_jump, align 8
  br label %if.end924

if.end924:                                        ; preds = %if.then918, %if.then906
  %565 = load i8*, i8** %laststart, align 8
  %tobool925 = icmp ne i8* %565, null
  br i1 %tobool925, label %if.then926, label %if.end932

if.then926:                                       ; preds = %if.end924
  %566 = load i8*, i8** %laststart, align 8
  %567 = load i8*, i8** %old_buffer879, align 8
  %sub.ptr.lhs.cast927 = ptrtoint i8* %566 to i64
  %sub.ptr.rhs.cast928 = ptrtoint i8* %567 to i64
  %sub.ptr.sub929 = sub i64 %sub.ptr.lhs.cast927, %sub.ptr.rhs.cast928
  %568 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer930 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %568, i32 0, i32 0
  %569 = load i8*, i8** %buffer930, align 8
  %add.ptr931 = getelementptr inbounds i8, i8* %569, i64 %sub.ptr.sub929
  store i8* %add.ptr931, i8** %laststart, align 8
  br label %if.end932

if.end932:                                        ; preds = %if.then926, %if.end924
  %570 = load i8*, i8** %pending_exact, align 8
  %tobool933 = icmp ne i8* %570, null
  br i1 %tobool933, label %if.then934, label %if.end940

if.then934:                                       ; preds = %if.end932
  %571 = load i8*, i8** %pending_exact, align 8
  %572 = load i8*, i8** %old_buffer879, align 8
  %sub.ptr.lhs.cast935 = ptrtoint i8* %571 to i64
  %sub.ptr.rhs.cast936 = ptrtoint i8* %572 to i64
  %sub.ptr.sub937 = sub i64 %sub.ptr.lhs.cast935, %sub.ptr.rhs.cast936
  %573 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer938 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %573, i32 0, i32 0
  %574 = load i8*, i8** %buffer938, align 8
  %add.ptr939 = getelementptr inbounds i8, i8* %574, i64 %sub.ptr.sub937
  store i8* %add.ptr939, i8** %pending_exact, align 8
  br label %if.end940

if.end940:                                        ; preds = %if.then934, %if.end932
  br label %if.end941

if.end941:                                        ; preds = %if.end940, %if.end902
  br label %do.end942

do.end942:                                        ; preds = %if.end941
  br label %while.cond868, !llvm.loop !66

while.end943:                                     ; preds = %while.cond868
  %575 = load i8*, i8** %b, align 8
  %incdec.ptr944 = getelementptr inbounds i8, i8* %575, i32 1
  store i8* %incdec.ptr944, i8** %b, align 8
  store i8 32, i8* %575, align 1
  br label %do.end945

do.end945:                                        ; preds = %while.end943
  %576 = load i8*, i8** %b, align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 %576, i8 0, i64 32, i1 false)
  %577 = load i8*, i8** %b, align 8
  %arrayidx946 = getelementptr inbounds i8, i8* %577, i64 -2
  %578 = load i8, i8* %arrayidx946, align 1
  %conv947 = zext i8 %578 to i32
  %cmp948 = icmp eq i32 %conv947, 4
  br i1 %cmp948, label %land.lhs.true950, label %if.end958

land.lhs.true950:                                 ; preds = %do.end945
  %579 = load i32, i32* %syntax.addr, align 4
  %and951 = and i32 %579, 256
  %tobool952 = icmp ne i32 %and951, 0
  br i1 %tobool952, label %if.then953, label %if.end958

if.then953:                                       ; preds = %land.lhs.true950
  %580 = load i8*, i8** %b, align 8
  %arrayidx954 = getelementptr inbounds i8, i8* %580, i64 1
  %581 = load i8, i8* %arrayidx954, align 1
  %conv955 = zext i8 %581 to i32
  %or956 = or i32 %conv955, 4
  %conv957 = trunc i32 %or956 to i8
  store i8 %conv957, i8* %arrayidx954, align 1
  br label %if.end958

if.end958:                                        ; preds = %if.then953, %land.lhs.true950, %do.end945
  br label %for.cond959

for.cond959:                                      ; preds = %if.end1467, %do.end998, %if.end958
  %582 = load i8*, i8** %p, align 8
  %583 = load i8*, i8** %pend, align 8
  %cmp960 = icmp eq i8* %582, %583
  br i1 %cmp960, label %if.then962, label %if.end963

if.then962:                                       ; preds = %for.cond959
  store i32 7, i32* %retval, align 4
  br label %return

if.end963:                                        ; preds = %for.cond959
  br label %do.body964

do.body964:                                       ; preds = %if.end963
  %584 = load i8*, i8** %p, align 8
  %585 = load i8*, i8** %pend, align 8
  %cmp965 = icmp eq i8* %584, %585
  br i1 %cmp965, label %if.then967, label %if.end968

if.then967:                                       ; preds = %do.body964
  store i32 14, i32* %retval, align 4
  br label %return

if.end968:                                        ; preds = %do.body964
  %586 = load i8*, i8** %p, align 8
  %incdec.ptr969 = getelementptr inbounds i8, i8* %586, i32 1
  store i8* %incdec.ptr969, i8** %p, align 8
  %587 = load i8, i8* %586, align 1
  store i8 %587, i8* %c, align 1
  %588 = load i8*, i8** %translate, align 8
  %tobool970 = icmp ne i8* %588, null
  br i1 %tobool970, label %if.then971, label %if.end974

if.then971:                                       ; preds = %if.end968
  %589 = load i8*, i8** %translate, align 8
  %590 = load i8, i8* %c, align 1
  %idxprom972 = zext i8 %590 to i64
  %arrayidx973 = getelementptr inbounds i8, i8* %589, i64 %idxprom972
  %591 = load i8, i8* %arrayidx973, align 1
  store i8 %591, i8* %c, align 1
  br label %if.end974

if.end974:                                        ; preds = %if.then971, %if.end968
  br label %do.end975

do.end975:                                        ; preds = %if.end974
  %592 = load i32, i32* %syntax.addr, align 4
  %and976 = and i32 %592, 1
  %tobool977 = icmp ne i32 %and976, 0
  br i1 %tobool977, label %land.lhs.true978, label %if.end1007

land.lhs.true978:                                 ; preds = %do.end975
  %593 = load i8, i8* %c, align 1
  %conv979 = zext i8 %593 to i32
  %cmp980 = icmp eq i32 %conv979, 92
  br i1 %cmp980, label %if.then982, label %if.end1007

if.then982:                                       ; preds = %land.lhs.true978
  %594 = load i8*, i8** %p, align 8
  %595 = load i8*, i8** %pend, align 8
  %cmp983 = icmp eq i8* %594, %595
  br i1 %cmp983, label %if.then985, label %if.end986

if.then985:                                       ; preds = %if.then982
  store i32 5, i32* %retval, align 4
  br label %return

if.end986:                                        ; preds = %if.then982
  br label %do.body987

do.body987:                                       ; preds = %if.end986
  %596 = load i8*, i8** %p, align 8
  %597 = load i8*, i8** %pend, align 8
  %cmp988 = icmp eq i8* %596, %597
  br i1 %cmp988, label %if.then990, label %if.end991

if.then990:                                       ; preds = %do.body987
  store i32 14, i32* %retval, align 4
  br label %return

if.end991:                                        ; preds = %do.body987
  %598 = load i8*, i8** %p, align 8
  %incdec.ptr992 = getelementptr inbounds i8, i8* %598, i32 1
  store i8* %incdec.ptr992, i8** %p, align 8
  %599 = load i8, i8* %598, align 1
  store i8 %599, i8* %c1, align 1
  %600 = load i8*, i8** %translate, align 8
  %tobool993 = icmp ne i8* %600, null
  br i1 %tobool993, label %if.then994, label %if.end997

if.then994:                                       ; preds = %if.end991
  %601 = load i8*, i8** %translate, align 8
  %602 = load i8, i8* %c1, align 1
  %idxprom995 = zext i8 %602 to i64
  %arrayidx996 = getelementptr inbounds i8, i8* %601, i64 %idxprom995
  %603 = load i8, i8* %arrayidx996, align 1
  store i8 %603, i8* %c1, align 1
  br label %if.end997

if.end997:                                        ; preds = %if.then994, %if.end991
  br label %do.end998

do.end998:                                        ; preds = %if.end997
  %604 = load i8, i8* %c1, align 1
  %conv999 = zext i8 %604 to i32
  %rem = srem i32 %conv999, 8
  %shl1000 = shl i32 1, %rem
  %605 = load i8*, i8** %b, align 8
  %606 = load i8, i8* %c1, align 1
  %conv1001 = zext i8 %606 to i32
  %div = sdiv i32 %conv1001, 8
  %idxprom1002 = sext i32 %div to i64
  %arrayidx1003 = getelementptr inbounds i8, i8* %605, i64 %idxprom1002
  %607 = load i8, i8* %arrayidx1003, align 1
  %conv1004 = zext i8 %607 to i32
  %or1005 = or i32 %conv1004, %shl1000
  %conv1006 = trunc i32 %or1005 to i8
  store i8 %conv1006, i8* %arrayidx1003, align 1
  br label %for.cond959

if.end1007:                                       ; preds = %land.lhs.true978, %do.end975
  %608 = load i8, i8* %c, align 1
  %conv1008 = zext i8 %608 to i32
  %cmp1009 = icmp eq i32 %conv1008, 93
  br i1 %cmp1009, label %land.lhs.true1011, label %if.end1016

land.lhs.true1011:                                ; preds = %if.end1007
  %609 = load i8*, i8** %p, align 8
  %610 = load i8*, i8** %p1, align 8
  %add.ptr1012 = getelementptr inbounds i8, i8* %610, i64 1
  %cmp1013 = icmp ne i8* %609, %add.ptr1012
  br i1 %cmp1013, label %if.then1015, label %if.end1016

if.then1015:                                      ; preds = %land.lhs.true1011
  br label %for.end1468

if.end1016:                                       ; preds = %land.lhs.true1011, %if.end1007
  %611 = load i8, i8* %had_char_class, align 1
  %conv1017 = sext i8 %611 to i32
  %tobool1018 = icmp ne i32 %conv1017, 0
  br i1 %tobool1018, label %land.lhs.true1019, label %if.end1028

land.lhs.true1019:                                ; preds = %if.end1016
  %612 = load i8, i8* %c, align 1
  %conv1020 = zext i8 %612 to i32
  %cmp1021 = icmp eq i32 %conv1020, 45
  br i1 %cmp1021, label %land.lhs.true1023, label %if.end1028

land.lhs.true1023:                                ; preds = %land.lhs.true1019
  %613 = load i8*, i8** %p, align 8
  %614 = load i8, i8* %613, align 1
  %conv1024 = sext i8 %614 to i32
  %cmp1025 = icmp ne i32 %conv1024, 93
  br i1 %cmp1025, label %if.then1027, label %if.end1028

if.then1027:                                      ; preds = %land.lhs.true1023
  store i32 11, i32* %retval, align 4
  br label %return

if.end1028:                                       ; preds = %land.lhs.true1023, %land.lhs.true1019, %if.end1016
  %615 = load i8, i8* %c, align 1
  %conv1029 = zext i8 %615 to i32
  %cmp1030 = icmp eq i32 %conv1029, 45
  br i1 %cmp1030, label %land.lhs.true1032, label %if.else1065

land.lhs.true1032:                                ; preds = %if.end1028
  %616 = load i8*, i8** %p, align 8
  %add.ptr1033 = getelementptr inbounds i8, i8* %616, i64 -2
  %617 = load i8*, i8** %pattern.addr, align 8
  %cmp1034 = icmp uge i8* %add.ptr1033, %617
  br i1 %cmp1034, label %land.lhs.true1036, label %land.lhs.true1041

land.lhs.true1036:                                ; preds = %land.lhs.true1032
  %618 = load i8*, i8** %p, align 8
  %arrayidx1037 = getelementptr inbounds i8, i8* %618, i64 -2
  %619 = load i8, i8* %arrayidx1037, align 1
  %conv1038 = sext i8 %619 to i32
  %cmp1039 = icmp eq i32 %conv1038, 91
  br i1 %cmp1039, label %if.else1065, label %land.lhs.true1041

land.lhs.true1041:                                ; preds = %land.lhs.true1036, %land.lhs.true1032
  %620 = load i8*, i8** %p, align 8
  %add.ptr1042 = getelementptr inbounds i8, i8* %620, i64 -3
  %621 = load i8*, i8** %pattern.addr, align 8
  %cmp1043 = icmp uge i8* %add.ptr1042, %621
  br i1 %cmp1043, label %land.lhs.true1045, label %land.lhs.true1055

land.lhs.true1045:                                ; preds = %land.lhs.true1041
  %622 = load i8*, i8** %p, align 8
  %arrayidx1046 = getelementptr inbounds i8, i8* %622, i64 -3
  %623 = load i8, i8* %arrayidx1046, align 1
  %conv1047 = sext i8 %623 to i32
  %cmp1048 = icmp eq i32 %conv1047, 91
  br i1 %cmp1048, label %land.lhs.true1050, label %land.lhs.true1055

land.lhs.true1050:                                ; preds = %land.lhs.true1045
  %624 = load i8*, i8** %p, align 8
  %arrayidx1051 = getelementptr inbounds i8, i8* %624, i64 -2
  %625 = load i8, i8* %arrayidx1051, align 1
  %conv1052 = sext i8 %625 to i32
  %cmp1053 = icmp eq i32 %conv1052, 94
  br i1 %cmp1053, label %if.else1065, label %land.lhs.true1055

land.lhs.true1055:                                ; preds = %land.lhs.true1050, %land.lhs.true1045, %land.lhs.true1041
  %626 = load i8*, i8** %p, align 8
  %627 = load i8, i8* %626, align 1
  %conv1056 = sext i8 %627 to i32
  %cmp1057 = icmp ne i32 %conv1056, 93
  br i1 %cmp1057, label %if.then1059, label %if.else1065

if.then1059:                                      ; preds = %land.lhs.true1055
  %628 = load i8*, i8** %pend, align 8
  %629 = load i8*, i8** %translate, align 8
  %630 = load i32, i32* %syntax.addr, align 4
  %631 = load i8*, i8** %b, align 8
  %call1060 = call i32 @compile_range(i8** %p, i8* %628, i8* %629, i32 %630, i8* %631)
  store i32 %call1060, i32* %ret, align 4
  %632 = load i32, i32* %ret, align 4
  %cmp1061 = icmp ne i32 %632, 0
  br i1 %cmp1061, label %if.then1063, label %if.end1064

if.then1063:                                      ; preds = %if.then1059
  %633 = load i32, i32* %ret, align 4
  store i32 %633, i32* %retval, align 4
  br label %return

if.end1064:                                       ; preds = %if.then1059
  br label %if.end1467

if.else1065:                                      ; preds = %land.lhs.true1055, %land.lhs.true1050, %land.lhs.true1036, %if.end1028
  %634 = load i8*, i8** %p, align 8
  %arrayidx1066 = getelementptr inbounds i8, i8* %634, i64 0
  %635 = load i8, i8* %arrayidx1066, align 1
  %conv1067 = sext i8 %635 to i32
  %cmp1068 = icmp eq i32 %conv1067, 45
  br i1 %cmp1068, label %land.lhs.true1070, label %if.else1094

land.lhs.true1070:                                ; preds = %if.else1065
  %636 = load i8*, i8** %p, align 8
  %arrayidx1071 = getelementptr inbounds i8, i8* %636, i64 1
  %637 = load i8, i8* %arrayidx1071, align 1
  %conv1072 = sext i8 %637 to i32
  %cmp1073 = icmp ne i32 %conv1072, 93
  br i1 %cmp1073, label %if.then1075, label %if.else1094

if.then1075:                                      ; preds = %land.lhs.true1070
  br label %do.body1077

do.body1077:                                      ; preds = %if.then1075
  %638 = load i8*, i8** %p, align 8
  %639 = load i8*, i8** %pend, align 8
  %cmp1078 = icmp eq i8* %638, %639
  br i1 %cmp1078, label %if.then1080, label %if.end1081

if.then1080:                                      ; preds = %do.body1077
  store i32 14, i32* %retval, align 4
  br label %return

if.end1081:                                       ; preds = %do.body1077
  %640 = load i8*, i8** %p, align 8
  %incdec.ptr1082 = getelementptr inbounds i8, i8* %640, i32 1
  store i8* %incdec.ptr1082, i8** %p, align 8
  %641 = load i8, i8* %640, align 1
  store i8 %641, i8* %c1, align 1
  %642 = load i8*, i8** %translate, align 8
  %tobool1083 = icmp ne i8* %642, null
  br i1 %tobool1083, label %if.then1084, label %if.end1087

if.then1084:                                      ; preds = %if.end1081
  %643 = load i8*, i8** %translate, align 8
  %644 = load i8, i8* %c1, align 1
  %idxprom1085 = zext i8 %644 to i64
  %arrayidx1086 = getelementptr inbounds i8, i8* %643, i64 %idxprom1085
  %645 = load i8, i8* %arrayidx1086, align 1
  store i8 %645, i8* %c1, align 1
  br label %if.end1087

if.end1087:                                       ; preds = %if.then1084, %if.end1081
  br label %do.end1088

do.end1088:                                       ; preds = %if.end1087
  %646 = load i8*, i8** %pend, align 8
  %647 = load i8*, i8** %translate, align 8
  %648 = load i32, i32* %syntax.addr, align 4
  %649 = load i8*, i8** %b, align 8
  %call1089 = call i32 @compile_range(i8** %p, i8* %646, i8* %647, i32 %648, i8* %649)
  store i32 %call1089, i32* %ret1076, align 4
  %650 = load i32, i32* %ret1076, align 4
  %cmp1090 = icmp ne i32 %650, 0
  br i1 %cmp1090, label %if.then1092, label %if.end1093

if.then1092:                                      ; preds = %do.end1088
  %651 = load i32, i32* %ret1076, align 4
  store i32 %651, i32* %retval, align 4
  br label %return

if.end1093:                                       ; preds = %do.end1088
  br label %if.end1466

if.else1094:                                      ; preds = %land.lhs.true1070, %if.else1065
  %652 = load i32, i32* %syntax.addr, align 4
  %and1095 = and i32 %652, 4
  %tobool1096 = icmp ne i32 %and1095, 0
  br i1 %tobool1096, label %land.lhs.true1097, label %if.else1454

land.lhs.true1097:                                ; preds = %if.else1094
  %653 = load i8, i8* %c, align 1
  %conv1098 = zext i8 %653 to i32
  %cmp1099 = icmp eq i32 %conv1098, 91
  br i1 %cmp1099, label %land.lhs.true1101, label %if.else1454

land.lhs.true1101:                                ; preds = %land.lhs.true1097
  %654 = load i8*, i8** %p, align 8
  %655 = load i8, i8* %654, align 1
  %conv1102 = sext i8 %655 to i32
  %cmp1103 = icmp eq i32 %conv1102, 58
  br i1 %cmp1103, label %if.then1105, label %if.else1454

if.then1105:                                      ; preds = %land.lhs.true1101
  br label %do.body1106

do.body1106:                                      ; preds = %if.then1105
  %656 = load i8*, i8** %p, align 8
  %657 = load i8*, i8** %pend, align 8
  %cmp1107 = icmp eq i8* %656, %657
  br i1 %cmp1107, label %if.then1109, label %if.end1110

if.then1109:                                      ; preds = %do.body1106
  store i32 14, i32* %retval, align 4
  br label %return

if.end1110:                                       ; preds = %do.body1106
  %658 = load i8*, i8** %p, align 8
  %incdec.ptr1111 = getelementptr inbounds i8, i8* %658, i32 1
  store i8* %incdec.ptr1111, i8** %p, align 8
  %659 = load i8, i8* %658, align 1
  store i8 %659, i8* %c, align 1
  %660 = load i8*, i8** %translate, align 8
  %tobool1112 = icmp ne i8* %660, null
  br i1 %tobool1112, label %if.then1113, label %if.end1116

if.then1113:                                      ; preds = %if.end1110
  %661 = load i8*, i8** %translate, align 8
  %662 = load i8, i8* %c, align 1
  %idxprom1114 = zext i8 %662 to i64
  %arrayidx1115 = getelementptr inbounds i8, i8* %661, i64 %idxprom1114
  %663 = load i8, i8* %arrayidx1115, align 1
  store i8 %663, i8* %c, align 1
  br label %if.end1116

if.end1116:                                       ; preds = %if.then1113, %if.end1110
  br label %do.end1117

do.end1117:                                       ; preds = %if.end1116
  store i8 0, i8* %c1, align 1
  %664 = load i8*, i8** %p, align 8
  %665 = load i8*, i8** %pend, align 8
  %cmp1118 = icmp eq i8* %664, %665
  br i1 %cmp1118, label %if.then1120, label %if.end1121

if.then1120:                                      ; preds = %do.end1117
  store i32 7, i32* %retval, align 4
  br label %return

if.end1121:                                       ; preds = %do.end1117
  br label %for.cond1122

for.cond1122:                                     ; preds = %if.end1150, %if.end1121
  br label %do.body1123

do.body1123:                                      ; preds = %for.cond1122
  %666 = load i8*, i8** %p, align 8
  %667 = load i8*, i8** %pend, align 8
  %cmp1124 = icmp eq i8* %666, %667
  br i1 %cmp1124, label %if.then1126, label %if.end1127

if.then1126:                                      ; preds = %do.body1123
  store i32 14, i32* %retval, align 4
  br label %return

if.end1127:                                       ; preds = %do.body1123
  %668 = load i8*, i8** %p, align 8
  %incdec.ptr1128 = getelementptr inbounds i8, i8* %668, i32 1
  store i8* %incdec.ptr1128, i8** %p, align 8
  %669 = load i8, i8* %668, align 1
  store i8 %669, i8* %c, align 1
  %670 = load i8*, i8** %translate, align 8
  %tobool1129 = icmp ne i8* %670, null
  br i1 %tobool1129, label %if.then1130, label %if.end1133

if.then1130:                                      ; preds = %if.end1127
  %671 = load i8*, i8** %translate, align 8
  %672 = load i8, i8* %c, align 1
  %idxprom1131 = zext i8 %672 to i64
  %arrayidx1132 = getelementptr inbounds i8, i8* %671, i64 %idxprom1131
  %673 = load i8, i8* %arrayidx1132, align 1
  store i8 %673, i8* %c, align 1
  br label %if.end1133

if.end1133:                                       ; preds = %if.then1130, %if.end1127
  br label %do.end1134

do.end1134:                                       ; preds = %if.end1133
  %674 = load i8, i8* %c, align 1
  %conv1135 = zext i8 %674 to i32
  %cmp1136 = icmp eq i32 %conv1135, 58
  br i1 %cmp1136, label %if.then1149, label %lor.lhs.false1138

lor.lhs.false1138:                                ; preds = %do.end1134
  %675 = load i8, i8* %c, align 1
  %conv1139 = zext i8 %675 to i32
  %cmp1140 = icmp eq i32 %conv1139, 93
  br i1 %cmp1140, label %if.then1149, label %lor.lhs.false1142

lor.lhs.false1142:                                ; preds = %lor.lhs.false1138
  %676 = load i8*, i8** %p, align 8
  %677 = load i8*, i8** %pend, align 8
  %cmp1143 = icmp eq i8* %676, %677
  br i1 %cmp1143, label %if.then1149, label %lor.lhs.false1145

lor.lhs.false1145:                                ; preds = %lor.lhs.false1142
  %678 = load i8, i8* %c1, align 1
  %conv1146 = zext i8 %678 to i32
  %cmp1147 = icmp eq i32 %conv1146, 6
  br i1 %cmp1147, label %if.then1149, label %if.end1150

if.then1149:                                      ; preds = %lor.lhs.false1145, %lor.lhs.false1142, %lor.lhs.false1138, %do.end1134
  br label %for.end1153

if.end1150:                                       ; preds = %lor.lhs.false1145
  %679 = load i8, i8* %c, align 1
  %680 = load i8, i8* %c1, align 1
  %inc = add i8 %680, 1
  store i8 %inc, i8* %c1, align 1
  %idxprom1151 = zext i8 %680 to i64
  %arrayidx1152 = getelementptr inbounds [7 x i8], [7 x i8]* %str, i64 0, i64 %idxprom1151
  store i8 %679, i8* %arrayidx1152, align 1
  br label %for.cond1122

for.end1153:                                      ; preds = %if.then1149
  %681 = load i8, i8* %c1, align 1
  %idxprom1154 = zext i8 %681 to i64
  %arrayidx1155 = getelementptr inbounds [7 x i8], [7 x i8]* %str, i64 0, i64 %idxprom1154
  store i8 0, i8* %arrayidx1155, align 1
  %682 = load i8, i8* %c, align 1
  %conv1156 = zext i8 %682 to i32
  %cmp1157 = icmp eq i32 %conv1156, 58
  br i1 %cmp1157, label %land.lhs.true1159, label %if.else1438

land.lhs.true1159:                                ; preds = %for.end1153
  %683 = load i8*, i8** %p, align 8
  %684 = load i8, i8* %683, align 1
  %conv1160 = sext i8 %684 to i32
  %cmp1161 = icmp eq i32 %conv1160, 93
  br i1 %cmp1161, label %if.then1163, label %if.else1438

if.then1163:                                      ; preds = %land.lhs.true1159
  %arraydecay = getelementptr inbounds [7 x i8], [7 x i8]* %str, i64 0, i64 0
  %call1164 = call i32 @strcmp(i8* %arraydecay, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.34, i64 0, i64 0)) #11
  %cmp1165 = icmp eq i32 %call1164, 0
  %conv1166 = zext i1 %cmp1165 to i32
  %conv1167 = trunc i32 %conv1166 to i8
  store i8 %conv1167, i8* %is_alnum, align 1
  %arraydecay1168 = getelementptr inbounds [7 x i8], [7 x i8]* %str, i64 0, i64 0
  %call1169 = call i32 @strcmp(i8* %arraydecay1168, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.35, i64 0, i64 0)) #11
  %cmp1170 = icmp eq i32 %call1169, 0
  %conv1171 = zext i1 %cmp1170 to i32
  %conv1172 = trunc i32 %conv1171 to i8
  store i8 %conv1172, i8* %is_alpha, align 1
  %arraydecay1173 = getelementptr inbounds [7 x i8], [7 x i8]* %str, i64 0, i64 0
  %call1174 = call i32 @strcmp(i8* %arraydecay1173, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.36, i64 0, i64 0)) #11
  %cmp1175 = icmp eq i32 %call1174, 0
  %conv1176 = zext i1 %cmp1175 to i32
  %conv1177 = trunc i32 %conv1176 to i8
  store i8 %conv1177, i8* %is_blank, align 1
  %arraydecay1178 = getelementptr inbounds [7 x i8], [7 x i8]* %str, i64 0, i64 0
  %call1179 = call i32 @strcmp(i8* %arraydecay1178, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.37, i64 0, i64 0)) #11
  %cmp1180 = icmp eq i32 %call1179, 0
  %conv1181 = zext i1 %cmp1180 to i32
  %conv1182 = trunc i32 %conv1181 to i8
  store i8 %conv1182, i8* %is_cntrl, align 1
  %arraydecay1183 = getelementptr inbounds [7 x i8], [7 x i8]* %str, i64 0, i64 0
  %call1184 = call i32 @strcmp(i8* %arraydecay1183, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.38, i64 0, i64 0)) #11
  %cmp1185 = icmp eq i32 %call1184, 0
  %conv1186 = zext i1 %cmp1185 to i32
  %conv1187 = trunc i32 %conv1186 to i8
  store i8 %conv1187, i8* %is_digit, align 1
  %arraydecay1188 = getelementptr inbounds [7 x i8], [7 x i8]* %str, i64 0, i64 0
  %call1189 = call i32 @strcmp(i8* %arraydecay1188, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.39, i64 0, i64 0)) #11
  %cmp1190 = icmp eq i32 %call1189, 0
  %conv1191 = zext i1 %cmp1190 to i32
  %conv1192 = trunc i32 %conv1191 to i8
  store i8 %conv1192, i8* %is_graph, align 1
  %arraydecay1193 = getelementptr inbounds [7 x i8], [7 x i8]* %str, i64 0, i64 0
  %call1194 = call i32 @strcmp(i8* %arraydecay1193, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.40, i64 0, i64 0)) #11
  %cmp1195 = icmp eq i32 %call1194, 0
  %conv1196 = zext i1 %cmp1195 to i32
  %conv1197 = trunc i32 %conv1196 to i8
  store i8 %conv1197, i8* %is_lower, align 1
  %arraydecay1198 = getelementptr inbounds [7 x i8], [7 x i8]* %str, i64 0, i64 0
  %call1199 = call i32 @strcmp(i8* %arraydecay1198, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.41, i64 0, i64 0)) #11
  %cmp1200 = icmp eq i32 %call1199, 0
  %conv1201 = zext i1 %cmp1200 to i32
  %conv1202 = trunc i32 %conv1201 to i8
  store i8 %conv1202, i8* %is_print, align 1
  %arraydecay1203 = getelementptr inbounds [7 x i8], [7 x i8]* %str, i64 0, i64 0
  %call1204 = call i32 @strcmp(i8* %arraydecay1203, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.42, i64 0, i64 0)) #11
  %cmp1205 = icmp eq i32 %call1204, 0
  %conv1206 = zext i1 %cmp1205 to i32
  %conv1207 = trunc i32 %conv1206 to i8
  store i8 %conv1207, i8* %is_punct, align 1
  %arraydecay1208 = getelementptr inbounds [7 x i8], [7 x i8]* %str, i64 0, i64 0
  %call1209 = call i32 @strcmp(i8* %arraydecay1208, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.43, i64 0, i64 0)) #11
  %cmp1210 = icmp eq i32 %call1209, 0
  %conv1211 = zext i1 %cmp1210 to i32
  %conv1212 = trunc i32 %conv1211 to i8
  store i8 %conv1212, i8* %is_space, align 1
  %arraydecay1213 = getelementptr inbounds [7 x i8], [7 x i8]* %str, i64 0, i64 0
  %call1214 = call i32 @strcmp(i8* %arraydecay1213, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.44, i64 0, i64 0)) #11
  %cmp1215 = icmp eq i32 %call1214, 0
  %conv1216 = zext i1 %cmp1215 to i32
  %conv1217 = trunc i32 %conv1216 to i8
  store i8 %conv1217, i8* %is_upper, align 1
  %arraydecay1218 = getelementptr inbounds [7 x i8], [7 x i8]* %str, i64 0, i64 0
  %call1219 = call i32 @strcmp(i8* %arraydecay1218, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.45, i64 0, i64 0)) #11
  %cmp1220 = icmp eq i32 %call1219, 0
  %conv1221 = zext i1 %cmp1220 to i32
  %conv1222 = trunc i32 %conv1221 to i8
  store i8 %conv1222, i8* %is_xdigit, align 1
  %arraydecay1223 = getelementptr inbounds [7 x i8], [7 x i8]* %str, i64 0, i64 0
  %call1224 = call i32 @strcmp(i8* %arraydecay1223, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.35, i64 0, i64 0)) #11
  %cmp1225 = icmp eq i32 %call1224, 0
  br i1 %cmp1225, label %if.end1283, label %lor.lhs.false1227

lor.lhs.false1227:                                ; preds = %if.then1163
  %arraydecay1228 = getelementptr inbounds [7 x i8], [7 x i8]* %str, i64 0, i64 0
  %call1229 = call i32 @strcmp(i8* %arraydecay1228, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.44, i64 0, i64 0)) #11
  %cmp1230 = icmp eq i32 %call1229, 0
  br i1 %cmp1230, label %if.end1283, label %lor.lhs.false1232

lor.lhs.false1232:                                ; preds = %lor.lhs.false1227
  %arraydecay1233 = getelementptr inbounds [7 x i8], [7 x i8]* %str, i64 0, i64 0
  %call1234 = call i32 @strcmp(i8* %arraydecay1233, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.40, i64 0, i64 0)) #11
  %cmp1235 = icmp eq i32 %call1234, 0
  br i1 %cmp1235, label %if.end1283, label %lor.lhs.false1237

lor.lhs.false1237:                                ; preds = %lor.lhs.false1232
  %arraydecay1238 = getelementptr inbounds [7 x i8], [7 x i8]* %str, i64 0, i64 0
  %call1239 = call i32 @strcmp(i8* %arraydecay1238, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.38, i64 0, i64 0)) #11
  %cmp1240 = icmp eq i32 %call1239, 0
  br i1 %cmp1240, label %if.end1283, label %lor.lhs.false1242

lor.lhs.false1242:                                ; preds = %lor.lhs.false1237
  %arraydecay1243 = getelementptr inbounds [7 x i8], [7 x i8]* %str, i64 0, i64 0
  %call1244 = call i32 @strcmp(i8* %arraydecay1243, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.34, i64 0, i64 0)) #11
  %cmp1245 = icmp eq i32 %call1244, 0
  br i1 %cmp1245, label %if.end1283, label %lor.lhs.false1247

lor.lhs.false1247:                                ; preds = %lor.lhs.false1242
  %arraydecay1248 = getelementptr inbounds [7 x i8], [7 x i8]* %str, i64 0, i64 0
  %call1249 = call i32 @strcmp(i8* %arraydecay1248, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.45, i64 0, i64 0)) #11
  %cmp1250 = icmp eq i32 %call1249, 0
  br i1 %cmp1250, label %if.end1283, label %lor.lhs.false1252

lor.lhs.false1252:                                ; preds = %lor.lhs.false1247
  %arraydecay1253 = getelementptr inbounds [7 x i8], [7 x i8]* %str, i64 0, i64 0
  %call1254 = call i32 @strcmp(i8* %arraydecay1253, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.43, i64 0, i64 0)) #11
  %cmp1255 = icmp eq i32 %call1254, 0
  br i1 %cmp1255, label %if.end1283, label %lor.lhs.false1257

lor.lhs.false1257:                                ; preds = %lor.lhs.false1252
  %arraydecay1258 = getelementptr inbounds [7 x i8], [7 x i8]* %str, i64 0, i64 0
  %call1259 = call i32 @strcmp(i8* %arraydecay1258, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.41, i64 0, i64 0)) #11
  %cmp1260 = icmp eq i32 %call1259, 0
  br i1 %cmp1260, label %if.end1283, label %lor.lhs.false1262

lor.lhs.false1262:                                ; preds = %lor.lhs.false1257
  %arraydecay1263 = getelementptr inbounds [7 x i8], [7 x i8]* %str, i64 0, i64 0
  %call1264 = call i32 @strcmp(i8* %arraydecay1263, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.42, i64 0, i64 0)) #11
  %cmp1265 = icmp eq i32 %call1264, 0
  br i1 %cmp1265, label %if.end1283, label %lor.lhs.false1267

lor.lhs.false1267:                                ; preds = %lor.lhs.false1262
  %arraydecay1268 = getelementptr inbounds [7 x i8], [7 x i8]* %str, i64 0, i64 0
  %call1269 = call i32 @strcmp(i8* %arraydecay1268, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.39, i64 0, i64 0)) #11
  %cmp1270 = icmp eq i32 %call1269, 0
  br i1 %cmp1270, label %if.end1283, label %lor.lhs.false1272

lor.lhs.false1272:                                ; preds = %lor.lhs.false1267
  %arraydecay1273 = getelementptr inbounds [7 x i8], [7 x i8]* %str, i64 0, i64 0
  %call1274 = call i32 @strcmp(i8* %arraydecay1273, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.37, i64 0, i64 0)) #11
  %cmp1275 = icmp eq i32 %call1274, 0
  br i1 %cmp1275, label %if.end1283, label %lor.lhs.false1277

lor.lhs.false1277:                                ; preds = %lor.lhs.false1272
  %arraydecay1278 = getelementptr inbounds [7 x i8], [7 x i8]* %str, i64 0, i64 0
  %call1279 = call i32 @strcmp(i8* %arraydecay1278, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.36, i64 0, i64 0)) #11
  %cmp1280 = icmp eq i32 %call1279, 0
  br i1 %cmp1280, label %if.end1283, label %if.then1282

if.then1282:                                      ; preds = %lor.lhs.false1277
  store i32 4, i32* %retval, align 4
  br label %return

if.end1283:                                       ; preds = %lor.lhs.false1277, %lor.lhs.false1272, %lor.lhs.false1267, %lor.lhs.false1262, %lor.lhs.false1257, %lor.lhs.false1252, %lor.lhs.false1247, %lor.lhs.false1242, %lor.lhs.false1237, %lor.lhs.false1232, %lor.lhs.false1227, %if.then1163
  br label %do.body1284

do.body1284:                                      ; preds = %if.end1283
  %685 = load i8*, i8** %p, align 8
  %686 = load i8*, i8** %pend, align 8
  %cmp1285 = icmp eq i8* %685, %686
  br i1 %cmp1285, label %if.then1287, label %if.end1288

if.then1287:                                      ; preds = %do.body1284
  store i32 14, i32* %retval, align 4
  br label %return

if.end1288:                                       ; preds = %do.body1284
  %687 = load i8*, i8** %p, align 8
  %incdec.ptr1289 = getelementptr inbounds i8, i8* %687, i32 1
  store i8* %incdec.ptr1289, i8** %p, align 8
  %688 = load i8, i8* %687, align 1
  store i8 %688, i8* %c, align 1
  %689 = load i8*, i8** %translate, align 8
  %tobool1290 = icmp ne i8* %689, null
  br i1 %tobool1290, label %if.then1291, label %if.end1294

if.then1291:                                      ; preds = %if.end1288
  %690 = load i8*, i8** %translate, align 8
  %691 = load i8, i8* %c, align 1
  %idxprom1292 = zext i8 %691 to i64
  %arrayidx1293 = getelementptr inbounds i8, i8* %690, i64 %idxprom1292
  %692 = load i8, i8* %arrayidx1293, align 1
  store i8 %692, i8* %c, align 1
  br label %if.end1294

if.end1294:                                       ; preds = %if.then1291, %if.end1288
  br label %do.end1295

do.end1295:                                       ; preds = %if.end1294
  %693 = load i8*, i8** %p, align 8
  %694 = load i8*, i8** %pend, align 8
  %cmp1296 = icmp eq i8* %693, %694
  br i1 %cmp1296, label %if.then1298, label %if.end1299

if.then1298:                                      ; preds = %do.end1295
  store i32 7, i32* %retval, align 4
  br label %return

if.end1299:                                       ; preds = %do.end1295
  store i32 0, i32* %ch, align 4
  br label %for.cond1300

for.cond1300:                                     ; preds = %for.inc, %if.end1299
  %695 = load i32, i32* %ch, align 4
  %cmp1301 = icmp slt i32 %695, 256
  br i1 %cmp1301, label %for.body, label %for.end1437

for.body:                                         ; preds = %for.cond1300
  %696 = load i8, i8* %is_alnum, align 1
  %conv1303 = sext i8 %696 to i32
  %tobool1304 = icmp ne i32 %conv1303, 0
  br i1 %tobool1304, label %land.lhs.true1305, label %lor.lhs.false1312

land.lhs.true1305:                                ; preds = %for.body
  %call1306 = call i16** @__ctype_b_loc() #10
  %697 = load i16*, i16** %call1306, align 8
  %698 = load i32, i32* %ch, align 4
  %idxprom1307 = sext i32 %698 to i64
  %arrayidx1308 = getelementptr inbounds i16, i16* %697, i64 %idxprom1307
  %699 = load i16, i16* %arrayidx1308, align 2
  %conv1309 = zext i16 %699 to i32
  %and1310 = and i32 %conv1309, 8
  %tobool1311 = icmp ne i32 %and1310, 0
  br i1 %tobool1311, label %if.then1422, label %lor.lhs.false1312

lor.lhs.false1312:                                ; preds = %land.lhs.true1305, %for.body
  %700 = load i8, i8* %is_alpha, align 1
  %conv1313 = sext i8 %700 to i32
  %tobool1314 = icmp ne i32 %conv1313, 0
  br i1 %tobool1314, label %land.lhs.true1315, label %lor.lhs.false1322

land.lhs.true1315:                                ; preds = %lor.lhs.false1312
  %call1316 = call i16** @__ctype_b_loc() #10
  %701 = load i16*, i16** %call1316, align 8
  %702 = load i32, i32* %ch, align 4
  %idxprom1317 = sext i32 %702 to i64
  %arrayidx1318 = getelementptr inbounds i16, i16* %701, i64 %idxprom1317
  %703 = load i16, i16* %arrayidx1318, align 2
  %conv1319 = zext i16 %703 to i32
  %and1320 = and i32 %conv1319, 1024
  %tobool1321 = icmp ne i32 %and1320, 0
  br i1 %tobool1321, label %if.then1422, label %lor.lhs.false1322

lor.lhs.false1322:                                ; preds = %land.lhs.true1315, %lor.lhs.false1312
  %704 = load i8, i8* %is_blank, align 1
  %conv1323 = sext i8 %704 to i32
  %tobool1324 = icmp ne i32 %conv1323, 0
  br i1 %tobool1324, label %land.lhs.true1325, label %lor.lhs.false1332

land.lhs.true1325:                                ; preds = %lor.lhs.false1322
  %call1326 = call i16** @__ctype_b_loc() #10
  %705 = load i16*, i16** %call1326, align 8
  %706 = load i32, i32* %ch, align 4
  %idxprom1327 = sext i32 %706 to i64
  %arrayidx1328 = getelementptr inbounds i16, i16* %705, i64 %idxprom1327
  %707 = load i16, i16* %arrayidx1328, align 2
  %conv1329 = zext i16 %707 to i32
  %and1330 = and i32 %conv1329, 1
  %tobool1331 = icmp ne i32 %and1330, 0
  br i1 %tobool1331, label %if.then1422, label %lor.lhs.false1332

lor.lhs.false1332:                                ; preds = %land.lhs.true1325, %lor.lhs.false1322
  %708 = load i8, i8* %is_cntrl, align 1
  %conv1333 = sext i8 %708 to i32
  %tobool1334 = icmp ne i32 %conv1333, 0
  br i1 %tobool1334, label %land.lhs.true1335, label %lor.lhs.false1342

land.lhs.true1335:                                ; preds = %lor.lhs.false1332
  %call1336 = call i16** @__ctype_b_loc() #10
  %709 = load i16*, i16** %call1336, align 8
  %710 = load i32, i32* %ch, align 4
  %idxprom1337 = sext i32 %710 to i64
  %arrayidx1338 = getelementptr inbounds i16, i16* %709, i64 %idxprom1337
  %711 = load i16, i16* %arrayidx1338, align 2
  %conv1339 = zext i16 %711 to i32
  %and1340 = and i32 %conv1339, 2
  %tobool1341 = icmp ne i32 %and1340, 0
  br i1 %tobool1341, label %if.then1422, label %lor.lhs.false1342

lor.lhs.false1342:                                ; preds = %land.lhs.true1335, %lor.lhs.false1332
  %712 = load i8, i8* %is_digit, align 1
  %conv1343 = sext i8 %712 to i32
  %tobool1344 = icmp ne i32 %conv1343, 0
  br i1 %tobool1344, label %land.lhs.true1345, label %lor.lhs.false1352

land.lhs.true1345:                                ; preds = %lor.lhs.false1342
  %call1346 = call i16** @__ctype_b_loc() #10
  %713 = load i16*, i16** %call1346, align 8
  %714 = load i32, i32* %ch, align 4
  %idxprom1347 = sext i32 %714 to i64
  %arrayidx1348 = getelementptr inbounds i16, i16* %713, i64 %idxprom1347
  %715 = load i16, i16* %arrayidx1348, align 2
  %conv1349 = zext i16 %715 to i32
  %and1350 = and i32 %conv1349, 2048
  %tobool1351 = icmp ne i32 %and1350, 0
  br i1 %tobool1351, label %if.then1422, label %lor.lhs.false1352

lor.lhs.false1352:                                ; preds = %land.lhs.true1345, %lor.lhs.false1342
  %716 = load i8, i8* %is_graph, align 1
  %conv1353 = sext i8 %716 to i32
  %tobool1354 = icmp ne i32 %conv1353, 0
  br i1 %tobool1354, label %land.lhs.true1355, label %lor.lhs.false1362

land.lhs.true1355:                                ; preds = %lor.lhs.false1352
  %call1356 = call i16** @__ctype_b_loc() #10
  %717 = load i16*, i16** %call1356, align 8
  %718 = load i32, i32* %ch, align 4
  %idxprom1357 = sext i32 %718 to i64
  %arrayidx1358 = getelementptr inbounds i16, i16* %717, i64 %idxprom1357
  %719 = load i16, i16* %arrayidx1358, align 2
  %conv1359 = zext i16 %719 to i32
  %and1360 = and i32 %conv1359, 32768
  %tobool1361 = icmp ne i32 %and1360, 0
  br i1 %tobool1361, label %if.then1422, label %lor.lhs.false1362

lor.lhs.false1362:                                ; preds = %land.lhs.true1355, %lor.lhs.false1352
  %720 = load i8, i8* %is_lower, align 1
  %conv1363 = sext i8 %720 to i32
  %tobool1364 = icmp ne i32 %conv1363, 0
  br i1 %tobool1364, label %land.lhs.true1365, label %lor.lhs.false1372

land.lhs.true1365:                                ; preds = %lor.lhs.false1362
  %call1366 = call i16** @__ctype_b_loc() #10
  %721 = load i16*, i16** %call1366, align 8
  %722 = load i32, i32* %ch, align 4
  %idxprom1367 = sext i32 %722 to i64
  %arrayidx1368 = getelementptr inbounds i16, i16* %721, i64 %idxprom1367
  %723 = load i16, i16* %arrayidx1368, align 2
  %conv1369 = zext i16 %723 to i32
  %and1370 = and i32 %conv1369, 512
  %tobool1371 = icmp ne i32 %and1370, 0
  br i1 %tobool1371, label %if.then1422, label %lor.lhs.false1372

lor.lhs.false1372:                                ; preds = %land.lhs.true1365, %lor.lhs.false1362
  %724 = load i8, i8* %is_print, align 1
  %conv1373 = sext i8 %724 to i32
  %tobool1374 = icmp ne i32 %conv1373, 0
  br i1 %tobool1374, label %land.lhs.true1375, label %lor.lhs.false1382

land.lhs.true1375:                                ; preds = %lor.lhs.false1372
  %call1376 = call i16** @__ctype_b_loc() #10
  %725 = load i16*, i16** %call1376, align 8
  %726 = load i32, i32* %ch, align 4
  %idxprom1377 = sext i32 %726 to i64
  %arrayidx1378 = getelementptr inbounds i16, i16* %725, i64 %idxprom1377
  %727 = load i16, i16* %arrayidx1378, align 2
  %conv1379 = zext i16 %727 to i32
  %and1380 = and i32 %conv1379, 16384
  %tobool1381 = icmp ne i32 %and1380, 0
  br i1 %tobool1381, label %if.then1422, label %lor.lhs.false1382

lor.lhs.false1382:                                ; preds = %land.lhs.true1375, %lor.lhs.false1372
  %728 = load i8, i8* %is_punct, align 1
  %conv1383 = sext i8 %728 to i32
  %tobool1384 = icmp ne i32 %conv1383, 0
  br i1 %tobool1384, label %land.lhs.true1385, label %lor.lhs.false1392

land.lhs.true1385:                                ; preds = %lor.lhs.false1382
  %call1386 = call i16** @__ctype_b_loc() #10
  %729 = load i16*, i16** %call1386, align 8
  %730 = load i32, i32* %ch, align 4
  %idxprom1387 = sext i32 %730 to i64
  %arrayidx1388 = getelementptr inbounds i16, i16* %729, i64 %idxprom1387
  %731 = load i16, i16* %arrayidx1388, align 2
  %conv1389 = zext i16 %731 to i32
  %and1390 = and i32 %conv1389, 4
  %tobool1391 = icmp ne i32 %and1390, 0
  br i1 %tobool1391, label %if.then1422, label %lor.lhs.false1392

lor.lhs.false1392:                                ; preds = %land.lhs.true1385, %lor.lhs.false1382
  %732 = load i8, i8* %is_space, align 1
  %conv1393 = sext i8 %732 to i32
  %tobool1394 = icmp ne i32 %conv1393, 0
  br i1 %tobool1394, label %land.lhs.true1395, label %lor.lhs.false1402

land.lhs.true1395:                                ; preds = %lor.lhs.false1392
  %call1396 = call i16** @__ctype_b_loc() #10
  %733 = load i16*, i16** %call1396, align 8
  %734 = load i32, i32* %ch, align 4
  %idxprom1397 = sext i32 %734 to i64
  %arrayidx1398 = getelementptr inbounds i16, i16* %733, i64 %idxprom1397
  %735 = load i16, i16* %arrayidx1398, align 2
  %conv1399 = zext i16 %735 to i32
  %and1400 = and i32 %conv1399, 8192
  %tobool1401 = icmp ne i32 %and1400, 0
  br i1 %tobool1401, label %if.then1422, label %lor.lhs.false1402

lor.lhs.false1402:                                ; preds = %land.lhs.true1395, %lor.lhs.false1392
  %736 = load i8, i8* %is_upper, align 1
  %conv1403 = sext i8 %736 to i32
  %tobool1404 = icmp ne i32 %conv1403, 0
  br i1 %tobool1404, label %land.lhs.true1405, label %lor.lhs.false1412

land.lhs.true1405:                                ; preds = %lor.lhs.false1402
  %call1406 = call i16** @__ctype_b_loc() #10
  %737 = load i16*, i16** %call1406, align 8
  %738 = load i32, i32* %ch, align 4
  %idxprom1407 = sext i32 %738 to i64
  %arrayidx1408 = getelementptr inbounds i16, i16* %737, i64 %idxprom1407
  %739 = load i16, i16* %arrayidx1408, align 2
  %conv1409 = zext i16 %739 to i32
  %and1410 = and i32 %conv1409, 256
  %tobool1411 = icmp ne i32 %and1410, 0
  br i1 %tobool1411, label %if.then1422, label %lor.lhs.false1412

lor.lhs.false1412:                                ; preds = %land.lhs.true1405, %lor.lhs.false1402
  %740 = load i8, i8* %is_xdigit, align 1
  %conv1413 = sext i8 %740 to i32
  %tobool1414 = icmp ne i32 %conv1413, 0
  br i1 %tobool1414, label %land.lhs.true1415, label %if.end1435

land.lhs.true1415:                                ; preds = %lor.lhs.false1412
  %call1416 = call i16** @__ctype_b_loc() #10
  %741 = load i16*, i16** %call1416, align 8
  %742 = load i32, i32* %ch, align 4
  %idxprom1417 = sext i32 %742 to i64
  %arrayidx1418 = getelementptr inbounds i16, i16* %741, i64 %idxprom1417
  %743 = load i16, i16* %arrayidx1418, align 2
  %conv1419 = zext i16 %743 to i32
  %and1420 = and i32 %conv1419, 4096
  %tobool1421 = icmp ne i32 %and1420, 0
  br i1 %tobool1421, label %if.then1422, label %if.end1435

if.then1422:                                      ; preds = %land.lhs.true1415, %land.lhs.true1405, %land.lhs.true1395, %land.lhs.true1385, %land.lhs.true1375, %land.lhs.true1365, %land.lhs.true1355, %land.lhs.true1345, %land.lhs.true1335, %land.lhs.true1325, %land.lhs.true1315, %land.lhs.true1305
  %744 = load i32, i32* %ch, align 4
  %conv1423 = trunc i32 %744 to i8
  %conv1424 = zext i8 %conv1423 to i32
  %rem1425 = srem i32 %conv1424, 8
  %shl1426 = shl i32 1, %rem1425
  %745 = load i8*, i8** %b, align 8
  %746 = load i32, i32* %ch, align 4
  %conv1427 = trunc i32 %746 to i8
  %conv1428 = zext i8 %conv1427 to i32
  %div1429 = sdiv i32 %conv1428, 8
  %idxprom1430 = sext i32 %div1429 to i64
  %arrayidx1431 = getelementptr inbounds i8, i8* %745, i64 %idxprom1430
  %747 = load i8, i8* %arrayidx1431, align 1
  %conv1432 = zext i8 %747 to i32
  %or1433 = or i32 %conv1432, %shl1426
  %conv1434 = trunc i32 %or1433 to i8
  store i8 %conv1434, i8* %arrayidx1431, align 1
  br label %if.end1435

if.end1435:                                       ; preds = %if.then1422, %land.lhs.true1415, %lor.lhs.false1412
  br label %for.inc

for.inc:                                          ; preds = %if.end1435
  %748 = load i32, i32* %ch, align 4
  %inc1436 = add nsw i32 %748, 1
  store i32 %inc1436, i32* %ch, align 4
  br label %for.cond1300, !llvm.loop !67

for.end1437:                                      ; preds = %for.cond1300
  store i8 1, i8* %had_char_class, align 1
  br label %if.end1453

if.else1438:                                      ; preds = %land.lhs.true1159, %for.end1153
  %749 = load i8, i8* %c1, align 1
  %inc1439 = add i8 %749, 1
  store i8 %inc1439, i8* %c1, align 1
  br label %while.cond1440

while.cond1440:                                   ; preds = %while.body1442, %if.else1438
  %750 = load i8, i8* %c1, align 1
  %dec = add i8 %750, -1
  store i8 %dec, i8* %c1, align 1
  %tobool1441 = icmp ne i8 %750, 0
  br i1 %tobool1441, label %while.body1442, label %while.end1444

while.body1442:                                   ; preds = %while.cond1440
  %751 = load i8*, i8** %p, align 8
  %incdec.ptr1443 = getelementptr inbounds i8, i8* %751, i32 -1
  store i8* %incdec.ptr1443, i8** %p, align 8
  br label %while.cond1440, !llvm.loop !68

while.end1444:                                    ; preds = %while.cond1440
  %752 = load i8*, i8** %b, align 8
  %arrayidx1445 = getelementptr inbounds i8, i8* %752, i64 11
  %753 = load i8, i8* %arrayidx1445, align 1
  %conv1446 = zext i8 %753 to i32
  %or1447 = or i32 %conv1446, 8
  %conv1448 = trunc i32 %or1447 to i8
  store i8 %conv1448, i8* %arrayidx1445, align 1
  %754 = load i8*, i8** %b, align 8
  %arrayidx1449 = getelementptr inbounds i8, i8* %754, i64 7
  %755 = load i8, i8* %arrayidx1449, align 1
  %conv1450 = zext i8 %755 to i32
  %or1451 = or i32 %conv1450, 4
  %conv1452 = trunc i32 %or1451 to i8
  store i8 %conv1452, i8* %arrayidx1449, align 1
  store i8 0, i8* %had_char_class, align 1
  br label %if.end1453

if.end1453:                                       ; preds = %while.end1444, %for.end1437
  br label %if.end1465

if.else1454:                                      ; preds = %land.lhs.true1101, %land.lhs.true1097, %if.else1094
  store i8 0, i8* %had_char_class, align 1
  %756 = load i8, i8* %c, align 1
  %conv1455 = zext i8 %756 to i32
  %rem1456 = srem i32 %conv1455, 8
  %shl1457 = shl i32 1, %rem1456
  %757 = load i8*, i8** %b, align 8
  %758 = load i8, i8* %c, align 1
  %conv1458 = zext i8 %758 to i32
  %div1459 = sdiv i32 %conv1458, 8
  %idxprom1460 = sext i32 %div1459 to i64
  %arrayidx1461 = getelementptr inbounds i8, i8* %757, i64 %idxprom1460
  %759 = load i8, i8* %arrayidx1461, align 1
  %conv1462 = zext i8 %759 to i32
  %or1463 = or i32 %conv1462, %shl1457
  %conv1464 = trunc i32 %or1463 to i8
  store i8 %conv1464, i8* %arrayidx1461, align 1
  br label %if.end1465

if.end1465:                                       ; preds = %if.else1454, %if.end1453
  br label %if.end1466

if.end1466:                                       ; preds = %if.end1465, %if.end1093
  br label %if.end1467

if.end1467:                                       ; preds = %if.end1466, %if.end1064
  br label %for.cond959

for.end1468:                                      ; preds = %if.then1015
  br label %while.cond1469

while.cond1469:                                   ; preds = %while.body1482, %for.end1468
  %760 = load i8*, i8** %b, align 8
  %arrayidx1470 = getelementptr inbounds i8, i8* %760, i64 -1
  %761 = load i8, i8* %arrayidx1470, align 1
  %conv1471 = zext i8 %761 to i32
  %cmp1472 = icmp sgt i32 %conv1471, 0
  br i1 %cmp1472, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond1469
  %762 = load i8*, i8** %b, align 8
  %763 = load i8*, i8** %b, align 8
  %arrayidx1474 = getelementptr inbounds i8, i8* %763, i64 -1
  %764 = load i8, i8* %arrayidx1474, align 1
  %conv1475 = zext i8 %764 to i32
  %sub1476 = sub nsw i32 %conv1475, 1
  %idxprom1477 = sext i32 %sub1476 to i64
  %arrayidx1478 = getelementptr inbounds i8, i8* %762, i64 %idxprom1477
  %765 = load i8, i8* %arrayidx1478, align 1
  %conv1479 = zext i8 %765 to i32
  %cmp1480 = icmp eq i32 %conv1479, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond1469
  %766 = phi i1 [ false, %while.cond1469 ], [ %cmp1480, %land.rhs ]
  br i1 %766, label %while.body1482, label %while.end1485

while.body1482:                                   ; preds = %land.end
  %767 = load i8*, i8** %b, align 8
  %arrayidx1483 = getelementptr inbounds i8, i8* %767, i64 -1
  %768 = load i8, i8* %arrayidx1483, align 1
  %dec1484 = add i8 %768, -1
  store i8 %dec1484, i8* %arrayidx1483, align 1
  br label %while.cond1469, !llvm.loop !69

while.end1485:                                    ; preds = %land.end
  %769 = load i8*, i8** %b, align 8
  %arrayidx1486 = getelementptr inbounds i8, i8* %769, i64 -1
  %770 = load i8, i8* %arrayidx1486, align 1
  %conv1487 = zext i8 %770 to i32
  %771 = load i8*, i8** %b, align 8
  %idx.ext1488 = sext i32 %conv1487 to i64
  %add.ptr1489 = getelementptr inbounds i8, i8* %771, i64 %idx.ext1488
  store i8* %add.ptr1489, i8** %b, align 8
  br label %sw.epilog3520

sw.bb1490:                                        ; preds = %do.end
  %772 = load i32, i32* %syntax.addr, align 4
  %and1491 = and i32 %772, 8192
  %tobool1492 = icmp ne i32 %and1491, 0
  br i1 %tobool1492, label %if.then1493, label %if.else1494

if.then1493:                                      ; preds = %sw.bb1490
  br label %handle_open

if.else1494:                                      ; preds = %sw.bb1490
  br label %normal_char

sw.bb1495:                                        ; preds = %do.end
  %773 = load i32, i32* %syntax.addr, align 4
  %and1496 = and i32 %773, 8192
  %tobool1497 = icmp ne i32 %and1496, 0
  br i1 %tobool1497, label %if.then1498, label %if.else1499

if.then1498:                                      ; preds = %sw.bb1495
  br label %handle_close

if.else1499:                                      ; preds = %sw.bb1495
  br label %normal_char

sw.bb1500:                                        ; preds = %do.end
  %774 = load i32, i32* %syntax.addr, align 4
  %and1501 = and i32 %774, 2048
  %tobool1502 = icmp ne i32 %and1501, 0
  br i1 %tobool1502, label %if.then1503, label %if.else1504

if.then1503:                                      ; preds = %sw.bb1500
  br label %handle_alt

if.else1504:                                      ; preds = %sw.bb1500
  br label %normal_char

sw.bb1505:                                        ; preds = %do.end
  %775 = load i32, i32* %syntax.addr, align 4
  %and1506 = and i32 %775, 32768
  %tobool1507 = icmp ne i32 %and1506, 0
  br i1 %tobool1507, label %if.then1508, label %if.else1509

if.then1508:                                      ; preds = %sw.bb1505
  br label %handle_alt

if.else1509:                                      ; preds = %sw.bb1505
  br label %normal_char

sw.bb1510:                                        ; preds = %do.end
  %776 = load i32, i32* %syntax.addr, align 4
  %and1511 = and i32 %776, 512
  %tobool1512 = icmp ne i32 %and1511, 0
  br i1 %tobool1512, label %land.lhs.true1513, label %if.else1517

land.lhs.true1513:                                ; preds = %sw.bb1510
  %777 = load i32, i32* %syntax.addr, align 4
  %and1514 = and i32 %777, 4096
  %tobool1515 = icmp ne i32 %and1514, 0
  br i1 %tobool1515, label %if.then1516, label %if.else1517

if.then1516:                                      ; preds = %land.lhs.true1513
  br label %handle_interval

if.else1517:                                      ; preds = %land.lhs.true1513, %sw.bb1510
  br label %normal_char

sw.bb1518:                                        ; preds = %do.end
  %778 = load i8*, i8** %p, align 8
  %779 = load i8*, i8** %pend, align 8
  %cmp1519 = icmp eq i8* %778, %779
  br i1 %cmp1519, label %if.then1521, label %if.end1522

if.then1521:                                      ; preds = %sw.bb1518
  store i32 5, i32* %retval, align 4
  br label %return

if.end1522:                                       ; preds = %sw.bb1518
  br label %do.body1523

do.body1523:                                      ; preds = %if.end1522
  %780 = load i8*, i8** %p, align 8
  %781 = load i8*, i8** %pend, align 8
  %cmp1524 = icmp eq i8* %780, %781
  br i1 %cmp1524, label %if.then1526, label %if.end1527

if.then1526:                                      ; preds = %do.body1523
  store i32 14, i32* %retval, align 4
  br label %return

if.end1527:                                       ; preds = %do.body1523
  %782 = load i8*, i8** %p, align 8
  %incdec.ptr1528 = getelementptr inbounds i8, i8* %782, i32 1
  store i8* %incdec.ptr1528, i8** %p, align 8
  %783 = load i8, i8* %782, align 1
  store i8 %783, i8* %c, align 1
  br label %do.end1529

do.end1529:                                       ; preds = %if.end1527
  %784 = load i8, i8* %c, align 1
  %conv1530 = zext i8 %784 to i32
  switch i32 %conv1530, label %sw.default [
    i32 40, label %sw.bb1531
    i32 41, label %sw.bb1695
    i32 124, label %sw.bb1945
    i32 123, label %sw.bb2123
    i32 119, label %sw.bb2538
    i32 87, label %sw.bb2618
    i32 60, label %sw.bb2698
    i32 62, label %sw.bb2778
    i32 98, label %sw.bb2858
    i32 66, label %sw.bb2938
    i32 96, label %sw.bb3018
    i32 39, label %sw.bb3098
    i32 49, label %sw.bb3178
    i32 50, label %sw.bb3178
    i32 51, label %sw.bb3178
    i32 52, label %sw.bb3178
    i32 53, label %sw.bb3178
    i32 54, label %sw.bb3178
    i32 55, label %sw.bb3178
    i32 56, label %sw.bb3178
    i32 57, label %sw.bb3178
    i32 43, label %sw.bb3276
    i32 63, label %sw.bb3276
  ]

sw.bb1531:                                        ; preds = %do.end1529
  %785 = load i32, i32* %syntax.addr, align 4
  %and1532 = and i32 %785, 8192
  %tobool1533 = icmp ne i32 %and1532, 0
  br i1 %tobool1533, label %if.then1534, label %if.end1535

if.then1534:                                      ; preds = %sw.bb1531
  br label %normal_backslash

if.end1535:                                       ; preds = %sw.bb1531
  br label %handle_open

handle_open:                                      ; preds = %if.end1535, %if.then1493
  %786 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %re_nsub1536 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %786, i32 0, i32 6
  %787 = load i64, i64* %re_nsub1536, align 8
  %inc1537 = add i64 %787, 1
  store i64 %inc1537, i64* %re_nsub1536, align 8
  %788 = load i32, i32* %regnum, align 4
  %inc1538 = add i32 %788, 1
  store i32 %inc1538, i32* %regnum, align 4
  %avail1539 = getelementptr inbounds %struct.compile_stack_type, %struct.compile_stack_type* %compile_stack, i32 0, i32 2
  %789 = load i32, i32* %avail1539, align 4
  %size1540 = getelementptr inbounds %struct.compile_stack_type, %struct.compile_stack_type* %compile_stack, i32 0, i32 1
  %790 = load i32, i32* %size1540, align 8
  %cmp1541 = icmp eq i32 %789, %790
  br i1 %cmp1541, label %if.then1543, label %if.end1557

if.then1543:                                      ; preds = %handle_open
  %stack1544 = getelementptr inbounds %struct.compile_stack_type, %struct.compile_stack_type* %compile_stack, i32 0, i32 0
  %791 = load %struct.compile_stack_elt_t*, %struct.compile_stack_elt_t** %stack1544, align 8
  %792 = bitcast %struct.compile_stack_elt_t* %791 to i8*
  %size1545 = getelementptr inbounds %struct.compile_stack_type, %struct.compile_stack_type* %compile_stack, i32 0, i32 1
  %793 = load i32, i32* %size1545, align 8
  %shl1546 = shl i32 %793, 1
  %conv1547 = zext i32 %shl1546 to i64
  %mul = mul i64 %conv1547, 20
  %call1548 = call align 16 i8* @realloc(i8* %792, i64 %mul) #9
  %794 = bitcast i8* %call1548 to %struct.compile_stack_elt_t*
  %stack1549 = getelementptr inbounds %struct.compile_stack_type, %struct.compile_stack_type* %compile_stack, i32 0, i32 0
  store %struct.compile_stack_elt_t* %794, %struct.compile_stack_elt_t** %stack1549, align 8
  %stack1550 = getelementptr inbounds %struct.compile_stack_type, %struct.compile_stack_type* %compile_stack, i32 0, i32 0
  %795 = load %struct.compile_stack_elt_t*, %struct.compile_stack_elt_t** %stack1550, align 8
  %cmp1551 = icmp eq %struct.compile_stack_elt_t* %795, null
  br i1 %cmp1551, label %if.then1553, label %if.end1554

if.then1553:                                      ; preds = %if.then1543
  store i32 12, i32* %retval, align 4
  br label %return

if.end1554:                                       ; preds = %if.then1543
  %size1555 = getelementptr inbounds %struct.compile_stack_type, %struct.compile_stack_type* %compile_stack, i32 0, i32 1
  %796 = load i32, i32* %size1555, align 8
  %shl1556 = shl i32 %796, 1
  store i32 %shl1556, i32* %size1555, align 8
  br label %if.end1557

if.end1557:                                       ; preds = %if.end1554, %handle_open
  %797 = load i8*, i8** %begalt, align 8
  %798 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer1558 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %798, i32 0, i32 0
  %799 = load i8*, i8** %buffer1558, align 8
  %sub.ptr.lhs.cast1559 = ptrtoint i8* %797 to i64
  %sub.ptr.rhs.cast1560 = ptrtoint i8* %799 to i64
  %sub.ptr.sub1561 = sub i64 %sub.ptr.lhs.cast1559, %sub.ptr.rhs.cast1560
  %conv1562 = trunc i64 %sub.ptr.sub1561 to i32
  %stack1563 = getelementptr inbounds %struct.compile_stack_type, %struct.compile_stack_type* %compile_stack, i32 0, i32 0
  %800 = load %struct.compile_stack_elt_t*, %struct.compile_stack_elt_t** %stack1563, align 8
  %avail1564 = getelementptr inbounds %struct.compile_stack_type, %struct.compile_stack_type* %compile_stack, i32 0, i32 2
  %801 = load i32, i32* %avail1564, align 4
  %idxprom1565 = zext i32 %801 to i64
  %arrayidx1566 = getelementptr inbounds %struct.compile_stack_elt_t, %struct.compile_stack_elt_t* %800, i64 %idxprom1565
  %begalt_offset = getelementptr inbounds %struct.compile_stack_elt_t, %struct.compile_stack_elt_t* %arrayidx1566, i32 0, i32 0
  store i32 %conv1562, i32* %begalt_offset, align 4
  %802 = load i8*, i8** %fixup_alt_jump, align 8
  %tobool1567 = icmp ne i8* %802, null
  br i1 %tobool1567, label %cond.true1568, label %cond.false1574

cond.true1568:                                    ; preds = %if.end1557
  %803 = load i8*, i8** %fixup_alt_jump, align 8
  %804 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer1569 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %804, i32 0, i32 0
  %805 = load i8*, i8** %buffer1569, align 8
  %sub.ptr.lhs.cast1570 = ptrtoint i8* %803 to i64
  %sub.ptr.rhs.cast1571 = ptrtoint i8* %805 to i64
  %sub.ptr.sub1572 = sub i64 %sub.ptr.lhs.cast1570, %sub.ptr.rhs.cast1571
  %add1573 = add nsw i64 %sub.ptr.sub1572, 1
  br label %cond.end1575

cond.false1574:                                   ; preds = %if.end1557
  br label %cond.end1575

cond.end1575:                                     ; preds = %cond.false1574, %cond.true1568
  %cond1576 = phi i64 [ %add1573, %cond.true1568 ], [ 0, %cond.false1574 ]
  %conv1577 = trunc i64 %cond1576 to i32
  %stack1578 = getelementptr inbounds %struct.compile_stack_type, %struct.compile_stack_type* %compile_stack, i32 0, i32 0
  %806 = load %struct.compile_stack_elt_t*, %struct.compile_stack_elt_t** %stack1578, align 8
  %avail1579 = getelementptr inbounds %struct.compile_stack_type, %struct.compile_stack_type* %compile_stack, i32 0, i32 2
  %807 = load i32, i32* %avail1579, align 4
  %idxprom1580 = zext i32 %807 to i64
  %arrayidx1581 = getelementptr inbounds %struct.compile_stack_elt_t, %struct.compile_stack_elt_t* %806, i64 %idxprom1580
  %fixup_alt_jump1582 = getelementptr inbounds %struct.compile_stack_elt_t, %struct.compile_stack_elt_t* %arrayidx1581, i32 0, i32 1
  store i32 %conv1577, i32* %fixup_alt_jump1582, align 4
  %808 = load i8*, i8** %b, align 8
  %809 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer1583 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %809, i32 0, i32 0
  %810 = load i8*, i8** %buffer1583, align 8
  %sub.ptr.lhs.cast1584 = ptrtoint i8* %808 to i64
  %sub.ptr.rhs.cast1585 = ptrtoint i8* %810 to i64
  %sub.ptr.sub1586 = sub i64 %sub.ptr.lhs.cast1584, %sub.ptr.rhs.cast1585
  %conv1587 = trunc i64 %sub.ptr.sub1586 to i32
  %stack1588 = getelementptr inbounds %struct.compile_stack_type, %struct.compile_stack_type* %compile_stack, i32 0, i32 0
  %811 = load %struct.compile_stack_elt_t*, %struct.compile_stack_elt_t** %stack1588, align 8
  %avail1589 = getelementptr inbounds %struct.compile_stack_type, %struct.compile_stack_type* %compile_stack, i32 0, i32 2
  %812 = load i32, i32* %avail1589, align 4
  %idxprom1590 = zext i32 %812 to i64
  %arrayidx1591 = getelementptr inbounds %struct.compile_stack_elt_t, %struct.compile_stack_elt_t* %811, i64 %idxprom1590
  %laststart_offset = getelementptr inbounds %struct.compile_stack_elt_t, %struct.compile_stack_elt_t* %arrayidx1591, i32 0, i32 3
  store i32 %conv1587, i32* %laststart_offset, align 4
  %813 = load i32, i32* %regnum, align 4
  %stack1592 = getelementptr inbounds %struct.compile_stack_type, %struct.compile_stack_type* %compile_stack, i32 0, i32 0
  %814 = load %struct.compile_stack_elt_t*, %struct.compile_stack_elt_t** %stack1592, align 8
  %avail1593 = getelementptr inbounds %struct.compile_stack_type, %struct.compile_stack_type* %compile_stack, i32 0, i32 2
  %815 = load i32, i32* %avail1593, align 4
  %idxprom1594 = zext i32 %815 to i64
  %arrayidx1595 = getelementptr inbounds %struct.compile_stack_elt_t, %struct.compile_stack_elt_t* %814, i64 %idxprom1594
  %regnum1596 = getelementptr inbounds %struct.compile_stack_elt_t, %struct.compile_stack_elt_t* %arrayidx1595, i32 0, i32 4
  store i32 %813, i32* %regnum1596, align 4
  %816 = load i32, i32* %regnum, align 4
  %cmp1597 = icmp ule i32 %816, 255
  br i1 %cmp1597, label %if.then1599, label %if.end1692

if.then1599:                                      ; preds = %cond.end1575
  %817 = load i8*, i8** %b, align 8
  %818 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer1600 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %818, i32 0, i32 0
  %819 = load i8*, i8** %buffer1600, align 8
  %sub.ptr.lhs.cast1601 = ptrtoint i8* %817 to i64
  %sub.ptr.rhs.cast1602 = ptrtoint i8* %819 to i64
  %sub.ptr.sub1603 = sub i64 %sub.ptr.lhs.cast1601, %sub.ptr.rhs.cast1602
  %add1604 = add nsw i64 %sub.ptr.sub1603, 2
  %conv1605 = trunc i64 %add1604 to i32
  %stack1606 = getelementptr inbounds %struct.compile_stack_type, %struct.compile_stack_type* %compile_stack, i32 0, i32 0
  %820 = load %struct.compile_stack_elt_t*, %struct.compile_stack_elt_t** %stack1606, align 8
  %avail1607 = getelementptr inbounds %struct.compile_stack_type, %struct.compile_stack_type* %compile_stack, i32 0, i32 2
  %821 = load i32, i32* %avail1607, align 4
  %idxprom1608 = zext i32 %821 to i64
  %arrayidx1609 = getelementptr inbounds %struct.compile_stack_elt_t, %struct.compile_stack_elt_t* %820, i64 %idxprom1608
  %inner_group_offset = getelementptr inbounds %struct.compile_stack_elt_t, %struct.compile_stack_elt_t* %arrayidx1609, i32 0, i32 2
  store i32 %conv1605, i32* %inner_group_offset, align 4
  br label %do.body1610

do.body1610:                                      ; preds = %if.then1599
  br label %while.cond1611

while.cond1611:                                   ; preds = %do.end1685, %do.body1610
  %822 = load i8*, i8** %b, align 8
  %823 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer1612 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %823, i32 0, i32 0
  %824 = load i8*, i8** %buffer1612, align 8
  %sub.ptr.lhs.cast1613 = ptrtoint i8* %822 to i64
  %sub.ptr.rhs.cast1614 = ptrtoint i8* %824 to i64
  %sub.ptr.sub1615 = sub i64 %sub.ptr.lhs.cast1613, %sub.ptr.rhs.cast1614
  %add1616 = add nsw i64 %sub.ptr.sub1615, 3
  %825 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated1617 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %825, i32 0, i32 1
  %826 = load i64, i64* %allocated1617, align 8
  %cmp1618 = icmp ugt i64 %add1616, %826
  br i1 %cmp1618, label %while.body1620, label %while.end1686

while.body1620:                                   ; preds = %while.cond1611
  br label %do.body1621

do.body1621:                                      ; preds = %while.body1620
  %827 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer1623 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %827, i32 0, i32 0
  %828 = load i8*, i8** %buffer1623, align 8
  store i8* %828, i8** %old_buffer1622, align 8
  %829 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated1624 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %829, i32 0, i32 1
  %830 = load i64, i64* %allocated1624, align 8
  %cmp1625 = icmp eq i64 %830, 65536
  br i1 %cmp1625, label %if.then1627, label %if.end1628

if.then1627:                                      ; preds = %do.body1621
  store i32 15, i32* %retval, align 4
  br label %return

if.end1628:                                       ; preds = %do.body1621
  %831 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated1629 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %831, i32 0, i32 1
  %832 = load i64, i64* %allocated1629, align 8
  %shl1630 = shl i64 %832, 1
  store i64 %shl1630, i64* %allocated1629, align 8
  %833 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated1631 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %833, i32 0, i32 1
  %834 = load i64, i64* %allocated1631, align 8
  %cmp1632 = icmp ugt i64 %834, 65536
  br i1 %cmp1632, label %if.then1634, label %if.end1636

if.then1634:                                      ; preds = %if.end1628
  %835 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated1635 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %835, i32 0, i32 1
  store i64 65536, i64* %allocated1635, align 8
  br label %if.end1636

if.end1636:                                       ; preds = %if.then1634, %if.end1628
  %836 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer1637 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %836, i32 0, i32 0
  %837 = load i8*, i8** %buffer1637, align 8
  %838 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated1638 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %838, i32 0, i32 1
  %839 = load i64, i64* %allocated1638, align 8
  %call1639 = call align 16 i8* @realloc(i8* %837, i64 %839) #9
  %840 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer1640 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %840, i32 0, i32 0
  store i8* %call1639, i8** %buffer1640, align 8
  %841 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer1641 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %841, i32 0, i32 0
  %842 = load i8*, i8** %buffer1641, align 8
  %cmp1642 = icmp eq i8* %842, null
  br i1 %cmp1642, label %if.then1644, label %if.end1645

if.then1644:                                      ; preds = %if.end1636
  store i32 12, i32* %retval, align 4
  br label %return

if.end1645:                                       ; preds = %if.end1636
  %843 = load i8*, i8** %old_buffer1622, align 8
  %844 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer1646 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %844, i32 0, i32 0
  %845 = load i8*, i8** %buffer1646, align 8
  %cmp1647 = icmp ne i8* %843, %845
  br i1 %cmp1647, label %if.then1649, label %if.end1684

if.then1649:                                      ; preds = %if.end1645
  %846 = load i8*, i8** %b, align 8
  %847 = load i8*, i8** %old_buffer1622, align 8
  %sub.ptr.lhs.cast1650 = ptrtoint i8* %846 to i64
  %sub.ptr.rhs.cast1651 = ptrtoint i8* %847 to i64
  %sub.ptr.sub1652 = sub i64 %sub.ptr.lhs.cast1650, %sub.ptr.rhs.cast1651
  %848 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer1653 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %848, i32 0, i32 0
  %849 = load i8*, i8** %buffer1653, align 8
  %add.ptr1654 = getelementptr inbounds i8, i8* %849, i64 %sub.ptr.sub1652
  store i8* %add.ptr1654, i8** %b, align 8
  %850 = load i8*, i8** %begalt, align 8
  %851 = load i8*, i8** %old_buffer1622, align 8
  %sub.ptr.lhs.cast1655 = ptrtoint i8* %850 to i64
  %sub.ptr.rhs.cast1656 = ptrtoint i8* %851 to i64
  %sub.ptr.sub1657 = sub i64 %sub.ptr.lhs.cast1655, %sub.ptr.rhs.cast1656
  %852 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer1658 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %852, i32 0, i32 0
  %853 = load i8*, i8** %buffer1658, align 8
  %add.ptr1659 = getelementptr inbounds i8, i8* %853, i64 %sub.ptr.sub1657
  store i8* %add.ptr1659, i8** %begalt, align 8
  %854 = load i8*, i8** %fixup_alt_jump, align 8
  %tobool1660 = icmp ne i8* %854, null
  br i1 %tobool1660, label %if.then1661, label %if.end1667

if.then1661:                                      ; preds = %if.then1649
  %855 = load i8*, i8** %fixup_alt_jump, align 8
  %856 = load i8*, i8** %old_buffer1622, align 8
  %sub.ptr.lhs.cast1662 = ptrtoint i8* %855 to i64
  %sub.ptr.rhs.cast1663 = ptrtoint i8* %856 to i64
  %sub.ptr.sub1664 = sub i64 %sub.ptr.lhs.cast1662, %sub.ptr.rhs.cast1663
  %857 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer1665 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %857, i32 0, i32 0
  %858 = load i8*, i8** %buffer1665, align 8
  %add.ptr1666 = getelementptr inbounds i8, i8* %858, i64 %sub.ptr.sub1664
  store i8* %add.ptr1666, i8** %fixup_alt_jump, align 8
  br label %if.end1667

if.end1667:                                       ; preds = %if.then1661, %if.then1649
  %859 = load i8*, i8** %laststart, align 8
  %tobool1668 = icmp ne i8* %859, null
  br i1 %tobool1668, label %if.then1669, label %if.end1675

if.then1669:                                      ; preds = %if.end1667
  %860 = load i8*, i8** %laststart, align 8
  %861 = load i8*, i8** %old_buffer1622, align 8
  %sub.ptr.lhs.cast1670 = ptrtoint i8* %860 to i64
  %sub.ptr.rhs.cast1671 = ptrtoint i8* %861 to i64
  %sub.ptr.sub1672 = sub i64 %sub.ptr.lhs.cast1670, %sub.ptr.rhs.cast1671
  %862 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer1673 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %862, i32 0, i32 0
  %863 = load i8*, i8** %buffer1673, align 8
  %add.ptr1674 = getelementptr inbounds i8, i8* %863, i64 %sub.ptr.sub1672
  store i8* %add.ptr1674, i8** %laststart, align 8
  br label %if.end1675

if.end1675:                                       ; preds = %if.then1669, %if.end1667
  %864 = load i8*, i8** %pending_exact, align 8
  %tobool1676 = icmp ne i8* %864, null
  br i1 %tobool1676, label %if.then1677, label %if.end1683

if.then1677:                                      ; preds = %if.end1675
  %865 = load i8*, i8** %pending_exact, align 8
  %866 = load i8*, i8** %old_buffer1622, align 8
  %sub.ptr.lhs.cast1678 = ptrtoint i8* %865 to i64
  %sub.ptr.rhs.cast1679 = ptrtoint i8* %866 to i64
  %sub.ptr.sub1680 = sub i64 %sub.ptr.lhs.cast1678, %sub.ptr.rhs.cast1679
  %867 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer1681 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %867, i32 0, i32 0
  %868 = load i8*, i8** %buffer1681, align 8
  %add.ptr1682 = getelementptr inbounds i8, i8* %868, i64 %sub.ptr.sub1680
  store i8* %add.ptr1682, i8** %pending_exact, align 8
  br label %if.end1683

if.end1683:                                       ; preds = %if.then1677, %if.end1675
  br label %if.end1684

if.end1684:                                       ; preds = %if.end1683, %if.end1645
  br label %do.end1685

do.end1685:                                       ; preds = %if.end1684
  br label %while.cond1611, !llvm.loop !70

while.end1686:                                    ; preds = %while.cond1611
  %869 = load i8*, i8** %b, align 8
  %incdec.ptr1687 = getelementptr inbounds i8, i8* %869, i32 1
  store i8* %incdec.ptr1687, i8** %b, align 8
  store i8 5, i8* %869, align 1
  %870 = load i32, i32* %regnum, align 4
  %conv1688 = trunc i32 %870 to i8
  %871 = load i8*, i8** %b, align 8
  %incdec.ptr1689 = getelementptr inbounds i8, i8* %871, i32 1
  store i8* %incdec.ptr1689, i8** %b, align 8
  store i8 %conv1688, i8* %871, align 1
  %872 = load i8*, i8** %b, align 8
  %incdec.ptr1690 = getelementptr inbounds i8, i8* %872, i32 1
  store i8* %incdec.ptr1690, i8** %b, align 8
  store i8 0, i8* %872, align 1
  br label %do.end1691

do.end1691:                                       ; preds = %while.end1686
  br label %if.end1692

if.end1692:                                       ; preds = %do.end1691, %cond.end1575
  %avail1693 = getelementptr inbounds %struct.compile_stack_type, %struct.compile_stack_type* %compile_stack, i32 0, i32 2
  %873 = load i32, i32* %avail1693, align 4
  %inc1694 = add i32 %873, 1
  store i32 %inc1694, i32* %avail1693, align 4
  store i8* null, i8** %fixup_alt_jump, align 8
  store i8* null, i8** %laststart, align 8
  %874 = load i8*, i8** %b, align 8
  store i8* %874, i8** %begalt, align 8
  store i8* null, i8** %pending_exact, align 8
  br label %sw.epilog

sw.bb1695:                                        ; preds = %do.end1529
  %875 = load i32, i32* %syntax.addr, align 4
  %and1696 = and i32 %875, 8192
  %tobool1697 = icmp ne i32 %and1696, 0
  br i1 %tobool1697, label %if.then1698, label %if.end1699

if.then1698:                                      ; preds = %sw.bb1695
  br label %normal_backslash

if.end1699:                                       ; preds = %sw.bb1695
  %avail1700 = getelementptr inbounds %struct.compile_stack_type, %struct.compile_stack_type* %compile_stack, i32 0, i32 2
  %876 = load i32, i32* %avail1700, align 4
  %cmp1701 = icmp eq i32 %876, 0
  br i1 %cmp1701, label %if.then1703, label %if.end1708

if.then1703:                                      ; preds = %if.end1699
  %877 = load i32, i32* %syntax.addr, align 4
  %and1704 = and i32 %877, 131072
  %tobool1705 = icmp ne i32 %and1704, 0
  br i1 %tobool1705, label %if.then1706, label %if.else1707

if.then1706:                                      ; preds = %if.then1703
  br label %normal_backslash

if.else1707:                                      ; preds = %if.then1703
  store i32 16, i32* %retval, align 4
  br label %return

if.end1708:                                       ; preds = %if.end1699
  br label %handle_close

handle_close:                                     ; preds = %if.end1708, %if.then1498
  %878 = load i8*, i8** %fixup_alt_jump, align 8
  %tobool1709 = icmp ne i8* %878, null
  br i1 %tobool1709, label %if.then1710, label %if.end1795

if.then1710:                                      ; preds = %handle_close
  br label %do.body1711

do.body1711:                                      ; preds = %if.then1710
  br label %while.cond1712

while.cond1712:                                   ; preds = %do.end1786, %do.body1711
  %879 = load i8*, i8** %b, align 8
  %880 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer1713 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %880, i32 0, i32 0
  %881 = load i8*, i8** %buffer1713, align 8
  %sub.ptr.lhs.cast1714 = ptrtoint i8* %879 to i64
  %sub.ptr.rhs.cast1715 = ptrtoint i8* %881 to i64
  %sub.ptr.sub1716 = sub i64 %sub.ptr.lhs.cast1714, %sub.ptr.rhs.cast1715
  %add1717 = add nsw i64 %sub.ptr.sub1716, 1
  %882 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated1718 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %882, i32 0, i32 1
  %883 = load i64, i64* %allocated1718, align 8
  %cmp1719 = icmp ugt i64 %add1717, %883
  br i1 %cmp1719, label %while.body1721, label %while.end1787

while.body1721:                                   ; preds = %while.cond1712
  br label %do.body1722

do.body1722:                                      ; preds = %while.body1721
  %884 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer1724 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %884, i32 0, i32 0
  %885 = load i8*, i8** %buffer1724, align 8
  store i8* %885, i8** %old_buffer1723, align 8
  %886 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated1725 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %886, i32 0, i32 1
  %887 = load i64, i64* %allocated1725, align 8
  %cmp1726 = icmp eq i64 %887, 65536
  br i1 %cmp1726, label %if.then1728, label %if.end1729

if.then1728:                                      ; preds = %do.body1722
  store i32 15, i32* %retval, align 4
  br label %return

if.end1729:                                       ; preds = %do.body1722
  %888 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated1730 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %888, i32 0, i32 1
  %889 = load i64, i64* %allocated1730, align 8
  %shl1731 = shl i64 %889, 1
  store i64 %shl1731, i64* %allocated1730, align 8
  %890 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated1732 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %890, i32 0, i32 1
  %891 = load i64, i64* %allocated1732, align 8
  %cmp1733 = icmp ugt i64 %891, 65536
  br i1 %cmp1733, label %if.then1735, label %if.end1737

if.then1735:                                      ; preds = %if.end1729
  %892 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated1736 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %892, i32 0, i32 1
  store i64 65536, i64* %allocated1736, align 8
  br label %if.end1737

if.end1737:                                       ; preds = %if.then1735, %if.end1729
  %893 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer1738 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %893, i32 0, i32 0
  %894 = load i8*, i8** %buffer1738, align 8
  %895 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated1739 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %895, i32 0, i32 1
  %896 = load i64, i64* %allocated1739, align 8
  %call1740 = call align 16 i8* @realloc(i8* %894, i64 %896) #9
  %897 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer1741 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %897, i32 0, i32 0
  store i8* %call1740, i8** %buffer1741, align 8
  %898 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer1742 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %898, i32 0, i32 0
  %899 = load i8*, i8** %buffer1742, align 8
  %cmp1743 = icmp eq i8* %899, null
  br i1 %cmp1743, label %if.then1745, label %if.end1746

if.then1745:                                      ; preds = %if.end1737
  store i32 12, i32* %retval, align 4
  br label %return

if.end1746:                                       ; preds = %if.end1737
  %900 = load i8*, i8** %old_buffer1723, align 8
  %901 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer1747 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %901, i32 0, i32 0
  %902 = load i8*, i8** %buffer1747, align 8
  %cmp1748 = icmp ne i8* %900, %902
  br i1 %cmp1748, label %if.then1750, label %if.end1785

if.then1750:                                      ; preds = %if.end1746
  %903 = load i8*, i8** %b, align 8
  %904 = load i8*, i8** %old_buffer1723, align 8
  %sub.ptr.lhs.cast1751 = ptrtoint i8* %903 to i64
  %sub.ptr.rhs.cast1752 = ptrtoint i8* %904 to i64
  %sub.ptr.sub1753 = sub i64 %sub.ptr.lhs.cast1751, %sub.ptr.rhs.cast1752
  %905 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer1754 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %905, i32 0, i32 0
  %906 = load i8*, i8** %buffer1754, align 8
  %add.ptr1755 = getelementptr inbounds i8, i8* %906, i64 %sub.ptr.sub1753
  store i8* %add.ptr1755, i8** %b, align 8
  %907 = load i8*, i8** %begalt, align 8
  %908 = load i8*, i8** %old_buffer1723, align 8
  %sub.ptr.lhs.cast1756 = ptrtoint i8* %907 to i64
  %sub.ptr.rhs.cast1757 = ptrtoint i8* %908 to i64
  %sub.ptr.sub1758 = sub i64 %sub.ptr.lhs.cast1756, %sub.ptr.rhs.cast1757
  %909 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer1759 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %909, i32 0, i32 0
  %910 = load i8*, i8** %buffer1759, align 8
  %add.ptr1760 = getelementptr inbounds i8, i8* %910, i64 %sub.ptr.sub1758
  store i8* %add.ptr1760, i8** %begalt, align 8
  %911 = load i8*, i8** %fixup_alt_jump, align 8
  %tobool1761 = icmp ne i8* %911, null
  br i1 %tobool1761, label %if.then1762, label %if.end1768

if.then1762:                                      ; preds = %if.then1750
  %912 = load i8*, i8** %fixup_alt_jump, align 8
  %913 = load i8*, i8** %old_buffer1723, align 8
  %sub.ptr.lhs.cast1763 = ptrtoint i8* %912 to i64
  %sub.ptr.rhs.cast1764 = ptrtoint i8* %913 to i64
  %sub.ptr.sub1765 = sub i64 %sub.ptr.lhs.cast1763, %sub.ptr.rhs.cast1764
  %914 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer1766 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %914, i32 0, i32 0
  %915 = load i8*, i8** %buffer1766, align 8
  %add.ptr1767 = getelementptr inbounds i8, i8* %915, i64 %sub.ptr.sub1765
  store i8* %add.ptr1767, i8** %fixup_alt_jump, align 8
  br label %if.end1768

if.end1768:                                       ; preds = %if.then1762, %if.then1750
  %916 = load i8*, i8** %laststart, align 8
  %tobool1769 = icmp ne i8* %916, null
  br i1 %tobool1769, label %if.then1770, label %if.end1776

if.then1770:                                      ; preds = %if.end1768
  %917 = load i8*, i8** %laststart, align 8
  %918 = load i8*, i8** %old_buffer1723, align 8
  %sub.ptr.lhs.cast1771 = ptrtoint i8* %917 to i64
  %sub.ptr.rhs.cast1772 = ptrtoint i8* %918 to i64
  %sub.ptr.sub1773 = sub i64 %sub.ptr.lhs.cast1771, %sub.ptr.rhs.cast1772
  %919 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer1774 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %919, i32 0, i32 0
  %920 = load i8*, i8** %buffer1774, align 8
  %add.ptr1775 = getelementptr inbounds i8, i8* %920, i64 %sub.ptr.sub1773
  store i8* %add.ptr1775, i8** %laststart, align 8
  br label %if.end1776

if.end1776:                                       ; preds = %if.then1770, %if.end1768
  %921 = load i8*, i8** %pending_exact, align 8
  %tobool1777 = icmp ne i8* %921, null
  br i1 %tobool1777, label %if.then1778, label %if.end1784

if.then1778:                                      ; preds = %if.end1776
  %922 = load i8*, i8** %pending_exact, align 8
  %923 = load i8*, i8** %old_buffer1723, align 8
  %sub.ptr.lhs.cast1779 = ptrtoint i8* %922 to i64
  %sub.ptr.rhs.cast1780 = ptrtoint i8* %923 to i64
  %sub.ptr.sub1781 = sub i64 %sub.ptr.lhs.cast1779, %sub.ptr.rhs.cast1780
  %924 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer1782 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %924, i32 0, i32 0
  %925 = load i8*, i8** %buffer1782, align 8
  %add.ptr1783 = getelementptr inbounds i8, i8* %925, i64 %sub.ptr.sub1781
  store i8* %add.ptr1783, i8** %pending_exact, align 8
  br label %if.end1784

if.end1784:                                       ; preds = %if.then1778, %if.end1776
  br label %if.end1785

if.end1785:                                       ; preds = %if.end1784, %if.end1746
  br label %do.end1786

do.end1786:                                       ; preds = %if.end1785
  br label %while.cond1712, !llvm.loop !71

while.end1787:                                    ; preds = %while.cond1712
  %926 = load i8*, i8** %b, align 8
  %incdec.ptr1788 = getelementptr inbounds i8, i8* %926, i32 1
  store i8* %incdec.ptr1788, i8** %b, align 8
  store i8 19, i8* %926, align 1
  br label %do.end1789

do.end1789:                                       ; preds = %while.end1787
  %927 = load i8*, i8** %fixup_alt_jump, align 8
  %928 = load i8*, i8** %b, align 8
  %add.ptr1790 = getelementptr inbounds i8, i8* %928, i64 -1
  %929 = load i8*, i8** %fixup_alt_jump, align 8
  %sub.ptr.lhs.cast1791 = ptrtoint i8* %add.ptr1790 to i64
  %sub.ptr.rhs.cast1792 = ptrtoint i8* %929 to i64
  %sub.ptr.sub1793 = sub i64 %sub.ptr.lhs.cast1791, %sub.ptr.rhs.cast1792
  %sub1794 = sub nsw i64 %sub.ptr.sub1793, 3
  call void (i32, i8*, i64, ...) bitcast (void (i32, i8*, i32)* @store_op1 to void (i32, i8*, i64, ...)*)(i32 13, i8* %927, i64 %sub1794)
  br label %if.end1795

if.end1795:                                       ; preds = %do.end1789, %handle_close
  %avail1796 = getelementptr inbounds %struct.compile_stack_type, %struct.compile_stack_type* %compile_stack, i32 0, i32 2
  %930 = load i32, i32* %avail1796, align 4
  %cmp1797 = icmp eq i32 %930, 0
  br i1 %cmp1797, label %if.then1799, label %if.end1804

if.then1799:                                      ; preds = %if.end1795
  %931 = load i32, i32* %syntax.addr, align 4
  %and1800 = and i32 %931, 131072
  %tobool1801 = icmp ne i32 %and1800, 0
  br i1 %tobool1801, label %if.then1802, label %if.else1803

if.then1802:                                      ; preds = %if.then1799
  br label %normal_char

if.else1803:                                      ; preds = %if.then1799
  store i32 16, i32* %retval, align 4
  br label %return

if.end1804:                                       ; preds = %if.end1795
  %avail1805 = getelementptr inbounds %struct.compile_stack_type, %struct.compile_stack_type* %compile_stack, i32 0, i32 2
  %932 = load i32, i32* %avail1805, align 4
  %dec1806 = add i32 %932, -1
  store i32 %dec1806, i32* %avail1805, align 4
  %933 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer1807 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %933, i32 0, i32 0
  %934 = load i8*, i8** %buffer1807, align 8
  %stack1808 = getelementptr inbounds %struct.compile_stack_type, %struct.compile_stack_type* %compile_stack, i32 0, i32 0
  %935 = load %struct.compile_stack_elt_t*, %struct.compile_stack_elt_t** %stack1808, align 8
  %avail1809 = getelementptr inbounds %struct.compile_stack_type, %struct.compile_stack_type* %compile_stack, i32 0, i32 2
  %936 = load i32, i32* %avail1809, align 4
  %idxprom1810 = zext i32 %936 to i64
  %arrayidx1811 = getelementptr inbounds %struct.compile_stack_elt_t, %struct.compile_stack_elt_t* %935, i64 %idxprom1810
  %begalt_offset1812 = getelementptr inbounds %struct.compile_stack_elt_t, %struct.compile_stack_elt_t* %arrayidx1811, i32 0, i32 0
  %937 = load i32, i32* %begalt_offset1812, align 4
  %idx.ext1813 = sext i32 %937 to i64
  %add.ptr1814 = getelementptr inbounds i8, i8* %934, i64 %idx.ext1813
  store i8* %add.ptr1814, i8** %begalt, align 8
  %stack1815 = getelementptr inbounds %struct.compile_stack_type, %struct.compile_stack_type* %compile_stack, i32 0, i32 0
  %938 = load %struct.compile_stack_elt_t*, %struct.compile_stack_elt_t** %stack1815, align 8
  %avail1816 = getelementptr inbounds %struct.compile_stack_type, %struct.compile_stack_type* %compile_stack, i32 0, i32 2
  %939 = load i32, i32* %avail1816, align 4
  %idxprom1817 = zext i32 %939 to i64
  %arrayidx1818 = getelementptr inbounds %struct.compile_stack_elt_t, %struct.compile_stack_elt_t* %938, i64 %idxprom1817
  %fixup_alt_jump1819 = getelementptr inbounds %struct.compile_stack_elt_t, %struct.compile_stack_elt_t* %arrayidx1818, i32 0, i32 1
  %940 = load i32, i32* %fixup_alt_jump1819, align 4
  %tobool1820 = icmp ne i32 %940, 0
  br i1 %tobool1820, label %cond.true1821, label %cond.false1831

cond.true1821:                                    ; preds = %if.end1804
  %941 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer1822 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %941, i32 0, i32 0
  %942 = load i8*, i8** %buffer1822, align 8
  %stack1823 = getelementptr inbounds %struct.compile_stack_type, %struct.compile_stack_type* %compile_stack, i32 0, i32 0
  %943 = load %struct.compile_stack_elt_t*, %struct.compile_stack_elt_t** %stack1823, align 8
  %avail1824 = getelementptr inbounds %struct.compile_stack_type, %struct.compile_stack_type* %compile_stack, i32 0, i32 2
  %944 = load i32, i32* %avail1824, align 4
  %idxprom1825 = zext i32 %944 to i64
  %arrayidx1826 = getelementptr inbounds %struct.compile_stack_elt_t, %struct.compile_stack_elt_t* %943, i64 %idxprom1825
  %fixup_alt_jump1827 = getelementptr inbounds %struct.compile_stack_elt_t, %struct.compile_stack_elt_t* %arrayidx1826, i32 0, i32 1
  %945 = load i32, i32* %fixup_alt_jump1827, align 4
  %idx.ext1828 = sext i32 %945 to i64
  %add.ptr1829 = getelementptr inbounds i8, i8* %942, i64 %idx.ext1828
  %add.ptr1830 = getelementptr inbounds i8, i8* %add.ptr1829, i64 -1
  br label %cond.end1832

cond.false1831:                                   ; preds = %if.end1804
  br label %cond.end1832

cond.end1832:                                     ; preds = %cond.false1831, %cond.true1821
  %cond1833 = phi i8* [ %add.ptr1830, %cond.true1821 ], [ null, %cond.false1831 ]
  store i8* %cond1833, i8** %fixup_alt_jump, align 8
  %946 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer1834 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %946, i32 0, i32 0
  %947 = load i8*, i8** %buffer1834, align 8
  %stack1835 = getelementptr inbounds %struct.compile_stack_type, %struct.compile_stack_type* %compile_stack, i32 0, i32 0
  %948 = load %struct.compile_stack_elt_t*, %struct.compile_stack_elt_t** %stack1835, align 8
  %avail1836 = getelementptr inbounds %struct.compile_stack_type, %struct.compile_stack_type* %compile_stack, i32 0, i32 2
  %949 = load i32, i32* %avail1836, align 4
  %idxprom1837 = zext i32 %949 to i64
  %arrayidx1838 = getelementptr inbounds %struct.compile_stack_elt_t, %struct.compile_stack_elt_t* %948, i64 %idxprom1837
  %laststart_offset1839 = getelementptr inbounds %struct.compile_stack_elt_t, %struct.compile_stack_elt_t* %arrayidx1838, i32 0, i32 3
  %950 = load i32, i32* %laststart_offset1839, align 4
  %idx.ext1840 = sext i32 %950 to i64
  %add.ptr1841 = getelementptr inbounds i8, i8* %947, i64 %idx.ext1840
  store i8* %add.ptr1841, i8** %laststart, align 8
  %stack1842 = getelementptr inbounds %struct.compile_stack_type, %struct.compile_stack_type* %compile_stack, i32 0, i32 0
  %951 = load %struct.compile_stack_elt_t*, %struct.compile_stack_elt_t** %stack1842, align 8
  %avail1843 = getelementptr inbounds %struct.compile_stack_type, %struct.compile_stack_type* %compile_stack, i32 0, i32 2
  %952 = load i32, i32* %avail1843, align 4
  %idxprom1844 = zext i32 %952 to i64
  %arrayidx1845 = getelementptr inbounds %struct.compile_stack_elt_t, %struct.compile_stack_elt_t* %951, i64 %idxprom1844
  %regnum1846 = getelementptr inbounds %struct.compile_stack_elt_t, %struct.compile_stack_elt_t* %arrayidx1845, i32 0, i32 4
  %953 = load i32, i32* %regnum1846, align 4
  store i32 %953, i32* %this_group_regnum, align 4
  store i8* null, i8** %pending_exact, align 8
  %954 = load i32, i32* %this_group_regnum, align 4
  %cmp1847 = icmp ule i32 %954, 255
  br i1 %cmp1847, label %if.then1849, label %if.end1944

if.then1849:                                      ; preds = %cond.end1832
  %955 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer1850 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %955, i32 0, i32 0
  %956 = load i8*, i8** %buffer1850, align 8
  %stack1851 = getelementptr inbounds %struct.compile_stack_type, %struct.compile_stack_type* %compile_stack, i32 0, i32 0
  %957 = load %struct.compile_stack_elt_t*, %struct.compile_stack_elt_t** %stack1851, align 8
  %avail1852 = getelementptr inbounds %struct.compile_stack_type, %struct.compile_stack_type* %compile_stack, i32 0, i32 2
  %958 = load i32, i32* %avail1852, align 4
  %idxprom1853 = zext i32 %958 to i64
  %arrayidx1854 = getelementptr inbounds %struct.compile_stack_elt_t, %struct.compile_stack_elt_t* %957, i64 %idxprom1853
  %inner_group_offset1855 = getelementptr inbounds %struct.compile_stack_elt_t, %struct.compile_stack_elt_t* %arrayidx1854, i32 0, i32 2
  %959 = load i32, i32* %inner_group_offset1855, align 4
  %idx.ext1856 = sext i32 %959 to i64
  %add.ptr1857 = getelementptr inbounds i8, i8* %956, i64 %idx.ext1856
  store i8* %add.ptr1857, i8** %inner_group_loc, align 8
  %960 = load i32, i32* %regnum, align 4
  %961 = load i32, i32* %this_group_regnum, align 4
  %sub1858 = sub i32 %960, %961
  %conv1859 = trunc i32 %sub1858 to i8
  %962 = load i8*, i8** %inner_group_loc, align 8
  store i8 %conv1859, i8* %962, align 1
  br label %do.body1860

do.body1860:                                      ; preds = %if.then1849
  br label %while.cond1861

while.cond1861:                                   ; preds = %do.end1935, %do.body1860
  %963 = load i8*, i8** %b, align 8
  %964 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer1862 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %964, i32 0, i32 0
  %965 = load i8*, i8** %buffer1862, align 8
  %sub.ptr.lhs.cast1863 = ptrtoint i8* %963 to i64
  %sub.ptr.rhs.cast1864 = ptrtoint i8* %965 to i64
  %sub.ptr.sub1865 = sub i64 %sub.ptr.lhs.cast1863, %sub.ptr.rhs.cast1864
  %add1866 = add nsw i64 %sub.ptr.sub1865, 3
  %966 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated1867 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %966, i32 0, i32 1
  %967 = load i64, i64* %allocated1867, align 8
  %cmp1868 = icmp ugt i64 %add1866, %967
  br i1 %cmp1868, label %while.body1870, label %while.end1936

while.body1870:                                   ; preds = %while.cond1861
  br label %do.body1871

do.body1871:                                      ; preds = %while.body1870
  %968 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer1873 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %968, i32 0, i32 0
  %969 = load i8*, i8** %buffer1873, align 8
  store i8* %969, i8** %old_buffer1872, align 8
  %970 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated1874 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %970, i32 0, i32 1
  %971 = load i64, i64* %allocated1874, align 8
  %cmp1875 = icmp eq i64 %971, 65536
  br i1 %cmp1875, label %if.then1877, label %if.end1878

if.then1877:                                      ; preds = %do.body1871
  store i32 15, i32* %retval, align 4
  br label %return

if.end1878:                                       ; preds = %do.body1871
  %972 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated1879 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %972, i32 0, i32 1
  %973 = load i64, i64* %allocated1879, align 8
  %shl1880 = shl i64 %973, 1
  store i64 %shl1880, i64* %allocated1879, align 8
  %974 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated1881 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %974, i32 0, i32 1
  %975 = load i64, i64* %allocated1881, align 8
  %cmp1882 = icmp ugt i64 %975, 65536
  br i1 %cmp1882, label %if.then1884, label %if.end1886

if.then1884:                                      ; preds = %if.end1878
  %976 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated1885 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %976, i32 0, i32 1
  store i64 65536, i64* %allocated1885, align 8
  br label %if.end1886

if.end1886:                                       ; preds = %if.then1884, %if.end1878
  %977 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer1887 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %977, i32 0, i32 0
  %978 = load i8*, i8** %buffer1887, align 8
  %979 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated1888 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %979, i32 0, i32 1
  %980 = load i64, i64* %allocated1888, align 8
  %call1889 = call align 16 i8* @realloc(i8* %978, i64 %980) #9
  %981 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer1890 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %981, i32 0, i32 0
  store i8* %call1889, i8** %buffer1890, align 8
  %982 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer1891 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %982, i32 0, i32 0
  %983 = load i8*, i8** %buffer1891, align 8
  %cmp1892 = icmp eq i8* %983, null
  br i1 %cmp1892, label %if.then1894, label %if.end1895

if.then1894:                                      ; preds = %if.end1886
  store i32 12, i32* %retval, align 4
  br label %return

if.end1895:                                       ; preds = %if.end1886
  %984 = load i8*, i8** %old_buffer1872, align 8
  %985 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer1896 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %985, i32 0, i32 0
  %986 = load i8*, i8** %buffer1896, align 8
  %cmp1897 = icmp ne i8* %984, %986
  br i1 %cmp1897, label %if.then1899, label %if.end1934

if.then1899:                                      ; preds = %if.end1895
  %987 = load i8*, i8** %b, align 8
  %988 = load i8*, i8** %old_buffer1872, align 8
  %sub.ptr.lhs.cast1900 = ptrtoint i8* %987 to i64
  %sub.ptr.rhs.cast1901 = ptrtoint i8* %988 to i64
  %sub.ptr.sub1902 = sub i64 %sub.ptr.lhs.cast1900, %sub.ptr.rhs.cast1901
  %989 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer1903 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %989, i32 0, i32 0
  %990 = load i8*, i8** %buffer1903, align 8
  %add.ptr1904 = getelementptr inbounds i8, i8* %990, i64 %sub.ptr.sub1902
  store i8* %add.ptr1904, i8** %b, align 8
  %991 = load i8*, i8** %begalt, align 8
  %992 = load i8*, i8** %old_buffer1872, align 8
  %sub.ptr.lhs.cast1905 = ptrtoint i8* %991 to i64
  %sub.ptr.rhs.cast1906 = ptrtoint i8* %992 to i64
  %sub.ptr.sub1907 = sub i64 %sub.ptr.lhs.cast1905, %sub.ptr.rhs.cast1906
  %993 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer1908 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %993, i32 0, i32 0
  %994 = load i8*, i8** %buffer1908, align 8
  %add.ptr1909 = getelementptr inbounds i8, i8* %994, i64 %sub.ptr.sub1907
  store i8* %add.ptr1909, i8** %begalt, align 8
  %995 = load i8*, i8** %fixup_alt_jump, align 8
  %tobool1910 = icmp ne i8* %995, null
  br i1 %tobool1910, label %if.then1911, label %if.end1917

if.then1911:                                      ; preds = %if.then1899
  %996 = load i8*, i8** %fixup_alt_jump, align 8
  %997 = load i8*, i8** %old_buffer1872, align 8
  %sub.ptr.lhs.cast1912 = ptrtoint i8* %996 to i64
  %sub.ptr.rhs.cast1913 = ptrtoint i8* %997 to i64
  %sub.ptr.sub1914 = sub i64 %sub.ptr.lhs.cast1912, %sub.ptr.rhs.cast1913
  %998 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer1915 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %998, i32 0, i32 0
  %999 = load i8*, i8** %buffer1915, align 8
  %add.ptr1916 = getelementptr inbounds i8, i8* %999, i64 %sub.ptr.sub1914
  store i8* %add.ptr1916, i8** %fixup_alt_jump, align 8
  br label %if.end1917

if.end1917:                                       ; preds = %if.then1911, %if.then1899
  %1000 = load i8*, i8** %laststart, align 8
  %tobool1918 = icmp ne i8* %1000, null
  br i1 %tobool1918, label %if.then1919, label %if.end1925

if.then1919:                                      ; preds = %if.end1917
  %1001 = load i8*, i8** %laststart, align 8
  %1002 = load i8*, i8** %old_buffer1872, align 8
  %sub.ptr.lhs.cast1920 = ptrtoint i8* %1001 to i64
  %sub.ptr.rhs.cast1921 = ptrtoint i8* %1002 to i64
  %sub.ptr.sub1922 = sub i64 %sub.ptr.lhs.cast1920, %sub.ptr.rhs.cast1921
  %1003 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer1923 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1003, i32 0, i32 0
  %1004 = load i8*, i8** %buffer1923, align 8
  %add.ptr1924 = getelementptr inbounds i8, i8* %1004, i64 %sub.ptr.sub1922
  store i8* %add.ptr1924, i8** %laststart, align 8
  br label %if.end1925

if.end1925:                                       ; preds = %if.then1919, %if.end1917
  %1005 = load i8*, i8** %pending_exact, align 8
  %tobool1926 = icmp ne i8* %1005, null
  br i1 %tobool1926, label %if.then1927, label %if.end1933

if.then1927:                                      ; preds = %if.end1925
  %1006 = load i8*, i8** %pending_exact, align 8
  %1007 = load i8*, i8** %old_buffer1872, align 8
  %sub.ptr.lhs.cast1928 = ptrtoint i8* %1006 to i64
  %sub.ptr.rhs.cast1929 = ptrtoint i8* %1007 to i64
  %sub.ptr.sub1930 = sub i64 %sub.ptr.lhs.cast1928, %sub.ptr.rhs.cast1929
  %1008 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer1931 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1008, i32 0, i32 0
  %1009 = load i8*, i8** %buffer1931, align 8
  %add.ptr1932 = getelementptr inbounds i8, i8* %1009, i64 %sub.ptr.sub1930
  store i8* %add.ptr1932, i8** %pending_exact, align 8
  br label %if.end1933

if.end1933:                                       ; preds = %if.then1927, %if.end1925
  br label %if.end1934

if.end1934:                                       ; preds = %if.end1933, %if.end1895
  br label %do.end1935

do.end1935:                                       ; preds = %if.end1934
  br label %while.cond1861, !llvm.loop !72

while.end1936:                                    ; preds = %while.cond1861
  %1010 = load i8*, i8** %b, align 8
  %incdec.ptr1937 = getelementptr inbounds i8, i8* %1010, i32 1
  store i8* %incdec.ptr1937, i8** %b, align 8
  store i8 6, i8* %1010, align 1
  %1011 = load i32, i32* %this_group_regnum, align 4
  %conv1938 = trunc i32 %1011 to i8
  %1012 = load i8*, i8** %b, align 8
  %incdec.ptr1939 = getelementptr inbounds i8, i8* %1012, i32 1
  store i8* %incdec.ptr1939, i8** %b, align 8
  store i8 %conv1938, i8* %1012, align 1
  %1013 = load i32, i32* %regnum, align 4
  %1014 = load i32, i32* %this_group_regnum, align 4
  %sub1940 = sub i32 %1013, %1014
  %conv1941 = trunc i32 %sub1940 to i8
  %1015 = load i8*, i8** %b, align 8
  %incdec.ptr1942 = getelementptr inbounds i8, i8* %1015, i32 1
  store i8* %incdec.ptr1942, i8** %b, align 8
  store i8 %conv1941, i8* %1015, align 1
  br label %do.end1943

do.end1943:                                       ; preds = %while.end1936
  br label %if.end1944

if.end1944:                                       ; preds = %do.end1943, %cond.end1832
  br label %sw.epilog

sw.bb1945:                                        ; preds = %do.end1529
  %1016 = load i32, i32* %syntax.addr, align 4
  %and1946 = and i32 %1016, 1024
  %tobool1947 = icmp ne i32 %and1946, 0
  br i1 %tobool1947, label %if.then1951, label %lor.lhs.false1948

lor.lhs.false1948:                                ; preds = %sw.bb1945
  %1017 = load i32, i32* %syntax.addr, align 4
  %and1949 = and i32 %1017, 32768
  %tobool1950 = icmp ne i32 %and1949, 0
  br i1 %tobool1950, label %if.then1951, label %if.end1952

if.then1951:                                      ; preds = %lor.lhs.false1948, %sw.bb1945
  br label %normal_backslash

if.end1952:                                       ; preds = %lor.lhs.false1948
  br label %handle_alt

handle_alt:                                       ; preds = %if.end1952, %if.then1508, %if.then1503
  %1018 = load i32, i32* %syntax.addr, align 4
  %and1953 = and i32 %1018, 1024
  %tobool1954 = icmp ne i32 %and1953, 0
  br i1 %tobool1954, label %if.then1955, label %if.end1956

if.then1955:                                      ; preds = %handle_alt
  br label %normal_char

if.end1956:                                       ; preds = %handle_alt
  br label %while.cond1957

while.cond1957:                                   ; preds = %do.end2031, %if.end1956
  %1019 = load i8*, i8** %b, align 8
  %1020 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer1958 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1020, i32 0, i32 0
  %1021 = load i8*, i8** %buffer1958, align 8
  %sub.ptr.lhs.cast1959 = ptrtoint i8* %1019 to i64
  %sub.ptr.rhs.cast1960 = ptrtoint i8* %1021 to i64
  %sub.ptr.sub1961 = sub i64 %sub.ptr.lhs.cast1959, %sub.ptr.rhs.cast1960
  %add1962 = add nsw i64 %sub.ptr.sub1961, 3
  %1022 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated1963 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1022, i32 0, i32 1
  %1023 = load i64, i64* %allocated1963, align 8
  %cmp1964 = icmp ugt i64 %add1962, %1023
  br i1 %cmp1964, label %while.body1966, label %while.end2032

while.body1966:                                   ; preds = %while.cond1957
  br label %do.body1967

do.body1967:                                      ; preds = %while.body1966
  %1024 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer1969 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1024, i32 0, i32 0
  %1025 = load i8*, i8** %buffer1969, align 8
  store i8* %1025, i8** %old_buffer1968, align 8
  %1026 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated1970 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1026, i32 0, i32 1
  %1027 = load i64, i64* %allocated1970, align 8
  %cmp1971 = icmp eq i64 %1027, 65536
  br i1 %cmp1971, label %if.then1973, label %if.end1974

if.then1973:                                      ; preds = %do.body1967
  store i32 15, i32* %retval, align 4
  br label %return

if.end1974:                                       ; preds = %do.body1967
  %1028 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated1975 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1028, i32 0, i32 1
  %1029 = load i64, i64* %allocated1975, align 8
  %shl1976 = shl i64 %1029, 1
  store i64 %shl1976, i64* %allocated1975, align 8
  %1030 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated1977 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1030, i32 0, i32 1
  %1031 = load i64, i64* %allocated1977, align 8
  %cmp1978 = icmp ugt i64 %1031, 65536
  br i1 %cmp1978, label %if.then1980, label %if.end1982

if.then1980:                                      ; preds = %if.end1974
  %1032 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated1981 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1032, i32 0, i32 1
  store i64 65536, i64* %allocated1981, align 8
  br label %if.end1982

if.end1982:                                       ; preds = %if.then1980, %if.end1974
  %1033 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer1983 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1033, i32 0, i32 0
  %1034 = load i8*, i8** %buffer1983, align 8
  %1035 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated1984 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1035, i32 0, i32 1
  %1036 = load i64, i64* %allocated1984, align 8
  %call1985 = call align 16 i8* @realloc(i8* %1034, i64 %1036) #9
  %1037 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer1986 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1037, i32 0, i32 0
  store i8* %call1985, i8** %buffer1986, align 8
  %1038 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer1987 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1038, i32 0, i32 0
  %1039 = load i8*, i8** %buffer1987, align 8
  %cmp1988 = icmp eq i8* %1039, null
  br i1 %cmp1988, label %if.then1990, label %if.end1991

if.then1990:                                      ; preds = %if.end1982
  store i32 12, i32* %retval, align 4
  br label %return

if.end1991:                                       ; preds = %if.end1982
  %1040 = load i8*, i8** %old_buffer1968, align 8
  %1041 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer1992 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1041, i32 0, i32 0
  %1042 = load i8*, i8** %buffer1992, align 8
  %cmp1993 = icmp ne i8* %1040, %1042
  br i1 %cmp1993, label %if.then1995, label %if.end2030

if.then1995:                                      ; preds = %if.end1991
  %1043 = load i8*, i8** %b, align 8
  %1044 = load i8*, i8** %old_buffer1968, align 8
  %sub.ptr.lhs.cast1996 = ptrtoint i8* %1043 to i64
  %sub.ptr.rhs.cast1997 = ptrtoint i8* %1044 to i64
  %sub.ptr.sub1998 = sub i64 %sub.ptr.lhs.cast1996, %sub.ptr.rhs.cast1997
  %1045 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer1999 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1045, i32 0, i32 0
  %1046 = load i8*, i8** %buffer1999, align 8
  %add.ptr2000 = getelementptr inbounds i8, i8* %1046, i64 %sub.ptr.sub1998
  store i8* %add.ptr2000, i8** %b, align 8
  %1047 = load i8*, i8** %begalt, align 8
  %1048 = load i8*, i8** %old_buffer1968, align 8
  %sub.ptr.lhs.cast2001 = ptrtoint i8* %1047 to i64
  %sub.ptr.rhs.cast2002 = ptrtoint i8* %1048 to i64
  %sub.ptr.sub2003 = sub i64 %sub.ptr.lhs.cast2001, %sub.ptr.rhs.cast2002
  %1049 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2004 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1049, i32 0, i32 0
  %1050 = load i8*, i8** %buffer2004, align 8
  %add.ptr2005 = getelementptr inbounds i8, i8* %1050, i64 %sub.ptr.sub2003
  store i8* %add.ptr2005, i8** %begalt, align 8
  %1051 = load i8*, i8** %fixup_alt_jump, align 8
  %tobool2006 = icmp ne i8* %1051, null
  br i1 %tobool2006, label %if.then2007, label %if.end2013

if.then2007:                                      ; preds = %if.then1995
  %1052 = load i8*, i8** %fixup_alt_jump, align 8
  %1053 = load i8*, i8** %old_buffer1968, align 8
  %sub.ptr.lhs.cast2008 = ptrtoint i8* %1052 to i64
  %sub.ptr.rhs.cast2009 = ptrtoint i8* %1053 to i64
  %sub.ptr.sub2010 = sub i64 %sub.ptr.lhs.cast2008, %sub.ptr.rhs.cast2009
  %1054 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2011 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1054, i32 0, i32 0
  %1055 = load i8*, i8** %buffer2011, align 8
  %add.ptr2012 = getelementptr inbounds i8, i8* %1055, i64 %sub.ptr.sub2010
  store i8* %add.ptr2012, i8** %fixup_alt_jump, align 8
  br label %if.end2013

if.end2013:                                       ; preds = %if.then2007, %if.then1995
  %1056 = load i8*, i8** %laststart, align 8
  %tobool2014 = icmp ne i8* %1056, null
  br i1 %tobool2014, label %if.then2015, label %if.end2021

if.then2015:                                      ; preds = %if.end2013
  %1057 = load i8*, i8** %laststart, align 8
  %1058 = load i8*, i8** %old_buffer1968, align 8
  %sub.ptr.lhs.cast2016 = ptrtoint i8* %1057 to i64
  %sub.ptr.rhs.cast2017 = ptrtoint i8* %1058 to i64
  %sub.ptr.sub2018 = sub i64 %sub.ptr.lhs.cast2016, %sub.ptr.rhs.cast2017
  %1059 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2019 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1059, i32 0, i32 0
  %1060 = load i8*, i8** %buffer2019, align 8
  %add.ptr2020 = getelementptr inbounds i8, i8* %1060, i64 %sub.ptr.sub2018
  store i8* %add.ptr2020, i8** %laststart, align 8
  br label %if.end2021

if.end2021:                                       ; preds = %if.then2015, %if.end2013
  %1061 = load i8*, i8** %pending_exact, align 8
  %tobool2022 = icmp ne i8* %1061, null
  br i1 %tobool2022, label %if.then2023, label %if.end2029

if.then2023:                                      ; preds = %if.end2021
  %1062 = load i8*, i8** %pending_exact, align 8
  %1063 = load i8*, i8** %old_buffer1968, align 8
  %sub.ptr.lhs.cast2024 = ptrtoint i8* %1062 to i64
  %sub.ptr.rhs.cast2025 = ptrtoint i8* %1063 to i64
  %sub.ptr.sub2026 = sub i64 %sub.ptr.lhs.cast2024, %sub.ptr.rhs.cast2025
  %1064 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2027 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1064, i32 0, i32 0
  %1065 = load i8*, i8** %buffer2027, align 8
  %add.ptr2028 = getelementptr inbounds i8, i8* %1065, i64 %sub.ptr.sub2026
  store i8* %add.ptr2028, i8** %pending_exact, align 8
  br label %if.end2029

if.end2029:                                       ; preds = %if.then2023, %if.end2021
  br label %if.end2030

if.end2030:                                       ; preds = %if.end2029, %if.end1991
  br label %do.end2031

do.end2031:                                       ; preds = %if.end2030
  br label %while.cond1957, !llvm.loop !73

while.end2032:                                    ; preds = %while.cond1957
  %1066 = load i8*, i8** %begalt, align 8
  %1067 = load i8*, i8** %b, align 8
  %add.ptr2033 = getelementptr inbounds i8, i8* %1067, i64 6
  %1068 = load i8*, i8** %begalt, align 8
  %sub.ptr.lhs.cast2034 = ptrtoint i8* %add.ptr2033 to i64
  %sub.ptr.rhs.cast2035 = ptrtoint i8* %1068 to i64
  %sub.ptr.sub2036 = sub i64 %sub.ptr.lhs.cast2034, %sub.ptr.rhs.cast2035
  %sub2037 = sub nsw i64 %sub.ptr.sub2036, 3
  %1069 = load i8*, i8** %b, align 8
  call void (i32, i8*, i64, i8*, ...) bitcast (void (i32, i8*, i32, i8*)* @insert_op1 to void (i32, i8*, i64, i8*, ...)*)(i32 14, i8* %1066, i64 %sub2037, i8* %1069)
  store i8* null, i8** %pending_exact, align 8
  %1070 = load i8*, i8** %b, align 8
  %add.ptr2038 = getelementptr inbounds i8, i8* %1070, i64 3
  store i8* %add.ptr2038, i8** %b, align 8
  %1071 = load i8*, i8** %fixup_alt_jump, align 8
  %tobool2039 = icmp ne i8* %1071, null
  br i1 %tobool2039, label %if.then2040, label %if.end2045

if.then2040:                                      ; preds = %while.end2032
  %1072 = load i8*, i8** %fixup_alt_jump, align 8
  %1073 = load i8*, i8** %b, align 8
  %1074 = load i8*, i8** %fixup_alt_jump, align 8
  %sub.ptr.lhs.cast2041 = ptrtoint i8* %1073 to i64
  %sub.ptr.rhs.cast2042 = ptrtoint i8* %1074 to i64
  %sub.ptr.sub2043 = sub i64 %sub.ptr.lhs.cast2041, %sub.ptr.rhs.cast2042
  %sub2044 = sub nsw i64 %sub.ptr.sub2043, 3
  call void (i32, i8*, i64, ...) bitcast (void (i32, i8*, i32)* @store_op1 to void (i32, i8*, i64, ...)*)(i32 13, i8* %1072, i64 %sub2044)
  br label %if.end2045

if.end2045:                                       ; preds = %if.then2040, %while.end2032
  %1075 = load i8*, i8** %b, align 8
  store i8* %1075, i8** %fixup_alt_jump, align 8
  br label %while.cond2046

while.cond2046:                                   ; preds = %do.end2120, %if.end2045
  %1076 = load i8*, i8** %b, align 8
  %1077 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2047 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1077, i32 0, i32 0
  %1078 = load i8*, i8** %buffer2047, align 8
  %sub.ptr.lhs.cast2048 = ptrtoint i8* %1076 to i64
  %sub.ptr.rhs.cast2049 = ptrtoint i8* %1078 to i64
  %sub.ptr.sub2050 = sub i64 %sub.ptr.lhs.cast2048, %sub.ptr.rhs.cast2049
  %add2051 = add nsw i64 %sub.ptr.sub2050, 3
  %1079 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated2052 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1079, i32 0, i32 1
  %1080 = load i64, i64* %allocated2052, align 8
  %cmp2053 = icmp ugt i64 %add2051, %1080
  br i1 %cmp2053, label %while.body2055, label %while.end2121

while.body2055:                                   ; preds = %while.cond2046
  br label %do.body2056

do.body2056:                                      ; preds = %while.body2055
  %1081 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2058 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1081, i32 0, i32 0
  %1082 = load i8*, i8** %buffer2058, align 8
  store i8* %1082, i8** %old_buffer2057, align 8
  %1083 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated2059 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1083, i32 0, i32 1
  %1084 = load i64, i64* %allocated2059, align 8
  %cmp2060 = icmp eq i64 %1084, 65536
  br i1 %cmp2060, label %if.then2062, label %if.end2063

if.then2062:                                      ; preds = %do.body2056
  store i32 15, i32* %retval, align 4
  br label %return

if.end2063:                                       ; preds = %do.body2056
  %1085 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated2064 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1085, i32 0, i32 1
  %1086 = load i64, i64* %allocated2064, align 8
  %shl2065 = shl i64 %1086, 1
  store i64 %shl2065, i64* %allocated2064, align 8
  %1087 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated2066 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1087, i32 0, i32 1
  %1088 = load i64, i64* %allocated2066, align 8
  %cmp2067 = icmp ugt i64 %1088, 65536
  br i1 %cmp2067, label %if.then2069, label %if.end2071

if.then2069:                                      ; preds = %if.end2063
  %1089 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated2070 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1089, i32 0, i32 1
  store i64 65536, i64* %allocated2070, align 8
  br label %if.end2071

if.end2071:                                       ; preds = %if.then2069, %if.end2063
  %1090 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2072 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1090, i32 0, i32 0
  %1091 = load i8*, i8** %buffer2072, align 8
  %1092 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated2073 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1092, i32 0, i32 1
  %1093 = load i64, i64* %allocated2073, align 8
  %call2074 = call align 16 i8* @realloc(i8* %1091, i64 %1093) #9
  %1094 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2075 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1094, i32 0, i32 0
  store i8* %call2074, i8** %buffer2075, align 8
  %1095 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2076 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1095, i32 0, i32 0
  %1096 = load i8*, i8** %buffer2076, align 8
  %cmp2077 = icmp eq i8* %1096, null
  br i1 %cmp2077, label %if.then2079, label %if.end2080

if.then2079:                                      ; preds = %if.end2071
  store i32 12, i32* %retval, align 4
  br label %return

if.end2080:                                       ; preds = %if.end2071
  %1097 = load i8*, i8** %old_buffer2057, align 8
  %1098 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2081 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1098, i32 0, i32 0
  %1099 = load i8*, i8** %buffer2081, align 8
  %cmp2082 = icmp ne i8* %1097, %1099
  br i1 %cmp2082, label %if.then2084, label %if.end2119

if.then2084:                                      ; preds = %if.end2080
  %1100 = load i8*, i8** %b, align 8
  %1101 = load i8*, i8** %old_buffer2057, align 8
  %sub.ptr.lhs.cast2085 = ptrtoint i8* %1100 to i64
  %sub.ptr.rhs.cast2086 = ptrtoint i8* %1101 to i64
  %sub.ptr.sub2087 = sub i64 %sub.ptr.lhs.cast2085, %sub.ptr.rhs.cast2086
  %1102 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2088 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1102, i32 0, i32 0
  %1103 = load i8*, i8** %buffer2088, align 8
  %add.ptr2089 = getelementptr inbounds i8, i8* %1103, i64 %sub.ptr.sub2087
  store i8* %add.ptr2089, i8** %b, align 8
  %1104 = load i8*, i8** %begalt, align 8
  %1105 = load i8*, i8** %old_buffer2057, align 8
  %sub.ptr.lhs.cast2090 = ptrtoint i8* %1104 to i64
  %sub.ptr.rhs.cast2091 = ptrtoint i8* %1105 to i64
  %sub.ptr.sub2092 = sub i64 %sub.ptr.lhs.cast2090, %sub.ptr.rhs.cast2091
  %1106 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2093 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1106, i32 0, i32 0
  %1107 = load i8*, i8** %buffer2093, align 8
  %add.ptr2094 = getelementptr inbounds i8, i8* %1107, i64 %sub.ptr.sub2092
  store i8* %add.ptr2094, i8** %begalt, align 8
  %1108 = load i8*, i8** %fixup_alt_jump, align 8
  %tobool2095 = icmp ne i8* %1108, null
  br i1 %tobool2095, label %if.then2096, label %if.end2102

if.then2096:                                      ; preds = %if.then2084
  %1109 = load i8*, i8** %fixup_alt_jump, align 8
  %1110 = load i8*, i8** %old_buffer2057, align 8
  %sub.ptr.lhs.cast2097 = ptrtoint i8* %1109 to i64
  %sub.ptr.rhs.cast2098 = ptrtoint i8* %1110 to i64
  %sub.ptr.sub2099 = sub i64 %sub.ptr.lhs.cast2097, %sub.ptr.rhs.cast2098
  %1111 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2100 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1111, i32 0, i32 0
  %1112 = load i8*, i8** %buffer2100, align 8
  %add.ptr2101 = getelementptr inbounds i8, i8* %1112, i64 %sub.ptr.sub2099
  store i8* %add.ptr2101, i8** %fixup_alt_jump, align 8
  br label %if.end2102

if.end2102:                                       ; preds = %if.then2096, %if.then2084
  %1113 = load i8*, i8** %laststart, align 8
  %tobool2103 = icmp ne i8* %1113, null
  br i1 %tobool2103, label %if.then2104, label %if.end2110

if.then2104:                                      ; preds = %if.end2102
  %1114 = load i8*, i8** %laststart, align 8
  %1115 = load i8*, i8** %old_buffer2057, align 8
  %sub.ptr.lhs.cast2105 = ptrtoint i8* %1114 to i64
  %sub.ptr.rhs.cast2106 = ptrtoint i8* %1115 to i64
  %sub.ptr.sub2107 = sub i64 %sub.ptr.lhs.cast2105, %sub.ptr.rhs.cast2106
  %1116 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2108 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1116, i32 0, i32 0
  %1117 = load i8*, i8** %buffer2108, align 8
  %add.ptr2109 = getelementptr inbounds i8, i8* %1117, i64 %sub.ptr.sub2107
  store i8* %add.ptr2109, i8** %laststart, align 8
  br label %if.end2110

if.end2110:                                       ; preds = %if.then2104, %if.end2102
  %1118 = load i8*, i8** %pending_exact, align 8
  %tobool2111 = icmp ne i8* %1118, null
  br i1 %tobool2111, label %if.then2112, label %if.end2118

if.then2112:                                      ; preds = %if.end2110
  %1119 = load i8*, i8** %pending_exact, align 8
  %1120 = load i8*, i8** %old_buffer2057, align 8
  %sub.ptr.lhs.cast2113 = ptrtoint i8* %1119 to i64
  %sub.ptr.rhs.cast2114 = ptrtoint i8* %1120 to i64
  %sub.ptr.sub2115 = sub i64 %sub.ptr.lhs.cast2113, %sub.ptr.rhs.cast2114
  %1121 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2116 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1121, i32 0, i32 0
  %1122 = load i8*, i8** %buffer2116, align 8
  %add.ptr2117 = getelementptr inbounds i8, i8* %1122, i64 %sub.ptr.sub2115
  store i8* %add.ptr2117, i8** %pending_exact, align 8
  br label %if.end2118

if.end2118:                                       ; preds = %if.then2112, %if.end2110
  br label %if.end2119

if.end2119:                                       ; preds = %if.end2118, %if.end2080
  br label %do.end2120

do.end2120:                                       ; preds = %if.end2119
  br label %while.cond2046, !llvm.loop !74

while.end2121:                                    ; preds = %while.cond2046
  %1123 = load i8*, i8** %b, align 8
  %add.ptr2122 = getelementptr inbounds i8, i8* %1123, i64 3
  store i8* %add.ptr2122, i8** %b, align 8
  store i8* null, i8** %laststart, align 8
  %1124 = load i8*, i8** %b, align 8
  store i8* %1124, i8** %begalt, align 8
  br label %sw.epilog

sw.bb2123:                                        ; preds = %do.end1529
  %1125 = load i32, i32* %syntax.addr, align 4
  %and2124 = and i32 %1125, 512
  %tobool2125 = icmp ne i32 %and2124, 0
  br i1 %tobool2125, label %lor.lhs.false2126, label %if.then2139

lor.lhs.false2126:                                ; preds = %sw.bb2123
  %1126 = load i32, i32* %syntax.addr, align 4
  %and2127 = and i32 %1126, 512
  %tobool2128 = icmp ne i32 %and2127, 0
  br i1 %tobool2128, label %land.lhs.true2129, label %lor.lhs.false2132

land.lhs.true2129:                                ; preds = %lor.lhs.false2126
  %1127 = load i32, i32* %syntax.addr, align 4
  %and2130 = and i32 %1127, 4096
  %tobool2131 = icmp ne i32 %and2130, 0
  br i1 %tobool2131, label %if.then2139, label %lor.lhs.false2132

lor.lhs.false2132:                                ; preds = %land.lhs.true2129, %lor.lhs.false2126
  %1128 = load i8*, i8** %p, align 8
  %add.ptr2133 = getelementptr inbounds i8, i8* %1128, i64 -2
  %1129 = load i8*, i8** %pattern.addr, align 8
  %cmp2134 = icmp eq i8* %add.ptr2133, %1129
  br i1 %cmp2134, label %land.lhs.true2136, label %if.end2140

land.lhs.true2136:                                ; preds = %lor.lhs.false2132
  %1130 = load i8*, i8** %p, align 8
  %1131 = load i8*, i8** %pend, align 8
  %cmp2137 = icmp eq i8* %1130, %1131
  br i1 %cmp2137, label %if.then2139, label %if.end2140

if.then2139:                                      ; preds = %land.lhs.true2136, %land.lhs.true2129, %sw.bb2123
  br label %normal_backslash

if.end2140:                                       ; preds = %land.lhs.true2136, %lor.lhs.false2132
  br label %handle_interval

handle_interval:                                  ; preds = %if.end2140, %if.then1516
  store i32 -1, i32* %lower_bound, align 4
  store i32 -1, i32* %upper_bound, align 4
  %1132 = load i8*, i8** %p, align 8
  %add.ptr2141 = getelementptr inbounds i8, i8* %1132, i64 -1
  store i8* %add.ptr2141, i8** %beg_interval, align 8
  %1133 = load i8*, i8** %p, align 8
  %1134 = load i8*, i8** %pend, align 8
  %cmp2142 = icmp eq i8* %1133, %1134
  br i1 %cmp2142, label %if.then2144, label %if.end2149

if.then2144:                                      ; preds = %handle_interval
  %1135 = load i32, i32* %syntax.addr, align 4
  %and2145 = and i32 %1135, 4096
  %tobool2146 = icmp ne i32 %and2145, 0
  br i1 %tobool2146, label %if.then2147, label %if.else2148

if.then2147:                                      ; preds = %if.then2144
  br label %unfetch_interval

if.else2148:                                      ; preds = %if.then2144
  store i32 9, i32* %retval, align 4
  br label %return

if.end2149:                                       ; preds = %handle_interval
  %1136 = load i8*, i8** %p, align 8
  %1137 = load i8*, i8** %pend, align 8
  %cmp2150 = icmp ne i8* %1136, %1137
  br i1 %cmp2150, label %if.then2152, label %if.end2199

if.then2152:                                      ; preds = %if.end2149
  br label %do.body2153

do.body2153:                                      ; preds = %if.then2152
  %1138 = load i8*, i8** %p, align 8
  %1139 = load i8*, i8** %pend, align 8
  %cmp2154 = icmp eq i8* %1138, %1139
  br i1 %cmp2154, label %if.then2156, label %if.end2157

if.then2156:                                      ; preds = %do.body2153
  store i32 14, i32* %retval, align 4
  br label %return

if.end2157:                                       ; preds = %do.body2153
  %1140 = load i8*, i8** %p, align 8
  %incdec.ptr2158 = getelementptr inbounds i8, i8* %1140, i32 1
  store i8* %incdec.ptr2158, i8** %p, align 8
  %1141 = load i8, i8* %1140, align 1
  store i8 %1141, i8* %c, align 1
  %1142 = load i8*, i8** %translate, align 8
  %tobool2159 = icmp ne i8* %1142, null
  br i1 %tobool2159, label %if.then2160, label %if.end2163

if.then2160:                                      ; preds = %if.end2157
  %1143 = load i8*, i8** %translate, align 8
  %1144 = load i8, i8* %c, align 1
  %idxprom2161 = zext i8 %1144 to i64
  %arrayidx2162 = getelementptr inbounds i8, i8* %1143, i64 %idxprom2161
  %1145 = load i8, i8* %arrayidx2162, align 1
  store i8 %1145, i8* %c, align 1
  br label %if.end2163

if.end2163:                                       ; preds = %if.then2160, %if.end2157
  br label %do.end2164

do.end2164:                                       ; preds = %if.end2163
  br label %while.cond2165

while.cond2165:                                   ; preds = %do.end2197, %do.end2164
  %call2166 = call i16** @__ctype_b_loc() #10
  %1146 = load i16*, i16** %call2166, align 8
  %1147 = load i8, i8* %c, align 1
  %conv2167 = zext i8 %1147 to i32
  %idxprom2168 = sext i32 %conv2167 to i64
  %arrayidx2169 = getelementptr inbounds i16, i16* %1146, i64 %idxprom2168
  %1148 = load i16, i16* %arrayidx2169, align 2
  %conv2170 = zext i16 %1148 to i32
  %and2171 = and i32 %conv2170, 2048
  %tobool2172 = icmp ne i32 %and2171, 0
  br i1 %tobool2172, label %while.body2173, label %while.end2198

while.body2173:                                   ; preds = %while.cond2165
  %1149 = load i32, i32* %lower_bound, align 4
  %cmp2174 = icmp slt i32 %1149, 0
  br i1 %cmp2174, label %if.then2176, label %if.end2177

if.then2176:                                      ; preds = %while.body2173
  store i32 0, i32* %lower_bound, align 4
  br label %if.end2177

if.end2177:                                       ; preds = %if.then2176, %while.body2173
  %1150 = load i32, i32* %lower_bound, align 4
  %mul2178 = mul nsw i32 %1150, 10
  %1151 = load i8, i8* %c, align 1
  %conv2179 = zext i8 %1151 to i32
  %add2180 = add nsw i32 %mul2178, %conv2179
  %sub2181 = sub nsw i32 %add2180, 48
  store i32 %sub2181, i32* %lower_bound, align 4
  %1152 = load i8*, i8** %p, align 8
  %1153 = load i8*, i8** %pend, align 8
  %cmp2182 = icmp eq i8* %1152, %1153
  br i1 %cmp2182, label %if.then2184, label %if.end2185

if.then2184:                                      ; preds = %if.end2177
  br label %while.end2198

if.end2185:                                       ; preds = %if.end2177
  br label %do.body2186

do.body2186:                                      ; preds = %if.end2185
  %1154 = load i8*, i8** %p, align 8
  %1155 = load i8*, i8** %pend, align 8
  %cmp2187 = icmp eq i8* %1154, %1155
  br i1 %cmp2187, label %if.then2189, label %if.end2190

if.then2189:                                      ; preds = %do.body2186
  store i32 14, i32* %retval, align 4
  br label %return

if.end2190:                                       ; preds = %do.body2186
  %1156 = load i8*, i8** %p, align 8
  %incdec.ptr2191 = getelementptr inbounds i8, i8* %1156, i32 1
  store i8* %incdec.ptr2191, i8** %p, align 8
  %1157 = load i8, i8* %1156, align 1
  store i8 %1157, i8* %c, align 1
  %1158 = load i8*, i8** %translate, align 8
  %tobool2192 = icmp ne i8* %1158, null
  br i1 %tobool2192, label %if.then2193, label %if.end2196

if.then2193:                                      ; preds = %if.end2190
  %1159 = load i8*, i8** %translate, align 8
  %1160 = load i8, i8* %c, align 1
  %idxprom2194 = zext i8 %1160 to i64
  %arrayidx2195 = getelementptr inbounds i8, i8* %1159, i64 %idxprom2194
  %1161 = load i8, i8* %arrayidx2195, align 1
  store i8 %1161, i8* %c, align 1
  br label %if.end2196

if.end2196:                                       ; preds = %if.then2193, %if.end2190
  br label %do.end2197

do.end2197:                                       ; preds = %if.end2196
  br label %while.cond2165, !llvm.loop !75

while.end2198:                                    ; preds = %if.then2184, %while.cond2165
  br label %if.end2199

if.end2199:                                       ; preds = %while.end2198, %if.end2149
  %1162 = load i8, i8* %c, align 1
  %conv2200 = zext i8 %1162 to i32
  %cmp2201 = icmp eq i32 %conv2200, 44
  br i1 %cmp2201, label %if.then2203, label %if.else2258

if.then2203:                                      ; preds = %if.end2199
  %1163 = load i8*, i8** %p, align 8
  %1164 = load i8*, i8** %pend, align 8
  %cmp2204 = icmp ne i8* %1163, %1164
  br i1 %cmp2204, label %if.then2206, label %if.end2253

if.then2206:                                      ; preds = %if.then2203
  br label %do.body2207

do.body2207:                                      ; preds = %if.then2206
  %1165 = load i8*, i8** %p, align 8
  %1166 = load i8*, i8** %pend, align 8
  %cmp2208 = icmp eq i8* %1165, %1166
  br i1 %cmp2208, label %if.then2210, label %if.end2211

if.then2210:                                      ; preds = %do.body2207
  store i32 14, i32* %retval, align 4
  br label %return

if.end2211:                                       ; preds = %do.body2207
  %1167 = load i8*, i8** %p, align 8
  %incdec.ptr2212 = getelementptr inbounds i8, i8* %1167, i32 1
  store i8* %incdec.ptr2212, i8** %p, align 8
  %1168 = load i8, i8* %1167, align 1
  store i8 %1168, i8* %c, align 1
  %1169 = load i8*, i8** %translate, align 8
  %tobool2213 = icmp ne i8* %1169, null
  br i1 %tobool2213, label %if.then2214, label %if.end2217

if.then2214:                                      ; preds = %if.end2211
  %1170 = load i8*, i8** %translate, align 8
  %1171 = load i8, i8* %c, align 1
  %idxprom2215 = zext i8 %1171 to i64
  %arrayidx2216 = getelementptr inbounds i8, i8* %1170, i64 %idxprom2215
  %1172 = load i8, i8* %arrayidx2216, align 1
  store i8 %1172, i8* %c, align 1
  br label %if.end2217

if.end2217:                                       ; preds = %if.then2214, %if.end2211
  br label %do.end2218

do.end2218:                                       ; preds = %if.end2217
  br label %while.cond2219

while.cond2219:                                   ; preds = %do.end2251, %do.end2218
  %call2220 = call i16** @__ctype_b_loc() #10
  %1173 = load i16*, i16** %call2220, align 8
  %1174 = load i8, i8* %c, align 1
  %conv2221 = zext i8 %1174 to i32
  %idxprom2222 = sext i32 %conv2221 to i64
  %arrayidx2223 = getelementptr inbounds i16, i16* %1173, i64 %idxprom2222
  %1175 = load i16, i16* %arrayidx2223, align 2
  %conv2224 = zext i16 %1175 to i32
  %and2225 = and i32 %conv2224, 2048
  %tobool2226 = icmp ne i32 %and2225, 0
  br i1 %tobool2226, label %while.body2227, label %while.end2252

while.body2227:                                   ; preds = %while.cond2219
  %1176 = load i32, i32* %upper_bound, align 4
  %cmp2228 = icmp slt i32 %1176, 0
  br i1 %cmp2228, label %if.then2230, label %if.end2231

if.then2230:                                      ; preds = %while.body2227
  store i32 0, i32* %upper_bound, align 4
  br label %if.end2231

if.end2231:                                       ; preds = %if.then2230, %while.body2227
  %1177 = load i32, i32* %upper_bound, align 4
  %mul2232 = mul nsw i32 %1177, 10
  %1178 = load i8, i8* %c, align 1
  %conv2233 = zext i8 %1178 to i32
  %add2234 = add nsw i32 %mul2232, %conv2233
  %sub2235 = sub nsw i32 %add2234, 48
  store i32 %sub2235, i32* %upper_bound, align 4
  %1179 = load i8*, i8** %p, align 8
  %1180 = load i8*, i8** %pend, align 8
  %cmp2236 = icmp eq i8* %1179, %1180
  br i1 %cmp2236, label %if.then2238, label %if.end2239

if.then2238:                                      ; preds = %if.end2231
  br label %while.end2252

if.end2239:                                       ; preds = %if.end2231
  br label %do.body2240

do.body2240:                                      ; preds = %if.end2239
  %1181 = load i8*, i8** %p, align 8
  %1182 = load i8*, i8** %pend, align 8
  %cmp2241 = icmp eq i8* %1181, %1182
  br i1 %cmp2241, label %if.then2243, label %if.end2244

if.then2243:                                      ; preds = %do.body2240
  store i32 14, i32* %retval, align 4
  br label %return

if.end2244:                                       ; preds = %do.body2240
  %1183 = load i8*, i8** %p, align 8
  %incdec.ptr2245 = getelementptr inbounds i8, i8* %1183, i32 1
  store i8* %incdec.ptr2245, i8** %p, align 8
  %1184 = load i8, i8* %1183, align 1
  store i8 %1184, i8* %c, align 1
  %1185 = load i8*, i8** %translate, align 8
  %tobool2246 = icmp ne i8* %1185, null
  br i1 %tobool2246, label %if.then2247, label %if.end2250

if.then2247:                                      ; preds = %if.end2244
  %1186 = load i8*, i8** %translate, align 8
  %1187 = load i8, i8* %c, align 1
  %idxprom2248 = zext i8 %1187 to i64
  %arrayidx2249 = getelementptr inbounds i8, i8* %1186, i64 %idxprom2248
  %1188 = load i8, i8* %arrayidx2249, align 1
  store i8 %1188, i8* %c, align 1
  br label %if.end2250

if.end2250:                                       ; preds = %if.then2247, %if.end2244
  br label %do.end2251

do.end2251:                                       ; preds = %if.end2250
  br label %while.cond2219, !llvm.loop !76

while.end2252:                                    ; preds = %if.then2238, %while.cond2219
  br label %if.end2253

if.end2253:                                       ; preds = %while.end2252, %if.then2203
  %1189 = load i32, i32* %upper_bound, align 4
  %cmp2254 = icmp slt i32 %1189, 0
  br i1 %cmp2254, label %if.then2256, label %if.end2257

if.then2256:                                      ; preds = %if.end2253
  store i32 32767, i32* %upper_bound, align 4
  br label %if.end2257

if.end2257:                                       ; preds = %if.then2256, %if.end2253
  br label %if.end2259

if.else2258:                                      ; preds = %if.end2199
  %1190 = load i32, i32* %lower_bound, align 4
  store i32 %1190, i32* %upper_bound, align 4
  br label %if.end2259

if.end2259:                                       ; preds = %if.else2258, %if.end2257
  %1191 = load i32, i32* %lower_bound, align 4
  %cmp2260 = icmp slt i32 %1191, 0
  br i1 %cmp2260, label %if.then2268, label %lor.lhs.false2262

lor.lhs.false2262:                                ; preds = %if.end2259
  %1192 = load i32, i32* %upper_bound, align 4
  %cmp2263 = icmp sgt i32 %1192, 32767
  br i1 %cmp2263, label %if.then2268, label %lor.lhs.false2265

lor.lhs.false2265:                                ; preds = %lor.lhs.false2262
  %1193 = load i32, i32* %lower_bound, align 4
  %1194 = load i32, i32* %upper_bound, align 4
  %cmp2266 = icmp sgt i32 %1193, %1194
  br i1 %cmp2266, label %if.then2268, label %if.end2273

if.then2268:                                      ; preds = %lor.lhs.false2265, %lor.lhs.false2262, %if.end2259
  %1195 = load i32, i32* %syntax.addr, align 4
  %and2269 = and i32 %1195, 4096
  %tobool2270 = icmp ne i32 %and2269, 0
  br i1 %tobool2270, label %if.then2271, label %if.else2272

if.then2271:                                      ; preds = %if.then2268
  br label %unfetch_interval

if.else2272:                                      ; preds = %if.then2268
  store i32 10, i32* %retval, align 4
  br label %return

if.end2273:                                       ; preds = %lor.lhs.false2265
  %1196 = load i32, i32* %syntax.addr, align 4
  %and2274 = and i32 %1196, 4096
  %tobool2275 = icmp ne i32 %and2274, 0
  br i1 %tobool2275, label %if.end2294, label %if.then2276

if.then2276:                                      ; preds = %if.end2273
  %1197 = load i8, i8* %c, align 1
  %conv2277 = zext i8 %1197 to i32
  %cmp2278 = icmp ne i32 %conv2277, 92
  br i1 %cmp2278, label %if.then2280, label %if.end2281

if.then2280:                                      ; preds = %if.then2276
  store i32 9, i32* %retval, align 4
  br label %return

if.end2281:                                       ; preds = %if.then2276
  br label %do.body2282

do.body2282:                                      ; preds = %if.end2281
  %1198 = load i8*, i8** %p, align 8
  %1199 = load i8*, i8** %pend, align 8
  %cmp2283 = icmp eq i8* %1198, %1199
  br i1 %cmp2283, label %if.then2285, label %if.end2286

if.then2285:                                      ; preds = %do.body2282
  store i32 14, i32* %retval, align 4
  br label %return

if.end2286:                                       ; preds = %do.body2282
  %1200 = load i8*, i8** %p, align 8
  %incdec.ptr2287 = getelementptr inbounds i8, i8* %1200, i32 1
  store i8* %incdec.ptr2287, i8** %p, align 8
  %1201 = load i8, i8* %1200, align 1
  store i8 %1201, i8* %c, align 1
  %1202 = load i8*, i8** %translate, align 8
  %tobool2288 = icmp ne i8* %1202, null
  br i1 %tobool2288, label %if.then2289, label %if.end2292

if.then2289:                                      ; preds = %if.end2286
  %1203 = load i8*, i8** %translate, align 8
  %1204 = load i8, i8* %c, align 1
  %idxprom2290 = zext i8 %1204 to i64
  %arrayidx2291 = getelementptr inbounds i8, i8* %1203, i64 %idxprom2290
  %1205 = load i8, i8* %arrayidx2291, align 1
  store i8 %1205, i8* %c, align 1
  br label %if.end2292

if.end2292:                                       ; preds = %if.then2289, %if.end2286
  br label %do.end2293

do.end2293:                                       ; preds = %if.end2292
  br label %if.end2294

if.end2294:                                       ; preds = %do.end2293, %if.end2273
  %1206 = load i8, i8* %c, align 1
  %conv2295 = zext i8 %1206 to i32
  %cmp2296 = icmp ne i32 %conv2295, 125
  br i1 %cmp2296, label %if.then2298, label %if.end2303

if.then2298:                                      ; preds = %if.end2294
  %1207 = load i32, i32* %syntax.addr, align 4
  %and2299 = and i32 %1207, 4096
  %tobool2300 = icmp ne i32 %and2299, 0
  br i1 %tobool2300, label %if.then2301, label %if.else2302

if.then2301:                                      ; preds = %if.then2298
  br label %unfetch_interval

if.else2302:                                      ; preds = %if.then2298
  store i32 10, i32* %retval, align 4
  br label %return

if.end2303:                                       ; preds = %if.end2294
  %1208 = load i8*, i8** %laststart, align 8
  %tobool2304 = icmp ne i8* %1208, null
  br i1 %tobool2304, label %if.end2316, label %if.then2305

if.then2305:                                      ; preds = %if.end2303
  %1209 = load i32, i32* %syntax.addr, align 4
  %and2306 = and i32 %1209, 32
  %tobool2307 = icmp ne i32 %and2306, 0
  br i1 %tobool2307, label %if.then2308, label %if.else2309

if.then2308:                                      ; preds = %if.then2305
  store i32 13, i32* %retval, align 4
  br label %return

if.else2309:                                      ; preds = %if.then2305
  %1210 = load i32, i32* %syntax.addr, align 4
  %and2310 = and i32 %1210, 16
  %tobool2311 = icmp ne i32 %and2310, 0
  br i1 %tobool2311, label %if.then2312, label %if.else2313

if.then2312:                                      ; preds = %if.else2309
  %1211 = load i8*, i8** %b, align 8
  store i8* %1211, i8** %laststart, align 8
  br label %if.end2314

if.else2313:                                      ; preds = %if.else2309
  br label %unfetch_interval

if.end2314:                                       ; preds = %if.then2312
  br label %if.end2315

if.end2315:                                       ; preds = %if.end2314
  br label %if.end2316

if.end2316:                                       ; preds = %if.end2315, %if.end2303
  %1212 = load i32, i32* %upper_bound, align 4
  %cmp2317 = icmp eq i32 %1212, 0
  br i1 %cmp2317, label %if.then2319, label %if.else2402

if.then2319:                                      ; preds = %if.end2316
  br label %while.cond2320

while.cond2320:                                   ; preds = %do.end2394, %if.then2319
  %1213 = load i8*, i8** %b, align 8
  %1214 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2321 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1214, i32 0, i32 0
  %1215 = load i8*, i8** %buffer2321, align 8
  %sub.ptr.lhs.cast2322 = ptrtoint i8* %1213 to i64
  %sub.ptr.rhs.cast2323 = ptrtoint i8* %1215 to i64
  %sub.ptr.sub2324 = sub i64 %sub.ptr.lhs.cast2322, %sub.ptr.rhs.cast2323
  %add2325 = add nsw i64 %sub.ptr.sub2324, 3
  %1216 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated2326 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1216, i32 0, i32 1
  %1217 = load i64, i64* %allocated2326, align 8
  %cmp2327 = icmp ugt i64 %add2325, %1217
  br i1 %cmp2327, label %while.body2329, label %while.end2395

while.body2329:                                   ; preds = %while.cond2320
  br label %do.body2330

do.body2330:                                      ; preds = %while.body2329
  %1218 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2332 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1218, i32 0, i32 0
  %1219 = load i8*, i8** %buffer2332, align 8
  store i8* %1219, i8** %old_buffer2331, align 8
  %1220 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated2333 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1220, i32 0, i32 1
  %1221 = load i64, i64* %allocated2333, align 8
  %cmp2334 = icmp eq i64 %1221, 65536
  br i1 %cmp2334, label %if.then2336, label %if.end2337

if.then2336:                                      ; preds = %do.body2330
  store i32 15, i32* %retval, align 4
  br label %return

if.end2337:                                       ; preds = %do.body2330
  %1222 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated2338 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1222, i32 0, i32 1
  %1223 = load i64, i64* %allocated2338, align 8
  %shl2339 = shl i64 %1223, 1
  store i64 %shl2339, i64* %allocated2338, align 8
  %1224 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated2340 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1224, i32 0, i32 1
  %1225 = load i64, i64* %allocated2340, align 8
  %cmp2341 = icmp ugt i64 %1225, 65536
  br i1 %cmp2341, label %if.then2343, label %if.end2345

if.then2343:                                      ; preds = %if.end2337
  %1226 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated2344 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1226, i32 0, i32 1
  store i64 65536, i64* %allocated2344, align 8
  br label %if.end2345

if.end2345:                                       ; preds = %if.then2343, %if.end2337
  %1227 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2346 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1227, i32 0, i32 0
  %1228 = load i8*, i8** %buffer2346, align 8
  %1229 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated2347 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1229, i32 0, i32 1
  %1230 = load i64, i64* %allocated2347, align 8
  %call2348 = call align 16 i8* @realloc(i8* %1228, i64 %1230) #9
  %1231 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2349 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1231, i32 0, i32 0
  store i8* %call2348, i8** %buffer2349, align 8
  %1232 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2350 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1232, i32 0, i32 0
  %1233 = load i8*, i8** %buffer2350, align 8
  %cmp2351 = icmp eq i8* %1233, null
  br i1 %cmp2351, label %if.then2353, label %if.end2354

if.then2353:                                      ; preds = %if.end2345
  store i32 12, i32* %retval, align 4
  br label %return

if.end2354:                                       ; preds = %if.end2345
  %1234 = load i8*, i8** %old_buffer2331, align 8
  %1235 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2355 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1235, i32 0, i32 0
  %1236 = load i8*, i8** %buffer2355, align 8
  %cmp2356 = icmp ne i8* %1234, %1236
  br i1 %cmp2356, label %if.then2358, label %if.end2393

if.then2358:                                      ; preds = %if.end2354
  %1237 = load i8*, i8** %b, align 8
  %1238 = load i8*, i8** %old_buffer2331, align 8
  %sub.ptr.lhs.cast2359 = ptrtoint i8* %1237 to i64
  %sub.ptr.rhs.cast2360 = ptrtoint i8* %1238 to i64
  %sub.ptr.sub2361 = sub i64 %sub.ptr.lhs.cast2359, %sub.ptr.rhs.cast2360
  %1239 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2362 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1239, i32 0, i32 0
  %1240 = load i8*, i8** %buffer2362, align 8
  %add.ptr2363 = getelementptr inbounds i8, i8* %1240, i64 %sub.ptr.sub2361
  store i8* %add.ptr2363, i8** %b, align 8
  %1241 = load i8*, i8** %begalt, align 8
  %1242 = load i8*, i8** %old_buffer2331, align 8
  %sub.ptr.lhs.cast2364 = ptrtoint i8* %1241 to i64
  %sub.ptr.rhs.cast2365 = ptrtoint i8* %1242 to i64
  %sub.ptr.sub2366 = sub i64 %sub.ptr.lhs.cast2364, %sub.ptr.rhs.cast2365
  %1243 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2367 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1243, i32 0, i32 0
  %1244 = load i8*, i8** %buffer2367, align 8
  %add.ptr2368 = getelementptr inbounds i8, i8* %1244, i64 %sub.ptr.sub2366
  store i8* %add.ptr2368, i8** %begalt, align 8
  %1245 = load i8*, i8** %fixup_alt_jump, align 8
  %tobool2369 = icmp ne i8* %1245, null
  br i1 %tobool2369, label %if.then2370, label %if.end2376

if.then2370:                                      ; preds = %if.then2358
  %1246 = load i8*, i8** %fixup_alt_jump, align 8
  %1247 = load i8*, i8** %old_buffer2331, align 8
  %sub.ptr.lhs.cast2371 = ptrtoint i8* %1246 to i64
  %sub.ptr.rhs.cast2372 = ptrtoint i8* %1247 to i64
  %sub.ptr.sub2373 = sub i64 %sub.ptr.lhs.cast2371, %sub.ptr.rhs.cast2372
  %1248 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2374 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1248, i32 0, i32 0
  %1249 = load i8*, i8** %buffer2374, align 8
  %add.ptr2375 = getelementptr inbounds i8, i8* %1249, i64 %sub.ptr.sub2373
  store i8* %add.ptr2375, i8** %fixup_alt_jump, align 8
  br label %if.end2376

if.end2376:                                       ; preds = %if.then2370, %if.then2358
  %1250 = load i8*, i8** %laststart, align 8
  %tobool2377 = icmp ne i8* %1250, null
  br i1 %tobool2377, label %if.then2378, label %if.end2384

if.then2378:                                      ; preds = %if.end2376
  %1251 = load i8*, i8** %laststart, align 8
  %1252 = load i8*, i8** %old_buffer2331, align 8
  %sub.ptr.lhs.cast2379 = ptrtoint i8* %1251 to i64
  %sub.ptr.rhs.cast2380 = ptrtoint i8* %1252 to i64
  %sub.ptr.sub2381 = sub i64 %sub.ptr.lhs.cast2379, %sub.ptr.rhs.cast2380
  %1253 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2382 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1253, i32 0, i32 0
  %1254 = load i8*, i8** %buffer2382, align 8
  %add.ptr2383 = getelementptr inbounds i8, i8* %1254, i64 %sub.ptr.sub2381
  store i8* %add.ptr2383, i8** %laststart, align 8
  br label %if.end2384

if.end2384:                                       ; preds = %if.then2378, %if.end2376
  %1255 = load i8*, i8** %pending_exact, align 8
  %tobool2385 = icmp ne i8* %1255, null
  br i1 %tobool2385, label %if.then2386, label %if.end2392

if.then2386:                                      ; preds = %if.end2384
  %1256 = load i8*, i8** %pending_exact, align 8
  %1257 = load i8*, i8** %old_buffer2331, align 8
  %sub.ptr.lhs.cast2387 = ptrtoint i8* %1256 to i64
  %sub.ptr.rhs.cast2388 = ptrtoint i8* %1257 to i64
  %sub.ptr.sub2389 = sub i64 %sub.ptr.lhs.cast2387, %sub.ptr.rhs.cast2388
  %1258 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2390 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1258, i32 0, i32 0
  %1259 = load i8*, i8** %buffer2390, align 8
  %add.ptr2391 = getelementptr inbounds i8, i8* %1259, i64 %sub.ptr.sub2389
  store i8* %add.ptr2391, i8** %pending_exact, align 8
  br label %if.end2392

if.end2392:                                       ; preds = %if.then2386, %if.end2384
  br label %if.end2393

if.end2393:                                       ; preds = %if.end2392, %if.end2354
  br label %do.end2394

do.end2394:                                       ; preds = %if.end2393
  br label %while.cond2320, !llvm.loop !77

while.end2395:                                    ; preds = %while.cond2320
  %1260 = load i8*, i8** %laststart, align 8
  %1261 = load i8*, i8** %b, align 8
  %add.ptr2396 = getelementptr inbounds i8, i8* %1261, i64 3
  %1262 = load i8*, i8** %laststart, align 8
  %sub.ptr.lhs.cast2397 = ptrtoint i8* %add.ptr2396 to i64
  %sub.ptr.rhs.cast2398 = ptrtoint i8* %1262 to i64
  %sub.ptr.sub2399 = sub i64 %sub.ptr.lhs.cast2397, %sub.ptr.rhs.cast2398
  %sub2400 = sub nsw i64 %sub.ptr.sub2399, 3
  %1263 = load i8*, i8** %b, align 8
  call void (i32, i8*, i64, i8*, ...) bitcast (void (i32, i8*, i32, i8*)* @insert_op1 to void (i32, i8*, i64, i8*, ...)*)(i32 12, i8* %1260, i64 %sub2400, i8* %1263)
  %1264 = load i8*, i8** %b, align 8
  %add.ptr2401 = getelementptr inbounds i8, i8* %1264, i64 3
  store i8* %add.ptr2401, i8** %b, align 8
  br label %if.end2512

if.else2402:                                      ; preds = %if.end2316
  %1265 = load i32, i32* %upper_bound, align 4
  %cmp2403 = icmp sgt i32 %1265, 1
  %conv2404 = zext i1 %cmp2403 to i32
  %mul2405 = mul nsw i32 %conv2404, 10
  %add2406 = add nsw i32 10, %mul2405
  store i32 %add2406, i32* %nbytes, align 4
  br label %while.cond2407

while.cond2407:                                   ; preds = %do.end2482, %if.else2402
  %1266 = load i8*, i8** %b, align 8
  %1267 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2408 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1267, i32 0, i32 0
  %1268 = load i8*, i8** %buffer2408, align 8
  %sub.ptr.lhs.cast2409 = ptrtoint i8* %1266 to i64
  %sub.ptr.rhs.cast2410 = ptrtoint i8* %1268 to i64
  %sub.ptr.sub2411 = sub i64 %sub.ptr.lhs.cast2409, %sub.ptr.rhs.cast2410
  %1269 = load i32, i32* %nbytes, align 4
  %conv2412 = zext i32 %1269 to i64
  %add2413 = add nsw i64 %sub.ptr.sub2411, %conv2412
  %1270 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated2414 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1270, i32 0, i32 1
  %1271 = load i64, i64* %allocated2414, align 8
  %cmp2415 = icmp ugt i64 %add2413, %1271
  br i1 %cmp2415, label %while.body2417, label %while.end2483

while.body2417:                                   ; preds = %while.cond2407
  br label %do.body2418

do.body2418:                                      ; preds = %while.body2417
  %1272 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2420 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1272, i32 0, i32 0
  %1273 = load i8*, i8** %buffer2420, align 8
  store i8* %1273, i8** %old_buffer2419, align 8
  %1274 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated2421 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1274, i32 0, i32 1
  %1275 = load i64, i64* %allocated2421, align 8
  %cmp2422 = icmp eq i64 %1275, 65536
  br i1 %cmp2422, label %if.then2424, label %if.end2425

if.then2424:                                      ; preds = %do.body2418
  store i32 15, i32* %retval, align 4
  br label %return

if.end2425:                                       ; preds = %do.body2418
  %1276 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated2426 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1276, i32 0, i32 1
  %1277 = load i64, i64* %allocated2426, align 8
  %shl2427 = shl i64 %1277, 1
  store i64 %shl2427, i64* %allocated2426, align 8
  %1278 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated2428 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1278, i32 0, i32 1
  %1279 = load i64, i64* %allocated2428, align 8
  %cmp2429 = icmp ugt i64 %1279, 65536
  br i1 %cmp2429, label %if.then2431, label %if.end2433

if.then2431:                                      ; preds = %if.end2425
  %1280 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated2432 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1280, i32 0, i32 1
  store i64 65536, i64* %allocated2432, align 8
  br label %if.end2433

if.end2433:                                       ; preds = %if.then2431, %if.end2425
  %1281 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2434 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1281, i32 0, i32 0
  %1282 = load i8*, i8** %buffer2434, align 8
  %1283 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated2435 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1283, i32 0, i32 1
  %1284 = load i64, i64* %allocated2435, align 8
  %call2436 = call align 16 i8* @realloc(i8* %1282, i64 %1284) #9
  %1285 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2437 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1285, i32 0, i32 0
  store i8* %call2436, i8** %buffer2437, align 8
  %1286 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2438 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1286, i32 0, i32 0
  %1287 = load i8*, i8** %buffer2438, align 8
  %cmp2439 = icmp eq i8* %1287, null
  br i1 %cmp2439, label %if.then2441, label %if.end2442

if.then2441:                                      ; preds = %if.end2433
  store i32 12, i32* %retval, align 4
  br label %return

if.end2442:                                       ; preds = %if.end2433
  %1288 = load i8*, i8** %old_buffer2419, align 8
  %1289 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2443 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1289, i32 0, i32 0
  %1290 = load i8*, i8** %buffer2443, align 8
  %cmp2444 = icmp ne i8* %1288, %1290
  br i1 %cmp2444, label %if.then2446, label %if.end2481

if.then2446:                                      ; preds = %if.end2442
  %1291 = load i8*, i8** %b, align 8
  %1292 = load i8*, i8** %old_buffer2419, align 8
  %sub.ptr.lhs.cast2447 = ptrtoint i8* %1291 to i64
  %sub.ptr.rhs.cast2448 = ptrtoint i8* %1292 to i64
  %sub.ptr.sub2449 = sub i64 %sub.ptr.lhs.cast2447, %sub.ptr.rhs.cast2448
  %1293 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2450 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1293, i32 0, i32 0
  %1294 = load i8*, i8** %buffer2450, align 8
  %add.ptr2451 = getelementptr inbounds i8, i8* %1294, i64 %sub.ptr.sub2449
  store i8* %add.ptr2451, i8** %b, align 8
  %1295 = load i8*, i8** %begalt, align 8
  %1296 = load i8*, i8** %old_buffer2419, align 8
  %sub.ptr.lhs.cast2452 = ptrtoint i8* %1295 to i64
  %sub.ptr.rhs.cast2453 = ptrtoint i8* %1296 to i64
  %sub.ptr.sub2454 = sub i64 %sub.ptr.lhs.cast2452, %sub.ptr.rhs.cast2453
  %1297 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2455 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1297, i32 0, i32 0
  %1298 = load i8*, i8** %buffer2455, align 8
  %add.ptr2456 = getelementptr inbounds i8, i8* %1298, i64 %sub.ptr.sub2454
  store i8* %add.ptr2456, i8** %begalt, align 8
  %1299 = load i8*, i8** %fixup_alt_jump, align 8
  %tobool2457 = icmp ne i8* %1299, null
  br i1 %tobool2457, label %if.then2458, label %if.end2464

if.then2458:                                      ; preds = %if.then2446
  %1300 = load i8*, i8** %fixup_alt_jump, align 8
  %1301 = load i8*, i8** %old_buffer2419, align 8
  %sub.ptr.lhs.cast2459 = ptrtoint i8* %1300 to i64
  %sub.ptr.rhs.cast2460 = ptrtoint i8* %1301 to i64
  %sub.ptr.sub2461 = sub i64 %sub.ptr.lhs.cast2459, %sub.ptr.rhs.cast2460
  %1302 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2462 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1302, i32 0, i32 0
  %1303 = load i8*, i8** %buffer2462, align 8
  %add.ptr2463 = getelementptr inbounds i8, i8* %1303, i64 %sub.ptr.sub2461
  store i8* %add.ptr2463, i8** %fixup_alt_jump, align 8
  br label %if.end2464

if.end2464:                                       ; preds = %if.then2458, %if.then2446
  %1304 = load i8*, i8** %laststart, align 8
  %tobool2465 = icmp ne i8* %1304, null
  br i1 %tobool2465, label %if.then2466, label %if.end2472

if.then2466:                                      ; preds = %if.end2464
  %1305 = load i8*, i8** %laststart, align 8
  %1306 = load i8*, i8** %old_buffer2419, align 8
  %sub.ptr.lhs.cast2467 = ptrtoint i8* %1305 to i64
  %sub.ptr.rhs.cast2468 = ptrtoint i8* %1306 to i64
  %sub.ptr.sub2469 = sub i64 %sub.ptr.lhs.cast2467, %sub.ptr.rhs.cast2468
  %1307 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2470 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1307, i32 0, i32 0
  %1308 = load i8*, i8** %buffer2470, align 8
  %add.ptr2471 = getelementptr inbounds i8, i8* %1308, i64 %sub.ptr.sub2469
  store i8* %add.ptr2471, i8** %laststart, align 8
  br label %if.end2472

if.end2472:                                       ; preds = %if.then2466, %if.end2464
  %1309 = load i8*, i8** %pending_exact, align 8
  %tobool2473 = icmp ne i8* %1309, null
  br i1 %tobool2473, label %if.then2474, label %if.end2480

if.then2474:                                      ; preds = %if.end2472
  %1310 = load i8*, i8** %pending_exact, align 8
  %1311 = load i8*, i8** %old_buffer2419, align 8
  %sub.ptr.lhs.cast2475 = ptrtoint i8* %1310 to i64
  %sub.ptr.rhs.cast2476 = ptrtoint i8* %1311 to i64
  %sub.ptr.sub2477 = sub i64 %sub.ptr.lhs.cast2475, %sub.ptr.rhs.cast2476
  %1312 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2478 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1312, i32 0, i32 0
  %1313 = load i8*, i8** %buffer2478, align 8
  %add.ptr2479 = getelementptr inbounds i8, i8* %1313, i64 %sub.ptr.sub2477
  store i8* %add.ptr2479, i8** %pending_exact, align 8
  br label %if.end2480

if.end2480:                                       ; preds = %if.then2474, %if.end2472
  br label %if.end2481

if.end2481:                                       ; preds = %if.end2480, %if.end2442
  br label %do.end2482

do.end2482:                                       ; preds = %if.end2481
  br label %while.cond2407, !llvm.loop !78

while.end2483:                                    ; preds = %while.cond2407
  %1314 = load i8*, i8** %laststart, align 8
  %1315 = load i8*, i8** %b, align 8
  %add.ptr2484 = getelementptr inbounds i8, i8* %1315, i64 5
  %1316 = load i32, i32* %upper_bound, align 4
  %cmp2485 = icmp sgt i32 %1316, 1
  %conv2486 = zext i1 %cmp2485 to i32
  %mul2487 = mul nsw i32 %conv2486, 5
  %idx.ext2488 = sext i32 %mul2487 to i64
  %add.ptr2489 = getelementptr inbounds i8, i8* %add.ptr2484, i64 %idx.ext2488
  %1317 = load i8*, i8** %laststart, align 8
  %sub.ptr.lhs.cast2490 = ptrtoint i8* %add.ptr2489 to i64
  %sub.ptr.rhs.cast2491 = ptrtoint i8* %1317 to i64
  %sub.ptr.sub2492 = sub i64 %sub.ptr.lhs.cast2490, %sub.ptr.rhs.cast2491
  %sub2493 = sub nsw i64 %sub.ptr.sub2492, 3
  %1318 = load i32, i32* %lower_bound, align 4
  %1319 = load i8*, i8** %b, align 8
  call void (i32, i8*, i64, i32, i8*, ...) bitcast (void (i32, i8*, i32, i32, i8*)* @insert_op2 to void (i32, i8*, i64, i32, i8*, ...)*)(i32 20, i8* %1314, i64 %sub2493, i32 %1318, i8* %1319)
  %1320 = load i8*, i8** %b, align 8
  %add.ptr2494 = getelementptr inbounds i8, i8* %1320, i64 5
  store i8* %add.ptr2494, i8** %b, align 8
  %1321 = load i8*, i8** %laststart, align 8
  %1322 = load i32, i32* %lower_bound, align 4
  %1323 = load i8*, i8** %b, align 8
  call void @insert_op2(i32 22, i8* %1321, i32 5, i32 %1322, i8* %1323)
  %1324 = load i8*, i8** %b, align 8
  %add.ptr2495 = getelementptr inbounds i8, i8* %1324, i64 5
  store i8* %add.ptr2495, i8** %b, align 8
  %1325 = load i32, i32* %upper_bound, align 4
  %cmp2496 = icmp sgt i32 %1325, 1
  br i1 %cmp2496, label %if.then2498, label %if.end2511

if.then2498:                                      ; preds = %while.end2483
  %1326 = load i8*, i8** %b, align 8
  %1327 = load i8*, i8** %laststart, align 8
  %add.ptr2499 = getelementptr inbounds i8, i8* %1327, i64 5
  %1328 = load i8*, i8** %b, align 8
  %sub.ptr.lhs.cast2500 = ptrtoint i8* %add.ptr2499 to i64
  %sub.ptr.rhs.cast2501 = ptrtoint i8* %1328 to i64
  %sub.ptr.sub2502 = sub i64 %sub.ptr.lhs.cast2500, %sub.ptr.rhs.cast2501
  %sub2503 = sub nsw i64 %sub.ptr.sub2502, 3
  %1329 = load i32, i32* %upper_bound, align 4
  %sub2504 = sub nsw i32 %1329, 1
  call void (i32, i8*, i64, i32, ...) bitcast (void (i32, i8*, i32, i32)* @store_op2 to void (i32, i8*, i64, i32, ...)*)(i32 21, i8* %1326, i64 %sub2503, i32 %sub2504)
  %1330 = load i8*, i8** %b, align 8
  %add.ptr2505 = getelementptr inbounds i8, i8* %1330, i64 5
  store i8* %add.ptr2505, i8** %b, align 8
  %1331 = load i8*, i8** %laststart, align 8
  %1332 = load i8*, i8** %b, align 8
  %1333 = load i8*, i8** %laststart, align 8
  %sub.ptr.lhs.cast2506 = ptrtoint i8* %1332 to i64
  %sub.ptr.rhs.cast2507 = ptrtoint i8* %1333 to i64
  %sub.ptr.sub2508 = sub i64 %sub.ptr.lhs.cast2506, %sub.ptr.rhs.cast2507
  %1334 = load i32, i32* %upper_bound, align 4
  %sub2509 = sub nsw i32 %1334, 1
  %1335 = load i8*, i8** %b, align 8
  call void (i32, i8*, i64, i32, i8*, ...) bitcast (void (i32, i8*, i32, i32, i8*)* @insert_op2 to void (i32, i8*, i64, i32, i8*, ...)*)(i32 22, i8* %1331, i64 %sub.ptr.sub2508, i32 %sub2509, i8* %1335)
  %1336 = load i8*, i8** %b, align 8
  %add.ptr2510 = getelementptr inbounds i8, i8* %1336, i64 5
  store i8* %add.ptr2510, i8** %b, align 8
  br label %if.end2511

if.end2511:                                       ; preds = %if.then2498, %while.end2483
  br label %if.end2512

if.end2512:                                       ; preds = %if.end2511, %while.end2395
  store i8* null, i8** %pending_exact, align 8
  store i8* null, i8** %beg_interval, align 8
  br label %sw.epilog

unfetch_interval:                                 ; preds = %if.else2313, %if.then2301, %if.then2271, %if.then2147
  %1337 = load i8*, i8** %beg_interval, align 8
  store i8* %1337, i8** %p, align 8
  store i8* null, i8** %beg_interval, align 8
  br label %do.body2513

do.body2513:                                      ; preds = %unfetch_interval
  %1338 = load i8*, i8** %p, align 8
  %1339 = load i8*, i8** %pend, align 8
  %cmp2514 = icmp eq i8* %1338, %1339
  br i1 %cmp2514, label %if.then2516, label %if.end2517

if.then2516:                                      ; preds = %do.body2513
  store i32 14, i32* %retval, align 4
  br label %return

if.end2517:                                       ; preds = %do.body2513
  %1340 = load i8*, i8** %p, align 8
  %incdec.ptr2518 = getelementptr inbounds i8, i8* %1340, i32 1
  store i8* %incdec.ptr2518, i8** %p, align 8
  %1341 = load i8, i8* %1340, align 1
  store i8 %1341, i8* %c, align 1
  %1342 = load i8*, i8** %translate, align 8
  %tobool2519 = icmp ne i8* %1342, null
  br i1 %tobool2519, label %if.then2520, label %if.end2523

if.then2520:                                      ; preds = %if.end2517
  %1343 = load i8*, i8** %translate, align 8
  %1344 = load i8, i8* %c, align 1
  %idxprom2521 = zext i8 %1344 to i64
  %arrayidx2522 = getelementptr inbounds i8, i8* %1343, i64 %idxprom2521
  %1345 = load i8, i8* %arrayidx2522, align 1
  store i8 %1345, i8* %c, align 1
  br label %if.end2523

if.end2523:                                       ; preds = %if.then2520, %if.end2517
  br label %do.end2524

do.end2524:                                       ; preds = %if.end2523
  %1346 = load i32, i32* %syntax.addr, align 4
  %and2525 = and i32 %1346, 4096
  %tobool2526 = icmp ne i32 %and2525, 0
  br i1 %tobool2526, label %if.end2537, label %if.then2527

if.then2527:                                      ; preds = %do.end2524
  %1347 = load i8*, i8** %p, align 8
  %1348 = load i8*, i8** %pattern.addr, align 8
  %cmp2528 = icmp ugt i8* %1347, %1348
  br i1 %cmp2528, label %land.lhs.true2530, label %if.end2536

land.lhs.true2530:                                ; preds = %if.then2527
  %1349 = load i8*, i8** %p, align 8
  %arrayidx2531 = getelementptr inbounds i8, i8* %1349, i64 -1
  %1350 = load i8, i8* %arrayidx2531, align 1
  %conv2532 = sext i8 %1350 to i32
  %cmp2533 = icmp eq i32 %conv2532, 92
  br i1 %cmp2533, label %if.then2535, label %if.end2536

if.then2535:                                      ; preds = %land.lhs.true2530
  br label %normal_backslash

if.end2536:                                       ; preds = %land.lhs.true2530, %if.then2527
  br label %if.end2537

if.end2537:                                       ; preds = %if.end2536, %do.end2524
  br label %normal_char

sw.bb2538:                                        ; preds = %do.end1529
  %1351 = load i8*, i8** %b, align 8
  store i8* %1351, i8** %laststart, align 8
  br label %do.body2539

do.body2539:                                      ; preds = %sw.bb2538
  br label %while.cond2540

while.cond2540:                                   ; preds = %do.end2614, %do.body2539
  %1352 = load i8*, i8** %b, align 8
  %1353 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2541 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1353, i32 0, i32 0
  %1354 = load i8*, i8** %buffer2541, align 8
  %sub.ptr.lhs.cast2542 = ptrtoint i8* %1352 to i64
  %sub.ptr.rhs.cast2543 = ptrtoint i8* %1354 to i64
  %sub.ptr.sub2544 = sub i64 %sub.ptr.lhs.cast2542, %sub.ptr.rhs.cast2543
  %add2545 = add nsw i64 %sub.ptr.sub2544, 1
  %1355 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated2546 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1355, i32 0, i32 1
  %1356 = load i64, i64* %allocated2546, align 8
  %cmp2547 = icmp ugt i64 %add2545, %1356
  br i1 %cmp2547, label %while.body2549, label %while.end2615

while.body2549:                                   ; preds = %while.cond2540
  br label %do.body2550

do.body2550:                                      ; preds = %while.body2549
  %1357 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2552 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1357, i32 0, i32 0
  %1358 = load i8*, i8** %buffer2552, align 8
  store i8* %1358, i8** %old_buffer2551, align 8
  %1359 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated2553 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1359, i32 0, i32 1
  %1360 = load i64, i64* %allocated2553, align 8
  %cmp2554 = icmp eq i64 %1360, 65536
  br i1 %cmp2554, label %if.then2556, label %if.end2557

if.then2556:                                      ; preds = %do.body2550
  store i32 15, i32* %retval, align 4
  br label %return

if.end2557:                                       ; preds = %do.body2550
  %1361 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated2558 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1361, i32 0, i32 1
  %1362 = load i64, i64* %allocated2558, align 8
  %shl2559 = shl i64 %1362, 1
  store i64 %shl2559, i64* %allocated2558, align 8
  %1363 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated2560 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1363, i32 0, i32 1
  %1364 = load i64, i64* %allocated2560, align 8
  %cmp2561 = icmp ugt i64 %1364, 65536
  br i1 %cmp2561, label %if.then2563, label %if.end2565

if.then2563:                                      ; preds = %if.end2557
  %1365 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated2564 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1365, i32 0, i32 1
  store i64 65536, i64* %allocated2564, align 8
  br label %if.end2565

if.end2565:                                       ; preds = %if.then2563, %if.end2557
  %1366 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2566 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1366, i32 0, i32 0
  %1367 = load i8*, i8** %buffer2566, align 8
  %1368 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated2567 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1368, i32 0, i32 1
  %1369 = load i64, i64* %allocated2567, align 8
  %call2568 = call align 16 i8* @realloc(i8* %1367, i64 %1369) #9
  %1370 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2569 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1370, i32 0, i32 0
  store i8* %call2568, i8** %buffer2569, align 8
  %1371 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2570 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1371, i32 0, i32 0
  %1372 = load i8*, i8** %buffer2570, align 8
  %cmp2571 = icmp eq i8* %1372, null
  br i1 %cmp2571, label %if.then2573, label %if.end2574

if.then2573:                                      ; preds = %if.end2565
  store i32 12, i32* %retval, align 4
  br label %return

if.end2574:                                       ; preds = %if.end2565
  %1373 = load i8*, i8** %old_buffer2551, align 8
  %1374 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2575 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1374, i32 0, i32 0
  %1375 = load i8*, i8** %buffer2575, align 8
  %cmp2576 = icmp ne i8* %1373, %1375
  br i1 %cmp2576, label %if.then2578, label %if.end2613

if.then2578:                                      ; preds = %if.end2574
  %1376 = load i8*, i8** %b, align 8
  %1377 = load i8*, i8** %old_buffer2551, align 8
  %sub.ptr.lhs.cast2579 = ptrtoint i8* %1376 to i64
  %sub.ptr.rhs.cast2580 = ptrtoint i8* %1377 to i64
  %sub.ptr.sub2581 = sub i64 %sub.ptr.lhs.cast2579, %sub.ptr.rhs.cast2580
  %1378 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2582 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1378, i32 0, i32 0
  %1379 = load i8*, i8** %buffer2582, align 8
  %add.ptr2583 = getelementptr inbounds i8, i8* %1379, i64 %sub.ptr.sub2581
  store i8* %add.ptr2583, i8** %b, align 8
  %1380 = load i8*, i8** %begalt, align 8
  %1381 = load i8*, i8** %old_buffer2551, align 8
  %sub.ptr.lhs.cast2584 = ptrtoint i8* %1380 to i64
  %sub.ptr.rhs.cast2585 = ptrtoint i8* %1381 to i64
  %sub.ptr.sub2586 = sub i64 %sub.ptr.lhs.cast2584, %sub.ptr.rhs.cast2585
  %1382 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2587 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1382, i32 0, i32 0
  %1383 = load i8*, i8** %buffer2587, align 8
  %add.ptr2588 = getelementptr inbounds i8, i8* %1383, i64 %sub.ptr.sub2586
  store i8* %add.ptr2588, i8** %begalt, align 8
  %1384 = load i8*, i8** %fixup_alt_jump, align 8
  %tobool2589 = icmp ne i8* %1384, null
  br i1 %tobool2589, label %if.then2590, label %if.end2596

if.then2590:                                      ; preds = %if.then2578
  %1385 = load i8*, i8** %fixup_alt_jump, align 8
  %1386 = load i8*, i8** %old_buffer2551, align 8
  %sub.ptr.lhs.cast2591 = ptrtoint i8* %1385 to i64
  %sub.ptr.rhs.cast2592 = ptrtoint i8* %1386 to i64
  %sub.ptr.sub2593 = sub i64 %sub.ptr.lhs.cast2591, %sub.ptr.rhs.cast2592
  %1387 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2594 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1387, i32 0, i32 0
  %1388 = load i8*, i8** %buffer2594, align 8
  %add.ptr2595 = getelementptr inbounds i8, i8* %1388, i64 %sub.ptr.sub2593
  store i8* %add.ptr2595, i8** %fixup_alt_jump, align 8
  br label %if.end2596

if.end2596:                                       ; preds = %if.then2590, %if.then2578
  %1389 = load i8*, i8** %laststart, align 8
  %tobool2597 = icmp ne i8* %1389, null
  br i1 %tobool2597, label %if.then2598, label %if.end2604

if.then2598:                                      ; preds = %if.end2596
  %1390 = load i8*, i8** %laststart, align 8
  %1391 = load i8*, i8** %old_buffer2551, align 8
  %sub.ptr.lhs.cast2599 = ptrtoint i8* %1390 to i64
  %sub.ptr.rhs.cast2600 = ptrtoint i8* %1391 to i64
  %sub.ptr.sub2601 = sub i64 %sub.ptr.lhs.cast2599, %sub.ptr.rhs.cast2600
  %1392 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2602 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1392, i32 0, i32 0
  %1393 = load i8*, i8** %buffer2602, align 8
  %add.ptr2603 = getelementptr inbounds i8, i8* %1393, i64 %sub.ptr.sub2601
  store i8* %add.ptr2603, i8** %laststart, align 8
  br label %if.end2604

if.end2604:                                       ; preds = %if.then2598, %if.end2596
  %1394 = load i8*, i8** %pending_exact, align 8
  %tobool2605 = icmp ne i8* %1394, null
  br i1 %tobool2605, label %if.then2606, label %if.end2612

if.then2606:                                      ; preds = %if.end2604
  %1395 = load i8*, i8** %pending_exact, align 8
  %1396 = load i8*, i8** %old_buffer2551, align 8
  %sub.ptr.lhs.cast2607 = ptrtoint i8* %1395 to i64
  %sub.ptr.rhs.cast2608 = ptrtoint i8* %1396 to i64
  %sub.ptr.sub2609 = sub i64 %sub.ptr.lhs.cast2607, %sub.ptr.rhs.cast2608
  %1397 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2610 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1397, i32 0, i32 0
  %1398 = load i8*, i8** %buffer2610, align 8
  %add.ptr2611 = getelementptr inbounds i8, i8* %1398, i64 %sub.ptr.sub2609
  store i8* %add.ptr2611, i8** %pending_exact, align 8
  br label %if.end2612

if.end2612:                                       ; preds = %if.then2606, %if.end2604
  br label %if.end2613

if.end2613:                                       ; preds = %if.end2612, %if.end2574
  br label %do.end2614

do.end2614:                                       ; preds = %if.end2613
  br label %while.cond2540, !llvm.loop !79

while.end2615:                                    ; preds = %while.cond2540
  %1399 = load i8*, i8** %b, align 8
  %incdec.ptr2616 = getelementptr inbounds i8, i8* %1399, i32 1
  store i8* %incdec.ptr2616, i8** %b, align 8
  store i8 23, i8* %1399, align 1
  br label %do.end2617

do.end2617:                                       ; preds = %while.end2615
  br label %sw.epilog

sw.bb2618:                                        ; preds = %do.end1529
  %1400 = load i8*, i8** %b, align 8
  store i8* %1400, i8** %laststart, align 8
  br label %do.body2619

do.body2619:                                      ; preds = %sw.bb2618
  br label %while.cond2620

while.cond2620:                                   ; preds = %do.end2694, %do.body2619
  %1401 = load i8*, i8** %b, align 8
  %1402 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2621 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1402, i32 0, i32 0
  %1403 = load i8*, i8** %buffer2621, align 8
  %sub.ptr.lhs.cast2622 = ptrtoint i8* %1401 to i64
  %sub.ptr.rhs.cast2623 = ptrtoint i8* %1403 to i64
  %sub.ptr.sub2624 = sub i64 %sub.ptr.lhs.cast2622, %sub.ptr.rhs.cast2623
  %add2625 = add nsw i64 %sub.ptr.sub2624, 1
  %1404 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated2626 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1404, i32 0, i32 1
  %1405 = load i64, i64* %allocated2626, align 8
  %cmp2627 = icmp ugt i64 %add2625, %1405
  br i1 %cmp2627, label %while.body2629, label %while.end2695

while.body2629:                                   ; preds = %while.cond2620
  br label %do.body2630

do.body2630:                                      ; preds = %while.body2629
  %1406 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2632 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1406, i32 0, i32 0
  %1407 = load i8*, i8** %buffer2632, align 8
  store i8* %1407, i8** %old_buffer2631, align 8
  %1408 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated2633 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1408, i32 0, i32 1
  %1409 = load i64, i64* %allocated2633, align 8
  %cmp2634 = icmp eq i64 %1409, 65536
  br i1 %cmp2634, label %if.then2636, label %if.end2637

if.then2636:                                      ; preds = %do.body2630
  store i32 15, i32* %retval, align 4
  br label %return

if.end2637:                                       ; preds = %do.body2630
  %1410 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated2638 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1410, i32 0, i32 1
  %1411 = load i64, i64* %allocated2638, align 8
  %shl2639 = shl i64 %1411, 1
  store i64 %shl2639, i64* %allocated2638, align 8
  %1412 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated2640 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1412, i32 0, i32 1
  %1413 = load i64, i64* %allocated2640, align 8
  %cmp2641 = icmp ugt i64 %1413, 65536
  br i1 %cmp2641, label %if.then2643, label %if.end2645

if.then2643:                                      ; preds = %if.end2637
  %1414 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated2644 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1414, i32 0, i32 1
  store i64 65536, i64* %allocated2644, align 8
  br label %if.end2645

if.end2645:                                       ; preds = %if.then2643, %if.end2637
  %1415 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2646 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1415, i32 0, i32 0
  %1416 = load i8*, i8** %buffer2646, align 8
  %1417 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated2647 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1417, i32 0, i32 1
  %1418 = load i64, i64* %allocated2647, align 8
  %call2648 = call align 16 i8* @realloc(i8* %1416, i64 %1418) #9
  %1419 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2649 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1419, i32 0, i32 0
  store i8* %call2648, i8** %buffer2649, align 8
  %1420 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2650 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1420, i32 0, i32 0
  %1421 = load i8*, i8** %buffer2650, align 8
  %cmp2651 = icmp eq i8* %1421, null
  br i1 %cmp2651, label %if.then2653, label %if.end2654

if.then2653:                                      ; preds = %if.end2645
  store i32 12, i32* %retval, align 4
  br label %return

if.end2654:                                       ; preds = %if.end2645
  %1422 = load i8*, i8** %old_buffer2631, align 8
  %1423 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2655 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1423, i32 0, i32 0
  %1424 = load i8*, i8** %buffer2655, align 8
  %cmp2656 = icmp ne i8* %1422, %1424
  br i1 %cmp2656, label %if.then2658, label %if.end2693

if.then2658:                                      ; preds = %if.end2654
  %1425 = load i8*, i8** %b, align 8
  %1426 = load i8*, i8** %old_buffer2631, align 8
  %sub.ptr.lhs.cast2659 = ptrtoint i8* %1425 to i64
  %sub.ptr.rhs.cast2660 = ptrtoint i8* %1426 to i64
  %sub.ptr.sub2661 = sub i64 %sub.ptr.lhs.cast2659, %sub.ptr.rhs.cast2660
  %1427 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2662 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1427, i32 0, i32 0
  %1428 = load i8*, i8** %buffer2662, align 8
  %add.ptr2663 = getelementptr inbounds i8, i8* %1428, i64 %sub.ptr.sub2661
  store i8* %add.ptr2663, i8** %b, align 8
  %1429 = load i8*, i8** %begalt, align 8
  %1430 = load i8*, i8** %old_buffer2631, align 8
  %sub.ptr.lhs.cast2664 = ptrtoint i8* %1429 to i64
  %sub.ptr.rhs.cast2665 = ptrtoint i8* %1430 to i64
  %sub.ptr.sub2666 = sub i64 %sub.ptr.lhs.cast2664, %sub.ptr.rhs.cast2665
  %1431 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2667 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1431, i32 0, i32 0
  %1432 = load i8*, i8** %buffer2667, align 8
  %add.ptr2668 = getelementptr inbounds i8, i8* %1432, i64 %sub.ptr.sub2666
  store i8* %add.ptr2668, i8** %begalt, align 8
  %1433 = load i8*, i8** %fixup_alt_jump, align 8
  %tobool2669 = icmp ne i8* %1433, null
  br i1 %tobool2669, label %if.then2670, label %if.end2676

if.then2670:                                      ; preds = %if.then2658
  %1434 = load i8*, i8** %fixup_alt_jump, align 8
  %1435 = load i8*, i8** %old_buffer2631, align 8
  %sub.ptr.lhs.cast2671 = ptrtoint i8* %1434 to i64
  %sub.ptr.rhs.cast2672 = ptrtoint i8* %1435 to i64
  %sub.ptr.sub2673 = sub i64 %sub.ptr.lhs.cast2671, %sub.ptr.rhs.cast2672
  %1436 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2674 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1436, i32 0, i32 0
  %1437 = load i8*, i8** %buffer2674, align 8
  %add.ptr2675 = getelementptr inbounds i8, i8* %1437, i64 %sub.ptr.sub2673
  store i8* %add.ptr2675, i8** %fixup_alt_jump, align 8
  br label %if.end2676

if.end2676:                                       ; preds = %if.then2670, %if.then2658
  %1438 = load i8*, i8** %laststart, align 8
  %tobool2677 = icmp ne i8* %1438, null
  br i1 %tobool2677, label %if.then2678, label %if.end2684

if.then2678:                                      ; preds = %if.end2676
  %1439 = load i8*, i8** %laststart, align 8
  %1440 = load i8*, i8** %old_buffer2631, align 8
  %sub.ptr.lhs.cast2679 = ptrtoint i8* %1439 to i64
  %sub.ptr.rhs.cast2680 = ptrtoint i8* %1440 to i64
  %sub.ptr.sub2681 = sub i64 %sub.ptr.lhs.cast2679, %sub.ptr.rhs.cast2680
  %1441 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2682 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1441, i32 0, i32 0
  %1442 = load i8*, i8** %buffer2682, align 8
  %add.ptr2683 = getelementptr inbounds i8, i8* %1442, i64 %sub.ptr.sub2681
  store i8* %add.ptr2683, i8** %laststart, align 8
  br label %if.end2684

if.end2684:                                       ; preds = %if.then2678, %if.end2676
  %1443 = load i8*, i8** %pending_exact, align 8
  %tobool2685 = icmp ne i8* %1443, null
  br i1 %tobool2685, label %if.then2686, label %if.end2692

if.then2686:                                      ; preds = %if.end2684
  %1444 = load i8*, i8** %pending_exact, align 8
  %1445 = load i8*, i8** %old_buffer2631, align 8
  %sub.ptr.lhs.cast2687 = ptrtoint i8* %1444 to i64
  %sub.ptr.rhs.cast2688 = ptrtoint i8* %1445 to i64
  %sub.ptr.sub2689 = sub i64 %sub.ptr.lhs.cast2687, %sub.ptr.rhs.cast2688
  %1446 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2690 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1446, i32 0, i32 0
  %1447 = load i8*, i8** %buffer2690, align 8
  %add.ptr2691 = getelementptr inbounds i8, i8* %1447, i64 %sub.ptr.sub2689
  store i8* %add.ptr2691, i8** %pending_exact, align 8
  br label %if.end2692

if.end2692:                                       ; preds = %if.then2686, %if.end2684
  br label %if.end2693

if.end2693:                                       ; preds = %if.end2692, %if.end2654
  br label %do.end2694

do.end2694:                                       ; preds = %if.end2693
  br label %while.cond2620, !llvm.loop !80

while.end2695:                                    ; preds = %while.cond2620
  %1448 = load i8*, i8** %b, align 8
  %incdec.ptr2696 = getelementptr inbounds i8, i8* %1448, i32 1
  store i8* %incdec.ptr2696, i8** %b, align 8
  store i8 24, i8* %1448, align 1
  br label %do.end2697

do.end2697:                                       ; preds = %while.end2695
  br label %sw.epilog

sw.bb2698:                                        ; preds = %do.end1529
  br label %do.body2699

do.body2699:                                      ; preds = %sw.bb2698
  br label %while.cond2700

while.cond2700:                                   ; preds = %do.end2774, %do.body2699
  %1449 = load i8*, i8** %b, align 8
  %1450 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2701 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1450, i32 0, i32 0
  %1451 = load i8*, i8** %buffer2701, align 8
  %sub.ptr.lhs.cast2702 = ptrtoint i8* %1449 to i64
  %sub.ptr.rhs.cast2703 = ptrtoint i8* %1451 to i64
  %sub.ptr.sub2704 = sub i64 %sub.ptr.lhs.cast2702, %sub.ptr.rhs.cast2703
  %add2705 = add nsw i64 %sub.ptr.sub2704, 1
  %1452 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated2706 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1452, i32 0, i32 1
  %1453 = load i64, i64* %allocated2706, align 8
  %cmp2707 = icmp ugt i64 %add2705, %1453
  br i1 %cmp2707, label %while.body2709, label %while.end2775

while.body2709:                                   ; preds = %while.cond2700
  br label %do.body2710

do.body2710:                                      ; preds = %while.body2709
  %1454 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2712 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1454, i32 0, i32 0
  %1455 = load i8*, i8** %buffer2712, align 8
  store i8* %1455, i8** %old_buffer2711, align 8
  %1456 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated2713 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1456, i32 0, i32 1
  %1457 = load i64, i64* %allocated2713, align 8
  %cmp2714 = icmp eq i64 %1457, 65536
  br i1 %cmp2714, label %if.then2716, label %if.end2717

if.then2716:                                      ; preds = %do.body2710
  store i32 15, i32* %retval, align 4
  br label %return

if.end2717:                                       ; preds = %do.body2710
  %1458 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated2718 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1458, i32 0, i32 1
  %1459 = load i64, i64* %allocated2718, align 8
  %shl2719 = shl i64 %1459, 1
  store i64 %shl2719, i64* %allocated2718, align 8
  %1460 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated2720 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1460, i32 0, i32 1
  %1461 = load i64, i64* %allocated2720, align 8
  %cmp2721 = icmp ugt i64 %1461, 65536
  br i1 %cmp2721, label %if.then2723, label %if.end2725

if.then2723:                                      ; preds = %if.end2717
  %1462 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated2724 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1462, i32 0, i32 1
  store i64 65536, i64* %allocated2724, align 8
  br label %if.end2725

if.end2725:                                       ; preds = %if.then2723, %if.end2717
  %1463 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2726 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1463, i32 0, i32 0
  %1464 = load i8*, i8** %buffer2726, align 8
  %1465 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated2727 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1465, i32 0, i32 1
  %1466 = load i64, i64* %allocated2727, align 8
  %call2728 = call align 16 i8* @realloc(i8* %1464, i64 %1466) #9
  %1467 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2729 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1467, i32 0, i32 0
  store i8* %call2728, i8** %buffer2729, align 8
  %1468 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2730 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1468, i32 0, i32 0
  %1469 = load i8*, i8** %buffer2730, align 8
  %cmp2731 = icmp eq i8* %1469, null
  br i1 %cmp2731, label %if.then2733, label %if.end2734

if.then2733:                                      ; preds = %if.end2725
  store i32 12, i32* %retval, align 4
  br label %return

if.end2734:                                       ; preds = %if.end2725
  %1470 = load i8*, i8** %old_buffer2711, align 8
  %1471 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2735 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1471, i32 0, i32 0
  %1472 = load i8*, i8** %buffer2735, align 8
  %cmp2736 = icmp ne i8* %1470, %1472
  br i1 %cmp2736, label %if.then2738, label %if.end2773

if.then2738:                                      ; preds = %if.end2734
  %1473 = load i8*, i8** %b, align 8
  %1474 = load i8*, i8** %old_buffer2711, align 8
  %sub.ptr.lhs.cast2739 = ptrtoint i8* %1473 to i64
  %sub.ptr.rhs.cast2740 = ptrtoint i8* %1474 to i64
  %sub.ptr.sub2741 = sub i64 %sub.ptr.lhs.cast2739, %sub.ptr.rhs.cast2740
  %1475 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2742 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1475, i32 0, i32 0
  %1476 = load i8*, i8** %buffer2742, align 8
  %add.ptr2743 = getelementptr inbounds i8, i8* %1476, i64 %sub.ptr.sub2741
  store i8* %add.ptr2743, i8** %b, align 8
  %1477 = load i8*, i8** %begalt, align 8
  %1478 = load i8*, i8** %old_buffer2711, align 8
  %sub.ptr.lhs.cast2744 = ptrtoint i8* %1477 to i64
  %sub.ptr.rhs.cast2745 = ptrtoint i8* %1478 to i64
  %sub.ptr.sub2746 = sub i64 %sub.ptr.lhs.cast2744, %sub.ptr.rhs.cast2745
  %1479 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2747 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1479, i32 0, i32 0
  %1480 = load i8*, i8** %buffer2747, align 8
  %add.ptr2748 = getelementptr inbounds i8, i8* %1480, i64 %sub.ptr.sub2746
  store i8* %add.ptr2748, i8** %begalt, align 8
  %1481 = load i8*, i8** %fixup_alt_jump, align 8
  %tobool2749 = icmp ne i8* %1481, null
  br i1 %tobool2749, label %if.then2750, label %if.end2756

if.then2750:                                      ; preds = %if.then2738
  %1482 = load i8*, i8** %fixup_alt_jump, align 8
  %1483 = load i8*, i8** %old_buffer2711, align 8
  %sub.ptr.lhs.cast2751 = ptrtoint i8* %1482 to i64
  %sub.ptr.rhs.cast2752 = ptrtoint i8* %1483 to i64
  %sub.ptr.sub2753 = sub i64 %sub.ptr.lhs.cast2751, %sub.ptr.rhs.cast2752
  %1484 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2754 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1484, i32 0, i32 0
  %1485 = load i8*, i8** %buffer2754, align 8
  %add.ptr2755 = getelementptr inbounds i8, i8* %1485, i64 %sub.ptr.sub2753
  store i8* %add.ptr2755, i8** %fixup_alt_jump, align 8
  br label %if.end2756

if.end2756:                                       ; preds = %if.then2750, %if.then2738
  %1486 = load i8*, i8** %laststart, align 8
  %tobool2757 = icmp ne i8* %1486, null
  br i1 %tobool2757, label %if.then2758, label %if.end2764

if.then2758:                                      ; preds = %if.end2756
  %1487 = load i8*, i8** %laststart, align 8
  %1488 = load i8*, i8** %old_buffer2711, align 8
  %sub.ptr.lhs.cast2759 = ptrtoint i8* %1487 to i64
  %sub.ptr.rhs.cast2760 = ptrtoint i8* %1488 to i64
  %sub.ptr.sub2761 = sub i64 %sub.ptr.lhs.cast2759, %sub.ptr.rhs.cast2760
  %1489 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2762 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1489, i32 0, i32 0
  %1490 = load i8*, i8** %buffer2762, align 8
  %add.ptr2763 = getelementptr inbounds i8, i8* %1490, i64 %sub.ptr.sub2761
  store i8* %add.ptr2763, i8** %laststart, align 8
  br label %if.end2764

if.end2764:                                       ; preds = %if.then2758, %if.end2756
  %1491 = load i8*, i8** %pending_exact, align 8
  %tobool2765 = icmp ne i8* %1491, null
  br i1 %tobool2765, label %if.then2766, label %if.end2772

if.then2766:                                      ; preds = %if.end2764
  %1492 = load i8*, i8** %pending_exact, align 8
  %1493 = load i8*, i8** %old_buffer2711, align 8
  %sub.ptr.lhs.cast2767 = ptrtoint i8* %1492 to i64
  %sub.ptr.rhs.cast2768 = ptrtoint i8* %1493 to i64
  %sub.ptr.sub2769 = sub i64 %sub.ptr.lhs.cast2767, %sub.ptr.rhs.cast2768
  %1494 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2770 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1494, i32 0, i32 0
  %1495 = load i8*, i8** %buffer2770, align 8
  %add.ptr2771 = getelementptr inbounds i8, i8* %1495, i64 %sub.ptr.sub2769
  store i8* %add.ptr2771, i8** %pending_exact, align 8
  br label %if.end2772

if.end2772:                                       ; preds = %if.then2766, %if.end2764
  br label %if.end2773

if.end2773:                                       ; preds = %if.end2772, %if.end2734
  br label %do.end2774

do.end2774:                                       ; preds = %if.end2773
  br label %while.cond2700, !llvm.loop !81

while.end2775:                                    ; preds = %while.cond2700
  %1496 = load i8*, i8** %b, align 8
  %incdec.ptr2776 = getelementptr inbounds i8, i8* %1496, i32 1
  store i8* %incdec.ptr2776, i8** %b, align 8
  store i8 25, i8* %1496, align 1
  br label %do.end2777

do.end2777:                                       ; preds = %while.end2775
  br label %sw.epilog

sw.bb2778:                                        ; preds = %do.end1529
  br label %do.body2779

do.body2779:                                      ; preds = %sw.bb2778
  br label %while.cond2780

while.cond2780:                                   ; preds = %do.end2854, %do.body2779
  %1497 = load i8*, i8** %b, align 8
  %1498 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2781 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1498, i32 0, i32 0
  %1499 = load i8*, i8** %buffer2781, align 8
  %sub.ptr.lhs.cast2782 = ptrtoint i8* %1497 to i64
  %sub.ptr.rhs.cast2783 = ptrtoint i8* %1499 to i64
  %sub.ptr.sub2784 = sub i64 %sub.ptr.lhs.cast2782, %sub.ptr.rhs.cast2783
  %add2785 = add nsw i64 %sub.ptr.sub2784, 1
  %1500 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated2786 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1500, i32 0, i32 1
  %1501 = load i64, i64* %allocated2786, align 8
  %cmp2787 = icmp ugt i64 %add2785, %1501
  br i1 %cmp2787, label %while.body2789, label %while.end2855

while.body2789:                                   ; preds = %while.cond2780
  br label %do.body2790

do.body2790:                                      ; preds = %while.body2789
  %1502 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2792 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1502, i32 0, i32 0
  %1503 = load i8*, i8** %buffer2792, align 8
  store i8* %1503, i8** %old_buffer2791, align 8
  %1504 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated2793 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1504, i32 0, i32 1
  %1505 = load i64, i64* %allocated2793, align 8
  %cmp2794 = icmp eq i64 %1505, 65536
  br i1 %cmp2794, label %if.then2796, label %if.end2797

if.then2796:                                      ; preds = %do.body2790
  store i32 15, i32* %retval, align 4
  br label %return

if.end2797:                                       ; preds = %do.body2790
  %1506 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated2798 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1506, i32 0, i32 1
  %1507 = load i64, i64* %allocated2798, align 8
  %shl2799 = shl i64 %1507, 1
  store i64 %shl2799, i64* %allocated2798, align 8
  %1508 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated2800 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1508, i32 0, i32 1
  %1509 = load i64, i64* %allocated2800, align 8
  %cmp2801 = icmp ugt i64 %1509, 65536
  br i1 %cmp2801, label %if.then2803, label %if.end2805

if.then2803:                                      ; preds = %if.end2797
  %1510 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated2804 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1510, i32 0, i32 1
  store i64 65536, i64* %allocated2804, align 8
  br label %if.end2805

if.end2805:                                       ; preds = %if.then2803, %if.end2797
  %1511 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2806 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1511, i32 0, i32 0
  %1512 = load i8*, i8** %buffer2806, align 8
  %1513 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated2807 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1513, i32 0, i32 1
  %1514 = load i64, i64* %allocated2807, align 8
  %call2808 = call align 16 i8* @realloc(i8* %1512, i64 %1514) #9
  %1515 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2809 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1515, i32 0, i32 0
  store i8* %call2808, i8** %buffer2809, align 8
  %1516 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2810 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1516, i32 0, i32 0
  %1517 = load i8*, i8** %buffer2810, align 8
  %cmp2811 = icmp eq i8* %1517, null
  br i1 %cmp2811, label %if.then2813, label %if.end2814

if.then2813:                                      ; preds = %if.end2805
  store i32 12, i32* %retval, align 4
  br label %return

if.end2814:                                       ; preds = %if.end2805
  %1518 = load i8*, i8** %old_buffer2791, align 8
  %1519 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2815 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1519, i32 0, i32 0
  %1520 = load i8*, i8** %buffer2815, align 8
  %cmp2816 = icmp ne i8* %1518, %1520
  br i1 %cmp2816, label %if.then2818, label %if.end2853

if.then2818:                                      ; preds = %if.end2814
  %1521 = load i8*, i8** %b, align 8
  %1522 = load i8*, i8** %old_buffer2791, align 8
  %sub.ptr.lhs.cast2819 = ptrtoint i8* %1521 to i64
  %sub.ptr.rhs.cast2820 = ptrtoint i8* %1522 to i64
  %sub.ptr.sub2821 = sub i64 %sub.ptr.lhs.cast2819, %sub.ptr.rhs.cast2820
  %1523 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2822 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1523, i32 0, i32 0
  %1524 = load i8*, i8** %buffer2822, align 8
  %add.ptr2823 = getelementptr inbounds i8, i8* %1524, i64 %sub.ptr.sub2821
  store i8* %add.ptr2823, i8** %b, align 8
  %1525 = load i8*, i8** %begalt, align 8
  %1526 = load i8*, i8** %old_buffer2791, align 8
  %sub.ptr.lhs.cast2824 = ptrtoint i8* %1525 to i64
  %sub.ptr.rhs.cast2825 = ptrtoint i8* %1526 to i64
  %sub.ptr.sub2826 = sub i64 %sub.ptr.lhs.cast2824, %sub.ptr.rhs.cast2825
  %1527 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2827 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1527, i32 0, i32 0
  %1528 = load i8*, i8** %buffer2827, align 8
  %add.ptr2828 = getelementptr inbounds i8, i8* %1528, i64 %sub.ptr.sub2826
  store i8* %add.ptr2828, i8** %begalt, align 8
  %1529 = load i8*, i8** %fixup_alt_jump, align 8
  %tobool2829 = icmp ne i8* %1529, null
  br i1 %tobool2829, label %if.then2830, label %if.end2836

if.then2830:                                      ; preds = %if.then2818
  %1530 = load i8*, i8** %fixup_alt_jump, align 8
  %1531 = load i8*, i8** %old_buffer2791, align 8
  %sub.ptr.lhs.cast2831 = ptrtoint i8* %1530 to i64
  %sub.ptr.rhs.cast2832 = ptrtoint i8* %1531 to i64
  %sub.ptr.sub2833 = sub i64 %sub.ptr.lhs.cast2831, %sub.ptr.rhs.cast2832
  %1532 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2834 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1532, i32 0, i32 0
  %1533 = load i8*, i8** %buffer2834, align 8
  %add.ptr2835 = getelementptr inbounds i8, i8* %1533, i64 %sub.ptr.sub2833
  store i8* %add.ptr2835, i8** %fixup_alt_jump, align 8
  br label %if.end2836

if.end2836:                                       ; preds = %if.then2830, %if.then2818
  %1534 = load i8*, i8** %laststart, align 8
  %tobool2837 = icmp ne i8* %1534, null
  br i1 %tobool2837, label %if.then2838, label %if.end2844

if.then2838:                                      ; preds = %if.end2836
  %1535 = load i8*, i8** %laststart, align 8
  %1536 = load i8*, i8** %old_buffer2791, align 8
  %sub.ptr.lhs.cast2839 = ptrtoint i8* %1535 to i64
  %sub.ptr.rhs.cast2840 = ptrtoint i8* %1536 to i64
  %sub.ptr.sub2841 = sub i64 %sub.ptr.lhs.cast2839, %sub.ptr.rhs.cast2840
  %1537 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2842 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1537, i32 0, i32 0
  %1538 = load i8*, i8** %buffer2842, align 8
  %add.ptr2843 = getelementptr inbounds i8, i8* %1538, i64 %sub.ptr.sub2841
  store i8* %add.ptr2843, i8** %laststart, align 8
  br label %if.end2844

if.end2844:                                       ; preds = %if.then2838, %if.end2836
  %1539 = load i8*, i8** %pending_exact, align 8
  %tobool2845 = icmp ne i8* %1539, null
  br i1 %tobool2845, label %if.then2846, label %if.end2852

if.then2846:                                      ; preds = %if.end2844
  %1540 = load i8*, i8** %pending_exact, align 8
  %1541 = load i8*, i8** %old_buffer2791, align 8
  %sub.ptr.lhs.cast2847 = ptrtoint i8* %1540 to i64
  %sub.ptr.rhs.cast2848 = ptrtoint i8* %1541 to i64
  %sub.ptr.sub2849 = sub i64 %sub.ptr.lhs.cast2847, %sub.ptr.rhs.cast2848
  %1542 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2850 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1542, i32 0, i32 0
  %1543 = load i8*, i8** %buffer2850, align 8
  %add.ptr2851 = getelementptr inbounds i8, i8* %1543, i64 %sub.ptr.sub2849
  store i8* %add.ptr2851, i8** %pending_exact, align 8
  br label %if.end2852

if.end2852:                                       ; preds = %if.then2846, %if.end2844
  br label %if.end2853

if.end2853:                                       ; preds = %if.end2852, %if.end2814
  br label %do.end2854

do.end2854:                                       ; preds = %if.end2853
  br label %while.cond2780, !llvm.loop !82

while.end2855:                                    ; preds = %while.cond2780
  %1544 = load i8*, i8** %b, align 8
  %incdec.ptr2856 = getelementptr inbounds i8, i8* %1544, i32 1
  store i8* %incdec.ptr2856, i8** %b, align 8
  store i8 26, i8* %1544, align 1
  br label %do.end2857

do.end2857:                                       ; preds = %while.end2855
  br label %sw.epilog

sw.bb2858:                                        ; preds = %do.end1529
  br label %do.body2859

do.body2859:                                      ; preds = %sw.bb2858
  br label %while.cond2860

while.cond2860:                                   ; preds = %do.end2934, %do.body2859
  %1545 = load i8*, i8** %b, align 8
  %1546 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2861 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1546, i32 0, i32 0
  %1547 = load i8*, i8** %buffer2861, align 8
  %sub.ptr.lhs.cast2862 = ptrtoint i8* %1545 to i64
  %sub.ptr.rhs.cast2863 = ptrtoint i8* %1547 to i64
  %sub.ptr.sub2864 = sub i64 %sub.ptr.lhs.cast2862, %sub.ptr.rhs.cast2863
  %add2865 = add nsw i64 %sub.ptr.sub2864, 1
  %1548 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated2866 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1548, i32 0, i32 1
  %1549 = load i64, i64* %allocated2866, align 8
  %cmp2867 = icmp ugt i64 %add2865, %1549
  br i1 %cmp2867, label %while.body2869, label %while.end2935

while.body2869:                                   ; preds = %while.cond2860
  br label %do.body2870

do.body2870:                                      ; preds = %while.body2869
  %1550 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2872 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1550, i32 0, i32 0
  %1551 = load i8*, i8** %buffer2872, align 8
  store i8* %1551, i8** %old_buffer2871, align 8
  %1552 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated2873 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1552, i32 0, i32 1
  %1553 = load i64, i64* %allocated2873, align 8
  %cmp2874 = icmp eq i64 %1553, 65536
  br i1 %cmp2874, label %if.then2876, label %if.end2877

if.then2876:                                      ; preds = %do.body2870
  store i32 15, i32* %retval, align 4
  br label %return

if.end2877:                                       ; preds = %do.body2870
  %1554 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated2878 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1554, i32 0, i32 1
  %1555 = load i64, i64* %allocated2878, align 8
  %shl2879 = shl i64 %1555, 1
  store i64 %shl2879, i64* %allocated2878, align 8
  %1556 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated2880 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1556, i32 0, i32 1
  %1557 = load i64, i64* %allocated2880, align 8
  %cmp2881 = icmp ugt i64 %1557, 65536
  br i1 %cmp2881, label %if.then2883, label %if.end2885

if.then2883:                                      ; preds = %if.end2877
  %1558 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated2884 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1558, i32 0, i32 1
  store i64 65536, i64* %allocated2884, align 8
  br label %if.end2885

if.end2885:                                       ; preds = %if.then2883, %if.end2877
  %1559 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2886 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1559, i32 0, i32 0
  %1560 = load i8*, i8** %buffer2886, align 8
  %1561 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated2887 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1561, i32 0, i32 1
  %1562 = load i64, i64* %allocated2887, align 8
  %call2888 = call align 16 i8* @realloc(i8* %1560, i64 %1562) #9
  %1563 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2889 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1563, i32 0, i32 0
  store i8* %call2888, i8** %buffer2889, align 8
  %1564 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2890 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1564, i32 0, i32 0
  %1565 = load i8*, i8** %buffer2890, align 8
  %cmp2891 = icmp eq i8* %1565, null
  br i1 %cmp2891, label %if.then2893, label %if.end2894

if.then2893:                                      ; preds = %if.end2885
  store i32 12, i32* %retval, align 4
  br label %return

if.end2894:                                       ; preds = %if.end2885
  %1566 = load i8*, i8** %old_buffer2871, align 8
  %1567 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2895 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1567, i32 0, i32 0
  %1568 = load i8*, i8** %buffer2895, align 8
  %cmp2896 = icmp ne i8* %1566, %1568
  br i1 %cmp2896, label %if.then2898, label %if.end2933

if.then2898:                                      ; preds = %if.end2894
  %1569 = load i8*, i8** %b, align 8
  %1570 = load i8*, i8** %old_buffer2871, align 8
  %sub.ptr.lhs.cast2899 = ptrtoint i8* %1569 to i64
  %sub.ptr.rhs.cast2900 = ptrtoint i8* %1570 to i64
  %sub.ptr.sub2901 = sub i64 %sub.ptr.lhs.cast2899, %sub.ptr.rhs.cast2900
  %1571 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2902 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1571, i32 0, i32 0
  %1572 = load i8*, i8** %buffer2902, align 8
  %add.ptr2903 = getelementptr inbounds i8, i8* %1572, i64 %sub.ptr.sub2901
  store i8* %add.ptr2903, i8** %b, align 8
  %1573 = load i8*, i8** %begalt, align 8
  %1574 = load i8*, i8** %old_buffer2871, align 8
  %sub.ptr.lhs.cast2904 = ptrtoint i8* %1573 to i64
  %sub.ptr.rhs.cast2905 = ptrtoint i8* %1574 to i64
  %sub.ptr.sub2906 = sub i64 %sub.ptr.lhs.cast2904, %sub.ptr.rhs.cast2905
  %1575 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2907 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1575, i32 0, i32 0
  %1576 = load i8*, i8** %buffer2907, align 8
  %add.ptr2908 = getelementptr inbounds i8, i8* %1576, i64 %sub.ptr.sub2906
  store i8* %add.ptr2908, i8** %begalt, align 8
  %1577 = load i8*, i8** %fixup_alt_jump, align 8
  %tobool2909 = icmp ne i8* %1577, null
  br i1 %tobool2909, label %if.then2910, label %if.end2916

if.then2910:                                      ; preds = %if.then2898
  %1578 = load i8*, i8** %fixup_alt_jump, align 8
  %1579 = load i8*, i8** %old_buffer2871, align 8
  %sub.ptr.lhs.cast2911 = ptrtoint i8* %1578 to i64
  %sub.ptr.rhs.cast2912 = ptrtoint i8* %1579 to i64
  %sub.ptr.sub2913 = sub i64 %sub.ptr.lhs.cast2911, %sub.ptr.rhs.cast2912
  %1580 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2914 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1580, i32 0, i32 0
  %1581 = load i8*, i8** %buffer2914, align 8
  %add.ptr2915 = getelementptr inbounds i8, i8* %1581, i64 %sub.ptr.sub2913
  store i8* %add.ptr2915, i8** %fixup_alt_jump, align 8
  br label %if.end2916

if.end2916:                                       ; preds = %if.then2910, %if.then2898
  %1582 = load i8*, i8** %laststart, align 8
  %tobool2917 = icmp ne i8* %1582, null
  br i1 %tobool2917, label %if.then2918, label %if.end2924

if.then2918:                                      ; preds = %if.end2916
  %1583 = load i8*, i8** %laststart, align 8
  %1584 = load i8*, i8** %old_buffer2871, align 8
  %sub.ptr.lhs.cast2919 = ptrtoint i8* %1583 to i64
  %sub.ptr.rhs.cast2920 = ptrtoint i8* %1584 to i64
  %sub.ptr.sub2921 = sub i64 %sub.ptr.lhs.cast2919, %sub.ptr.rhs.cast2920
  %1585 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2922 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1585, i32 0, i32 0
  %1586 = load i8*, i8** %buffer2922, align 8
  %add.ptr2923 = getelementptr inbounds i8, i8* %1586, i64 %sub.ptr.sub2921
  store i8* %add.ptr2923, i8** %laststart, align 8
  br label %if.end2924

if.end2924:                                       ; preds = %if.then2918, %if.end2916
  %1587 = load i8*, i8** %pending_exact, align 8
  %tobool2925 = icmp ne i8* %1587, null
  br i1 %tobool2925, label %if.then2926, label %if.end2932

if.then2926:                                      ; preds = %if.end2924
  %1588 = load i8*, i8** %pending_exact, align 8
  %1589 = load i8*, i8** %old_buffer2871, align 8
  %sub.ptr.lhs.cast2927 = ptrtoint i8* %1588 to i64
  %sub.ptr.rhs.cast2928 = ptrtoint i8* %1589 to i64
  %sub.ptr.sub2929 = sub i64 %sub.ptr.lhs.cast2927, %sub.ptr.rhs.cast2928
  %1590 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2930 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1590, i32 0, i32 0
  %1591 = load i8*, i8** %buffer2930, align 8
  %add.ptr2931 = getelementptr inbounds i8, i8* %1591, i64 %sub.ptr.sub2929
  store i8* %add.ptr2931, i8** %pending_exact, align 8
  br label %if.end2932

if.end2932:                                       ; preds = %if.then2926, %if.end2924
  br label %if.end2933

if.end2933:                                       ; preds = %if.end2932, %if.end2894
  br label %do.end2934

do.end2934:                                       ; preds = %if.end2933
  br label %while.cond2860, !llvm.loop !83

while.end2935:                                    ; preds = %while.cond2860
  %1592 = load i8*, i8** %b, align 8
  %incdec.ptr2936 = getelementptr inbounds i8, i8* %1592, i32 1
  store i8* %incdec.ptr2936, i8** %b, align 8
  store i8 27, i8* %1592, align 1
  br label %do.end2937

do.end2937:                                       ; preds = %while.end2935
  br label %sw.epilog

sw.bb2938:                                        ; preds = %do.end1529
  br label %do.body2939

do.body2939:                                      ; preds = %sw.bb2938
  br label %while.cond2940

while.cond2940:                                   ; preds = %do.end3014, %do.body2939
  %1593 = load i8*, i8** %b, align 8
  %1594 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2941 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1594, i32 0, i32 0
  %1595 = load i8*, i8** %buffer2941, align 8
  %sub.ptr.lhs.cast2942 = ptrtoint i8* %1593 to i64
  %sub.ptr.rhs.cast2943 = ptrtoint i8* %1595 to i64
  %sub.ptr.sub2944 = sub i64 %sub.ptr.lhs.cast2942, %sub.ptr.rhs.cast2943
  %add2945 = add nsw i64 %sub.ptr.sub2944, 1
  %1596 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated2946 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1596, i32 0, i32 1
  %1597 = load i64, i64* %allocated2946, align 8
  %cmp2947 = icmp ugt i64 %add2945, %1597
  br i1 %cmp2947, label %while.body2949, label %while.end3015

while.body2949:                                   ; preds = %while.cond2940
  br label %do.body2950

do.body2950:                                      ; preds = %while.body2949
  %1598 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2952 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1598, i32 0, i32 0
  %1599 = load i8*, i8** %buffer2952, align 8
  store i8* %1599, i8** %old_buffer2951, align 8
  %1600 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated2953 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1600, i32 0, i32 1
  %1601 = load i64, i64* %allocated2953, align 8
  %cmp2954 = icmp eq i64 %1601, 65536
  br i1 %cmp2954, label %if.then2956, label %if.end2957

if.then2956:                                      ; preds = %do.body2950
  store i32 15, i32* %retval, align 4
  br label %return

if.end2957:                                       ; preds = %do.body2950
  %1602 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated2958 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1602, i32 0, i32 1
  %1603 = load i64, i64* %allocated2958, align 8
  %shl2959 = shl i64 %1603, 1
  store i64 %shl2959, i64* %allocated2958, align 8
  %1604 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated2960 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1604, i32 0, i32 1
  %1605 = load i64, i64* %allocated2960, align 8
  %cmp2961 = icmp ugt i64 %1605, 65536
  br i1 %cmp2961, label %if.then2963, label %if.end2965

if.then2963:                                      ; preds = %if.end2957
  %1606 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated2964 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1606, i32 0, i32 1
  store i64 65536, i64* %allocated2964, align 8
  br label %if.end2965

if.end2965:                                       ; preds = %if.then2963, %if.end2957
  %1607 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2966 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1607, i32 0, i32 0
  %1608 = load i8*, i8** %buffer2966, align 8
  %1609 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated2967 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1609, i32 0, i32 1
  %1610 = load i64, i64* %allocated2967, align 8
  %call2968 = call align 16 i8* @realloc(i8* %1608, i64 %1610) #9
  %1611 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2969 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1611, i32 0, i32 0
  store i8* %call2968, i8** %buffer2969, align 8
  %1612 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2970 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1612, i32 0, i32 0
  %1613 = load i8*, i8** %buffer2970, align 8
  %cmp2971 = icmp eq i8* %1613, null
  br i1 %cmp2971, label %if.then2973, label %if.end2974

if.then2973:                                      ; preds = %if.end2965
  store i32 12, i32* %retval, align 4
  br label %return

if.end2974:                                       ; preds = %if.end2965
  %1614 = load i8*, i8** %old_buffer2951, align 8
  %1615 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2975 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1615, i32 0, i32 0
  %1616 = load i8*, i8** %buffer2975, align 8
  %cmp2976 = icmp ne i8* %1614, %1616
  br i1 %cmp2976, label %if.then2978, label %if.end3013

if.then2978:                                      ; preds = %if.end2974
  %1617 = load i8*, i8** %b, align 8
  %1618 = load i8*, i8** %old_buffer2951, align 8
  %sub.ptr.lhs.cast2979 = ptrtoint i8* %1617 to i64
  %sub.ptr.rhs.cast2980 = ptrtoint i8* %1618 to i64
  %sub.ptr.sub2981 = sub i64 %sub.ptr.lhs.cast2979, %sub.ptr.rhs.cast2980
  %1619 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2982 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1619, i32 0, i32 0
  %1620 = load i8*, i8** %buffer2982, align 8
  %add.ptr2983 = getelementptr inbounds i8, i8* %1620, i64 %sub.ptr.sub2981
  store i8* %add.ptr2983, i8** %b, align 8
  %1621 = load i8*, i8** %begalt, align 8
  %1622 = load i8*, i8** %old_buffer2951, align 8
  %sub.ptr.lhs.cast2984 = ptrtoint i8* %1621 to i64
  %sub.ptr.rhs.cast2985 = ptrtoint i8* %1622 to i64
  %sub.ptr.sub2986 = sub i64 %sub.ptr.lhs.cast2984, %sub.ptr.rhs.cast2985
  %1623 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2987 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1623, i32 0, i32 0
  %1624 = load i8*, i8** %buffer2987, align 8
  %add.ptr2988 = getelementptr inbounds i8, i8* %1624, i64 %sub.ptr.sub2986
  store i8* %add.ptr2988, i8** %begalt, align 8
  %1625 = load i8*, i8** %fixup_alt_jump, align 8
  %tobool2989 = icmp ne i8* %1625, null
  br i1 %tobool2989, label %if.then2990, label %if.end2996

if.then2990:                                      ; preds = %if.then2978
  %1626 = load i8*, i8** %fixup_alt_jump, align 8
  %1627 = load i8*, i8** %old_buffer2951, align 8
  %sub.ptr.lhs.cast2991 = ptrtoint i8* %1626 to i64
  %sub.ptr.rhs.cast2992 = ptrtoint i8* %1627 to i64
  %sub.ptr.sub2993 = sub i64 %sub.ptr.lhs.cast2991, %sub.ptr.rhs.cast2992
  %1628 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer2994 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1628, i32 0, i32 0
  %1629 = load i8*, i8** %buffer2994, align 8
  %add.ptr2995 = getelementptr inbounds i8, i8* %1629, i64 %sub.ptr.sub2993
  store i8* %add.ptr2995, i8** %fixup_alt_jump, align 8
  br label %if.end2996

if.end2996:                                       ; preds = %if.then2990, %if.then2978
  %1630 = load i8*, i8** %laststart, align 8
  %tobool2997 = icmp ne i8* %1630, null
  br i1 %tobool2997, label %if.then2998, label %if.end3004

if.then2998:                                      ; preds = %if.end2996
  %1631 = load i8*, i8** %laststart, align 8
  %1632 = load i8*, i8** %old_buffer2951, align 8
  %sub.ptr.lhs.cast2999 = ptrtoint i8* %1631 to i64
  %sub.ptr.rhs.cast3000 = ptrtoint i8* %1632 to i64
  %sub.ptr.sub3001 = sub i64 %sub.ptr.lhs.cast2999, %sub.ptr.rhs.cast3000
  %1633 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer3002 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1633, i32 0, i32 0
  %1634 = load i8*, i8** %buffer3002, align 8
  %add.ptr3003 = getelementptr inbounds i8, i8* %1634, i64 %sub.ptr.sub3001
  store i8* %add.ptr3003, i8** %laststart, align 8
  br label %if.end3004

if.end3004:                                       ; preds = %if.then2998, %if.end2996
  %1635 = load i8*, i8** %pending_exact, align 8
  %tobool3005 = icmp ne i8* %1635, null
  br i1 %tobool3005, label %if.then3006, label %if.end3012

if.then3006:                                      ; preds = %if.end3004
  %1636 = load i8*, i8** %pending_exact, align 8
  %1637 = load i8*, i8** %old_buffer2951, align 8
  %sub.ptr.lhs.cast3007 = ptrtoint i8* %1636 to i64
  %sub.ptr.rhs.cast3008 = ptrtoint i8* %1637 to i64
  %sub.ptr.sub3009 = sub i64 %sub.ptr.lhs.cast3007, %sub.ptr.rhs.cast3008
  %1638 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer3010 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1638, i32 0, i32 0
  %1639 = load i8*, i8** %buffer3010, align 8
  %add.ptr3011 = getelementptr inbounds i8, i8* %1639, i64 %sub.ptr.sub3009
  store i8* %add.ptr3011, i8** %pending_exact, align 8
  br label %if.end3012

if.end3012:                                       ; preds = %if.then3006, %if.end3004
  br label %if.end3013

if.end3013:                                       ; preds = %if.end3012, %if.end2974
  br label %do.end3014

do.end3014:                                       ; preds = %if.end3013
  br label %while.cond2940, !llvm.loop !84

while.end3015:                                    ; preds = %while.cond2940
  %1640 = load i8*, i8** %b, align 8
  %incdec.ptr3016 = getelementptr inbounds i8, i8* %1640, i32 1
  store i8* %incdec.ptr3016, i8** %b, align 8
  store i8 28, i8* %1640, align 1
  br label %do.end3017

do.end3017:                                       ; preds = %while.end3015
  br label %sw.epilog

sw.bb3018:                                        ; preds = %do.end1529
  br label %do.body3019

do.body3019:                                      ; preds = %sw.bb3018
  br label %while.cond3020

while.cond3020:                                   ; preds = %do.end3094, %do.body3019
  %1641 = load i8*, i8** %b, align 8
  %1642 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer3021 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1642, i32 0, i32 0
  %1643 = load i8*, i8** %buffer3021, align 8
  %sub.ptr.lhs.cast3022 = ptrtoint i8* %1641 to i64
  %sub.ptr.rhs.cast3023 = ptrtoint i8* %1643 to i64
  %sub.ptr.sub3024 = sub i64 %sub.ptr.lhs.cast3022, %sub.ptr.rhs.cast3023
  %add3025 = add nsw i64 %sub.ptr.sub3024, 1
  %1644 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated3026 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1644, i32 0, i32 1
  %1645 = load i64, i64* %allocated3026, align 8
  %cmp3027 = icmp ugt i64 %add3025, %1645
  br i1 %cmp3027, label %while.body3029, label %while.end3095

while.body3029:                                   ; preds = %while.cond3020
  br label %do.body3030

do.body3030:                                      ; preds = %while.body3029
  %1646 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer3032 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1646, i32 0, i32 0
  %1647 = load i8*, i8** %buffer3032, align 8
  store i8* %1647, i8** %old_buffer3031, align 8
  %1648 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated3033 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1648, i32 0, i32 1
  %1649 = load i64, i64* %allocated3033, align 8
  %cmp3034 = icmp eq i64 %1649, 65536
  br i1 %cmp3034, label %if.then3036, label %if.end3037

if.then3036:                                      ; preds = %do.body3030
  store i32 15, i32* %retval, align 4
  br label %return

if.end3037:                                       ; preds = %do.body3030
  %1650 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated3038 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1650, i32 0, i32 1
  %1651 = load i64, i64* %allocated3038, align 8
  %shl3039 = shl i64 %1651, 1
  store i64 %shl3039, i64* %allocated3038, align 8
  %1652 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated3040 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1652, i32 0, i32 1
  %1653 = load i64, i64* %allocated3040, align 8
  %cmp3041 = icmp ugt i64 %1653, 65536
  br i1 %cmp3041, label %if.then3043, label %if.end3045

if.then3043:                                      ; preds = %if.end3037
  %1654 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated3044 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1654, i32 0, i32 1
  store i64 65536, i64* %allocated3044, align 8
  br label %if.end3045

if.end3045:                                       ; preds = %if.then3043, %if.end3037
  %1655 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer3046 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1655, i32 0, i32 0
  %1656 = load i8*, i8** %buffer3046, align 8
  %1657 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated3047 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1657, i32 0, i32 1
  %1658 = load i64, i64* %allocated3047, align 8
  %call3048 = call align 16 i8* @realloc(i8* %1656, i64 %1658) #9
  %1659 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer3049 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1659, i32 0, i32 0
  store i8* %call3048, i8** %buffer3049, align 8
  %1660 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer3050 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1660, i32 0, i32 0
  %1661 = load i8*, i8** %buffer3050, align 8
  %cmp3051 = icmp eq i8* %1661, null
  br i1 %cmp3051, label %if.then3053, label %if.end3054

if.then3053:                                      ; preds = %if.end3045
  store i32 12, i32* %retval, align 4
  br label %return

if.end3054:                                       ; preds = %if.end3045
  %1662 = load i8*, i8** %old_buffer3031, align 8
  %1663 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer3055 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1663, i32 0, i32 0
  %1664 = load i8*, i8** %buffer3055, align 8
  %cmp3056 = icmp ne i8* %1662, %1664
  br i1 %cmp3056, label %if.then3058, label %if.end3093

if.then3058:                                      ; preds = %if.end3054
  %1665 = load i8*, i8** %b, align 8
  %1666 = load i8*, i8** %old_buffer3031, align 8
  %sub.ptr.lhs.cast3059 = ptrtoint i8* %1665 to i64
  %sub.ptr.rhs.cast3060 = ptrtoint i8* %1666 to i64
  %sub.ptr.sub3061 = sub i64 %sub.ptr.lhs.cast3059, %sub.ptr.rhs.cast3060
  %1667 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer3062 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1667, i32 0, i32 0
  %1668 = load i8*, i8** %buffer3062, align 8
  %add.ptr3063 = getelementptr inbounds i8, i8* %1668, i64 %sub.ptr.sub3061
  store i8* %add.ptr3063, i8** %b, align 8
  %1669 = load i8*, i8** %begalt, align 8
  %1670 = load i8*, i8** %old_buffer3031, align 8
  %sub.ptr.lhs.cast3064 = ptrtoint i8* %1669 to i64
  %sub.ptr.rhs.cast3065 = ptrtoint i8* %1670 to i64
  %sub.ptr.sub3066 = sub i64 %sub.ptr.lhs.cast3064, %sub.ptr.rhs.cast3065
  %1671 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer3067 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1671, i32 0, i32 0
  %1672 = load i8*, i8** %buffer3067, align 8
  %add.ptr3068 = getelementptr inbounds i8, i8* %1672, i64 %sub.ptr.sub3066
  store i8* %add.ptr3068, i8** %begalt, align 8
  %1673 = load i8*, i8** %fixup_alt_jump, align 8
  %tobool3069 = icmp ne i8* %1673, null
  br i1 %tobool3069, label %if.then3070, label %if.end3076

if.then3070:                                      ; preds = %if.then3058
  %1674 = load i8*, i8** %fixup_alt_jump, align 8
  %1675 = load i8*, i8** %old_buffer3031, align 8
  %sub.ptr.lhs.cast3071 = ptrtoint i8* %1674 to i64
  %sub.ptr.rhs.cast3072 = ptrtoint i8* %1675 to i64
  %sub.ptr.sub3073 = sub i64 %sub.ptr.lhs.cast3071, %sub.ptr.rhs.cast3072
  %1676 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer3074 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1676, i32 0, i32 0
  %1677 = load i8*, i8** %buffer3074, align 8
  %add.ptr3075 = getelementptr inbounds i8, i8* %1677, i64 %sub.ptr.sub3073
  store i8* %add.ptr3075, i8** %fixup_alt_jump, align 8
  br label %if.end3076

if.end3076:                                       ; preds = %if.then3070, %if.then3058
  %1678 = load i8*, i8** %laststart, align 8
  %tobool3077 = icmp ne i8* %1678, null
  br i1 %tobool3077, label %if.then3078, label %if.end3084

if.then3078:                                      ; preds = %if.end3076
  %1679 = load i8*, i8** %laststart, align 8
  %1680 = load i8*, i8** %old_buffer3031, align 8
  %sub.ptr.lhs.cast3079 = ptrtoint i8* %1679 to i64
  %sub.ptr.rhs.cast3080 = ptrtoint i8* %1680 to i64
  %sub.ptr.sub3081 = sub i64 %sub.ptr.lhs.cast3079, %sub.ptr.rhs.cast3080
  %1681 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer3082 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1681, i32 0, i32 0
  %1682 = load i8*, i8** %buffer3082, align 8
  %add.ptr3083 = getelementptr inbounds i8, i8* %1682, i64 %sub.ptr.sub3081
  store i8* %add.ptr3083, i8** %laststart, align 8
  br label %if.end3084

if.end3084:                                       ; preds = %if.then3078, %if.end3076
  %1683 = load i8*, i8** %pending_exact, align 8
  %tobool3085 = icmp ne i8* %1683, null
  br i1 %tobool3085, label %if.then3086, label %if.end3092

if.then3086:                                      ; preds = %if.end3084
  %1684 = load i8*, i8** %pending_exact, align 8
  %1685 = load i8*, i8** %old_buffer3031, align 8
  %sub.ptr.lhs.cast3087 = ptrtoint i8* %1684 to i64
  %sub.ptr.rhs.cast3088 = ptrtoint i8* %1685 to i64
  %sub.ptr.sub3089 = sub i64 %sub.ptr.lhs.cast3087, %sub.ptr.rhs.cast3088
  %1686 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer3090 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1686, i32 0, i32 0
  %1687 = load i8*, i8** %buffer3090, align 8
  %add.ptr3091 = getelementptr inbounds i8, i8* %1687, i64 %sub.ptr.sub3089
  store i8* %add.ptr3091, i8** %pending_exact, align 8
  br label %if.end3092

if.end3092:                                       ; preds = %if.then3086, %if.end3084
  br label %if.end3093

if.end3093:                                       ; preds = %if.end3092, %if.end3054
  br label %do.end3094

do.end3094:                                       ; preds = %if.end3093
  br label %while.cond3020, !llvm.loop !85

while.end3095:                                    ; preds = %while.cond3020
  %1688 = load i8*, i8** %b, align 8
  %incdec.ptr3096 = getelementptr inbounds i8, i8* %1688, i32 1
  store i8* %incdec.ptr3096, i8** %b, align 8
  store i8 10, i8* %1688, align 1
  br label %do.end3097

do.end3097:                                       ; preds = %while.end3095
  br label %sw.epilog

sw.bb3098:                                        ; preds = %do.end1529
  br label %do.body3099

do.body3099:                                      ; preds = %sw.bb3098
  br label %while.cond3100

while.cond3100:                                   ; preds = %do.end3174, %do.body3099
  %1689 = load i8*, i8** %b, align 8
  %1690 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer3101 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1690, i32 0, i32 0
  %1691 = load i8*, i8** %buffer3101, align 8
  %sub.ptr.lhs.cast3102 = ptrtoint i8* %1689 to i64
  %sub.ptr.rhs.cast3103 = ptrtoint i8* %1691 to i64
  %sub.ptr.sub3104 = sub i64 %sub.ptr.lhs.cast3102, %sub.ptr.rhs.cast3103
  %add3105 = add nsw i64 %sub.ptr.sub3104, 1
  %1692 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated3106 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1692, i32 0, i32 1
  %1693 = load i64, i64* %allocated3106, align 8
  %cmp3107 = icmp ugt i64 %add3105, %1693
  br i1 %cmp3107, label %while.body3109, label %while.end3175

while.body3109:                                   ; preds = %while.cond3100
  br label %do.body3110

do.body3110:                                      ; preds = %while.body3109
  %1694 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer3112 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1694, i32 0, i32 0
  %1695 = load i8*, i8** %buffer3112, align 8
  store i8* %1695, i8** %old_buffer3111, align 8
  %1696 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated3113 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1696, i32 0, i32 1
  %1697 = load i64, i64* %allocated3113, align 8
  %cmp3114 = icmp eq i64 %1697, 65536
  br i1 %cmp3114, label %if.then3116, label %if.end3117

if.then3116:                                      ; preds = %do.body3110
  store i32 15, i32* %retval, align 4
  br label %return

if.end3117:                                       ; preds = %do.body3110
  %1698 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated3118 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1698, i32 0, i32 1
  %1699 = load i64, i64* %allocated3118, align 8
  %shl3119 = shl i64 %1699, 1
  store i64 %shl3119, i64* %allocated3118, align 8
  %1700 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated3120 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1700, i32 0, i32 1
  %1701 = load i64, i64* %allocated3120, align 8
  %cmp3121 = icmp ugt i64 %1701, 65536
  br i1 %cmp3121, label %if.then3123, label %if.end3125

if.then3123:                                      ; preds = %if.end3117
  %1702 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated3124 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1702, i32 0, i32 1
  store i64 65536, i64* %allocated3124, align 8
  br label %if.end3125

if.end3125:                                       ; preds = %if.then3123, %if.end3117
  %1703 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer3126 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1703, i32 0, i32 0
  %1704 = load i8*, i8** %buffer3126, align 8
  %1705 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated3127 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1705, i32 0, i32 1
  %1706 = load i64, i64* %allocated3127, align 8
  %call3128 = call align 16 i8* @realloc(i8* %1704, i64 %1706) #9
  %1707 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer3129 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1707, i32 0, i32 0
  store i8* %call3128, i8** %buffer3129, align 8
  %1708 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer3130 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1708, i32 0, i32 0
  %1709 = load i8*, i8** %buffer3130, align 8
  %cmp3131 = icmp eq i8* %1709, null
  br i1 %cmp3131, label %if.then3133, label %if.end3134

if.then3133:                                      ; preds = %if.end3125
  store i32 12, i32* %retval, align 4
  br label %return

if.end3134:                                       ; preds = %if.end3125
  %1710 = load i8*, i8** %old_buffer3111, align 8
  %1711 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer3135 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1711, i32 0, i32 0
  %1712 = load i8*, i8** %buffer3135, align 8
  %cmp3136 = icmp ne i8* %1710, %1712
  br i1 %cmp3136, label %if.then3138, label %if.end3173

if.then3138:                                      ; preds = %if.end3134
  %1713 = load i8*, i8** %b, align 8
  %1714 = load i8*, i8** %old_buffer3111, align 8
  %sub.ptr.lhs.cast3139 = ptrtoint i8* %1713 to i64
  %sub.ptr.rhs.cast3140 = ptrtoint i8* %1714 to i64
  %sub.ptr.sub3141 = sub i64 %sub.ptr.lhs.cast3139, %sub.ptr.rhs.cast3140
  %1715 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer3142 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1715, i32 0, i32 0
  %1716 = load i8*, i8** %buffer3142, align 8
  %add.ptr3143 = getelementptr inbounds i8, i8* %1716, i64 %sub.ptr.sub3141
  store i8* %add.ptr3143, i8** %b, align 8
  %1717 = load i8*, i8** %begalt, align 8
  %1718 = load i8*, i8** %old_buffer3111, align 8
  %sub.ptr.lhs.cast3144 = ptrtoint i8* %1717 to i64
  %sub.ptr.rhs.cast3145 = ptrtoint i8* %1718 to i64
  %sub.ptr.sub3146 = sub i64 %sub.ptr.lhs.cast3144, %sub.ptr.rhs.cast3145
  %1719 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer3147 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1719, i32 0, i32 0
  %1720 = load i8*, i8** %buffer3147, align 8
  %add.ptr3148 = getelementptr inbounds i8, i8* %1720, i64 %sub.ptr.sub3146
  store i8* %add.ptr3148, i8** %begalt, align 8
  %1721 = load i8*, i8** %fixup_alt_jump, align 8
  %tobool3149 = icmp ne i8* %1721, null
  br i1 %tobool3149, label %if.then3150, label %if.end3156

if.then3150:                                      ; preds = %if.then3138
  %1722 = load i8*, i8** %fixup_alt_jump, align 8
  %1723 = load i8*, i8** %old_buffer3111, align 8
  %sub.ptr.lhs.cast3151 = ptrtoint i8* %1722 to i64
  %sub.ptr.rhs.cast3152 = ptrtoint i8* %1723 to i64
  %sub.ptr.sub3153 = sub i64 %sub.ptr.lhs.cast3151, %sub.ptr.rhs.cast3152
  %1724 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer3154 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1724, i32 0, i32 0
  %1725 = load i8*, i8** %buffer3154, align 8
  %add.ptr3155 = getelementptr inbounds i8, i8* %1725, i64 %sub.ptr.sub3153
  store i8* %add.ptr3155, i8** %fixup_alt_jump, align 8
  br label %if.end3156

if.end3156:                                       ; preds = %if.then3150, %if.then3138
  %1726 = load i8*, i8** %laststart, align 8
  %tobool3157 = icmp ne i8* %1726, null
  br i1 %tobool3157, label %if.then3158, label %if.end3164

if.then3158:                                      ; preds = %if.end3156
  %1727 = load i8*, i8** %laststart, align 8
  %1728 = load i8*, i8** %old_buffer3111, align 8
  %sub.ptr.lhs.cast3159 = ptrtoint i8* %1727 to i64
  %sub.ptr.rhs.cast3160 = ptrtoint i8* %1728 to i64
  %sub.ptr.sub3161 = sub i64 %sub.ptr.lhs.cast3159, %sub.ptr.rhs.cast3160
  %1729 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer3162 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1729, i32 0, i32 0
  %1730 = load i8*, i8** %buffer3162, align 8
  %add.ptr3163 = getelementptr inbounds i8, i8* %1730, i64 %sub.ptr.sub3161
  store i8* %add.ptr3163, i8** %laststart, align 8
  br label %if.end3164

if.end3164:                                       ; preds = %if.then3158, %if.end3156
  %1731 = load i8*, i8** %pending_exact, align 8
  %tobool3165 = icmp ne i8* %1731, null
  br i1 %tobool3165, label %if.then3166, label %if.end3172

if.then3166:                                      ; preds = %if.end3164
  %1732 = load i8*, i8** %pending_exact, align 8
  %1733 = load i8*, i8** %old_buffer3111, align 8
  %sub.ptr.lhs.cast3167 = ptrtoint i8* %1732 to i64
  %sub.ptr.rhs.cast3168 = ptrtoint i8* %1733 to i64
  %sub.ptr.sub3169 = sub i64 %sub.ptr.lhs.cast3167, %sub.ptr.rhs.cast3168
  %1734 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer3170 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1734, i32 0, i32 0
  %1735 = load i8*, i8** %buffer3170, align 8
  %add.ptr3171 = getelementptr inbounds i8, i8* %1735, i64 %sub.ptr.sub3169
  store i8* %add.ptr3171, i8** %pending_exact, align 8
  br label %if.end3172

if.end3172:                                       ; preds = %if.then3166, %if.end3164
  br label %if.end3173

if.end3173:                                       ; preds = %if.end3172, %if.end3134
  br label %do.end3174

do.end3174:                                       ; preds = %if.end3173
  br label %while.cond3100, !llvm.loop !86

while.end3175:                                    ; preds = %while.cond3100
  %1736 = load i8*, i8** %b, align 8
  %incdec.ptr3176 = getelementptr inbounds i8, i8* %1736, i32 1
  store i8* %incdec.ptr3176, i8** %b, align 8
  store i8 11, i8* %1736, align 1
  br label %do.end3177

do.end3177:                                       ; preds = %while.end3175
  br label %sw.epilog

sw.bb3178:                                        ; preds = %do.end1529, %do.end1529, %do.end1529, %do.end1529, %do.end1529, %do.end1529, %do.end1529, %do.end1529, %do.end1529
  %1737 = load i32, i32* %syntax.addr, align 4
  %and3179 = and i32 %1737, 16384
  %tobool3180 = icmp ne i32 %and3179, 0
  br i1 %tobool3180, label %if.then3181, label %if.end3182

if.then3181:                                      ; preds = %sw.bb3178
  br label %normal_char

if.end3182:                                       ; preds = %sw.bb3178
  %1738 = load i8, i8* %c, align 1
  %conv3183 = zext i8 %1738 to i32
  %sub3184 = sub nsw i32 %conv3183, 48
  %conv3185 = trunc i32 %sub3184 to i8
  store i8 %conv3185, i8* %c1, align 1
  %1739 = load i8, i8* %c1, align 1
  %conv3186 = zext i8 %1739 to i32
  %1740 = load i32, i32* %regnum, align 4
  %cmp3187 = icmp ugt i32 %conv3186, %1740
  br i1 %cmp3187, label %if.then3189, label %if.end3190

if.then3189:                                      ; preds = %if.end3182
  store i32 6, i32* %retval, align 4
  br label %return

if.end3190:                                       ; preds = %if.end3182
  %1741 = load i8, i8* %c1, align 1
  %conv3191 = zext i8 %1741 to i32
  %1742 = bitcast %struct.compile_stack_type* %compile_stack to { %struct.compile_stack_elt_t*, i64 }*
  %1743 = getelementptr inbounds { %struct.compile_stack_elt_t*, i64 }, { %struct.compile_stack_elt_t*, i64 }* %1742, i32 0, i32 0
  %1744 = load %struct.compile_stack_elt_t*, %struct.compile_stack_elt_t** %1743, align 8
  %1745 = getelementptr inbounds { %struct.compile_stack_elt_t*, i64 }, { %struct.compile_stack_elt_t*, i64 }* %1742, i32 0, i32 1
  %1746 = load i64, i64* %1745, align 8
  %call3192 = call signext i8 @group_in_compile_stack(%struct.compile_stack_elt_t* %1744, i64 %1746, i32 %conv3191)
  %tobool3193 = icmp ne i8 %call3192, 0
  br i1 %tobool3193, label %if.then3194, label %if.end3195

if.then3194:                                      ; preds = %if.end3190
  br label %normal_char

if.end3195:                                       ; preds = %if.end3190
  %1747 = load i8*, i8** %b, align 8
  store i8* %1747, i8** %laststart, align 8
  br label %do.body3196

do.body3196:                                      ; preds = %if.end3195
  br label %while.cond3197

while.cond3197:                                   ; preds = %do.end3271, %do.body3196
  %1748 = load i8*, i8** %b, align 8
  %1749 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer3198 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1749, i32 0, i32 0
  %1750 = load i8*, i8** %buffer3198, align 8
  %sub.ptr.lhs.cast3199 = ptrtoint i8* %1748 to i64
  %sub.ptr.rhs.cast3200 = ptrtoint i8* %1750 to i64
  %sub.ptr.sub3201 = sub i64 %sub.ptr.lhs.cast3199, %sub.ptr.rhs.cast3200
  %add3202 = add nsw i64 %sub.ptr.sub3201, 2
  %1751 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated3203 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1751, i32 0, i32 1
  %1752 = load i64, i64* %allocated3203, align 8
  %cmp3204 = icmp ugt i64 %add3202, %1752
  br i1 %cmp3204, label %while.body3206, label %while.end3272

while.body3206:                                   ; preds = %while.cond3197
  br label %do.body3207

do.body3207:                                      ; preds = %while.body3206
  %1753 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer3209 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1753, i32 0, i32 0
  %1754 = load i8*, i8** %buffer3209, align 8
  store i8* %1754, i8** %old_buffer3208, align 8
  %1755 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated3210 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1755, i32 0, i32 1
  %1756 = load i64, i64* %allocated3210, align 8
  %cmp3211 = icmp eq i64 %1756, 65536
  br i1 %cmp3211, label %if.then3213, label %if.end3214

if.then3213:                                      ; preds = %do.body3207
  store i32 15, i32* %retval, align 4
  br label %return

if.end3214:                                       ; preds = %do.body3207
  %1757 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated3215 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1757, i32 0, i32 1
  %1758 = load i64, i64* %allocated3215, align 8
  %shl3216 = shl i64 %1758, 1
  store i64 %shl3216, i64* %allocated3215, align 8
  %1759 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated3217 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1759, i32 0, i32 1
  %1760 = load i64, i64* %allocated3217, align 8
  %cmp3218 = icmp ugt i64 %1760, 65536
  br i1 %cmp3218, label %if.then3220, label %if.end3222

if.then3220:                                      ; preds = %if.end3214
  %1761 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated3221 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1761, i32 0, i32 1
  store i64 65536, i64* %allocated3221, align 8
  br label %if.end3222

if.end3222:                                       ; preds = %if.then3220, %if.end3214
  %1762 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer3223 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1762, i32 0, i32 0
  %1763 = load i8*, i8** %buffer3223, align 8
  %1764 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated3224 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1764, i32 0, i32 1
  %1765 = load i64, i64* %allocated3224, align 8
  %call3225 = call align 16 i8* @realloc(i8* %1763, i64 %1765) #9
  %1766 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer3226 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1766, i32 0, i32 0
  store i8* %call3225, i8** %buffer3226, align 8
  %1767 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer3227 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1767, i32 0, i32 0
  %1768 = load i8*, i8** %buffer3227, align 8
  %cmp3228 = icmp eq i8* %1768, null
  br i1 %cmp3228, label %if.then3230, label %if.end3231

if.then3230:                                      ; preds = %if.end3222
  store i32 12, i32* %retval, align 4
  br label %return

if.end3231:                                       ; preds = %if.end3222
  %1769 = load i8*, i8** %old_buffer3208, align 8
  %1770 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer3232 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1770, i32 0, i32 0
  %1771 = load i8*, i8** %buffer3232, align 8
  %cmp3233 = icmp ne i8* %1769, %1771
  br i1 %cmp3233, label %if.then3235, label %if.end3270

if.then3235:                                      ; preds = %if.end3231
  %1772 = load i8*, i8** %b, align 8
  %1773 = load i8*, i8** %old_buffer3208, align 8
  %sub.ptr.lhs.cast3236 = ptrtoint i8* %1772 to i64
  %sub.ptr.rhs.cast3237 = ptrtoint i8* %1773 to i64
  %sub.ptr.sub3238 = sub i64 %sub.ptr.lhs.cast3236, %sub.ptr.rhs.cast3237
  %1774 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer3239 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1774, i32 0, i32 0
  %1775 = load i8*, i8** %buffer3239, align 8
  %add.ptr3240 = getelementptr inbounds i8, i8* %1775, i64 %sub.ptr.sub3238
  store i8* %add.ptr3240, i8** %b, align 8
  %1776 = load i8*, i8** %begalt, align 8
  %1777 = load i8*, i8** %old_buffer3208, align 8
  %sub.ptr.lhs.cast3241 = ptrtoint i8* %1776 to i64
  %sub.ptr.rhs.cast3242 = ptrtoint i8* %1777 to i64
  %sub.ptr.sub3243 = sub i64 %sub.ptr.lhs.cast3241, %sub.ptr.rhs.cast3242
  %1778 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer3244 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1778, i32 0, i32 0
  %1779 = load i8*, i8** %buffer3244, align 8
  %add.ptr3245 = getelementptr inbounds i8, i8* %1779, i64 %sub.ptr.sub3243
  store i8* %add.ptr3245, i8** %begalt, align 8
  %1780 = load i8*, i8** %fixup_alt_jump, align 8
  %tobool3246 = icmp ne i8* %1780, null
  br i1 %tobool3246, label %if.then3247, label %if.end3253

if.then3247:                                      ; preds = %if.then3235
  %1781 = load i8*, i8** %fixup_alt_jump, align 8
  %1782 = load i8*, i8** %old_buffer3208, align 8
  %sub.ptr.lhs.cast3248 = ptrtoint i8* %1781 to i64
  %sub.ptr.rhs.cast3249 = ptrtoint i8* %1782 to i64
  %sub.ptr.sub3250 = sub i64 %sub.ptr.lhs.cast3248, %sub.ptr.rhs.cast3249
  %1783 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer3251 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1783, i32 0, i32 0
  %1784 = load i8*, i8** %buffer3251, align 8
  %add.ptr3252 = getelementptr inbounds i8, i8* %1784, i64 %sub.ptr.sub3250
  store i8* %add.ptr3252, i8** %fixup_alt_jump, align 8
  br label %if.end3253

if.end3253:                                       ; preds = %if.then3247, %if.then3235
  %1785 = load i8*, i8** %laststart, align 8
  %tobool3254 = icmp ne i8* %1785, null
  br i1 %tobool3254, label %if.then3255, label %if.end3261

if.then3255:                                      ; preds = %if.end3253
  %1786 = load i8*, i8** %laststart, align 8
  %1787 = load i8*, i8** %old_buffer3208, align 8
  %sub.ptr.lhs.cast3256 = ptrtoint i8* %1786 to i64
  %sub.ptr.rhs.cast3257 = ptrtoint i8* %1787 to i64
  %sub.ptr.sub3258 = sub i64 %sub.ptr.lhs.cast3256, %sub.ptr.rhs.cast3257
  %1788 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer3259 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1788, i32 0, i32 0
  %1789 = load i8*, i8** %buffer3259, align 8
  %add.ptr3260 = getelementptr inbounds i8, i8* %1789, i64 %sub.ptr.sub3258
  store i8* %add.ptr3260, i8** %laststart, align 8
  br label %if.end3261

if.end3261:                                       ; preds = %if.then3255, %if.end3253
  %1790 = load i8*, i8** %pending_exact, align 8
  %tobool3262 = icmp ne i8* %1790, null
  br i1 %tobool3262, label %if.then3263, label %if.end3269

if.then3263:                                      ; preds = %if.end3261
  %1791 = load i8*, i8** %pending_exact, align 8
  %1792 = load i8*, i8** %old_buffer3208, align 8
  %sub.ptr.lhs.cast3264 = ptrtoint i8* %1791 to i64
  %sub.ptr.rhs.cast3265 = ptrtoint i8* %1792 to i64
  %sub.ptr.sub3266 = sub i64 %sub.ptr.lhs.cast3264, %sub.ptr.rhs.cast3265
  %1793 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer3267 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1793, i32 0, i32 0
  %1794 = load i8*, i8** %buffer3267, align 8
  %add.ptr3268 = getelementptr inbounds i8, i8* %1794, i64 %sub.ptr.sub3266
  store i8* %add.ptr3268, i8** %pending_exact, align 8
  br label %if.end3269

if.end3269:                                       ; preds = %if.then3263, %if.end3261
  br label %if.end3270

if.end3270:                                       ; preds = %if.end3269, %if.end3231
  br label %do.end3271

do.end3271:                                       ; preds = %if.end3270
  br label %while.cond3197, !llvm.loop !87

while.end3272:                                    ; preds = %while.cond3197
  %1795 = load i8*, i8** %b, align 8
  %incdec.ptr3273 = getelementptr inbounds i8, i8* %1795, i32 1
  store i8* %incdec.ptr3273, i8** %b, align 8
  store i8 7, i8* %1795, align 1
  %1796 = load i8, i8* %c1, align 1
  %1797 = load i8*, i8** %b, align 8
  %incdec.ptr3274 = getelementptr inbounds i8, i8* %1797, i32 1
  store i8* %incdec.ptr3274, i8** %b, align 8
  store i8 %1796, i8* %1797, align 1
  br label %do.end3275

do.end3275:                                       ; preds = %while.end3272
  br label %sw.epilog

sw.bb3276:                                        ; preds = %do.end1529, %do.end1529
  %1798 = load i32, i32* %syntax.addr, align 4
  %and3277 = and i32 %1798, 2
  %tobool3278 = icmp ne i32 %and3277, 0
  br i1 %tobool3278, label %if.then3279, label %if.else3280

if.then3279:                                      ; preds = %sw.bb3276
  br label %handle_plus

if.else3280:                                      ; preds = %sw.bb3276
  br label %normal_backslash

sw.default:                                       ; preds = %do.end1529
  br label %normal_backslash

normal_backslash:                                 ; preds = %sw.default, %if.else3280, %if.then2535, %if.then2139, %if.then1951, %if.then1706, %if.then1698, %if.then1534
  %1799 = load i8*, i8** %translate, align 8
  %tobool3281 = icmp ne i8* %1799, null
  br i1 %tobool3281, label %cond.true3282, label %cond.false3286

cond.true3282:                                    ; preds = %normal_backslash
  %1800 = load i8*, i8** %translate, align 8
  %1801 = load i8, i8* %c, align 1
  %idxprom3283 = zext i8 %1801 to i64
  %arrayidx3284 = getelementptr inbounds i8, i8* %1800, i64 %idxprom3283
  %1802 = load i8, i8* %arrayidx3284, align 1
  %conv3285 = sext i8 %1802 to i32
  br label %cond.end3288

cond.false3286:                                   ; preds = %normal_backslash
  %1803 = load i8, i8* %c, align 1
  %conv3287 = zext i8 %1803 to i32
  br label %cond.end3288

cond.end3288:                                     ; preds = %cond.false3286, %cond.true3282
  %cond3289 = phi i32 [ %conv3285, %cond.true3282 ], [ %conv3287, %cond.false3286 ]
  %conv3290 = trunc i32 %cond3289 to i8
  store i8 %conv3290, i8* %c, align 1
  br label %normal_char

sw.epilog:                                        ; preds = %do.end3275, %do.end3177, %do.end3097, %do.end3017, %do.end2937, %do.end2857, %do.end2777, %do.end2697, %do.end2617, %if.end2512, %while.end2121, %if.end1944, %if.end1692
  br label %sw.epilog3520

sw.default3291:                                   ; preds = %do.end
  br label %normal_char

normal_char:                                      ; preds = %sw.default3291, %cond.end3288, %if.then3194, %if.then3181, %if.end2537, %if.then1955, %if.then1802, %if.else1517, %if.else1509, %if.else1504, %if.else1499, %if.else1494, %if.then224, %if.then213, %if.else205, %if.else113
  %1804 = load i8*, i8** %pending_exact, align 8
  %tobool3292 = icmp ne i8* %1804, null
  br i1 %tobool3292, label %lor.lhs.false3293, label %if.then3357

lor.lhs.false3293:                                ; preds = %normal_char
  %1805 = load i8*, i8** %pending_exact, align 8
  %1806 = load i8*, i8** %pending_exact, align 8
  %1807 = load i8, i8* %1806, align 1
  %conv3294 = zext i8 %1807 to i32
  %idx.ext3295 = sext i32 %conv3294 to i64
  %add.ptr3296 = getelementptr inbounds i8, i8* %1805, i64 %idx.ext3295
  %add.ptr3297 = getelementptr inbounds i8, i8* %add.ptr3296, i64 1
  %1808 = load i8*, i8** %b, align 8
  %cmp3298 = icmp ne i8* %add.ptr3297, %1808
  br i1 %cmp3298, label %if.then3357, label %lor.lhs.false3300

lor.lhs.false3300:                                ; preds = %lor.lhs.false3293
  %1809 = load i8*, i8** %pending_exact, align 8
  %1810 = load i8, i8* %1809, align 1
  %conv3301 = zext i8 %1810 to i32
  %cmp3302 = icmp eq i32 %conv3301, 255
  br i1 %cmp3302, label %if.then3357, label %lor.lhs.false3304

lor.lhs.false3304:                                ; preds = %lor.lhs.false3300
  %1811 = load i8*, i8** %p, align 8
  %1812 = load i8, i8* %1811, align 1
  %conv3305 = sext i8 %1812 to i32
  %cmp3306 = icmp eq i32 %conv3305, 42
  br i1 %cmp3306, label %if.then3357, label %lor.lhs.false3308

lor.lhs.false3308:                                ; preds = %lor.lhs.false3304
  %1813 = load i8*, i8** %p, align 8
  %1814 = load i8, i8* %1813, align 1
  %conv3309 = sext i8 %1814 to i32
  %cmp3310 = icmp eq i32 %conv3309, 94
  br i1 %cmp3310, label %if.then3357, label %lor.lhs.false3312

lor.lhs.false3312:                                ; preds = %lor.lhs.false3308
  %1815 = load i32, i32* %syntax.addr, align 4
  %and3313 = and i32 %1815, 2
  %tobool3314 = icmp ne i32 %and3313, 0
  br i1 %tobool3314, label %cond.true3315, label %cond.false3329

cond.true3315:                                    ; preds = %lor.lhs.false3312
  %1816 = load i8*, i8** %p, align 8
  %1817 = load i8, i8* %1816, align 1
  %conv3316 = sext i8 %1817 to i32
  %cmp3317 = icmp eq i32 %conv3316, 92
  br i1 %cmp3317, label %land.lhs.true3319, label %lor.lhs.false3337

land.lhs.true3319:                                ; preds = %cond.true3315
  %1818 = load i8*, i8** %p, align 8
  %arrayidx3320 = getelementptr inbounds i8, i8* %1818, i64 1
  %1819 = load i8, i8* %arrayidx3320, align 1
  %conv3321 = sext i8 %1819 to i32
  %cmp3322 = icmp eq i32 %conv3321, 43
  br i1 %cmp3322, label %if.then3357, label %lor.lhs.false3324

lor.lhs.false3324:                                ; preds = %land.lhs.true3319
  %1820 = load i8*, i8** %p, align 8
  %arrayidx3325 = getelementptr inbounds i8, i8* %1820, i64 1
  %1821 = load i8, i8* %arrayidx3325, align 1
  %conv3326 = sext i8 %1821 to i32
  %cmp3327 = icmp eq i32 %conv3326, 63
  br i1 %cmp3327, label %if.then3357, label %lor.lhs.false3337

cond.false3329:                                   ; preds = %lor.lhs.false3312
  %1822 = load i8*, i8** %p, align 8
  %1823 = load i8, i8* %1822, align 1
  %conv3330 = sext i8 %1823 to i32
  %cmp3331 = icmp eq i32 %conv3330, 43
  br i1 %cmp3331, label %if.then3357, label %lor.lhs.false3333

lor.lhs.false3333:                                ; preds = %cond.false3329
  %1824 = load i8*, i8** %p, align 8
  %1825 = load i8, i8* %1824, align 1
  %conv3334 = sext i8 %1825 to i32
  %cmp3335 = icmp eq i32 %conv3334, 63
  br i1 %cmp3335, label %if.then3357, label %lor.lhs.false3337

lor.lhs.false3337:                                ; preds = %lor.lhs.false3333, %lor.lhs.false3324, %cond.true3315
  %1826 = load i32, i32* %syntax.addr, align 4
  %and3338 = and i32 %1826, 512
  %tobool3339 = icmp ne i32 %and3338, 0
  br i1 %tobool3339, label %land.lhs.true3340, label %if.end3439

land.lhs.true3340:                                ; preds = %lor.lhs.false3337
  %1827 = load i32, i32* %syntax.addr, align 4
  %and3341 = and i32 %1827, 4096
  %tobool3342 = icmp ne i32 %and3341, 0
  br i1 %tobool3342, label %cond.true3343, label %cond.false3347

cond.true3343:                                    ; preds = %land.lhs.true3340
  %1828 = load i8*, i8** %p, align 8
  %1829 = load i8, i8* %1828, align 1
  %conv3344 = sext i8 %1829 to i32
  %cmp3345 = icmp eq i32 %conv3344, 123
  br i1 %cmp3345, label %if.then3357, label %if.end3439

cond.false3347:                                   ; preds = %land.lhs.true3340
  %1830 = load i8*, i8** %p, align 8
  %arrayidx3348 = getelementptr inbounds i8, i8* %1830, i64 0
  %1831 = load i8, i8* %arrayidx3348, align 1
  %conv3349 = sext i8 %1831 to i32
  %cmp3350 = icmp eq i32 %conv3349, 92
  br i1 %cmp3350, label %land.lhs.true3352, label %if.end3439

land.lhs.true3352:                                ; preds = %cond.false3347
  %1832 = load i8*, i8** %p, align 8
  %arrayidx3353 = getelementptr inbounds i8, i8* %1832, i64 1
  %1833 = load i8, i8* %arrayidx3353, align 1
  %conv3354 = sext i8 %1833 to i32
  %cmp3355 = icmp eq i32 %conv3354, 123
  br i1 %cmp3355, label %if.then3357, label %if.end3439

if.then3357:                                      ; preds = %land.lhs.true3352, %cond.true3343, %lor.lhs.false3333, %cond.false3329, %lor.lhs.false3324, %land.lhs.true3319, %lor.lhs.false3308, %lor.lhs.false3304, %lor.lhs.false3300, %lor.lhs.false3293, %normal_char
  %1834 = load i8*, i8** %b, align 8
  store i8* %1834, i8** %laststart, align 8
  br label %do.body3358

do.body3358:                                      ; preds = %if.then3357
  br label %while.cond3359

while.cond3359:                                   ; preds = %do.end3433, %do.body3358
  %1835 = load i8*, i8** %b, align 8
  %1836 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer3360 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1836, i32 0, i32 0
  %1837 = load i8*, i8** %buffer3360, align 8
  %sub.ptr.lhs.cast3361 = ptrtoint i8* %1835 to i64
  %sub.ptr.rhs.cast3362 = ptrtoint i8* %1837 to i64
  %sub.ptr.sub3363 = sub i64 %sub.ptr.lhs.cast3361, %sub.ptr.rhs.cast3362
  %add3364 = add nsw i64 %sub.ptr.sub3363, 2
  %1838 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated3365 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1838, i32 0, i32 1
  %1839 = load i64, i64* %allocated3365, align 8
  %cmp3366 = icmp ugt i64 %add3364, %1839
  br i1 %cmp3366, label %while.body3368, label %while.end3434

while.body3368:                                   ; preds = %while.cond3359
  br label %do.body3369

do.body3369:                                      ; preds = %while.body3368
  %1840 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer3371 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1840, i32 0, i32 0
  %1841 = load i8*, i8** %buffer3371, align 8
  store i8* %1841, i8** %old_buffer3370, align 8
  %1842 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated3372 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1842, i32 0, i32 1
  %1843 = load i64, i64* %allocated3372, align 8
  %cmp3373 = icmp eq i64 %1843, 65536
  br i1 %cmp3373, label %if.then3375, label %if.end3376

if.then3375:                                      ; preds = %do.body3369
  store i32 15, i32* %retval, align 4
  br label %return

if.end3376:                                       ; preds = %do.body3369
  %1844 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated3377 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1844, i32 0, i32 1
  %1845 = load i64, i64* %allocated3377, align 8
  %shl3378 = shl i64 %1845, 1
  store i64 %shl3378, i64* %allocated3377, align 8
  %1846 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated3379 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1846, i32 0, i32 1
  %1847 = load i64, i64* %allocated3379, align 8
  %cmp3380 = icmp ugt i64 %1847, 65536
  br i1 %cmp3380, label %if.then3382, label %if.end3384

if.then3382:                                      ; preds = %if.end3376
  %1848 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated3383 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1848, i32 0, i32 1
  store i64 65536, i64* %allocated3383, align 8
  br label %if.end3384

if.end3384:                                       ; preds = %if.then3382, %if.end3376
  %1849 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer3385 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1849, i32 0, i32 0
  %1850 = load i8*, i8** %buffer3385, align 8
  %1851 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated3386 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1851, i32 0, i32 1
  %1852 = load i64, i64* %allocated3386, align 8
  %call3387 = call align 16 i8* @realloc(i8* %1850, i64 %1852) #9
  %1853 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer3388 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1853, i32 0, i32 0
  store i8* %call3387, i8** %buffer3388, align 8
  %1854 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer3389 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1854, i32 0, i32 0
  %1855 = load i8*, i8** %buffer3389, align 8
  %cmp3390 = icmp eq i8* %1855, null
  br i1 %cmp3390, label %if.then3392, label %if.end3393

if.then3392:                                      ; preds = %if.end3384
  store i32 12, i32* %retval, align 4
  br label %return

if.end3393:                                       ; preds = %if.end3384
  %1856 = load i8*, i8** %old_buffer3370, align 8
  %1857 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer3394 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1857, i32 0, i32 0
  %1858 = load i8*, i8** %buffer3394, align 8
  %cmp3395 = icmp ne i8* %1856, %1858
  br i1 %cmp3395, label %if.then3397, label %if.end3432

if.then3397:                                      ; preds = %if.end3393
  %1859 = load i8*, i8** %b, align 8
  %1860 = load i8*, i8** %old_buffer3370, align 8
  %sub.ptr.lhs.cast3398 = ptrtoint i8* %1859 to i64
  %sub.ptr.rhs.cast3399 = ptrtoint i8* %1860 to i64
  %sub.ptr.sub3400 = sub i64 %sub.ptr.lhs.cast3398, %sub.ptr.rhs.cast3399
  %1861 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer3401 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1861, i32 0, i32 0
  %1862 = load i8*, i8** %buffer3401, align 8
  %add.ptr3402 = getelementptr inbounds i8, i8* %1862, i64 %sub.ptr.sub3400
  store i8* %add.ptr3402, i8** %b, align 8
  %1863 = load i8*, i8** %begalt, align 8
  %1864 = load i8*, i8** %old_buffer3370, align 8
  %sub.ptr.lhs.cast3403 = ptrtoint i8* %1863 to i64
  %sub.ptr.rhs.cast3404 = ptrtoint i8* %1864 to i64
  %sub.ptr.sub3405 = sub i64 %sub.ptr.lhs.cast3403, %sub.ptr.rhs.cast3404
  %1865 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer3406 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1865, i32 0, i32 0
  %1866 = load i8*, i8** %buffer3406, align 8
  %add.ptr3407 = getelementptr inbounds i8, i8* %1866, i64 %sub.ptr.sub3405
  store i8* %add.ptr3407, i8** %begalt, align 8
  %1867 = load i8*, i8** %fixup_alt_jump, align 8
  %tobool3408 = icmp ne i8* %1867, null
  br i1 %tobool3408, label %if.then3409, label %if.end3415

if.then3409:                                      ; preds = %if.then3397
  %1868 = load i8*, i8** %fixup_alt_jump, align 8
  %1869 = load i8*, i8** %old_buffer3370, align 8
  %sub.ptr.lhs.cast3410 = ptrtoint i8* %1868 to i64
  %sub.ptr.rhs.cast3411 = ptrtoint i8* %1869 to i64
  %sub.ptr.sub3412 = sub i64 %sub.ptr.lhs.cast3410, %sub.ptr.rhs.cast3411
  %1870 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer3413 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1870, i32 0, i32 0
  %1871 = load i8*, i8** %buffer3413, align 8
  %add.ptr3414 = getelementptr inbounds i8, i8* %1871, i64 %sub.ptr.sub3412
  store i8* %add.ptr3414, i8** %fixup_alt_jump, align 8
  br label %if.end3415

if.end3415:                                       ; preds = %if.then3409, %if.then3397
  %1872 = load i8*, i8** %laststart, align 8
  %tobool3416 = icmp ne i8* %1872, null
  br i1 %tobool3416, label %if.then3417, label %if.end3423

if.then3417:                                      ; preds = %if.end3415
  %1873 = load i8*, i8** %laststart, align 8
  %1874 = load i8*, i8** %old_buffer3370, align 8
  %sub.ptr.lhs.cast3418 = ptrtoint i8* %1873 to i64
  %sub.ptr.rhs.cast3419 = ptrtoint i8* %1874 to i64
  %sub.ptr.sub3420 = sub i64 %sub.ptr.lhs.cast3418, %sub.ptr.rhs.cast3419
  %1875 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer3421 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1875, i32 0, i32 0
  %1876 = load i8*, i8** %buffer3421, align 8
  %add.ptr3422 = getelementptr inbounds i8, i8* %1876, i64 %sub.ptr.sub3420
  store i8* %add.ptr3422, i8** %laststart, align 8
  br label %if.end3423

if.end3423:                                       ; preds = %if.then3417, %if.end3415
  %1877 = load i8*, i8** %pending_exact, align 8
  %tobool3424 = icmp ne i8* %1877, null
  br i1 %tobool3424, label %if.then3425, label %if.end3431

if.then3425:                                      ; preds = %if.end3423
  %1878 = load i8*, i8** %pending_exact, align 8
  %1879 = load i8*, i8** %old_buffer3370, align 8
  %sub.ptr.lhs.cast3426 = ptrtoint i8* %1878 to i64
  %sub.ptr.rhs.cast3427 = ptrtoint i8* %1879 to i64
  %sub.ptr.sub3428 = sub i64 %sub.ptr.lhs.cast3426, %sub.ptr.rhs.cast3427
  %1880 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer3429 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1880, i32 0, i32 0
  %1881 = load i8*, i8** %buffer3429, align 8
  %add.ptr3430 = getelementptr inbounds i8, i8* %1881, i64 %sub.ptr.sub3428
  store i8* %add.ptr3430, i8** %pending_exact, align 8
  br label %if.end3431

if.end3431:                                       ; preds = %if.then3425, %if.end3423
  br label %if.end3432

if.end3432:                                       ; preds = %if.end3431, %if.end3393
  br label %do.end3433

do.end3433:                                       ; preds = %if.end3432
  br label %while.cond3359, !llvm.loop !88

while.end3434:                                    ; preds = %while.cond3359
  %1882 = load i8*, i8** %b, align 8
  %incdec.ptr3435 = getelementptr inbounds i8, i8* %1882, i32 1
  store i8* %incdec.ptr3435, i8** %b, align 8
  store i8 1, i8* %1882, align 1
  %1883 = load i8*, i8** %b, align 8
  %incdec.ptr3436 = getelementptr inbounds i8, i8* %1883, i32 1
  store i8* %incdec.ptr3436, i8** %b, align 8
  store i8 0, i8* %1883, align 1
  br label %do.end3437

do.end3437:                                       ; preds = %while.end3434
  %1884 = load i8*, i8** %b, align 8
  %add.ptr3438 = getelementptr inbounds i8, i8* %1884, i64 -1
  store i8* %add.ptr3438, i8** %pending_exact, align 8
  br label %if.end3439

if.end3439:                                       ; preds = %do.end3437, %land.lhs.true3352, %cond.false3347, %cond.true3343, %lor.lhs.false3337
  br label %do.body3440

do.body3440:                                      ; preds = %if.end3439
  br label %while.cond3441

while.cond3441:                                   ; preds = %do.end3515, %do.body3440
  %1885 = load i8*, i8** %b, align 8
  %1886 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer3442 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1886, i32 0, i32 0
  %1887 = load i8*, i8** %buffer3442, align 8
  %sub.ptr.lhs.cast3443 = ptrtoint i8* %1885 to i64
  %sub.ptr.rhs.cast3444 = ptrtoint i8* %1887 to i64
  %sub.ptr.sub3445 = sub i64 %sub.ptr.lhs.cast3443, %sub.ptr.rhs.cast3444
  %add3446 = add nsw i64 %sub.ptr.sub3445, 1
  %1888 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated3447 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1888, i32 0, i32 1
  %1889 = load i64, i64* %allocated3447, align 8
  %cmp3448 = icmp ugt i64 %add3446, %1889
  br i1 %cmp3448, label %while.body3450, label %while.end3516

while.body3450:                                   ; preds = %while.cond3441
  br label %do.body3451

do.body3451:                                      ; preds = %while.body3450
  %1890 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer3453 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1890, i32 0, i32 0
  %1891 = load i8*, i8** %buffer3453, align 8
  store i8* %1891, i8** %old_buffer3452, align 8
  %1892 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated3454 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1892, i32 0, i32 1
  %1893 = load i64, i64* %allocated3454, align 8
  %cmp3455 = icmp eq i64 %1893, 65536
  br i1 %cmp3455, label %if.then3457, label %if.end3458

if.then3457:                                      ; preds = %do.body3451
  store i32 15, i32* %retval, align 4
  br label %return

if.end3458:                                       ; preds = %do.body3451
  %1894 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated3459 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1894, i32 0, i32 1
  %1895 = load i64, i64* %allocated3459, align 8
  %shl3460 = shl i64 %1895, 1
  store i64 %shl3460, i64* %allocated3459, align 8
  %1896 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated3461 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1896, i32 0, i32 1
  %1897 = load i64, i64* %allocated3461, align 8
  %cmp3462 = icmp ugt i64 %1897, 65536
  br i1 %cmp3462, label %if.then3464, label %if.end3466

if.then3464:                                      ; preds = %if.end3458
  %1898 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated3465 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1898, i32 0, i32 1
  store i64 65536, i64* %allocated3465, align 8
  br label %if.end3466

if.end3466:                                       ; preds = %if.then3464, %if.end3458
  %1899 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer3467 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1899, i32 0, i32 0
  %1900 = load i8*, i8** %buffer3467, align 8
  %1901 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %allocated3468 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1901, i32 0, i32 1
  %1902 = load i64, i64* %allocated3468, align 8
  %call3469 = call align 16 i8* @realloc(i8* %1900, i64 %1902) #9
  %1903 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer3470 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1903, i32 0, i32 0
  store i8* %call3469, i8** %buffer3470, align 8
  %1904 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer3471 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1904, i32 0, i32 0
  %1905 = load i8*, i8** %buffer3471, align 8
  %cmp3472 = icmp eq i8* %1905, null
  br i1 %cmp3472, label %if.then3474, label %if.end3475

if.then3474:                                      ; preds = %if.end3466
  store i32 12, i32* %retval, align 4
  br label %return

if.end3475:                                       ; preds = %if.end3466
  %1906 = load i8*, i8** %old_buffer3452, align 8
  %1907 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer3476 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1907, i32 0, i32 0
  %1908 = load i8*, i8** %buffer3476, align 8
  %cmp3477 = icmp ne i8* %1906, %1908
  br i1 %cmp3477, label %if.then3479, label %if.end3514

if.then3479:                                      ; preds = %if.end3475
  %1909 = load i8*, i8** %b, align 8
  %1910 = load i8*, i8** %old_buffer3452, align 8
  %sub.ptr.lhs.cast3480 = ptrtoint i8* %1909 to i64
  %sub.ptr.rhs.cast3481 = ptrtoint i8* %1910 to i64
  %sub.ptr.sub3482 = sub i64 %sub.ptr.lhs.cast3480, %sub.ptr.rhs.cast3481
  %1911 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer3483 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1911, i32 0, i32 0
  %1912 = load i8*, i8** %buffer3483, align 8
  %add.ptr3484 = getelementptr inbounds i8, i8* %1912, i64 %sub.ptr.sub3482
  store i8* %add.ptr3484, i8** %b, align 8
  %1913 = load i8*, i8** %begalt, align 8
  %1914 = load i8*, i8** %old_buffer3452, align 8
  %sub.ptr.lhs.cast3485 = ptrtoint i8* %1913 to i64
  %sub.ptr.rhs.cast3486 = ptrtoint i8* %1914 to i64
  %sub.ptr.sub3487 = sub i64 %sub.ptr.lhs.cast3485, %sub.ptr.rhs.cast3486
  %1915 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer3488 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1915, i32 0, i32 0
  %1916 = load i8*, i8** %buffer3488, align 8
  %add.ptr3489 = getelementptr inbounds i8, i8* %1916, i64 %sub.ptr.sub3487
  store i8* %add.ptr3489, i8** %begalt, align 8
  %1917 = load i8*, i8** %fixup_alt_jump, align 8
  %tobool3490 = icmp ne i8* %1917, null
  br i1 %tobool3490, label %if.then3491, label %if.end3497

if.then3491:                                      ; preds = %if.then3479
  %1918 = load i8*, i8** %fixup_alt_jump, align 8
  %1919 = load i8*, i8** %old_buffer3452, align 8
  %sub.ptr.lhs.cast3492 = ptrtoint i8* %1918 to i64
  %sub.ptr.rhs.cast3493 = ptrtoint i8* %1919 to i64
  %sub.ptr.sub3494 = sub i64 %sub.ptr.lhs.cast3492, %sub.ptr.rhs.cast3493
  %1920 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer3495 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1920, i32 0, i32 0
  %1921 = load i8*, i8** %buffer3495, align 8
  %add.ptr3496 = getelementptr inbounds i8, i8* %1921, i64 %sub.ptr.sub3494
  store i8* %add.ptr3496, i8** %fixup_alt_jump, align 8
  br label %if.end3497

if.end3497:                                       ; preds = %if.then3491, %if.then3479
  %1922 = load i8*, i8** %laststart, align 8
  %tobool3498 = icmp ne i8* %1922, null
  br i1 %tobool3498, label %if.then3499, label %if.end3505

if.then3499:                                      ; preds = %if.end3497
  %1923 = load i8*, i8** %laststart, align 8
  %1924 = load i8*, i8** %old_buffer3452, align 8
  %sub.ptr.lhs.cast3500 = ptrtoint i8* %1923 to i64
  %sub.ptr.rhs.cast3501 = ptrtoint i8* %1924 to i64
  %sub.ptr.sub3502 = sub i64 %sub.ptr.lhs.cast3500, %sub.ptr.rhs.cast3501
  %1925 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer3503 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1925, i32 0, i32 0
  %1926 = load i8*, i8** %buffer3503, align 8
  %add.ptr3504 = getelementptr inbounds i8, i8* %1926, i64 %sub.ptr.sub3502
  store i8* %add.ptr3504, i8** %laststart, align 8
  br label %if.end3505

if.end3505:                                       ; preds = %if.then3499, %if.end3497
  %1927 = load i8*, i8** %pending_exact, align 8
  %tobool3506 = icmp ne i8* %1927, null
  br i1 %tobool3506, label %if.then3507, label %if.end3513

if.then3507:                                      ; preds = %if.end3505
  %1928 = load i8*, i8** %pending_exact, align 8
  %1929 = load i8*, i8** %old_buffer3452, align 8
  %sub.ptr.lhs.cast3508 = ptrtoint i8* %1928 to i64
  %sub.ptr.rhs.cast3509 = ptrtoint i8* %1929 to i64
  %sub.ptr.sub3510 = sub i64 %sub.ptr.lhs.cast3508, %sub.ptr.rhs.cast3509
  %1930 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer3511 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1930, i32 0, i32 0
  %1931 = load i8*, i8** %buffer3511, align 8
  %add.ptr3512 = getelementptr inbounds i8, i8* %1931, i64 %sub.ptr.sub3510
  store i8* %add.ptr3512, i8** %pending_exact, align 8
  br label %if.end3513

if.end3513:                                       ; preds = %if.then3507, %if.end3505
  br label %if.end3514

if.end3514:                                       ; preds = %if.end3513, %if.end3475
  br label %do.end3515

do.end3515:                                       ; preds = %if.end3514
  br label %while.cond3441, !llvm.loop !89

while.end3516:                                    ; preds = %while.cond3441
  %1932 = load i8, i8* %c, align 1
  %1933 = load i8*, i8** %b, align 8
  %incdec.ptr3517 = getelementptr inbounds i8, i8* %1933, i32 1
  store i8* %incdec.ptr3517, i8** %b, align 8
  store i8 %1932, i8* %1933, align 1
  br label %do.end3518

do.end3518:                                       ; preds = %while.end3516
  %1934 = load i8*, i8** %pending_exact, align 8
  %1935 = load i8, i8* %1934, align 1
  %inc3519 = add i8 %1935, 1
  store i8 %inc3519, i8* %1934, align 1
  br label %sw.epilog3520

sw.epilog3520:                                    ; preds = %do.end3518, %sw.epilog, %while.end1485, %do.end695, %if.end615, %if.then309, %if.end206, %if.end114
  br label %while.cond, !llvm.loop !90

while.end3521:                                    ; preds = %while.cond
  %1936 = load i8*, i8** %fixup_alt_jump, align 8
  %tobool3522 = icmp ne i8* %1936, null
  br i1 %tobool3522, label %if.then3523, label %if.end3528

if.then3523:                                      ; preds = %while.end3521
  %1937 = load i8*, i8** %fixup_alt_jump, align 8
  %1938 = load i8*, i8** %b, align 8
  %1939 = load i8*, i8** %fixup_alt_jump, align 8
  %sub.ptr.lhs.cast3524 = ptrtoint i8* %1938 to i64
  %sub.ptr.rhs.cast3525 = ptrtoint i8* %1939 to i64
  %sub.ptr.sub3526 = sub i64 %sub.ptr.lhs.cast3524, %sub.ptr.rhs.cast3525
  %sub3527 = sub nsw i64 %sub.ptr.sub3526, 3
  call void (i32, i8*, i64, ...) bitcast (void (i32, i8*, i32)* @store_op1 to void (i32, i8*, i64, ...)*)(i32 13, i8* %1937, i64 %sub3527)
  br label %if.end3528

if.end3528:                                       ; preds = %if.then3523, %while.end3521
  %avail3529 = getelementptr inbounds %struct.compile_stack_type, %struct.compile_stack_type* %compile_stack, i32 0, i32 2
  %1940 = load i32, i32* %avail3529, align 4
  %cmp3530 = icmp eq i32 %1940, 0
  br i1 %cmp3530, label %if.end3533, label %if.then3532

if.then3532:                                      ; preds = %if.end3528
  store i32 8, i32* %retval, align 4
  br label %return

if.end3533:                                       ; preds = %if.end3528
  %stack3534 = getelementptr inbounds %struct.compile_stack_type, %struct.compile_stack_type* %compile_stack, i32 0, i32 0
  %1941 = load %struct.compile_stack_elt_t*, %struct.compile_stack_elt_t** %stack3534, align 8
  %1942 = bitcast %struct.compile_stack_elt_t* %1941 to i8*
  call void @free(i8* %1942) #9
  %1943 = load i8*, i8** %b, align 8
  %1944 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %buffer3535 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1944, i32 0, i32 0
  %1945 = load i8*, i8** %buffer3535, align 8
  %sub.ptr.lhs.cast3536 = ptrtoint i8* %1943 to i64
  %sub.ptr.rhs.cast3537 = ptrtoint i8* %1945 to i64
  %sub.ptr.sub3538 = sub i64 %sub.ptr.lhs.cast3536, %sub.ptr.rhs.cast3537
  %1946 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %bufp.addr, align 8
  %used3539 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1946, i32 0, i32 2
  store i64 %sub.ptr.sub3538, i64* %used3539, align 8
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end3533, %if.then3532, %if.then3474, %if.then3457, %if.then3392, %if.then3375, %if.then3230, %if.then3213, %if.then3189, %if.then3133, %if.then3116, %if.then3053, %if.then3036, %if.then2973, %if.then2956, %if.then2893, %if.then2876, %if.then2813, %if.then2796, %if.then2733, %if.then2716, %if.then2653, %if.then2636, %if.then2573, %if.then2556, %if.then2516, %if.then2441, %if.then2424, %if.then2353, %if.then2336, %if.then2308, %if.else2302, %if.then2285, %if.then2280, %if.else2272, %if.then2243, %if.then2210, %if.then2189, %if.then2156, %if.else2148, %if.then2079, %if.then2062, %if.then1990, %if.then1973, %if.then1894, %if.then1877, %if.else1803, %if.then1745, %if.then1728, %if.else1707, %if.then1644, %if.then1627, %if.then1553, %if.then1526, %if.then1521, %if.then1298, %if.then1287, %if.then1282, %if.then1126, %if.then1120, %if.then1109, %if.then1092, %if.then1080, %if.then1063, %if.then1027, %if.then990, %if.then985, %if.then967, %if.then962, %if.then901, %if.then884, %if.then811, %if.then794, %if.then734, %if.then717, %if.then699, %if.then651, %if.then634, %if.then566, %if.then549, %if.then479, %if.then462, %if.then346, %if.then329, %if.then284, %if.then279, %if.then246, %if.then220, %if.then160, %if.then143, %if.then69, %if.then53, %if.then27, %if.then20, %if.then
  %1947 = load i32, i32* %retval, align 4
  ret i32 %1947
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @regcomp(%struct.re_pattern_buffer* %preg, i8* %pattern, i32 %cflags) #0 {
entry:
  %retval = alloca i32, align 4
  %preg.addr = alloca %struct.re_pattern_buffer*, align 8
  %pattern.addr = alloca i8*, align 8
  %cflags.addr = alloca i32, align 4
  %ret = alloca i32, align 4
  %syntax = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.re_pattern_buffer* %preg, %struct.re_pattern_buffer** %preg.addr, align 8
  store i8* %pattern, i8** %pattern.addr, align 8
  store i32 %cflags, i32* %cflags.addr, align 4
  %0 = load i32, i32* %cflags.addr, align 4
  %and = and i32 %0, 1
  %tobool = icmp ne i32 %and, 0
  %1 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i32 242396, i32 66246
  store i32 %cond, i32* %syntax, align 4
  %2 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %preg.addr, align 8
  %buffer = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %2, i32 0, i32 0
  store i8* null, i8** %buffer, align 8
  %3 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %preg.addr, align 8
  %allocated = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %3, i32 0, i32 1
  store i64 0, i64* %allocated, align 8
  %4 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %preg.addr, align 8
  %used = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %4, i32 0, i32 2
  store i64 0, i64* %used, align 8
  %5 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %preg.addr, align 8
  %fastmap = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %5, i32 0, i32 4
  store i8* null, i8** %fastmap, align 8
  %6 = load i32, i32* %cflags.addr, align 4
  %and1 = and i32 %6, 2
  %tobool2 = icmp ne i32 %and1, 0
  br i1 %tobool2, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call noalias align 16 i8* @malloc(i64 256) #9
  %7 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %preg.addr, align 8
  %translate = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %7, i32 0, i32 5
  store i8* %call, i8** %translate, align 8
  %8 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %preg.addr, align 8
  %translate3 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %8, i32 0, i32 5
  %9 = load i8*, i8** %translate3, align 8
  %cmp = icmp eq i8* %9, null
  br i1 %cmp, label %if.then4, label %if.end

if.then4:                                         ; preds = %if.then
  store i32 12, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %if.then
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %10 = load i32, i32* %i, align 4
  %cmp5 = icmp ult i32 %10, 256
  br i1 %cmp5, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call6 = call i16** @__ctype_b_loc() #10
  %11 = load i16*, i16** %call6, align 8
  %12 = load i32, i32* %i, align 4
  %idxprom = sext i32 %12 to i64
  %arrayidx = getelementptr inbounds i16, i16* %11, i64 %idxprom
  %13 = load i16, i16* %arrayidx, align 2
  %conv = zext i16 %13 to i32
  %and7 = and i32 %conv, 256
  %tobool8 = icmp ne i32 %and7, 0
  br i1 %tobool8, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %14 = load i32, i32* %i, align 4
  %call9 = call i32 @tolower(i32 %14) #11
  br label %cond.end

cond.false:                                       ; preds = %for.body
  %15 = load i32, i32* %i, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond10 = phi i32 [ %call9, %cond.true ], [ %15, %cond.false ]
  %conv11 = trunc i32 %cond10 to i8
  %16 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %preg.addr, align 8
  %translate12 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %16, i32 0, i32 5
  %17 = load i8*, i8** %translate12, align 8
  %18 = load i32, i32* %i, align 4
  %idxprom13 = zext i32 %18 to i64
  %arrayidx14 = getelementptr inbounds i8, i8* %17, i64 %idxprom13
  store i8 %conv11, i8* %arrayidx14, align 1
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %19 = load i32, i32* %i, align 4
  %inc = add i32 %19, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond, !llvm.loop !91

for.end:                                          ; preds = %for.cond
  br label %if.end16

if.else:                                          ; preds = %entry
  %20 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %preg.addr, align 8
  %translate15 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %20, i32 0, i32 5
  store i8* null, i8** %translate15, align 8
  br label %if.end16

if.end16:                                         ; preds = %if.else, %for.end
  %21 = load i32, i32* %cflags.addr, align 4
  %and17 = and i32 %21, 4
  %tobool18 = icmp ne i32 %and17, 0
  br i1 %tobool18, label %if.then19, label %if.else21

if.then19:                                        ; preds = %if.end16
  %22 = load i32, i32* %syntax, align 4
  %and20 = and i32 %22, -65
  store i32 %and20, i32* %syntax, align 4
  %23 = load i32, i32* %syntax, align 4
  %or = or i32 %23, 256
  store i32 %or, i32* %syntax, align 4
  %24 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %preg.addr, align 8
  %newline_anchor = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %24, i32 0, i32 7
  %bf.load = load i8, i8* %newline_anchor, align 8
  %bf.clear = and i8 %bf.load, 127
  %bf.set = or i8 %bf.clear, -128
  store i8 %bf.set, i8* %newline_anchor, align 8
  br label %if.end25

if.else21:                                        ; preds = %if.end16
  %25 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %preg.addr, align 8
  %newline_anchor22 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %25, i32 0, i32 7
  %bf.load23 = load i8, i8* %newline_anchor22, align 8
  %bf.clear24 = and i8 %bf.load23, 127
  store i8 %bf.clear24, i8* %newline_anchor22, align 8
  br label %if.end25

if.end25:                                         ; preds = %if.else21, %if.then19
  %26 = load i32, i32* %cflags.addr, align 4
  %and26 = and i32 %26, 8
  %tobool27 = icmp ne i32 %and26, 0
  %lnot = xor i1 %tobool27, true
  %lnot28 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot28 to i32
  %27 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %preg.addr, align 8
  %no_sub = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %27, i32 0, i32 7
  %28 = trunc i32 %lnot.ext to i8
  %bf.load29 = load i8, i8* %no_sub, align 8
  %bf.value = and i8 %28, 1
  %bf.shl = shl i8 %bf.value, 4
  %bf.clear30 = and i8 %bf.load29, -17
  %bf.set31 = or i8 %bf.clear30, %bf.shl
  store i8 %bf.set31, i8* %no_sub, align 8
  %bf.result.cast = zext i8 %bf.value to i32
  %29 = load i8*, i8** %pattern.addr, align 8
  %30 = load i8*, i8** %pattern.addr, align 8
  %call32 = call i64 @strlen(i8* %30) #11
  %conv33 = trunc i64 %call32 to i32
  %31 = load i32, i32* %syntax, align 4
  %32 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %preg.addr, align 8
  %call34 = call i32 @regex_compile(i8* %29, i32 %conv33, i32 %31, %struct.re_pattern_buffer* %32)
  store i32 %call34, i32* %ret, align 4
  %33 = load i32, i32* %ret, align 4
  %cmp35 = icmp eq i32 %33, 16
  br i1 %cmp35, label %if.then37, label %if.end38

if.then37:                                        ; preds = %if.end25
  store i32 8, i32* %ret, align 4
  br label %if.end38

if.end38:                                         ; preds = %if.then37, %if.end25
  %34 = load i32, i32* %ret, align 4
  store i32 %34, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end38, %if.then4
  %35 = load i32, i32* %retval, align 4
  ret i32 %35
}

; Function Attrs: nocallback nounwind readnone willreturn
declare dso_local i16** @__ctype_b_loc() #3

; Function Attrs: nocallback nounwind readonly willreturn
declare dso_local i32 @tolower(i32) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @regexec(%struct.re_pattern_buffer* %preg, i8* %string, i64 %nmatch, %struct.regmatch_t* %pmatch, i32 %eflags) #0 {
entry:
  %retval = alloca i32, align 4
  %preg.addr = alloca %struct.re_pattern_buffer*, align 8
  %string.addr = alloca i8*, align 8
  %nmatch.addr = alloca i64, align 8
  %pmatch.addr = alloca %struct.regmatch_t*, align 8
  %eflags.addr = alloca i32, align 4
  %ret = alloca i32, align 4
  %regs = alloca %struct.re_registers, align 8
  %private_preg = alloca %struct.re_pattern_buffer, align 8
  %len = alloca i32, align 4
  %want_reg_info = alloca i8, align 1
  %r = alloca i32, align 4
  store %struct.re_pattern_buffer* %preg, %struct.re_pattern_buffer** %preg.addr, align 8
  store i8* %string, i8** %string.addr, align 8
  store i64 %nmatch, i64* %nmatch.addr, align 8
  store %struct.regmatch_t* %pmatch, %struct.regmatch_t** %pmatch.addr, align 8
  store i32 %eflags, i32* %eflags.addr, align 4
  %0 = load i8*, i8** %string.addr, align 8
  %call = call i64 @strlen(i8* %0) #11
  %conv = trunc i64 %call to i32
  store i32 %conv, i32* %len, align 4
  %1 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %preg.addr, align 8
  %no_sub = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %1, i32 0, i32 7
  %bf.load = load i8, i8* %no_sub, align 8
  %bf.lshr = lshr i8 %bf.load, 4
  %bf.clear = and i8 %bf.lshr, 1
  %bf.cast = zext i8 %bf.clear to i32
  %tobool = icmp ne i32 %bf.cast, 0
  br i1 %tobool, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %entry
  %2 = load i64, i64* %nmatch.addr, align 8
  %cmp = icmp ugt i64 %2, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %3 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ]
  %land.ext = zext i1 %3 to i32
  %conv2 = trunc i32 %land.ext to i8
  store i8 %conv2, i8* %want_reg_info, align 1
  %4 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %preg.addr, align 8
  %5 = bitcast %struct.re_pattern_buffer* %private_preg to i8*
  %6 = bitcast %struct.re_pattern_buffer* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* align 8 %6, i64 64, i1 false)
  %7 = load i32, i32* %eflags.addr, align 4
  %and = and i32 %7, 1
  %tobool3 = icmp ne i32 %and, 0
  %lnot = xor i1 %tobool3, true
  %lnot4 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot4 to i32
  %not_bol = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %private_preg, i32 0, i32 7
  %8 = trunc i32 %lnot.ext to i8
  %bf.load5 = load i8, i8* %not_bol, align 8
  %bf.value = and i8 %8, 1
  %bf.shl = shl i8 %bf.value, 5
  %bf.clear6 = and i8 %bf.load5, -33
  %bf.set = or i8 %bf.clear6, %bf.shl
  store i8 %bf.set, i8* %not_bol, align 8
  %bf.result.cast = zext i8 %bf.value to i32
  %9 = load i32, i32* %eflags.addr, align 4
  %and7 = and i32 %9, 2
  %tobool8 = icmp ne i32 %and7, 0
  %lnot9 = xor i1 %tobool8, true
  %lnot11 = xor i1 %lnot9, true
  %lnot.ext12 = zext i1 %lnot11 to i32
  %not_eol = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %private_preg, i32 0, i32 7
  %10 = trunc i32 %lnot.ext12 to i8
  %bf.load13 = load i8, i8* %not_eol, align 8
  %bf.value14 = and i8 %10, 1
  %bf.shl15 = shl i8 %bf.value14, 6
  %bf.clear16 = and i8 %bf.load13, -65
  %bf.set17 = or i8 %bf.clear16, %bf.shl15
  store i8 %bf.set17, i8* %not_eol, align 8
  %bf.result.cast18 = zext i8 %bf.value14 to i32
  %regs_allocated = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %private_preg, i32 0, i32 7
  %bf.load19 = load i8, i8* %regs_allocated, align 8
  %bf.clear20 = and i8 %bf.load19, -7
  %bf.set21 = or i8 %bf.clear20, 4
  store i8 %bf.set21, i8* %regs_allocated, align 8
  %11 = load i8, i8* %want_reg_info, align 1
  %tobool22 = icmp ne i8 %11, 0
  br i1 %tobool22, label %if.then, label %if.end34

if.then:                                          ; preds = %land.end
  %12 = load i64, i64* %nmatch.addr, align 8
  %conv23 = trunc i64 %12 to i32
  %num_regs = getelementptr inbounds %struct.re_registers, %struct.re_registers* %regs, i32 0, i32 0
  store i32 %conv23, i32* %num_regs, align 8
  %13 = load i64, i64* %nmatch.addr, align 8
  %mul = mul i64 %13, 4
  %call24 = call noalias align 16 i8* @malloc(i64 %mul) #9
  %14 = bitcast i8* %call24 to i32*
  %start = getelementptr inbounds %struct.re_registers, %struct.re_registers* %regs, i32 0, i32 1
  store i32* %14, i32** %start, align 8
  %15 = load i64, i64* %nmatch.addr, align 8
  %mul25 = mul i64 %15, 4
  %call26 = call noalias align 16 i8* @malloc(i64 %mul25) #9
  %16 = bitcast i8* %call26 to i32*
  %end = getelementptr inbounds %struct.re_registers, %struct.re_registers* %regs, i32 0, i32 2
  store i32* %16, i32** %end, align 8
  %start27 = getelementptr inbounds %struct.re_registers, %struct.re_registers* %regs, i32 0, i32 1
  %17 = load i32*, i32** %start27, align 8
  %cmp28 = icmp eq i32* %17, null
  br i1 %cmp28, label %if.then33, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then
  %end30 = getelementptr inbounds %struct.re_registers, %struct.re_registers* %regs, i32 0, i32 2
  %18 = load i32*, i32** %end30, align 8
  %cmp31 = icmp eq i32* %18, null
  br i1 %cmp31, label %if.then33, label %if.end

if.then33:                                        ; preds = %lor.lhs.false, %if.then
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  br label %if.end34

if.end34:                                         ; preds = %if.end, %land.end
  %19 = load i8*, i8** %string.addr, align 8
  %20 = load i32, i32* %len, align 4
  %21 = load i32, i32* %len, align 4
  %22 = load i8, i8* %want_reg_info, align 1
  %conv35 = sext i8 %22 to i32
  %tobool36 = icmp ne i32 %conv35, 0
  br i1 %tobool36, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end34
  br label %cond.end

cond.false:                                       ; preds = %if.end34
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.re_registers* [ %regs, %cond.true ], [ null, %cond.false ]
  %call37 = call i32 @re_search(%struct.re_pattern_buffer* %private_preg, i8* %19, i32 %20, i32 0, i32 %21, %struct.re_registers* %cond)
  store i32 %call37, i32* %ret, align 4
  %23 = load i8, i8* %want_reg_info, align 1
  %tobool38 = icmp ne i8 %23, 0
  br i1 %tobool38, label %if.then39, label %if.end57

if.then39:                                        ; preds = %cond.end
  %24 = load i32, i32* %ret, align 4
  %cmp40 = icmp sge i32 %24, 0
  br i1 %cmp40, label %if.then42, label %if.end54

if.then42:                                        ; preds = %if.then39
  store i32 0, i32* %r, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then42
  %25 = load i32, i32* %r, align 4
  %conv43 = zext i32 %25 to i64
  %26 = load i64, i64* %nmatch.addr, align 8
  %cmp44 = icmp ult i64 %conv43, %26
  br i1 %cmp44, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %start46 = getelementptr inbounds %struct.re_registers, %struct.re_registers* %regs, i32 0, i32 1
  %27 = load i32*, i32** %start46, align 8
  %28 = load i32, i32* %r, align 4
  %idxprom = zext i32 %28 to i64
  %arrayidx = getelementptr inbounds i32, i32* %27, i64 %idxprom
  %29 = load i32, i32* %arrayidx, align 4
  %30 = load %struct.regmatch_t*, %struct.regmatch_t** %pmatch.addr, align 8
  %31 = load i32, i32* %r, align 4
  %idxprom47 = zext i32 %31 to i64
  %arrayidx48 = getelementptr inbounds %struct.regmatch_t, %struct.regmatch_t* %30, i64 %idxprom47
  %rm_so = getelementptr inbounds %struct.regmatch_t, %struct.regmatch_t* %arrayidx48, i32 0, i32 0
  store i32 %29, i32* %rm_so, align 4
  %end49 = getelementptr inbounds %struct.re_registers, %struct.re_registers* %regs, i32 0, i32 2
  %32 = load i32*, i32** %end49, align 8
  %33 = load i32, i32* %r, align 4
  %idxprom50 = zext i32 %33 to i64
  %arrayidx51 = getelementptr inbounds i32, i32* %32, i64 %idxprom50
  %34 = load i32, i32* %arrayidx51, align 4
  %35 = load %struct.regmatch_t*, %struct.regmatch_t** %pmatch.addr, align 8
  %36 = load i32, i32* %r, align 4
  %idxprom52 = zext i32 %36 to i64
  %arrayidx53 = getelementptr inbounds %struct.regmatch_t, %struct.regmatch_t* %35, i64 %idxprom52
  %rm_eo = getelementptr inbounds %struct.regmatch_t, %struct.regmatch_t* %arrayidx53, i32 0, i32 1
  store i32 %34, i32* %rm_eo, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %37 = load i32, i32* %r, align 4
  %inc = add i32 %37, 1
  store i32 %inc, i32* %r, align 4
  br label %for.cond, !llvm.loop !92

for.end:                                          ; preds = %for.cond
  br label %if.end54

if.end54:                                         ; preds = %for.end, %if.then39
  %start55 = getelementptr inbounds %struct.re_registers, %struct.re_registers* %regs, i32 0, i32 1
  %38 = load i32*, i32** %start55, align 8
  %39 = bitcast i32* %38 to i8*
  call void @free(i8* %39) #9
  %end56 = getelementptr inbounds %struct.re_registers, %struct.re_registers* %regs, i32 0, i32 2
  %40 = load i32*, i32** %end56, align 8
  %41 = bitcast i32* %40 to i8*
  call void @free(i8* %41) #9
  br label %if.end57

if.end57:                                         ; preds = %if.end54, %cond.end
  %42 = load i32, i32* %ret, align 4
  %cmp58 = icmp sge i32 %42, 0
  %43 = zext i1 %cmp58 to i64
  %cond60 = select i1 %cmp58, i32 0, i32 1
  store i32 %cond60, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end57, %if.then33
  %44 = load i32, i32* %retval, align 4
  ret i32 %44
}

; Function Attrs: nocallback nounwind
declare dso_local void @free(i8*) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @regerror(i32 %errcode, %struct.re_pattern_buffer* %preg, i8* %errbuf, i64 %errbuf_size) #0 {
entry:
  %errcode.addr = alloca i32, align 4
  %preg.addr = alloca %struct.re_pattern_buffer*, align 8
  %errbuf.addr = alloca i8*, align 8
  %errbuf_size.addr = alloca i64, align 8
  %msg = alloca i8*, align 8
  %msg_size = alloca i64, align 8
  store i32 %errcode, i32* %errcode.addr, align 4
  store %struct.re_pattern_buffer* %preg, %struct.re_pattern_buffer** %preg.addr, align 8
  store i8* %errbuf, i8** %errbuf.addr, align 8
  store i64 %errbuf_size, i64* %errbuf_size.addr, align 8
  %0 = load i32, i32* %errcode.addr, align 4
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %errcode.addr, align 4
  %conv = sext i32 %1 to i64
  %cmp1 = icmp uge i64 %conv, 17
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void @abort() #8
  unreachable

if.end:                                           ; preds = %lor.lhs.false
  %2 = load i32, i32* %errcode.addr, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [17 x i8*], [17 x i8*]* @re_error_msg, i64 0, i64 %idxprom
  %3 = load i8*, i8** %arrayidx, align 8
  store i8* %3, i8** %msg, align 8
  %4 = load i8*, i8** %msg, align 8
  %tobool = icmp ne i8* %4, null
  br i1 %tobool, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17, i64 0, i64 0), i8** %msg, align 8
  br label %if.end4

if.end4:                                          ; preds = %if.then3, %if.end
  %5 = load i8*, i8** %msg, align 8
  %call = call i64 @strlen(i8* %5) #11
  %add = add i64 %call, 1
  store i64 %add, i64* %msg_size, align 8
  %6 = load i64, i64* %errbuf_size.addr, align 8
  %cmp5 = icmp ne i64 %6, 0
  br i1 %cmp5, label %if.then7, label %if.end16

if.then7:                                         ; preds = %if.end4
  %7 = load i64, i64* %msg_size, align 8
  %8 = load i64, i64* %errbuf_size.addr, align 8
  %cmp8 = icmp ugt i64 %7, %8
  br i1 %cmp8, label %if.then10, label %if.else

if.then10:                                        ; preds = %if.then7
  %9 = load i8*, i8** %errbuf.addr, align 8
  %10 = load i8*, i8** %msg, align 8
  %11 = load i64, i64* %errbuf_size.addr, align 8
  %sub = sub i64 %11, 1
  %call11 = call i8* @strncpy(i8* %9, i8* %10, i64 %sub) #9
  %12 = load i8*, i8** %errbuf.addr, align 8
  %13 = load i64, i64* %errbuf_size.addr, align 8
  %sub12 = sub i64 %13, 1
  %arrayidx13 = getelementptr inbounds i8, i8* %12, i64 %sub12
  store i8 0, i8* %arrayidx13, align 1
  br label %if.end15

if.else:                                          ; preds = %if.then7
  %14 = load i8*, i8** %errbuf.addr, align 8
  %15 = load i8*, i8** %msg, align 8
  %call14 = call i8* @strcpy(i8* %14, i8* %15) #9
  br label %if.end15

if.end15:                                         ; preds = %if.else, %if.then10
  br label %if.end16

if.end16:                                         ; preds = %if.end15, %if.end4
  %16 = load i64, i64* %msg_size, align 8
  ret i64 %16
}

; Function Attrs: nocallback nounwind
declare dso_local i8* @strncpy(i8*, i8*, i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @regfree(%struct.re_pattern_buffer* %preg) #0 {
entry:
  %preg.addr = alloca %struct.re_pattern_buffer*, align 8
  store %struct.re_pattern_buffer* %preg, %struct.re_pattern_buffer** %preg.addr, align 8
  %0 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %preg.addr, align 8
  %buffer = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %0, i32 0, i32 0
  %1 = load i8*, i8** %buffer, align 8
  %cmp = icmp ne i8* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %preg.addr, align 8
  %buffer1 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %2, i32 0, i32 0
  %3 = load i8*, i8** %buffer1, align 8
  call void @free(i8* %3) #9
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %preg.addr, align 8
  %buffer2 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %4, i32 0, i32 0
  store i8* null, i8** %buffer2, align 8
  %5 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %preg.addr, align 8
  %allocated = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %5, i32 0, i32 1
  store i64 0, i64* %allocated, align 8
  %6 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %preg.addr, align 8
  %used = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %6, i32 0, i32 2
  store i64 0, i64* %used, align 8
  %7 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %preg.addr, align 8
  %fastmap = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %7, i32 0, i32 4
  %8 = load i8*, i8** %fastmap, align 8
  %cmp3 = icmp ne i8* %8, null
  br i1 %cmp3, label %if.then4, label %if.end6

if.then4:                                         ; preds = %if.end
  %9 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %preg.addr, align 8
  %fastmap5 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %9, i32 0, i32 4
  %10 = load i8*, i8** %fastmap5, align 8
  call void @free(i8* %10) #9
  br label %if.end6

if.end6:                                          ; preds = %if.then4, %if.end
  %11 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %preg.addr, align 8
  %fastmap7 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %11, i32 0, i32 4
  store i8* null, i8** %fastmap7, align 8
  %12 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %preg.addr, align 8
  %fastmap_accurate = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %12, i32 0, i32 7
  %bf.load = load i8, i8* %fastmap_accurate, align 8
  %bf.clear = and i8 %bf.load, -9
  store i8 %bf.clear, i8* %fastmap_accurate, align 8
  %13 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %preg.addr, align 8
  %translate = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %13, i32 0, i32 5
  %14 = load i8*, i8** %translate, align 8
  %cmp8 = icmp ne i8* %14, null
  br i1 %cmp8, label %if.then9, label %if.end11

if.then9:                                         ; preds = %if.end6
  %15 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %preg.addr, align 8
  %translate10 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %15, i32 0, i32 5
  %16 = load i8*, i8** %translate10, align 8
  call void @free(i8* %16) #9
  br label %if.end11

if.end11:                                         ; preds = %if.then9, %if.end6
  %17 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %preg.addr, align 8
  %translate12 = getelementptr inbounds %struct.re_pattern_buffer, %struct.re_pattern_buffer* %17, i32 0, i32 5
  store i8* null, i8** %translate12, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @dfasyntax(i32 %bits, i32 %fold) #0 {
entry:
  %bits.addr = alloca i32, align 4
  %fold.addr = alloca i32, align 4
  store i32 %bits, i32* %bits.addr, align 4
  store i32 %fold, i32* %fold.addr, align 4
  store i32 1, i32* @syntax_bits_set, align 4
  %0 = load i32, i32* %bits.addr, align 4
  store i32 %0, i32* @syntax_bits, align 4
  %1 = load i32, i32* %fold.addr, align 4
  store i32 %1, i32* @case_fold, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @dfaparse(i8* %s, i64 %len, %struct.dfa* %d) #0 {
entry:
  %s.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %d.addr = alloca %struct.dfa*, align 8
  store i8* %s, i8** %s.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  store %struct.dfa* %d, %struct.dfa** %d.addr, align 8
  %0 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  store %struct.dfa* %0, %struct.dfa** @dfa, align 8
  %1 = load i8*, i8** %s.addr, align 8
  store i8* %1, i8** @lexptr, align 8
  store i8* %1, i8** @lexstart, align 8
  %2 = load i64, i64* %len.addr, align 8
  %conv = trunc i64 %2 to i32
  store i32 %conv, i32* @lexleft, align 4
  store i32 -1, i32* @lasttok, align 4
  store i32 1, i32* @laststart, align 4
  store i32 0, i32* @parens, align 4
  %3 = load i32, i32* @syntax_bits_set, align 4
  %tobool = icmp ne i32 %3, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @dfaerror(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.18, i64 0, i64 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %call = call i32 @lex()
  store i32 %call, i32* @tok, align 4
  %4 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %depth = getelementptr inbounds %struct.dfa, %struct.dfa* %4, i32 0, i32 6
  %5 = load i32, i32* %depth, align 8
  store i32 %5, i32* @depth, align 4
  call void @regexp(i32 1)
  %6 = load i32, i32* @tok, align 4
  %cmp = icmp ne i32 %6, -1
  br i1 %cmp, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  call void @dfaerror(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.19, i64 0, i64 0))
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %if.end
  %7 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %nregexps = getelementptr inbounds %struct.dfa, %struct.dfa* %7, i32 0, i32 8
  %8 = load i32, i32* %nregexps, align 8
  %sub = sub nsw i32 -1, %8
  call void @addtok(i32 %sub)
  call void @addtok(i32 268)
  %9 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %nregexps4 = getelementptr inbounds %struct.dfa, %struct.dfa* %9, i32 0, i32 8
  %10 = load i32, i32* %nregexps4, align 8
  %tobool5 = icmp ne i32 %10, 0
  br i1 %tobool5, label %if.then6, label %if.end7

if.then6:                                         ; preds = %if.end3
  call void @addtok(i32 270)
  br label %if.end7

if.end7:                                          ; preds = %if.then6, %if.end3
  %11 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %nregexps8 = getelementptr inbounds %struct.dfa, %struct.dfa* %11, i32 0, i32 8
  %12 = load i32, i32* %nregexps8, align 8
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %nregexps8, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @dfaerror(i8* %mesg) #0 {
entry:
  %mesg.addr = alloca i8*, align 8
  store i8* %mesg, i8** %mesg.addr, align 8
  %0 = load i8*, i8** %mesg.addr, align 8
  call void @fatal(i8* %0, i32 0)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @regexp(i32 %toplevel) #0 {
entry:
  %toplevel.addr = alloca i32, align 4
  store i32 %toplevel, i32* %toplevel.addr, align 4
  call void @branch()
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %0 = load i32, i32* @tok, align 4
  %cmp = icmp eq i32 %0, 269
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %call = call i32 @lex()
  store i32 %call, i32* @tok, align 4
  call void @branch()
  %1 = load i32, i32* %toplevel.addr, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  call void @addtok(i32 270)
  br label %if.end

if.else:                                          ; preds = %while.body
  call void @addtok(i32 269)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %while.cond, !llvm.loop !93

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @addtok(i32 %t) #0 {
entry:
  %t.addr = alloca i32, align 4
  store i32 %t, i32* %t.addr, align 4
  %0 = load %struct.dfa*, %struct.dfa** @dfa, align 8
  %tindex = getelementptr inbounds %struct.dfa, %struct.dfa* %0, i32 0, i32 4
  %1 = load i32, i32* %tindex, align 8
  %2 = load %struct.dfa*, %struct.dfa** @dfa, align 8
  %talloc = getelementptr inbounds %struct.dfa, %struct.dfa* %2, i32 0, i32 5
  %3 = load i32, i32* %talloc, align 4
  %cmp = icmp sge i32 %1, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %4 = load %struct.dfa*, %struct.dfa** @dfa, align 8
  %tindex1 = getelementptr inbounds %struct.dfa, %struct.dfa* %4, i32 0, i32 4
  %5 = load i32, i32* %tindex1, align 8
  %6 = load %struct.dfa*, %struct.dfa** @dfa, align 8
  %talloc2 = getelementptr inbounds %struct.dfa, %struct.dfa* %6, i32 0, i32 5
  %7 = load i32, i32* %talloc2, align 4
  %cmp3 = icmp sge i32 %5, %7
  br i1 %cmp3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %8 = load %struct.dfa*, %struct.dfa** @dfa, align 8
  %talloc4 = getelementptr inbounds %struct.dfa, %struct.dfa* %8, i32 0, i32 5
  %9 = load i32, i32* %talloc4, align 4
  %mul = mul nsw i32 %9, 2
  store i32 %mul, i32* %talloc4, align 4
  br label %while.cond, !llvm.loop !94

while.end:                                        ; preds = %while.cond
  %10 = load %struct.dfa*, %struct.dfa** @dfa, align 8
  %tokens = getelementptr inbounds %struct.dfa, %struct.dfa* %10, i32 0, i32 3
  %11 = load i32*, i32** %tokens, align 8
  %12 = bitcast i32* %11 to i8*
  %13 = load %struct.dfa*, %struct.dfa** @dfa, align 8
  %talloc5 = getelementptr inbounds %struct.dfa, %struct.dfa* %13, i32 0, i32 5
  %14 = load i32, i32* %talloc5, align 4
  %conv = sext i32 %14 to i64
  %mul6 = mul i64 %conv, 4
  %call = call i8* @xrealloc_1(i8* %12, i64 %mul6)
  %15 = bitcast i8* %call to i32*
  %16 = load %struct.dfa*, %struct.dfa** @dfa, align 8
  %tokens7 = getelementptr inbounds %struct.dfa, %struct.dfa* %16, i32 0, i32 3
  store i32* %15, i32** %tokens7, align 8
  br label %if.end

if.end:                                           ; preds = %while.end, %entry
  %17 = load i32, i32* %t.addr, align 4
  %18 = load %struct.dfa*, %struct.dfa** @dfa, align 8
  %tokens8 = getelementptr inbounds %struct.dfa, %struct.dfa* %18, i32 0, i32 3
  %19 = load i32*, i32** %tokens8, align 8
  %20 = load %struct.dfa*, %struct.dfa** @dfa, align 8
  %tindex9 = getelementptr inbounds %struct.dfa, %struct.dfa* %20, i32 0, i32 4
  %21 = load i32, i32* %tindex9, align 8
  %inc = add nsw i32 %21, 1
  store i32 %inc, i32* %tindex9, align 8
  %idxprom = sext i32 %21 to i64
  %arrayidx = getelementptr inbounds i32, i32* %19, i64 %idxprom
  store i32 %17, i32* %arrayidx, align 4
  %22 = load i32, i32* %t.addr, align 4
  switch i32 %22, label %sw.default [
    i32 264, label %sw.bb
    i32 265, label %sw.bb
    i32 266, label %sw.bb
    i32 268, label %sw.bb10
    i32 269, label %sw.bb10
    i32 270, label %sw.bb10
    i32 256, label %sw.bb12
  ]

sw.bb:                                            ; preds = %if.end, %if.end, %if.end
  br label %sw.epilog

sw.bb10:                                          ; preds = %if.end, %if.end, %if.end
  %23 = load i32, i32* @depth, align 4
  %dec = add nsw i32 %23, -1
  store i32 %dec, i32* @depth, align 4
  br label %sw.epilog

sw.default:                                       ; preds = %if.end
  %24 = load %struct.dfa*, %struct.dfa** @dfa, align 8
  %nleaves = getelementptr inbounds %struct.dfa, %struct.dfa* %24, i32 0, i32 7
  %25 = load i32, i32* %nleaves, align 4
  %inc11 = add nsw i32 %25, 1
  store i32 %inc11, i32* %nleaves, align 4
  br label %sw.bb12

sw.bb12:                                          ; preds = %if.end, %sw.default
  %26 = load i32, i32* @depth, align 4
  %inc13 = add nsw i32 %26, 1
  store i32 %inc13, i32* @depth, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.bb12, %sw.bb10, %sw.bb
  %27 = load i32, i32* @depth, align 4
  %28 = load %struct.dfa*, %struct.dfa** @dfa, align 8
  %depth = getelementptr inbounds %struct.dfa, %struct.dfa* %28, i32 0, i32 6
  %29 = load i32, i32* %depth, align 8
  %cmp14 = icmp sgt i32 %27, %29
  br i1 %cmp14, label %if.then16, label %if.end18

if.then16:                                        ; preds = %sw.epilog
  %30 = load i32, i32* @depth, align 4
  %31 = load %struct.dfa*, %struct.dfa** @dfa, align 8
  %depth17 = getelementptr inbounds %struct.dfa, %struct.dfa* %31, i32 0, i32 6
  store i32 %30, i32* %depth17, align 8
  br label %if.end18

if.end18:                                         ; preds = %if.then16, %sw.epilog
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @epsclosure(%struct.position_set* %s, %struct.dfa* %d) #0 {
entry:
  %s.addr = alloca %struct.position_set*, align 8
  %d.addr = alloca %struct.dfa*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %visited = alloca i32*, align 8
  %p = alloca %struct.position, align 4
  %old = alloca %struct.position, align 4
  store %struct.position_set* %s, %struct.position_set** %s.addr, align 8
  store %struct.dfa* %d, %struct.dfa** %d.addr, align 8
  %0 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %tindex = getelementptr inbounds %struct.dfa, %struct.dfa* %0, i32 0, i32 4
  %1 = load i32, i32* %tindex, align 8
  %conv = sext i32 %1 to i64
  %mul = mul i64 %conv, 4
  %call = call i8* @xmalloc_1(i64 %mul)
  %2 = bitcast i8* %call to i32*
  store i32* %2, i32** %visited, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %tindex1 = getelementptr inbounds %struct.dfa, %struct.dfa* %4, i32 0, i32 4
  %5 = load i32, i32* %tindex1, align 8
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32*, i32** %visited, align 8
  %7 = load i32, i32* %i, align 4
  %idxprom = sext i32 %7 to i64
  %arrayidx = getelementptr inbounds i32, i32* %6, i64 %idxprom
  store i32 0, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond, !llvm.loop !95

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc87, %for.end
  %9 = load i32, i32* %i, align 4
  %10 = load %struct.position_set*, %struct.position_set** %s.addr, align 8
  %nelem = getelementptr inbounds %struct.position_set, %struct.position_set* %10, i32 0, i32 1
  %11 = load i32, i32* %nelem, align 8
  %cmp4 = icmp slt i32 %9, %11
  br i1 %cmp4, label %for.body6, label %for.end89

for.body6:                                        ; preds = %for.cond3
  %12 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %tokens = getelementptr inbounds %struct.dfa, %struct.dfa* %12, i32 0, i32 3
  %13 = load i32*, i32** %tokens, align 8
  %14 = load %struct.position_set*, %struct.position_set** %s.addr, align 8
  %elems = getelementptr inbounds %struct.position_set, %struct.position_set* %14, i32 0, i32 0
  %15 = load %struct.position*, %struct.position** %elems, align 8
  %16 = load i32, i32* %i, align 4
  %idxprom7 = sext i32 %16 to i64
  %arrayidx8 = getelementptr inbounds %struct.position, %struct.position* %15, i64 %idxprom7
  %strchr = getelementptr inbounds %struct.position, %struct.position* %arrayidx8, i32 0, i32 0
  %17 = load i32, i32* %strchr, align 4
  %idxprom9 = zext i32 %17 to i64
  %arrayidx10 = getelementptr inbounds i32, i32* %13, i64 %idxprom9
  %18 = load i32, i32* %arrayidx10, align 4
  %cmp11 = icmp sge i32 %18, 256
  br i1 %cmp11, label %land.lhs.true, label %if.end86

land.lhs.true:                                    ; preds = %for.body6
  %19 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %tokens13 = getelementptr inbounds %struct.dfa, %struct.dfa* %19, i32 0, i32 3
  %20 = load i32*, i32** %tokens13, align 8
  %21 = load %struct.position_set*, %struct.position_set** %s.addr, align 8
  %elems14 = getelementptr inbounds %struct.position_set, %struct.position_set* %21, i32 0, i32 0
  %22 = load %struct.position*, %struct.position** %elems14, align 8
  %23 = load i32, i32* %i, align 4
  %idxprom15 = sext i32 %23 to i64
  %arrayidx16 = getelementptr inbounds %struct.position, %struct.position* %22, i64 %idxprom15
  %strchr17 = getelementptr inbounds %struct.position, %struct.position* %arrayidx16, i32 0, i32 0
  %24 = load i32, i32* %strchr17, align 4
  %idxprom18 = zext i32 %24 to i64
  %arrayidx19 = getelementptr inbounds i32, i32* %20, i64 %idxprom18
  %25 = load i32, i32* %arrayidx19, align 4
  %cmp20 = icmp ne i32 %25, 257
  br i1 %cmp20, label %land.lhs.true22, label %if.end86

land.lhs.true22:                                  ; preds = %land.lhs.true
  %26 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %tokens23 = getelementptr inbounds %struct.dfa, %struct.dfa* %26, i32 0, i32 3
  %27 = load i32*, i32** %tokens23, align 8
  %28 = load %struct.position_set*, %struct.position_set** %s.addr, align 8
  %elems24 = getelementptr inbounds %struct.position_set, %struct.position_set* %28, i32 0, i32 0
  %29 = load %struct.position*, %struct.position** %elems24, align 8
  %30 = load i32, i32* %i, align 4
  %idxprom25 = sext i32 %30 to i64
  %arrayidx26 = getelementptr inbounds %struct.position, %struct.position* %29, i64 %idxprom25
  %strchr27 = getelementptr inbounds %struct.position, %struct.position* %arrayidx26, i32 0, i32 0
  %31 = load i32, i32* %strchr27, align 4
  %idxprom28 = zext i32 %31 to i64
  %arrayidx29 = getelementptr inbounds i32, i32* %27, i64 %idxprom28
  %32 = load i32, i32* %arrayidx29, align 4
  %cmp30 = icmp slt i32 %32, 273
  br i1 %cmp30, label %if.then, label %if.end86

if.then:                                          ; preds = %land.lhs.true22
  %33 = load %struct.position_set*, %struct.position_set** %s.addr, align 8
  %elems32 = getelementptr inbounds %struct.position_set, %struct.position_set* %33, i32 0, i32 0
  %34 = load %struct.position*, %struct.position** %elems32, align 8
  %35 = load i32, i32* %i, align 4
  %idxprom33 = sext i32 %35 to i64
  %arrayidx34 = getelementptr inbounds %struct.position, %struct.position* %34, i64 %idxprom33
  %36 = bitcast %struct.position* %old to i8*
  %37 = bitcast %struct.position* %arrayidx34 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %36, i8* align 4 %37, i64 8, i1 false)
  %constraint = getelementptr inbounds %struct.position, %struct.position* %old, i32 0, i32 1
  %38 = load i32, i32* %constraint, align 4
  %constraint35 = getelementptr inbounds %struct.position, %struct.position* %p, i32 0, i32 1
  store i32 %38, i32* %constraint35, align 4
  %39 = load %struct.position_set*, %struct.position_set** %s.addr, align 8
  %elems36 = getelementptr inbounds %struct.position_set, %struct.position_set* %39, i32 0, i32 0
  %40 = load %struct.position*, %struct.position** %elems36, align 8
  %41 = load i32, i32* %i, align 4
  %idxprom37 = sext i32 %41 to i64
  %arrayidx38 = getelementptr inbounds %struct.position, %struct.position* %40, i64 %idxprom37
  %42 = load %struct.position_set*, %struct.position_set** %s.addr, align 8
  %43 = bitcast %struct.position* %arrayidx38 to i64*
  %44 = load i64, i64* %43, align 4
  call void @delete(i64 %44, %struct.position_set* %42)
  %45 = load i32*, i32** %visited, align 8
  %strchr39 = getelementptr inbounds %struct.position, %struct.position* %old, i32 0, i32 0
  %46 = load i32, i32* %strchr39, align 4
  %idxprom40 = zext i32 %46 to i64
  %arrayidx41 = getelementptr inbounds i32, i32* %45, i64 %idxprom40
  %47 = load i32, i32* %arrayidx41, align 4
  %tobool = icmp ne i32 %47, 0
  br i1 %tobool, label %if.then42, label %if.end

if.then42:                                        ; preds = %if.then
  %48 = load i32, i32* %i, align 4
  %dec = add nsw i32 %48, -1
  store i32 %dec, i32* %i, align 4
  br label %for.inc87

if.end:                                           ; preds = %if.then
  %49 = load i32*, i32** %visited, align 8
  %strchr43 = getelementptr inbounds %struct.position, %struct.position* %old, i32 0, i32 0
  %50 = load i32, i32* %strchr43, align 4
  %idxprom44 = zext i32 %50 to i64
  %arrayidx45 = getelementptr inbounds i32, i32* %49, i64 %idxprom44
  store i32 1, i32* %arrayidx45, align 4
  %51 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %tokens46 = getelementptr inbounds %struct.dfa, %struct.dfa* %51, i32 0, i32 3
  %52 = load i32*, i32** %tokens46, align 8
  %strchr47 = getelementptr inbounds %struct.position, %struct.position* %old, i32 0, i32 0
  %53 = load i32, i32* %strchr47, align 4
  %idxprom48 = zext i32 %53 to i64
  %arrayidx49 = getelementptr inbounds i32, i32* %52, i64 %idxprom48
  %54 = load i32, i32* %arrayidx49, align 4
  switch i32 %54, label %sw.default [
    i32 258, label %sw.bb
    i32 259, label %sw.bb51
    i32 260, label %sw.bb54
    i32 261, label %sw.bb57
    i32 262, label %sw.bb60
    i32 263, label %sw.bb63
  ]

sw.bb:                                            ; preds = %if.end
  %constraint50 = getelementptr inbounds %struct.position, %struct.position* %p, i32 0, i32 1
  %55 = load i32, i32* %constraint50, align 4
  %and = and i32 %55, 207
  store i32 %and, i32* %constraint50, align 4
  br label %sw.epilog

sw.bb51:                                          ; preds = %if.end
  %constraint52 = getelementptr inbounds %struct.position, %struct.position* %p, i32 0, i32 1
  %56 = load i32, i32* %constraint52, align 4
  %and53 = and i32 %56, 175
  store i32 %and53, i32* %constraint52, align 4
  br label %sw.epilog

sw.bb54:                                          ; preds = %if.end
  %constraint55 = getelementptr inbounds %struct.position, %struct.position* %p, i32 0, i32 1
  %57 = load i32, i32* %constraint55, align 4
  %and56 = and i32 %57, 242
  store i32 %and56, i32* %constraint55, align 4
  br label %sw.epilog

sw.bb57:                                          ; preds = %if.end
  %constraint58 = getelementptr inbounds %struct.position, %struct.position* %p, i32 0, i32 1
  %58 = load i32, i32* %constraint58, align 4
  %and59 = and i32 %58, 244
  store i32 %and59, i32* %constraint58, align 4
  br label %sw.epilog

sw.bb60:                                          ; preds = %if.end
  %constraint61 = getelementptr inbounds %struct.position, %struct.position* %p, i32 0, i32 1
  %59 = load i32, i32* %constraint61, align 4
  %and62 = and i32 %59, 246
  store i32 %and62, i32* %constraint61, align 4
  br label %sw.epilog

sw.bb63:                                          ; preds = %if.end
  %constraint64 = getelementptr inbounds %struct.position, %struct.position* %p, i32 0, i32 1
  %60 = load i32, i32* %constraint64, align 4
  %and65 = and i32 %60, 249
  store i32 %and65, i32* %constraint64, align 4
  br label %sw.epilog

sw.default:                                       ; preds = %if.end
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb63, %sw.bb60, %sw.bb57, %sw.bb54, %sw.bb51, %sw.bb
  store i32 0, i32* %j, align 4
  br label %for.cond66

for.cond66:                                       ; preds = %for.inc83, %sw.epilog
  %61 = load i32, i32* %j, align 4
  %62 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %follows = getelementptr inbounds %struct.dfa, %struct.dfa* %62, i32 0, i32 12
  %63 = load %struct.position_set*, %struct.position_set** %follows, align 8
  %strchr67 = getelementptr inbounds %struct.position, %struct.position* %old, i32 0, i32 0
  %64 = load i32, i32* %strchr67, align 4
  %idxprom68 = zext i32 %64 to i64
  %arrayidx69 = getelementptr inbounds %struct.position_set, %struct.position_set* %63, i64 %idxprom68
  %nelem70 = getelementptr inbounds %struct.position_set, %struct.position_set* %arrayidx69, i32 0, i32 1
  %65 = load i32, i32* %nelem70, align 8
  %cmp71 = icmp slt i32 %61, %65
  br i1 %cmp71, label %for.body73, label %for.end85

for.body73:                                       ; preds = %for.cond66
  %66 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %follows74 = getelementptr inbounds %struct.dfa, %struct.dfa* %66, i32 0, i32 12
  %67 = load %struct.position_set*, %struct.position_set** %follows74, align 8
  %strchr75 = getelementptr inbounds %struct.position, %struct.position* %old, i32 0, i32 0
  %68 = load i32, i32* %strchr75, align 4
  %idxprom76 = zext i32 %68 to i64
  %arrayidx77 = getelementptr inbounds %struct.position_set, %struct.position_set* %67, i64 %idxprom76
  %elems78 = getelementptr inbounds %struct.position_set, %struct.position_set* %arrayidx77, i32 0, i32 0
  %69 = load %struct.position*, %struct.position** %elems78, align 8
  %70 = load i32, i32* %j, align 4
  %idxprom79 = sext i32 %70 to i64
  %arrayidx80 = getelementptr inbounds %struct.position, %struct.position* %69, i64 %idxprom79
  %strchr81 = getelementptr inbounds %struct.position, %struct.position* %arrayidx80, i32 0, i32 0
  %71 = load i32, i32* %strchr81, align 4
  %strchr82 = getelementptr inbounds %struct.position, %struct.position* %p, i32 0, i32 0
  store i32 %71, i32* %strchr82, align 4
  %72 = load %struct.position_set*, %struct.position_set** %s.addr, align 8
  %73 = bitcast %struct.position* %p to i64*
  %74 = load i64, i64* %73, align 4
  call void @insert(i64 %74, %struct.position_set* %72)
  br label %for.inc83

for.inc83:                                        ; preds = %for.body73
  %75 = load i32, i32* %j, align 4
  %inc84 = add nsw i32 %75, 1
  store i32 %inc84, i32* %j, align 4
  br label %for.cond66, !llvm.loop !96

for.end85:                                        ; preds = %for.cond66
  store i32 -1, i32* %i, align 4
  br label %if.end86

if.end86:                                         ; preds = %for.end85, %land.lhs.true22, %land.lhs.true, %for.body6
  br label %for.inc87

for.inc87:                                        ; preds = %if.end86, %if.then42
  %76 = load i32, i32* %i, align 4
  %inc88 = add nsw i32 %76, 1
  store i32 %inc88, i32* %i, align 4
  br label %for.cond3, !llvm.loop !97

for.end89:                                        ; preds = %for.cond3
  %77 = load i32*, i32** %visited, align 8
  %78 = bitcast i32* %77 to i8*
  call void @free(i8* %78) #9
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @xmalloc_1(i64 %n) #0 {
entry:
  %n.addr = alloca i64, align 8
  %r = alloca i8*, align 8
  store i64 %n, i64* %n.addr, align 8
  %0 = load i64, i64* %n.addr, align 8
  %call = call noalias align 16 i8* @malloc(i64 %0) #9
  store i8* %call, i8** %r, align 8
  %1 = load i8*, i8** %r, align 8
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @dfaerror(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.57, i64 0, i64 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i8*, i8** %r, align 8
  ret i8* %2
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @delete(i64 %p.coerce, %struct.position_set* %s) #0 {
entry:
  %p = alloca %struct.position, align 4
  %s.addr = alloca %struct.position_set*, align 8
  %i = alloca i32, align 4
  %0 = bitcast %struct.position* %p to i64*
  store i64 %p.coerce, i64* %0, align 4
  store %struct.position_set* %s, %struct.position_set** %s.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load %struct.position_set*, %struct.position_set** %s.addr, align 8
  %nelem = getelementptr inbounds %struct.position_set, %struct.position_set* %2, i32 0, i32 1
  %3 = load i32, i32* %nelem, align 8
  %cmp = icmp slt i32 %1, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %strchr = getelementptr inbounds %struct.position, %struct.position* %p, i32 0, i32 0
  %4 = load i32, i32* %strchr, align 4
  %5 = load %struct.position_set*, %struct.position_set** %s.addr, align 8
  %elems = getelementptr inbounds %struct.position_set, %struct.position_set* %5, i32 0, i32 0
  %6 = load %struct.position*, %struct.position** %elems, align 8
  %7 = load i32, i32* %i, align 4
  %idxprom = sext i32 %7 to i64
  %arrayidx = getelementptr inbounds %struct.position, %struct.position* %6, i64 %idxprom
  %strchr1 = getelementptr inbounds %struct.position, %struct.position* %arrayidx, i32 0, i32 0
  %8 = load i32, i32* %strchr1, align 4
  %cmp2 = icmp eq i32 %4, %8
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.end

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond, !llvm.loop !98

for.end:                                          ; preds = %if.then, %for.cond
  %10 = load i32, i32* %i, align 4
  %11 = load %struct.position_set*, %struct.position_set** %s.addr, align 8
  %nelem3 = getelementptr inbounds %struct.position_set, %struct.position_set* %11, i32 0, i32 1
  %12 = load i32, i32* %nelem3, align 8
  %cmp4 = icmp slt i32 %10, %12
  br i1 %cmp4, label %if.then5, label %if.end20

if.then5:                                         ; preds = %for.end
  %13 = load %struct.position_set*, %struct.position_set** %s.addr, align 8
  %nelem6 = getelementptr inbounds %struct.position_set, %struct.position_set* %13, i32 0, i32 1
  %14 = load i32, i32* %nelem6, align 8
  %dec = add nsw i32 %14, -1
  store i32 %dec, i32* %nelem6, align 8
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc17, %if.then5
  %15 = load i32, i32* %i, align 4
  %16 = load %struct.position_set*, %struct.position_set** %s.addr, align 8
  %nelem8 = getelementptr inbounds %struct.position_set, %struct.position_set* %16, i32 0, i32 1
  %17 = load i32, i32* %nelem8, align 8
  %cmp9 = icmp slt i32 %15, %17
  br i1 %cmp9, label %for.body10, label %for.end19

for.body10:                                       ; preds = %for.cond7
  %18 = load %struct.position_set*, %struct.position_set** %s.addr, align 8
  %elems11 = getelementptr inbounds %struct.position_set, %struct.position_set* %18, i32 0, i32 0
  %19 = load %struct.position*, %struct.position** %elems11, align 8
  %20 = load i32, i32* %i, align 4
  %idxprom12 = sext i32 %20 to i64
  %arrayidx13 = getelementptr inbounds %struct.position, %struct.position* %19, i64 %idxprom12
  %21 = load %struct.position_set*, %struct.position_set** %s.addr, align 8
  %elems14 = getelementptr inbounds %struct.position_set, %struct.position_set* %21, i32 0, i32 0
  %22 = load %struct.position*, %struct.position** %elems14, align 8
  %23 = load i32, i32* %i, align 4
  %add = add nsw i32 %23, 1
  %idxprom15 = sext i32 %add to i64
  %arrayidx16 = getelementptr inbounds %struct.position, %struct.position* %22, i64 %idxprom15
  %24 = bitcast %struct.position* %arrayidx13 to i8*
  %25 = bitcast %struct.position* %arrayidx16 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %24, i8* align 4 %25, i64 8, i1 false)
  br label %for.inc17

for.inc17:                                        ; preds = %for.body10
  %26 = load i32, i32* %i, align 4
  %inc18 = add nsw i32 %26, 1
  store i32 %inc18, i32* %i, align 4
  br label %for.cond7, !llvm.loop !99

for.end19:                                        ; preds = %for.cond7
  br label %if.end20

if.end20:                                         ; preds = %for.end19, %for.end
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @insert(i64 %p.coerce, %struct.position_set* %s) #0 {
entry:
  %p = alloca %struct.position, align 4
  %s.addr = alloca %struct.position_set*, align 8
  %i = alloca i32, align 4
  %t1 = alloca %struct.position, align 4
  %t2 = alloca %struct.position, align 4
  %0 = bitcast %struct.position* %p to i64*
  store i64 %p.coerce, i64* %0, align 4
  store %struct.position_set* %s, %struct.position_set** %s.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load %struct.position_set*, %struct.position_set** %s.addr, align 8
  %nelem = getelementptr inbounds %struct.position_set, %struct.position_set* %2, i32 0, i32 1
  %3 = load i32, i32* %nelem, align 8
  %cmp = icmp slt i32 %1, %3
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %strchr = getelementptr inbounds %struct.position, %struct.position* %p, i32 0, i32 0
  %4 = load i32, i32* %strchr, align 4
  %5 = load %struct.position_set*, %struct.position_set** %s.addr, align 8
  %elems = getelementptr inbounds %struct.position_set, %struct.position_set* %5, i32 0, i32 0
  %6 = load %struct.position*, %struct.position** %elems, align 8
  %7 = load i32, i32* %i, align 4
  %idxprom = sext i32 %7 to i64
  %arrayidx = getelementptr inbounds %struct.position, %struct.position* %6, i64 %idxprom
  %strchr1 = getelementptr inbounds %struct.position, %struct.position* %arrayidx, i32 0, i32 0
  %8 = load i32, i32* %strchr1, align 4
  %cmp2 = icmp ult i32 %4, %8
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %9 = phi i1 [ false, %for.cond ], [ %cmp2, %land.rhs ]
  br i1 %9, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load i32, i32* %i, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond, !llvm.loop !100

for.end:                                          ; preds = %land.end
  %11 = load i32, i32* %i, align 4
  %12 = load %struct.position_set*, %struct.position_set** %s.addr, align 8
  %nelem3 = getelementptr inbounds %struct.position_set, %struct.position_set* %12, i32 0, i32 1
  %13 = load i32, i32* %nelem3, align 8
  %cmp4 = icmp slt i32 %11, %13
  br i1 %cmp4, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %for.end
  %strchr5 = getelementptr inbounds %struct.position, %struct.position* %p, i32 0, i32 0
  %14 = load i32, i32* %strchr5, align 4
  %15 = load %struct.position_set*, %struct.position_set** %s.addr, align 8
  %elems6 = getelementptr inbounds %struct.position_set, %struct.position_set* %15, i32 0, i32 0
  %16 = load %struct.position*, %struct.position** %elems6, align 8
  %17 = load i32, i32* %i, align 4
  %idxprom7 = sext i32 %17 to i64
  %arrayidx8 = getelementptr inbounds %struct.position, %struct.position* %16, i64 %idxprom7
  %strchr9 = getelementptr inbounds %struct.position, %struct.position* %arrayidx8, i32 0, i32 0
  %18 = load i32, i32* %strchr9, align 4
  %cmp10 = icmp eq i32 %14, %18
  br i1 %cmp10, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %constraint = getelementptr inbounds %struct.position, %struct.position* %p, i32 0, i32 1
  %19 = load i32, i32* %constraint, align 4
  %20 = load %struct.position_set*, %struct.position_set** %s.addr, align 8
  %elems11 = getelementptr inbounds %struct.position_set, %struct.position_set* %20, i32 0, i32 0
  %21 = load %struct.position*, %struct.position** %elems11, align 8
  %22 = load i32, i32* %i, align 4
  %idxprom12 = sext i32 %22 to i64
  %arrayidx13 = getelementptr inbounds %struct.position, %struct.position* %21, i64 %idxprom12
  %constraint14 = getelementptr inbounds %struct.position, %struct.position* %arrayidx13, i32 0, i32 1
  %23 = load i32, i32* %constraint14, align 4
  %or = or i32 %23, %19
  store i32 %or, i32* %constraint14, align 4
  br label %if.end

if.else:                                          ; preds = %land.lhs.true, %for.end
  %24 = bitcast %struct.position* %t1 to i8*
  %25 = bitcast %struct.position* %p to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %24, i8* align 4 %25, i64 8, i1 false)
  %26 = load %struct.position_set*, %struct.position_set** %s.addr, align 8
  %nelem15 = getelementptr inbounds %struct.position_set, %struct.position_set* %26, i32 0, i32 1
  %27 = load i32, i32* %nelem15, align 8
  %inc16 = add nsw i32 %27, 1
  store i32 %inc16, i32* %nelem15, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.else
  %28 = load i32, i32* %i, align 4
  %29 = load %struct.position_set*, %struct.position_set** %s.addr, align 8
  %nelem17 = getelementptr inbounds %struct.position_set, %struct.position_set* %29, i32 0, i32 1
  %30 = load i32, i32* %nelem17, align 8
  %cmp18 = icmp slt i32 %28, %30
  br i1 %cmp18, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %31 = load %struct.position_set*, %struct.position_set** %s.addr, align 8
  %elems19 = getelementptr inbounds %struct.position_set, %struct.position_set* %31, i32 0, i32 0
  %32 = load %struct.position*, %struct.position** %elems19, align 8
  %33 = load i32, i32* %i, align 4
  %idxprom20 = sext i32 %33 to i64
  %arrayidx21 = getelementptr inbounds %struct.position, %struct.position* %32, i64 %idxprom20
  %34 = bitcast %struct.position* %t2 to i8*
  %35 = bitcast %struct.position* %arrayidx21 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %34, i8* align 4 %35, i64 8, i1 false)
  %36 = load %struct.position_set*, %struct.position_set** %s.addr, align 8
  %elems22 = getelementptr inbounds %struct.position_set, %struct.position_set* %36, i32 0, i32 0
  %37 = load %struct.position*, %struct.position** %elems22, align 8
  %38 = load i32, i32* %i, align 4
  %inc23 = add nsw i32 %38, 1
  store i32 %inc23, i32* %i, align 4
  %idxprom24 = sext i32 %38 to i64
  %arrayidx25 = getelementptr inbounds %struct.position, %struct.position* %37, i64 %idxprom24
  %39 = bitcast %struct.position* %arrayidx25 to i8*
  %40 = bitcast %struct.position* %t1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %39, i8* align 4 %40, i64 8, i1 false)
  %41 = bitcast %struct.position* %t1 to i8*
  %42 = bitcast %struct.position* %t2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %41, i8* align 4 %42, i64 8, i1 false)
  br label %while.cond, !llvm.loop !101

while.end:                                        ; preds = %while.cond
  br label %if.end

if.end:                                           ; preds = %while.end, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @dfaanalyze(%struct.dfa* %d, i32 %searchflag) #0 {
entry:
  %d.addr = alloca %struct.dfa*, align 8
  %searchflag.addr = alloca i32, align 4
  %nullable = alloca i32*, align 8
  %nfirstpos = alloca i32*, align 8
  %firstpos = alloca %struct.position*, align 8
  %nlastpos = alloca i32*, align 8
  %lastpos = alloca %struct.position*, align 8
  %nalloc = alloca i32*, align 8
  %tmp = alloca %struct.position_set, align 8
  %merged = alloca %struct.position_set, align 8
  %wants_newline = alloca i32, align 4
  %o_nullable = alloca i32*, align 8
  %o_nfirst = alloca i32*, align 8
  %o_nlast = alloca i32*, align 8
  %o_firstpos = alloca %struct.position*, align 8
  %o_lastpos = alloca %struct.position*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %pos = alloca %struct.position*, align 8
  store %struct.dfa* %d, %struct.dfa** %d.addr, align 8
  store i32 %searchflag, i32* %searchflag.addr, align 4
  %0 = load i32, i32* %searchflag.addr, align 4
  %1 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %searchflag1 = getelementptr inbounds %struct.dfa, %struct.dfa* %1, i32 0, i32 13
  store i32 %0, i32* %searchflag1, align 8
  %2 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %depth = getelementptr inbounds %struct.dfa, %struct.dfa* %2, i32 0, i32 6
  %3 = load i32, i32* %depth, align 8
  %conv = sext i32 %3 to i64
  %mul = mul i64 %conv, 4
  %call = call i8* @xmalloc_1(i64 %mul)
  %4 = bitcast i8* %call to i32*
  store i32* %4, i32** %nullable, align 8
  %5 = load i32*, i32** %nullable, align 8
  store i32* %5, i32** %o_nullable, align 8
  %6 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %depth2 = getelementptr inbounds %struct.dfa, %struct.dfa* %6, i32 0, i32 6
  %7 = load i32, i32* %depth2, align 8
  %conv3 = sext i32 %7 to i64
  %mul4 = mul i64 %conv3, 4
  %call5 = call i8* @xmalloc_1(i64 %mul4)
  %8 = bitcast i8* %call5 to i32*
  store i32* %8, i32** %nfirstpos, align 8
  %9 = load i32*, i32** %nfirstpos, align 8
  store i32* %9, i32** %o_nfirst, align 8
  %10 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %nleaves = getelementptr inbounds %struct.dfa, %struct.dfa* %10, i32 0, i32 7
  %11 = load i32, i32* %nleaves, align 4
  %conv6 = sext i32 %11 to i64
  %mul7 = mul i64 %conv6, 8
  %call8 = call i8* @xmalloc_1(i64 %mul7)
  %12 = bitcast i8* %call8 to %struct.position*
  store %struct.position* %12, %struct.position** %firstpos, align 8
  %13 = load %struct.position*, %struct.position** %firstpos, align 8
  store %struct.position* %13, %struct.position** %o_firstpos, align 8
  %14 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %nleaves9 = getelementptr inbounds %struct.dfa, %struct.dfa* %14, i32 0, i32 7
  %15 = load i32, i32* %nleaves9, align 4
  %16 = load %struct.position*, %struct.position** %firstpos, align 8
  %idx.ext = sext i32 %15 to i64
  %add.ptr = getelementptr inbounds %struct.position, %struct.position* %16, i64 %idx.ext
  store %struct.position* %add.ptr, %struct.position** %firstpos, align 8
  %17 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %depth10 = getelementptr inbounds %struct.dfa, %struct.dfa* %17, i32 0, i32 6
  %18 = load i32, i32* %depth10, align 8
  %conv11 = sext i32 %18 to i64
  %mul12 = mul i64 %conv11, 4
  %call13 = call i8* @xmalloc_1(i64 %mul12)
  %19 = bitcast i8* %call13 to i32*
  store i32* %19, i32** %nlastpos, align 8
  %20 = load i32*, i32** %nlastpos, align 8
  store i32* %20, i32** %o_nlast, align 8
  %21 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %nleaves14 = getelementptr inbounds %struct.dfa, %struct.dfa* %21, i32 0, i32 7
  %22 = load i32, i32* %nleaves14, align 4
  %conv15 = sext i32 %22 to i64
  %mul16 = mul i64 %conv15, 8
  %call17 = call i8* @xmalloc_1(i64 %mul16)
  %23 = bitcast i8* %call17 to %struct.position*
  store %struct.position* %23, %struct.position** %lastpos, align 8
  %24 = load %struct.position*, %struct.position** %lastpos, align 8
  store %struct.position* %24, %struct.position** %o_lastpos, align 8
  %25 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %nleaves18 = getelementptr inbounds %struct.dfa, %struct.dfa* %25, i32 0, i32 7
  %26 = load i32, i32* %nleaves18, align 4
  %27 = load %struct.position*, %struct.position** %lastpos, align 8
  %idx.ext19 = sext i32 %26 to i64
  %add.ptr20 = getelementptr inbounds %struct.position, %struct.position* %27, i64 %idx.ext19
  store %struct.position* %add.ptr20, %struct.position** %lastpos, align 8
  %28 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %tindex = getelementptr inbounds %struct.dfa, %struct.dfa* %28, i32 0, i32 4
  %29 = load i32, i32* %tindex, align 8
  %conv21 = sext i32 %29 to i64
  %mul22 = mul i64 %conv21, 4
  %call23 = call i8* @xmalloc_1(i64 %mul22)
  %30 = bitcast i8* %call23 to i32*
  store i32* %30, i32** %nalloc, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %31 = load i32, i32* %i, align 4
  %32 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %tindex24 = getelementptr inbounds %struct.dfa, %struct.dfa* %32, i32 0, i32 4
  %33 = load i32, i32* %tindex24, align 8
  %cmp = icmp slt i32 %31, %33
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %34 = load i32*, i32** %nalloc, align 8
  %35 = load i32, i32* %i, align 4
  %idxprom = sext i32 %35 to i64
  %arrayidx = getelementptr inbounds i32, i32* %34, i64 %idxprom
  store i32 0, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %36 = load i32, i32* %i, align 4
  %inc = add nsw i32 %36, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond, !llvm.loop !102

for.end:                                          ; preds = %for.cond
  %37 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %nleaves26 = getelementptr inbounds %struct.dfa, %struct.dfa* %37, i32 0, i32 7
  %38 = load i32, i32* %nleaves26, align 4
  %conv27 = sext i32 %38 to i64
  %mul28 = mul i64 %conv27, 8
  %call29 = call i8* @xmalloc_1(i64 %mul28)
  %39 = bitcast i8* %call29 to %struct.position*
  %elems = getelementptr inbounds %struct.position_set, %struct.position_set* %merged, i32 0, i32 0
  store %struct.position* %39, %struct.position** %elems, align 8
  %40 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %tindex30 = getelementptr inbounds %struct.dfa, %struct.dfa* %40, i32 0, i32 4
  %41 = load i32, i32* %tindex30, align 8
  %call31 = call i8* @xcalloc(i32 %41, i64 16)
  %42 = bitcast i8* %call31 to %struct.position_set*
  %43 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %follows = getelementptr inbounds %struct.dfa, %struct.dfa* %43, i32 0, i32 12
  store %struct.position_set* %42, %struct.position_set** %follows, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond32

for.cond32:                                       ; preds = %for.inc278, %for.end
  %44 = load i32, i32* %i, align 4
  %45 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %tindex33 = getelementptr inbounds %struct.dfa, %struct.dfa* %45, i32 0, i32 4
  %46 = load i32, i32* %tindex33, align 8
  %cmp34 = icmp slt i32 %44, %46
  br i1 %cmp34, label %for.body36, label %for.end280

for.body36:                                       ; preds = %for.cond32
  %47 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %tokens = getelementptr inbounds %struct.dfa, %struct.dfa* %47, i32 0, i32 3
  %48 = load i32*, i32** %tokens, align 8
  %49 = load i32, i32* %i, align 4
  %idxprom37 = sext i32 %49 to i64
  %arrayidx38 = getelementptr inbounds i32, i32* %48, i64 %idxprom37
  %50 = load i32, i32* %arrayidx38, align 4
  switch i32 %50, label %sw.default [
    i32 256, label %sw.bb
    i32 265, label %sw.bb41
    i32 266, label %sw.bb41
    i32 264, label %sw.bb108
    i32 268, label %sw.bb117
    i32 269, label %sw.bb239
    i32 270, label %sw.bb239
  ]

sw.bb:                                            ; preds = %for.body36
  %51 = load i32*, i32** %nullable, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %51, i32 1
  store i32* %incdec.ptr, i32** %nullable, align 8
  store i32 1, i32* %51, align 4
  %52 = load i32*, i32** %nlastpos, align 8
  %incdec.ptr39 = getelementptr inbounds i32, i32* %52, i32 1
  store i32* %incdec.ptr39, i32** %nlastpos, align 8
  store i32 0, i32* %52, align 4
  %53 = load i32*, i32** %nfirstpos, align 8
  %incdec.ptr40 = getelementptr inbounds i32, i32* %53, i32 1
  store i32* %incdec.ptr40, i32** %nfirstpos, align 8
  store i32 0, i32* %53, align 4
  br label %sw.epilog

sw.bb41:                                          ; preds = %for.body36, %for.body36
  %54 = load i32*, i32** %nfirstpos, align 8
  %arrayidx42 = getelementptr inbounds i32, i32* %54, i64 -1
  %55 = load i32, i32* %arrayidx42, align 4
  %nelem = getelementptr inbounds %struct.position_set, %struct.position_set* %tmp, i32 0, i32 1
  store i32 %55, i32* %nelem, align 8
  %56 = load %struct.position*, %struct.position** %firstpos, align 8
  %elems43 = getelementptr inbounds %struct.position_set, %struct.position_set* %tmp, i32 0, i32 0
  store %struct.position* %56, %struct.position** %elems43, align 8
  %57 = load %struct.position*, %struct.position** %lastpos, align 8
  store %struct.position* %57, %struct.position** %pos, align 8
  store i32 0, i32* %j, align 4
  br label %for.cond44

for.cond44:                                       ; preds = %for.inc105, %sw.bb41
  %58 = load i32, i32* %j, align 4
  %59 = load i32*, i32** %nlastpos, align 8
  %arrayidx45 = getelementptr inbounds i32, i32* %59, i64 -1
  %60 = load i32, i32* %arrayidx45, align 4
  %cmp46 = icmp slt i32 %58, %60
  br i1 %cmp46, label %for.body48, label %for.end107

for.body48:                                       ; preds = %for.cond44
  %61 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %follows49 = getelementptr inbounds %struct.dfa, %struct.dfa* %61, i32 0, i32 12
  %62 = load %struct.position_set*, %struct.position_set** %follows49, align 8
  %63 = load %struct.position*, %struct.position** %pos, align 8
  %64 = load i32, i32* %j, align 4
  %idxprom50 = sext i32 %64 to i64
  %arrayidx51 = getelementptr inbounds %struct.position, %struct.position* %63, i64 %idxprom50
  %strchr = getelementptr inbounds %struct.position, %struct.position* %arrayidx51, i32 0, i32 0
  %65 = load i32, i32* %strchr, align 4
  %idxprom52 = zext i32 %65 to i64
  %arrayidx53 = getelementptr inbounds %struct.position_set, %struct.position_set* %62, i64 %idxprom52
  call void @merge(%struct.position_set* %tmp, %struct.position_set* %arrayidx53, %struct.position_set* %merged)
  %nelem54 = getelementptr inbounds %struct.position_set, %struct.position_set* %merged, i32 0, i32 1
  %66 = load i32, i32* %nelem54, align 8
  %sub = sub nsw i32 %66, 1
  %67 = load i32*, i32** %nalloc, align 8
  %68 = load %struct.position*, %struct.position** %pos, align 8
  %69 = load i32, i32* %j, align 4
  %idxprom55 = sext i32 %69 to i64
  %arrayidx56 = getelementptr inbounds %struct.position, %struct.position* %68, i64 %idxprom55
  %strchr57 = getelementptr inbounds %struct.position, %struct.position* %arrayidx56, i32 0, i32 0
  %70 = load i32, i32* %strchr57, align 4
  %idxprom58 = zext i32 %70 to i64
  %arrayidx59 = getelementptr inbounds i32, i32* %67, i64 %idxprom58
  %71 = load i32, i32* %arrayidx59, align 4
  %cmp60 = icmp sge i32 %sub, %71
  br i1 %cmp60, label %if.then, label %if.end

if.then:                                          ; preds = %for.body48
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %nelem62 = getelementptr inbounds %struct.position_set, %struct.position_set* %merged, i32 0, i32 1
  %72 = load i32, i32* %nelem62, align 8
  %sub63 = sub nsw i32 %72, 1
  %73 = load i32*, i32** %nalloc, align 8
  %74 = load %struct.position*, %struct.position** %pos, align 8
  %75 = load i32, i32* %j, align 4
  %idxprom64 = sext i32 %75 to i64
  %arrayidx65 = getelementptr inbounds %struct.position, %struct.position* %74, i64 %idxprom64
  %strchr66 = getelementptr inbounds %struct.position, %struct.position* %arrayidx65, i32 0, i32 0
  %76 = load i32, i32* %strchr66, align 4
  %idxprom67 = zext i32 %76 to i64
  %arrayidx68 = getelementptr inbounds i32, i32* %73, i64 %idxprom67
  %77 = load i32, i32* %arrayidx68, align 4
  %cmp69 = icmp sge i32 %sub63, %77
  br i1 %cmp69, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %78 = load i32*, i32** %nalloc, align 8
  %79 = load %struct.position*, %struct.position** %pos, align 8
  %80 = load i32, i32* %j, align 4
  %idxprom71 = sext i32 %80 to i64
  %arrayidx72 = getelementptr inbounds %struct.position, %struct.position* %79, i64 %idxprom71
  %strchr73 = getelementptr inbounds %struct.position, %struct.position* %arrayidx72, i32 0, i32 0
  %81 = load i32, i32* %strchr73, align 4
  %idxprom74 = zext i32 %81 to i64
  %arrayidx75 = getelementptr inbounds i32, i32* %78, i64 %idxprom74
  %82 = load i32, i32* %arrayidx75, align 4
  %mul76 = mul nsw i32 %82, 2
  store i32 %mul76, i32* %arrayidx75, align 4
  br label %while.cond, !llvm.loop !103

while.end:                                        ; preds = %while.cond
  %83 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %follows77 = getelementptr inbounds %struct.dfa, %struct.dfa* %83, i32 0, i32 12
  %84 = load %struct.position_set*, %struct.position_set** %follows77, align 8
  %85 = load %struct.position*, %struct.position** %pos, align 8
  %86 = load i32, i32* %j, align 4
  %idxprom78 = sext i32 %86 to i64
  %arrayidx79 = getelementptr inbounds %struct.position, %struct.position* %85, i64 %idxprom78
  %strchr80 = getelementptr inbounds %struct.position, %struct.position* %arrayidx79, i32 0, i32 0
  %87 = load i32, i32* %strchr80, align 4
  %idxprom81 = zext i32 %87 to i64
  %arrayidx82 = getelementptr inbounds %struct.position_set, %struct.position_set* %84, i64 %idxprom81
  %elems83 = getelementptr inbounds %struct.position_set, %struct.position_set* %arrayidx82, i32 0, i32 0
  %88 = load %struct.position*, %struct.position** %elems83, align 8
  %89 = bitcast %struct.position* %88 to i8*
  %90 = load i32*, i32** %nalloc, align 8
  %91 = load %struct.position*, %struct.position** %pos, align 8
  %92 = load i32, i32* %j, align 4
  %idxprom84 = sext i32 %92 to i64
  %arrayidx85 = getelementptr inbounds %struct.position, %struct.position* %91, i64 %idxprom84
  %strchr86 = getelementptr inbounds %struct.position, %struct.position* %arrayidx85, i32 0, i32 0
  %93 = load i32, i32* %strchr86, align 4
  %idxprom87 = zext i32 %93 to i64
  %arrayidx88 = getelementptr inbounds i32, i32* %90, i64 %idxprom87
  %94 = load i32, i32* %arrayidx88, align 4
  %conv89 = sext i32 %94 to i64
  %mul90 = mul i64 %conv89, 8
  %call91 = call i8* @xrealloc_1(i8* %89, i64 %mul90)
  %95 = bitcast i8* %call91 to %struct.position*
  %96 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %follows92 = getelementptr inbounds %struct.dfa, %struct.dfa* %96, i32 0, i32 12
  %97 = load %struct.position_set*, %struct.position_set** %follows92, align 8
  %98 = load %struct.position*, %struct.position** %pos, align 8
  %99 = load i32, i32* %j, align 4
  %idxprom93 = sext i32 %99 to i64
  %arrayidx94 = getelementptr inbounds %struct.position, %struct.position* %98, i64 %idxprom93
  %strchr95 = getelementptr inbounds %struct.position, %struct.position* %arrayidx94, i32 0, i32 0
  %100 = load i32, i32* %strchr95, align 4
  %idxprom96 = zext i32 %100 to i64
  %arrayidx97 = getelementptr inbounds %struct.position_set, %struct.position_set* %97, i64 %idxprom96
  %elems98 = getelementptr inbounds %struct.position_set, %struct.position_set* %arrayidx97, i32 0, i32 0
  store %struct.position* %95, %struct.position** %elems98, align 8
  br label %if.end

if.end:                                           ; preds = %while.end, %for.body48
  %101 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %follows99 = getelementptr inbounds %struct.dfa, %struct.dfa* %101, i32 0, i32 12
  %102 = load %struct.position_set*, %struct.position_set** %follows99, align 8
  %103 = load %struct.position*, %struct.position** %pos, align 8
  %104 = load i32, i32* %j, align 4
  %idxprom100 = sext i32 %104 to i64
  %arrayidx101 = getelementptr inbounds %struct.position, %struct.position* %103, i64 %idxprom100
  %strchr102 = getelementptr inbounds %struct.position, %struct.position* %arrayidx101, i32 0, i32 0
  %105 = load i32, i32* %strchr102, align 4
  %idxprom103 = zext i32 %105 to i64
  %arrayidx104 = getelementptr inbounds %struct.position_set, %struct.position_set* %102, i64 %idxprom103
  call void @copy(%struct.position_set* %merged, %struct.position_set* %arrayidx104)
  br label %for.inc105

for.inc105:                                       ; preds = %if.end
  %106 = load i32, i32* %j, align 4
  %inc106 = add nsw i32 %106, 1
  store i32 %inc106, i32* %j, align 4
  br label %for.cond44, !llvm.loop !104

for.end107:                                       ; preds = %for.cond44
  br label %sw.bb108

sw.bb108:                                         ; preds = %for.body36, %for.end107
  %107 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %tokens109 = getelementptr inbounds %struct.dfa, %struct.dfa* %107, i32 0, i32 3
  %108 = load i32*, i32** %tokens109, align 8
  %109 = load i32, i32* %i, align 4
  %idxprom110 = sext i32 %109 to i64
  %arrayidx111 = getelementptr inbounds i32, i32* %108, i64 %idxprom110
  %110 = load i32, i32* %arrayidx111, align 4
  %cmp112 = icmp ne i32 %110, 266
  br i1 %cmp112, label %if.then114, label %if.end116

if.then114:                                       ; preds = %sw.bb108
  %111 = load i32*, i32** %nullable, align 8
  %arrayidx115 = getelementptr inbounds i32, i32* %111, i64 -1
  store i32 1, i32* %arrayidx115, align 4
  br label %if.end116

if.end116:                                        ; preds = %if.then114, %sw.bb108
  br label %sw.epilog

sw.bb117:                                         ; preds = %for.body36
  %112 = load i32*, i32** %nfirstpos, align 8
  %arrayidx118 = getelementptr inbounds i32, i32* %112, i64 -1
  %113 = load i32, i32* %arrayidx118, align 4
  %nelem119 = getelementptr inbounds %struct.position_set, %struct.position_set* %tmp, i32 0, i32 1
  store i32 %113, i32* %nelem119, align 8
  %114 = load %struct.position*, %struct.position** %firstpos, align 8
  %elems120 = getelementptr inbounds %struct.position_set, %struct.position_set* %tmp, i32 0, i32 0
  store %struct.position* %114, %struct.position** %elems120, align 8
  %115 = load %struct.position*, %struct.position** %lastpos, align 8
  %116 = load i32*, i32** %nlastpos, align 8
  %arrayidx121 = getelementptr inbounds i32, i32* %116, i64 -1
  %117 = load i32, i32* %arrayidx121, align 4
  %idx.ext122 = sext i32 %117 to i64
  %add.ptr123 = getelementptr inbounds %struct.position, %struct.position* %115, i64 %idx.ext122
  store %struct.position* %add.ptr123, %struct.position** %pos, align 8
  store i32 0, i32* %j, align 4
  br label %for.cond124

for.cond124:                                      ; preds = %for.inc192, %sw.bb117
  %118 = load i32, i32* %j, align 4
  %119 = load i32*, i32** %nlastpos, align 8
  %arrayidx125 = getelementptr inbounds i32, i32* %119, i64 -2
  %120 = load i32, i32* %arrayidx125, align 4
  %cmp126 = icmp slt i32 %118, %120
  br i1 %cmp126, label %for.body128, label %for.end194

for.body128:                                      ; preds = %for.cond124
  %121 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %follows129 = getelementptr inbounds %struct.dfa, %struct.dfa* %121, i32 0, i32 12
  %122 = load %struct.position_set*, %struct.position_set** %follows129, align 8
  %123 = load %struct.position*, %struct.position** %pos, align 8
  %124 = load i32, i32* %j, align 4
  %idxprom130 = sext i32 %124 to i64
  %arrayidx131 = getelementptr inbounds %struct.position, %struct.position* %123, i64 %idxprom130
  %strchr132 = getelementptr inbounds %struct.position, %struct.position* %arrayidx131, i32 0, i32 0
  %125 = load i32, i32* %strchr132, align 4
  %idxprom133 = zext i32 %125 to i64
  %arrayidx134 = getelementptr inbounds %struct.position_set, %struct.position_set* %122, i64 %idxprom133
  call void @merge(%struct.position_set* %tmp, %struct.position_set* %arrayidx134, %struct.position_set* %merged)
  %nelem135 = getelementptr inbounds %struct.position_set, %struct.position_set* %merged, i32 0, i32 1
  %126 = load i32, i32* %nelem135, align 8
  %sub136 = sub nsw i32 %126, 1
  %127 = load i32*, i32** %nalloc, align 8
  %128 = load %struct.position*, %struct.position** %pos, align 8
  %129 = load i32, i32* %j, align 4
  %idxprom137 = sext i32 %129 to i64
  %arrayidx138 = getelementptr inbounds %struct.position, %struct.position* %128, i64 %idxprom137
  %strchr139 = getelementptr inbounds %struct.position, %struct.position* %arrayidx138, i32 0, i32 0
  %130 = load i32, i32* %strchr139, align 4
  %idxprom140 = zext i32 %130 to i64
  %arrayidx141 = getelementptr inbounds i32, i32* %127, i64 %idxprom140
  %131 = load i32, i32* %arrayidx141, align 4
  %cmp142 = icmp sge i32 %sub136, %131
  br i1 %cmp142, label %if.then144, label %if.end185

if.then144:                                       ; preds = %for.body128
  br label %while.cond145

while.cond145:                                    ; preds = %while.body155, %if.then144
  %nelem146 = getelementptr inbounds %struct.position_set, %struct.position_set* %merged, i32 0, i32 1
  %132 = load i32, i32* %nelem146, align 8
  %sub147 = sub nsw i32 %132, 1
  %133 = load i32*, i32** %nalloc, align 8
  %134 = load %struct.position*, %struct.position** %pos, align 8
  %135 = load i32, i32* %j, align 4
  %idxprom148 = sext i32 %135 to i64
  %arrayidx149 = getelementptr inbounds %struct.position, %struct.position* %134, i64 %idxprom148
  %strchr150 = getelementptr inbounds %struct.position, %struct.position* %arrayidx149, i32 0, i32 0
  %136 = load i32, i32* %strchr150, align 4
  %idxprom151 = zext i32 %136 to i64
  %arrayidx152 = getelementptr inbounds i32, i32* %133, i64 %idxprom151
  %137 = load i32, i32* %arrayidx152, align 4
  %cmp153 = icmp sge i32 %sub147, %137
  br i1 %cmp153, label %while.body155, label %while.end162

while.body155:                                    ; preds = %while.cond145
  %138 = load i32*, i32** %nalloc, align 8
  %139 = load %struct.position*, %struct.position** %pos, align 8
  %140 = load i32, i32* %j, align 4
  %idxprom156 = sext i32 %140 to i64
  %arrayidx157 = getelementptr inbounds %struct.position, %struct.position* %139, i64 %idxprom156
  %strchr158 = getelementptr inbounds %struct.position, %struct.position* %arrayidx157, i32 0, i32 0
  %141 = load i32, i32* %strchr158, align 4
  %idxprom159 = zext i32 %141 to i64
  %arrayidx160 = getelementptr inbounds i32, i32* %138, i64 %idxprom159
  %142 = load i32, i32* %arrayidx160, align 4
  %mul161 = mul nsw i32 %142, 2
  store i32 %mul161, i32* %arrayidx160, align 4
  br label %while.cond145, !llvm.loop !105

while.end162:                                     ; preds = %while.cond145
  %143 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %follows163 = getelementptr inbounds %struct.dfa, %struct.dfa* %143, i32 0, i32 12
  %144 = load %struct.position_set*, %struct.position_set** %follows163, align 8
  %145 = load %struct.position*, %struct.position** %pos, align 8
  %146 = load i32, i32* %j, align 4
  %idxprom164 = sext i32 %146 to i64
  %arrayidx165 = getelementptr inbounds %struct.position, %struct.position* %145, i64 %idxprom164
  %strchr166 = getelementptr inbounds %struct.position, %struct.position* %arrayidx165, i32 0, i32 0
  %147 = load i32, i32* %strchr166, align 4
  %idxprom167 = zext i32 %147 to i64
  %arrayidx168 = getelementptr inbounds %struct.position_set, %struct.position_set* %144, i64 %idxprom167
  %elems169 = getelementptr inbounds %struct.position_set, %struct.position_set* %arrayidx168, i32 0, i32 0
  %148 = load %struct.position*, %struct.position** %elems169, align 8
  %149 = bitcast %struct.position* %148 to i8*
  %150 = load i32*, i32** %nalloc, align 8
  %151 = load %struct.position*, %struct.position** %pos, align 8
  %152 = load i32, i32* %j, align 4
  %idxprom170 = sext i32 %152 to i64
  %arrayidx171 = getelementptr inbounds %struct.position, %struct.position* %151, i64 %idxprom170
  %strchr172 = getelementptr inbounds %struct.position, %struct.position* %arrayidx171, i32 0, i32 0
  %153 = load i32, i32* %strchr172, align 4
  %idxprom173 = zext i32 %153 to i64
  %arrayidx174 = getelementptr inbounds i32, i32* %150, i64 %idxprom173
  %154 = load i32, i32* %arrayidx174, align 4
  %conv175 = sext i32 %154 to i64
  %mul176 = mul i64 %conv175, 8
  %call177 = call i8* @xrealloc_1(i8* %149, i64 %mul176)
  %155 = bitcast i8* %call177 to %struct.position*
  %156 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %follows178 = getelementptr inbounds %struct.dfa, %struct.dfa* %156, i32 0, i32 12
  %157 = load %struct.position_set*, %struct.position_set** %follows178, align 8
  %158 = load %struct.position*, %struct.position** %pos, align 8
  %159 = load i32, i32* %j, align 4
  %idxprom179 = sext i32 %159 to i64
  %arrayidx180 = getelementptr inbounds %struct.position, %struct.position* %158, i64 %idxprom179
  %strchr181 = getelementptr inbounds %struct.position, %struct.position* %arrayidx180, i32 0, i32 0
  %160 = load i32, i32* %strchr181, align 4
  %idxprom182 = zext i32 %160 to i64
  %arrayidx183 = getelementptr inbounds %struct.position_set, %struct.position_set* %157, i64 %idxprom182
  %elems184 = getelementptr inbounds %struct.position_set, %struct.position_set* %arrayidx183, i32 0, i32 0
  store %struct.position* %155, %struct.position** %elems184, align 8
  br label %if.end185

if.end185:                                        ; preds = %while.end162, %for.body128
  %161 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %follows186 = getelementptr inbounds %struct.dfa, %struct.dfa* %161, i32 0, i32 12
  %162 = load %struct.position_set*, %struct.position_set** %follows186, align 8
  %163 = load %struct.position*, %struct.position** %pos, align 8
  %164 = load i32, i32* %j, align 4
  %idxprom187 = sext i32 %164 to i64
  %arrayidx188 = getelementptr inbounds %struct.position, %struct.position* %163, i64 %idxprom187
  %strchr189 = getelementptr inbounds %struct.position, %struct.position* %arrayidx188, i32 0, i32 0
  %165 = load i32, i32* %strchr189, align 4
  %idxprom190 = zext i32 %165 to i64
  %arrayidx191 = getelementptr inbounds %struct.position_set, %struct.position_set* %162, i64 %idxprom190
  call void @copy(%struct.position_set* %merged, %struct.position_set* %arrayidx191)
  br label %for.inc192

for.inc192:                                       ; preds = %if.end185
  %166 = load i32, i32* %j, align 4
  %inc193 = add nsw i32 %166, 1
  store i32 %inc193, i32* %j, align 4
  br label %for.cond124, !llvm.loop !106

for.end194:                                       ; preds = %for.cond124
  %167 = load i32*, i32** %nullable, align 8
  %arrayidx195 = getelementptr inbounds i32, i32* %167, i64 -2
  %168 = load i32, i32* %arrayidx195, align 4
  %tobool = icmp ne i32 %168, 0
  br i1 %tobool, label %if.then196, label %if.else

if.then196:                                       ; preds = %for.end194
  %169 = load i32*, i32** %nfirstpos, align 8
  %arrayidx197 = getelementptr inbounds i32, i32* %169, i64 -1
  %170 = load i32, i32* %arrayidx197, align 4
  %171 = load i32*, i32** %nfirstpos, align 8
  %arrayidx198 = getelementptr inbounds i32, i32* %171, i64 -2
  %172 = load i32, i32* %arrayidx198, align 4
  %add = add nsw i32 %172, %170
  store i32 %add, i32* %arrayidx198, align 4
  br label %if.end202

if.else:                                          ; preds = %for.end194
  %173 = load i32*, i32** %nfirstpos, align 8
  %arrayidx199 = getelementptr inbounds i32, i32* %173, i64 -1
  %174 = load i32, i32* %arrayidx199, align 4
  %175 = load %struct.position*, %struct.position** %firstpos, align 8
  %idx.ext200 = sext i32 %174 to i64
  %add.ptr201 = getelementptr inbounds %struct.position, %struct.position* %175, i64 %idx.ext200
  store %struct.position* %add.ptr201, %struct.position** %firstpos, align 8
  br label %if.end202

if.end202:                                        ; preds = %if.else, %if.then196
  %176 = load i32*, i32** %nfirstpos, align 8
  %incdec.ptr203 = getelementptr inbounds i32, i32* %176, i32 -1
  store i32* %incdec.ptr203, i32** %nfirstpos, align 8
  %177 = load i32*, i32** %nullable, align 8
  %arrayidx204 = getelementptr inbounds i32, i32* %177, i64 -1
  %178 = load i32, i32* %arrayidx204, align 4
  %tobool205 = icmp ne i32 %178, 0
  br i1 %tobool205, label %if.then206, label %if.else210

if.then206:                                       ; preds = %if.end202
  %179 = load i32*, i32** %nlastpos, align 8
  %arrayidx207 = getelementptr inbounds i32, i32* %179, i64 -1
  %180 = load i32, i32* %arrayidx207, align 4
  %181 = load i32*, i32** %nlastpos, align 8
  %arrayidx208 = getelementptr inbounds i32, i32* %181, i64 -2
  %182 = load i32, i32* %arrayidx208, align 4
  %add209 = add nsw i32 %182, %180
  store i32 %add209, i32* %arrayidx208, align 4
  br label %if.end231

if.else210:                                       ; preds = %if.end202
  %183 = load %struct.position*, %struct.position** %lastpos, align 8
  %184 = load i32*, i32** %nlastpos, align 8
  %arrayidx211 = getelementptr inbounds i32, i32* %184, i64 -2
  %185 = load i32, i32* %arrayidx211, align 4
  %idx.ext212 = sext i32 %185 to i64
  %add.ptr213 = getelementptr inbounds %struct.position, %struct.position* %183, i64 %idx.ext212
  store %struct.position* %add.ptr213, %struct.position** %pos, align 8
  %186 = load i32*, i32** %nlastpos, align 8
  %arrayidx214 = getelementptr inbounds i32, i32* %186, i64 -1
  %187 = load i32, i32* %arrayidx214, align 4
  %sub215 = sub nsw i32 %187, 1
  store i32 %sub215, i32* %j, align 4
  br label %for.cond216

for.cond216:                                      ; preds = %for.inc224, %if.else210
  %188 = load i32, i32* %j, align 4
  %cmp217 = icmp sge i32 %188, 0
  br i1 %cmp217, label %for.body219, label %for.end225

for.body219:                                      ; preds = %for.cond216
  %189 = load %struct.position*, %struct.position** %pos, align 8
  %190 = load i32, i32* %j, align 4
  %idxprom220 = sext i32 %190 to i64
  %arrayidx221 = getelementptr inbounds %struct.position, %struct.position* %189, i64 %idxprom220
  %191 = load %struct.position*, %struct.position** %lastpos, align 8
  %192 = load i32, i32* %j, align 4
  %idxprom222 = sext i32 %192 to i64
  %arrayidx223 = getelementptr inbounds %struct.position, %struct.position* %191, i64 %idxprom222
  %193 = bitcast %struct.position* %arrayidx221 to i8*
  %194 = bitcast %struct.position* %arrayidx223 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %193, i8* align 4 %194, i64 8, i1 false)
  br label %for.inc224

for.inc224:                                       ; preds = %for.body219
  %195 = load i32, i32* %j, align 4
  %dec = add nsw i32 %195, -1
  store i32 %dec, i32* %j, align 4
  br label %for.cond216, !llvm.loop !107

for.end225:                                       ; preds = %for.cond216
  %196 = load i32*, i32** %nlastpos, align 8
  %arrayidx226 = getelementptr inbounds i32, i32* %196, i64 -2
  %197 = load i32, i32* %arrayidx226, align 4
  %198 = load %struct.position*, %struct.position** %lastpos, align 8
  %idx.ext227 = sext i32 %197 to i64
  %add.ptr228 = getelementptr inbounds %struct.position, %struct.position* %198, i64 %idx.ext227
  store %struct.position* %add.ptr228, %struct.position** %lastpos, align 8
  %199 = load i32*, i32** %nlastpos, align 8
  %arrayidx229 = getelementptr inbounds i32, i32* %199, i64 -1
  %200 = load i32, i32* %arrayidx229, align 4
  %201 = load i32*, i32** %nlastpos, align 8
  %arrayidx230 = getelementptr inbounds i32, i32* %201, i64 -2
  store i32 %200, i32* %arrayidx230, align 4
  br label %if.end231

if.end231:                                        ; preds = %for.end225, %if.then206
  %202 = load i32*, i32** %nlastpos, align 8
  %incdec.ptr232 = getelementptr inbounds i32, i32* %202, i32 -1
  store i32* %incdec.ptr232, i32** %nlastpos, align 8
  %203 = load i32*, i32** %nullable, align 8
  %arrayidx233 = getelementptr inbounds i32, i32* %203, i64 -1
  %204 = load i32, i32* %arrayidx233, align 4
  %tobool234 = icmp ne i32 %204, 0
  br i1 %tobool234, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.end231
  %205 = load i32*, i32** %nullable, align 8
  %arrayidx235 = getelementptr inbounds i32, i32* %205, i64 -2
  %206 = load i32, i32* %arrayidx235, align 4
  %tobool236 = icmp ne i32 %206, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end231
  %207 = phi i1 [ false, %if.end231 ], [ %tobool236, %land.rhs ]
  %land.ext = zext i1 %207 to i32
  %208 = load i32*, i32** %nullable, align 8
  %arrayidx237 = getelementptr inbounds i32, i32* %208, i64 -2
  store i32 %land.ext, i32* %arrayidx237, align 4
  %209 = load i32*, i32** %nullable, align 8
  %incdec.ptr238 = getelementptr inbounds i32, i32* %209, i32 -1
  store i32* %incdec.ptr238, i32** %nullable, align 8
  br label %sw.epilog

sw.bb239:                                         ; preds = %for.body36, %for.body36
  %210 = load i32*, i32** %nfirstpos, align 8
  %arrayidx240 = getelementptr inbounds i32, i32* %210, i64 -1
  %211 = load i32, i32* %arrayidx240, align 4
  %212 = load i32*, i32** %nfirstpos, align 8
  %arrayidx241 = getelementptr inbounds i32, i32* %212, i64 -2
  %213 = load i32, i32* %arrayidx241, align 4
  %add242 = add nsw i32 %213, %211
  store i32 %add242, i32* %arrayidx241, align 4
  %214 = load i32*, i32** %nfirstpos, align 8
  %incdec.ptr243 = getelementptr inbounds i32, i32* %214, i32 -1
  store i32* %incdec.ptr243, i32** %nfirstpos, align 8
  %215 = load i32*, i32** %nlastpos, align 8
  %arrayidx244 = getelementptr inbounds i32, i32* %215, i64 -1
  %216 = load i32, i32* %arrayidx244, align 4
  %217 = load i32*, i32** %nlastpos, align 8
  %arrayidx245 = getelementptr inbounds i32, i32* %217, i64 -2
  %218 = load i32, i32* %arrayidx245, align 4
  %add246 = add nsw i32 %218, %216
  store i32 %add246, i32* %arrayidx245, align 4
  %219 = load i32*, i32** %nlastpos, align 8
  %incdec.ptr247 = getelementptr inbounds i32, i32* %219, i32 -1
  store i32* %incdec.ptr247, i32** %nlastpos, align 8
  %220 = load i32*, i32** %nullable, align 8
  %arrayidx248 = getelementptr inbounds i32, i32* %220, i64 -1
  %221 = load i32, i32* %arrayidx248, align 4
  %tobool249 = icmp ne i32 %221, 0
  br i1 %tobool249, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %sw.bb239
  %222 = load i32*, i32** %nullable, align 8
  %arrayidx250 = getelementptr inbounds i32, i32* %222, i64 -2
  %223 = load i32, i32* %arrayidx250, align 4
  %tobool251 = icmp ne i32 %223, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %sw.bb239
  %224 = phi i1 [ true, %sw.bb239 ], [ %tobool251, %lor.rhs ]
  %lor.ext = zext i1 %224 to i32
  %225 = load i32*, i32** %nullable, align 8
  %arrayidx252 = getelementptr inbounds i32, i32* %225, i64 -2
  store i32 %lor.ext, i32* %arrayidx252, align 4
  %226 = load i32*, i32** %nullable, align 8
  %incdec.ptr253 = getelementptr inbounds i32, i32* %226, i32 -1
  store i32* %incdec.ptr253, i32** %nullable, align 8
  br label %sw.epilog

sw.default:                                       ; preds = %for.body36
  %227 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %tokens254 = getelementptr inbounds %struct.dfa, %struct.dfa* %227, i32 0, i32 3
  %228 = load i32*, i32** %tokens254, align 8
  %229 = load i32, i32* %i, align 4
  %idxprom255 = sext i32 %229 to i64
  %arrayidx256 = getelementptr inbounds i32, i32* %228, i64 %idxprom255
  %230 = load i32, i32* %arrayidx256, align 4
  %cmp257 = icmp eq i32 %230, 257
  %conv258 = zext i1 %cmp257 to i32
  %231 = load i32*, i32** %nullable, align 8
  %incdec.ptr259 = getelementptr inbounds i32, i32* %231, i32 1
  store i32* %incdec.ptr259, i32** %nullable, align 8
  store i32 %conv258, i32* %231, align 4
  %232 = load i32*, i32** %nlastpos, align 8
  %incdec.ptr260 = getelementptr inbounds i32, i32* %232, i32 1
  store i32* %incdec.ptr260, i32** %nlastpos, align 8
  store i32 1, i32* %232, align 4
  %233 = load i32*, i32** %nfirstpos, align 8
  %incdec.ptr261 = getelementptr inbounds i32, i32* %233, i32 1
  store i32* %incdec.ptr261, i32** %nfirstpos, align 8
  store i32 1, i32* %233, align 4
  %234 = load %struct.position*, %struct.position** %firstpos, align 8
  %incdec.ptr262 = getelementptr inbounds %struct.position, %struct.position* %234, i32 -1
  store %struct.position* %incdec.ptr262, %struct.position** %firstpos, align 8
  %235 = load %struct.position*, %struct.position** %lastpos, align 8
  %incdec.ptr263 = getelementptr inbounds %struct.position, %struct.position* %235, i32 -1
  store %struct.position* %incdec.ptr263, %struct.position** %lastpos, align 8
  %236 = load i32, i32* %i, align 4
  %237 = load %struct.position*, %struct.position** %lastpos, align 8
  %strchr264 = getelementptr inbounds %struct.position, %struct.position* %237, i32 0, i32 0
  store i32 %236, i32* %strchr264, align 4
  %238 = load %struct.position*, %struct.position** %firstpos, align 8
  %strchr265 = getelementptr inbounds %struct.position, %struct.position* %238, i32 0, i32 0
  store i32 %236, i32* %strchr265, align 4
  %239 = load %struct.position*, %struct.position** %lastpos, align 8
  %constraint = getelementptr inbounds %struct.position, %struct.position* %239, i32 0, i32 1
  store i32 255, i32* %constraint, align 4
  %240 = load %struct.position*, %struct.position** %firstpos, align 8
  %constraint266 = getelementptr inbounds %struct.position, %struct.position* %240, i32 0, i32 1
  store i32 255, i32* %constraint266, align 4
  %241 = load i32*, i32** %nalloc, align 8
  %242 = load i32, i32* %i, align 4
  %idxprom267 = sext i32 %242 to i64
  %arrayidx268 = getelementptr inbounds i32, i32* %241, i64 %idxprom267
  store i32 1, i32* %arrayidx268, align 4
  %243 = load i32*, i32** %nalloc, align 8
  %244 = load i32, i32* %i, align 4
  %idxprom269 = sext i32 %244 to i64
  %arrayidx270 = getelementptr inbounds i32, i32* %243, i64 %idxprom269
  %245 = load i32, i32* %arrayidx270, align 4
  %conv271 = sext i32 %245 to i64
  %mul272 = mul i64 %conv271, 8
  %call273 = call i8* @xmalloc_1(i64 %mul272)
  %246 = bitcast i8* %call273 to %struct.position*
  %247 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %follows274 = getelementptr inbounds %struct.dfa, %struct.dfa* %247, i32 0, i32 12
  %248 = load %struct.position_set*, %struct.position_set** %follows274, align 8
  %249 = load i32, i32* %i, align 4
  %idxprom275 = sext i32 %249 to i64
  %arrayidx276 = getelementptr inbounds %struct.position_set, %struct.position_set* %248, i64 %idxprom275
  %elems277 = getelementptr inbounds %struct.position_set, %struct.position_set* %arrayidx276, i32 0, i32 0
  store %struct.position* %246, %struct.position** %elems277, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %lor.end, %land.end, %if.end116, %sw.bb
  br label %for.inc278

for.inc278:                                       ; preds = %sw.epilog
  %250 = load i32, i32* %i, align 4
  %inc279 = add nsw i32 %250, 1
  store i32 %inc279, i32* %i, align 4
  br label %for.cond32, !llvm.loop !108

for.end280:                                       ; preds = %for.cond32
  store i32 0, i32* %i, align 4
  br label %for.cond281

for.cond281:                                      ; preds = %for.inc331, %for.end280
  %251 = load i32, i32* %i, align 4
  %252 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %tindex282 = getelementptr inbounds %struct.dfa, %struct.dfa* %252, i32 0, i32 4
  %253 = load i32, i32* %tindex282, align 8
  %cmp283 = icmp slt i32 %251, %253
  br i1 %cmp283, label %for.body285, label %for.end333

for.body285:                                      ; preds = %for.cond281
  %254 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %tokens286 = getelementptr inbounds %struct.dfa, %struct.dfa* %254, i32 0, i32 3
  %255 = load i32*, i32** %tokens286, align 8
  %256 = load i32, i32* %i, align 4
  %idxprom287 = sext i32 %256 to i64
  %arrayidx288 = getelementptr inbounds i32, i32* %255, i64 %idxprom287
  %257 = load i32, i32* %arrayidx288, align 4
  %cmp289 = icmp slt i32 %257, 256
  br i1 %cmp289, label %if.then302, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body285
  %258 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %tokens291 = getelementptr inbounds %struct.dfa, %struct.dfa* %258, i32 0, i32 3
  %259 = load i32*, i32** %tokens291, align 8
  %260 = load i32, i32* %i, align 4
  %idxprom292 = sext i32 %260 to i64
  %arrayidx293 = getelementptr inbounds i32, i32* %259, i64 %idxprom292
  %261 = load i32, i32* %arrayidx293, align 4
  %cmp294 = icmp eq i32 %261, 257
  br i1 %cmp294, label %if.then302, label %lor.lhs.false296

lor.lhs.false296:                                 ; preds = %lor.lhs.false
  %262 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %tokens297 = getelementptr inbounds %struct.dfa, %struct.dfa* %262, i32 0, i32 3
  %263 = load i32*, i32** %tokens297, align 8
  %264 = load i32, i32* %i, align 4
  %idxprom298 = sext i32 %264 to i64
  %arrayidx299 = getelementptr inbounds i32, i32* %263, i64 %idxprom298
  %265 = load i32, i32* %arrayidx299, align 4
  %cmp300 = icmp sge i32 %265, 273
  br i1 %cmp300, label %if.then302, label %if.end330

if.then302:                                       ; preds = %lor.lhs.false296, %lor.lhs.false, %for.body285
  %266 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %follows303 = getelementptr inbounds %struct.dfa, %struct.dfa* %266, i32 0, i32 12
  %267 = load %struct.position_set*, %struct.position_set** %follows303, align 8
  %268 = load i32, i32* %i, align 4
  %idxprom304 = sext i32 %268 to i64
  %arrayidx305 = getelementptr inbounds %struct.position_set, %struct.position_set* %267, i64 %idxprom304
  call void @copy(%struct.position_set* %arrayidx305, %struct.position_set* %merged)
  %269 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  call void @epsclosure(%struct.position_set* %merged, %struct.dfa* %269)
  %270 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %follows306 = getelementptr inbounds %struct.dfa, %struct.dfa* %270, i32 0, i32 12
  %271 = load %struct.position_set*, %struct.position_set** %follows306, align 8
  %272 = load i32, i32* %i, align 4
  %idxprom307 = sext i32 %272 to i64
  %arrayidx308 = getelementptr inbounds %struct.position_set, %struct.position_set* %271, i64 %idxprom307
  %nelem309 = getelementptr inbounds %struct.position_set, %struct.position_set* %arrayidx308, i32 0, i32 1
  %273 = load i32, i32* %nelem309, align 8
  %nelem310 = getelementptr inbounds %struct.position_set, %struct.position_set* %merged, i32 0, i32 1
  %274 = load i32, i32* %nelem310, align 8
  %cmp311 = icmp slt i32 %273, %274
  br i1 %cmp311, label %if.then313, label %if.end326

if.then313:                                       ; preds = %if.then302
  %275 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %follows314 = getelementptr inbounds %struct.dfa, %struct.dfa* %275, i32 0, i32 12
  %276 = load %struct.position_set*, %struct.position_set** %follows314, align 8
  %277 = load i32, i32* %i, align 4
  %idxprom315 = sext i32 %277 to i64
  %arrayidx316 = getelementptr inbounds %struct.position_set, %struct.position_set* %276, i64 %idxprom315
  %elems317 = getelementptr inbounds %struct.position_set, %struct.position_set* %arrayidx316, i32 0, i32 0
  %278 = load %struct.position*, %struct.position** %elems317, align 8
  %279 = bitcast %struct.position* %278 to i8*
  %nelem318 = getelementptr inbounds %struct.position_set, %struct.position_set* %merged, i32 0, i32 1
  %280 = load i32, i32* %nelem318, align 8
  %conv319 = sext i32 %280 to i64
  %mul320 = mul i64 %conv319, 8
  %call321 = call i8* @xrealloc_1(i8* %279, i64 %mul320)
  %281 = bitcast i8* %call321 to %struct.position*
  %282 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %follows322 = getelementptr inbounds %struct.dfa, %struct.dfa* %282, i32 0, i32 12
  %283 = load %struct.position_set*, %struct.position_set** %follows322, align 8
  %284 = load i32, i32* %i, align 4
  %idxprom323 = sext i32 %284 to i64
  %arrayidx324 = getelementptr inbounds %struct.position_set, %struct.position_set* %283, i64 %idxprom323
  %elems325 = getelementptr inbounds %struct.position_set, %struct.position_set* %arrayidx324, i32 0, i32 0
  store %struct.position* %281, %struct.position** %elems325, align 8
  br label %if.end326

if.end326:                                        ; preds = %if.then313, %if.then302
  %285 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %follows327 = getelementptr inbounds %struct.dfa, %struct.dfa* %285, i32 0, i32 12
  %286 = load %struct.position_set*, %struct.position_set** %follows327, align 8
  %287 = load i32, i32* %i, align 4
  %idxprom328 = sext i32 %287 to i64
  %arrayidx329 = getelementptr inbounds %struct.position_set, %struct.position_set* %286, i64 %idxprom328
  call void @copy(%struct.position_set* %merged, %struct.position_set* %arrayidx329)
  br label %if.end330

if.end330:                                        ; preds = %if.end326, %lor.lhs.false296
  br label %for.inc331

for.inc331:                                       ; preds = %if.end330
  %288 = load i32, i32* %i, align 4
  %inc332 = add nsw i32 %288, 1
  store i32 %inc332, i32* %i, align 4
  br label %for.cond281, !llvm.loop !109

for.end333:                                       ; preds = %for.cond281
  %nelem334 = getelementptr inbounds %struct.position_set, %struct.position_set* %merged, i32 0, i32 1
  store i32 0, i32* %nelem334, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond335

for.cond335:                                      ; preds = %for.inc342, %for.end333
  %289 = load i32, i32* %i, align 4
  %290 = load i32*, i32** %nfirstpos, align 8
  %arrayidx336 = getelementptr inbounds i32, i32* %290, i64 -1
  %291 = load i32, i32* %arrayidx336, align 4
  %cmp337 = icmp slt i32 %289, %291
  br i1 %cmp337, label %for.body339, label %for.end344

for.body339:                                      ; preds = %for.cond335
  %292 = load %struct.position*, %struct.position** %firstpos, align 8
  %293 = load i32, i32* %i, align 4
  %idxprom340 = sext i32 %293 to i64
  %arrayidx341 = getelementptr inbounds %struct.position, %struct.position* %292, i64 %idxprom340
  %294 = bitcast %struct.position* %arrayidx341 to i64*
  %295 = load i64, i64* %294, align 4
  call void @insert(i64 %295, %struct.position_set* %merged)
  br label %for.inc342

for.inc342:                                       ; preds = %for.body339
  %296 = load i32, i32* %i, align 4
  %inc343 = add nsw i32 %296, 1
  store i32 %inc343, i32* %i, align 4
  br label %for.cond335, !llvm.loop !110

for.end344:                                       ; preds = %for.cond335
  %297 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  call void @epsclosure(%struct.position_set* %merged, %struct.dfa* %297)
  store i32 0, i32* %wants_newline, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond345

for.cond345:                                      ; preds = %for.inc363, %for.end344
  %298 = load i32, i32* %i, align 4
  %nelem346 = getelementptr inbounds %struct.position_set, %struct.position_set* %merged, i32 0, i32 1
  %299 = load i32, i32* %nelem346, align 8
  %cmp347 = icmp slt i32 %298, %299
  br i1 %cmp347, label %for.body349, label %for.end365

for.body349:                                      ; preds = %for.cond345
  %elems350 = getelementptr inbounds %struct.position_set, %struct.position_set* %merged, i32 0, i32 0
  %300 = load %struct.position*, %struct.position** %elems350, align 8
  %301 = load i32, i32* %i, align 4
  %idxprom351 = sext i32 %301 to i64
  %arrayidx352 = getelementptr inbounds %struct.position, %struct.position* %300, i64 %idxprom351
  %constraint353 = getelementptr inbounds %struct.position, %struct.position* %arrayidx352, i32 0, i32 1
  %302 = load i32, i32* %constraint353, align 4
  %and = and i32 %302, 192
  %shr = lshr i32 %and, 2
  %elems354 = getelementptr inbounds %struct.position_set, %struct.position_set* %merged, i32 0, i32 0
  %303 = load %struct.position*, %struct.position** %elems354, align 8
  %304 = load i32, i32* %i, align 4
  %idxprom355 = sext i32 %304 to i64
  %arrayidx356 = getelementptr inbounds %struct.position, %struct.position* %303, i64 %idxprom355
  %constraint357 = getelementptr inbounds %struct.position, %struct.position* %arrayidx356, i32 0, i32 1
  %305 = load i32, i32* %constraint357, align 4
  %and358 = and i32 %305, 48
  %cmp359 = icmp ne i32 %shr, %and358
  br i1 %cmp359, label %if.then361, label %if.end362

if.then361:                                       ; preds = %for.body349
  store i32 1, i32* %wants_newline, align 4
  br label %if.end362

if.end362:                                        ; preds = %if.then361, %for.body349
  br label %for.inc363

for.inc363:                                       ; preds = %if.end362
  %306 = load i32, i32* %i, align 4
  %inc364 = add nsw i32 %306, 1
  store i32 %inc364, i32* %i, align 4
  br label %for.cond345, !llvm.loop !111

for.end365:                                       ; preds = %for.cond345
  %307 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %salloc = getelementptr inbounds %struct.dfa, %struct.dfa* %307, i32 0, i32 11
  store i32 1, i32* %salloc, align 4
  %308 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %sindex = getelementptr inbounds %struct.dfa, %struct.dfa* %308, i32 0, i32 10
  store i32 0, i32* %sindex, align 8
  %309 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %salloc366 = getelementptr inbounds %struct.dfa, %struct.dfa* %309, i32 0, i32 11
  %310 = load i32, i32* %salloc366, align 4
  %conv367 = sext i32 %310 to i64
  %mul368 = mul i64 %conv367, 32
  %call369 = call i8* @xmalloc_1(i64 %mul368)
  %311 = bitcast i8* %call369 to %struct.dfa_state*
  %312 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %states = getelementptr inbounds %struct.dfa, %struct.dfa* %312, i32 0, i32 9
  store %struct.dfa_state* %311, %struct.dfa_state** %states, align 8
  %313 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %314 = load i32, i32* %wants_newline, align 4
  %call370 = call i32 @state_index(%struct.dfa* %313, %struct.position_set* %merged, i32 %314, i32 0)
  %315 = load i32*, i32** %o_nullable, align 8
  %316 = bitcast i32* %315 to i8*
  call void @free(i8* %316) #9
  %317 = load i32*, i32** %o_nfirst, align 8
  %318 = bitcast i32* %317 to i8*
  call void @free(i8* %318) #9
  %319 = load %struct.position*, %struct.position** %o_firstpos, align 8
  %320 = bitcast %struct.position* %319 to i8*
  call void @free(i8* %320) #9
  %321 = load i32*, i32** %o_nlast, align 8
  %322 = bitcast i32* %321 to i8*
  call void @free(i8* %322) #9
  %323 = load %struct.position*, %struct.position** %o_lastpos, align 8
  %324 = bitcast %struct.position* %323 to i8*
  call void @free(i8* %324) #9
  %325 = load i32*, i32** %nalloc, align 8
  %326 = bitcast i32* %325 to i8*
  call void @free(i8* %326) #9
  %elems371 = getelementptr inbounds %struct.position_set, %struct.position_set* %merged, i32 0, i32 0
  %327 = load %struct.position*, %struct.position** %elems371, align 8
  %328 = bitcast %struct.position* %327 to i8*
  call void @free(i8* %328) #9
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @xcalloc(i32 %n, i64 %s) #0 {
entry:
  %n.addr = alloca i32, align 4
  %s.addr = alloca i64, align 8
  %r = alloca i8*, align 8
  store i32 %n, i32* %n.addr, align 4
  store i64 %s, i64* %s.addr, align 8
  %0 = load i32, i32* %n.addr, align 4
  %conv = sext i32 %0 to i64
  %1 = load i64, i64* %s.addr, align 8
  %call = call noalias align 16 i8* @calloc(i64 %conv, i64 %1) #9
  store i8* %call, i8** %r, align 8
  %2 = load i8*, i8** %r, align 8
  %tobool = icmp ne i8* %2, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @dfaerror(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.57, i64 0, i64 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load i8*, i8** %r, align 8
  ret i8* %3
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @merge(%struct.position_set* %s1, %struct.position_set* %s2, %struct.position_set* %m) #0 {
entry:
  %s1.addr = alloca %struct.position_set*, align 8
  %s2.addr = alloca %struct.position_set*, align 8
  %m.addr = alloca %struct.position_set*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.position_set* %s1, %struct.position_set** %s1.addr, align 8
  store %struct.position_set* %s2, %struct.position_set** %s2.addr, align 8
  store %struct.position_set* %m, %struct.position_set** %m.addr, align 8
  store i32 0, i32* %i, align 4
  store i32 0, i32* %j, align 4
  %0 = load %struct.position_set*, %struct.position_set** %m.addr, align 8
  %nelem = getelementptr inbounds %struct.position_set, %struct.position_set* %0, i32 0, i32 1
  store i32 0, i32* %nelem, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end55, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load %struct.position_set*, %struct.position_set** %s1.addr, align 8
  %nelem1 = getelementptr inbounds %struct.position_set, %struct.position_set* %2, i32 0, i32 1
  %3 = load i32, i32* %nelem1, align 8
  %cmp = icmp slt i32 %1, %3
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %4 = load i32, i32* %j, align 4
  %5 = load %struct.position_set*, %struct.position_set** %s2.addr, align 8
  %nelem2 = getelementptr inbounds %struct.position_set, %struct.position_set* %5, i32 0, i32 1
  %6 = load i32, i32* %nelem2, align 8
  %cmp3 = icmp slt i32 %4, %6
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %7 = phi i1 [ false, %while.cond ], [ %cmp3, %land.rhs ]
  br i1 %7, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %8 = load %struct.position_set*, %struct.position_set** %s1.addr, align 8
  %elems = getelementptr inbounds %struct.position_set, %struct.position_set* %8, i32 0, i32 0
  %9 = load %struct.position*, %struct.position** %elems, align 8
  %10 = load i32, i32* %i, align 4
  %idxprom = sext i32 %10 to i64
  %arrayidx = getelementptr inbounds %struct.position, %struct.position* %9, i64 %idxprom
  %strchr = getelementptr inbounds %struct.position, %struct.position* %arrayidx, i32 0, i32 0
  %11 = load i32, i32* %strchr, align 4
  %12 = load %struct.position_set*, %struct.position_set** %s2.addr, align 8
  %elems4 = getelementptr inbounds %struct.position_set, %struct.position_set* %12, i32 0, i32 0
  %13 = load %struct.position*, %struct.position** %elems4, align 8
  %14 = load i32, i32* %j, align 4
  %idxprom5 = sext i32 %14 to i64
  %arrayidx6 = getelementptr inbounds %struct.position, %struct.position* %13, i64 %idxprom5
  %strchr7 = getelementptr inbounds %struct.position, %struct.position* %arrayidx6, i32 0, i32 0
  %15 = load i32, i32* %strchr7, align 4
  %cmp8 = icmp ugt i32 %11, %15
  br i1 %cmp8, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %16 = load %struct.position_set*, %struct.position_set** %m.addr, align 8
  %elems9 = getelementptr inbounds %struct.position_set, %struct.position_set* %16, i32 0, i32 0
  %17 = load %struct.position*, %struct.position** %elems9, align 8
  %18 = load %struct.position_set*, %struct.position_set** %m.addr, align 8
  %nelem10 = getelementptr inbounds %struct.position_set, %struct.position_set* %18, i32 0, i32 1
  %19 = load i32, i32* %nelem10, align 8
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %nelem10, align 8
  %idxprom11 = sext i32 %19 to i64
  %arrayidx12 = getelementptr inbounds %struct.position, %struct.position* %17, i64 %idxprom11
  %20 = load %struct.position_set*, %struct.position_set** %s1.addr, align 8
  %elems13 = getelementptr inbounds %struct.position_set, %struct.position_set* %20, i32 0, i32 0
  %21 = load %struct.position*, %struct.position** %elems13, align 8
  %22 = load i32, i32* %i, align 4
  %inc14 = add nsw i32 %22, 1
  store i32 %inc14, i32* %i, align 4
  %idxprom15 = sext i32 %22 to i64
  %arrayidx16 = getelementptr inbounds %struct.position, %struct.position* %21, i64 %idxprom15
  %23 = bitcast %struct.position* %arrayidx12 to i8*
  %24 = bitcast %struct.position* %arrayidx16 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %23, i8* align 4 %24, i64 8, i1 false)
  br label %if.end55

if.else:                                          ; preds = %while.body
  %25 = load %struct.position_set*, %struct.position_set** %s1.addr, align 8
  %elems17 = getelementptr inbounds %struct.position_set, %struct.position_set* %25, i32 0, i32 0
  %26 = load %struct.position*, %struct.position** %elems17, align 8
  %27 = load i32, i32* %i, align 4
  %idxprom18 = sext i32 %27 to i64
  %arrayidx19 = getelementptr inbounds %struct.position, %struct.position* %26, i64 %idxprom18
  %strchr20 = getelementptr inbounds %struct.position, %struct.position* %arrayidx19, i32 0, i32 0
  %28 = load i32, i32* %strchr20, align 4
  %29 = load %struct.position_set*, %struct.position_set** %s2.addr, align 8
  %elems21 = getelementptr inbounds %struct.position_set, %struct.position_set* %29, i32 0, i32 0
  %30 = load %struct.position*, %struct.position** %elems21, align 8
  %31 = load i32, i32* %j, align 4
  %idxprom22 = sext i32 %31 to i64
  %arrayidx23 = getelementptr inbounds %struct.position, %struct.position* %30, i64 %idxprom22
  %strchr24 = getelementptr inbounds %struct.position, %struct.position* %arrayidx23, i32 0, i32 0
  %32 = load i32, i32* %strchr24, align 4
  %cmp25 = icmp ult i32 %28, %32
  br i1 %cmp25, label %if.then26, label %if.else36

if.then26:                                        ; preds = %if.else
  %33 = load %struct.position_set*, %struct.position_set** %m.addr, align 8
  %elems27 = getelementptr inbounds %struct.position_set, %struct.position_set* %33, i32 0, i32 0
  %34 = load %struct.position*, %struct.position** %elems27, align 8
  %35 = load %struct.position_set*, %struct.position_set** %m.addr, align 8
  %nelem28 = getelementptr inbounds %struct.position_set, %struct.position_set* %35, i32 0, i32 1
  %36 = load i32, i32* %nelem28, align 8
  %inc29 = add nsw i32 %36, 1
  store i32 %inc29, i32* %nelem28, align 8
  %idxprom30 = sext i32 %36 to i64
  %arrayidx31 = getelementptr inbounds %struct.position, %struct.position* %34, i64 %idxprom30
  %37 = load %struct.position_set*, %struct.position_set** %s2.addr, align 8
  %elems32 = getelementptr inbounds %struct.position_set, %struct.position_set* %37, i32 0, i32 0
  %38 = load %struct.position*, %struct.position** %elems32, align 8
  %39 = load i32, i32* %j, align 4
  %inc33 = add nsw i32 %39, 1
  store i32 %inc33, i32* %j, align 4
  %idxprom34 = sext i32 %39 to i64
  %arrayidx35 = getelementptr inbounds %struct.position, %struct.position* %38, i64 %idxprom34
  %40 = bitcast %struct.position* %arrayidx31 to i8*
  %41 = bitcast %struct.position* %arrayidx35 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %40, i8* align 4 %41, i64 8, i1 false)
  br label %if.end

if.else36:                                        ; preds = %if.else
  %42 = load %struct.position_set*, %struct.position_set** %m.addr, align 8
  %elems37 = getelementptr inbounds %struct.position_set, %struct.position_set* %42, i32 0, i32 0
  %43 = load %struct.position*, %struct.position** %elems37, align 8
  %44 = load %struct.position_set*, %struct.position_set** %m.addr, align 8
  %nelem38 = getelementptr inbounds %struct.position_set, %struct.position_set* %44, i32 0, i32 1
  %45 = load i32, i32* %nelem38, align 8
  %idxprom39 = sext i32 %45 to i64
  %arrayidx40 = getelementptr inbounds %struct.position, %struct.position* %43, i64 %idxprom39
  %46 = load %struct.position_set*, %struct.position_set** %s1.addr, align 8
  %elems41 = getelementptr inbounds %struct.position_set, %struct.position_set* %46, i32 0, i32 0
  %47 = load %struct.position*, %struct.position** %elems41, align 8
  %48 = load i32, i32* %i, align 4
  %inc42 = add nsw i32 %48, 1
  store i32 %inc42, i32* %i, align 4
  %idxprom43 = sext i32 %48 to i64
  %arrayidx44 = getelementptr inbounds %struct.position, %struct.position* %47, i64 %idxprom43
  %49 = bitcast %struct.position* %arrayidx40 to i8*
  %50 = bitcast %struct.position* %arrayidx44 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %49, i8* align 4 %50, i64 8, i1 false)
  %51 = load %struct.position_set*, %struct.position_set** %s2.addr, align 8
  %elems45 = getelementptr inbounds %struct.position_set, %struct.position_set* %51, i32 0, i32 0
  %52 = load %struct.position*, %struct.position** %elems45, align 8
  %53 = load i32, i32* %j, align 4
  %inc46 = add nsw i32 %53, 1
  store i32 %inc46, i32* %j, align 4
  %idxprom47 = sext i32 %53 to i64
  %arrayidx48 = getelementptr inbounds %struct.position, %struct.position* %52, i64 %idxprom47
  %constraint = getelementptr inbounds %struct.position, %struct.position* %arrayidx48, i32 0, i32 1
  %54 = load i32, i32* %constraint, align 4
  %55 = load %struct.position_set*, %struct.position_set** %m.addr, align 8
  %elems49 = getelementptr inbounds %struct.position_set, %struct.position_set* %55, i32 0, i32 0
  %56 = load %struct.position*, %struct.position** %elems49, align 8
  %57 = load %struct.position_set*, %struct.position_set** %m.addr, align 8
  %nelem50 = getelementptr inbounds %struct.position_set, %struct.position_set* %57, i32 0, i32 1
  %58 = load i32, i32* %nelem50, align 8
  %inc51 = add nsw i32 %58, 1
  store i32 %inc51, i32* %nelem50, align 8
  %idxprom52 = sext i32 %58 to i64
  %arrayidx53 = getelementptr inbounds %struct.position, %struct.position* %56, i64 %idxprom52
  %constraint54 = getelementptr inbounds %struct.position, %struct.position* %arrayidx53, i32 0, i32 1
  %59 = load i32, i32* %constraint54, align 4
  %or = or i32 %59, %54
  store i32 %or, i32* %constraint54, align 4
  br label %if.end

if.end:                                           ; preds = %if.else36, %if.then26
  br label %if.end55

if.end55:                                         ; preds = %if.end, %if.then
  br label %while.cond, !llvm.loop !112

while.end:                                        ; preds = %land.end
  br label %while.cond56

while.cond56:                                     ; preds = %while.body59, %while.end
  %60 = load i32, i32* %i, align 4
  %61 = load %struct.position_set*, %struct.position_set** %s1.addr, align 8
  %nelem57 = getelementptr inbounds %struct.position_set, %struct.position_set* %61, i32 0, i32 1
  %62 = load i32, i32* %nelem57, align 8
  %cmp58 = icmp slt i32 %60, %62
  br i1 %cmp58, label %while.body59, label %while.end69

while.body59:                                     ; preds = %while.cond56
  %63 = load %struct.position_set*, %struct.position_set** %m.addr, align 8
  %elems60 = getelementptr inbounds %struct.position_set, %struct.position_set* %63, i32 0, i32 0
  %64 = load %struct.position*, %struct.position** %elems60, align 8
  %65 = load %struct.position_set*, %struct.position_set** %m.addr, align 8
  %nelem61 = getelementptr inbounds %struct.position_set, %struct.position_set* %65, i32 0, i32 1
  %66 = load i32, i32* %nelem61, align 8
  %inc62 = add nsw i32 %66, 1
  store i32 %inc62, i32* %nelem61, align 8
  %idxprom63 = sext i32 %66 to i64
  %arrayidx64 = getelementptr inbounds %struct.position, %struct.position* %64, i64 %idxprom63
  %67 = load %struct.position_set*, %struct.position_set** %s1.addr, align 8
  %elems65 = getelementptr inbounds %struct.position_set, %struct.position_set* %67, i32 0, i32 0
  %68 = load %struct.position*, %struct.position** %elems65, align 8
  %69 = load i32, i32* %i, align 4
  %inc66 = add nsw i32 %69, 1
  store i32 %inc66, i32* %i, align 4
  %idxprom67 = sext i32 %69 to i64
  %arrayidx68 = getelementptr inbounds %struct.position, %struct.position* %68, i64 %idxprom67
  %70 = bitcast %struct.position* %arrayidx64 to i8*
  %71 = bitcast %struct.position* %arrayidx68 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %70, i8* align 4 %71, i64 8, i1 false)
  br label %while.cond56, !llvm.loop !113

while.end69:                                      ; preds = %while.cond56
  br label %while.cond70

while.cond70:                                     ; preds = %while.body73, %while.end69
  %72 = load i32, i32* %j, align 4
  %73 = load %struct.position_set*, %struct.position_set** %s2.addr, align 8
  %nelem71 = getelementptr inbounds %struct.position_set, %struct.position_set* %73, i32 0, i32 1
  %74 = load i32, i32* %nelem71, align 8
  %cmp72 = icmp slt i32 %72, %74
  br i1 %cmp72, label %while.body73, label %while.end83

while.body73:                                     ; preds = %while.cond70
  %75 = load %struct.position_set*, %struct.position_set** %m.addr, align 8
  %elems74 = getelementptr inbounds %struct.position_set, %struct.position_set* %75, i32 0, i32 0
  %76 = load %struct.position*, %struct.position** %elems74, align 8
  %77 = load %struct.position_set*, %struct.position_set** %m.addr, align 8
  %nelem75 = getelementptr inbounds %struct.position_set, %struct.position_set* %77, i32 0, i32 1
  %78 = load i32, i32* %nelem75, align 8
  %inc76 = add nsw i32 %78, 1
  store i32 %inc76, i32* %nelem75, align 8
  %idxprom77 = sext i32 %78 to i64
  %arrayidx78 = getelementptr inbounds %struct.position, %struct.position* %76, i64 %idxprom77
  %79 = load %struct.position_set*, %struct.position_set** %s2.addr, align 8
  %elems79 = getelementptr inbounds %struct.position_set, %struct.position_set* %79, i32 0, i32 0
  %80 = load %struct.position*, %struct.position** %elems79, align 8
  %81 = load i32, i32* %j, align 4
  %inc80 = add nsw i32 %81, 1
  store i32 %inc80, i32* %j, align 4
  %idxprom81 = sext i32 %81 to i64
  %arrayidx82 = getelementptr inbounds %struct.position, %struct.position* %80, i64 %idxprom81
  %82 = bitcast %struct.position* %arrayidx78 to i8*
  %83 = bitcast %struct.position* %arrayidx82 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %82, i8* align 4 %83, i64 8, i1 false)
  br label %while.cond70, !llvm.loop !114

while.end83:                                      ; preds = %while.cond70
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @xrealloc_1(i8* %p, i64 %n) #0 {
entry:
  %p.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  %r = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  store i64 %n, i64* %n.addr, align 8
  %0 = load i8*, i8** %p.addr, align 8
  %1 = load i64, i64* %n.addr, align 8
  %call = call align 16 i8* @realloc(i8* %0, i64 %1) #9
  store i8* %call, i8** %r, align 8
  %2 = load i8*, i8** %r, align 8
  %tobool = icmp ne i8* %2, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @dfaerror(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.57, i64 0, i64 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load i8*, i8** %r, align 8
  ret i8* %3
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @copy(%struct.position_set* %src, %struct.position_set* %dst) #0 {
entry:
  %src.addr = alloca %struct.position_set*, align 8
  %dst.addr = alloca %struct.position_set*, align 8
  %i = alloca i32, align 4
  store %struct.position_set* %src, %struct.position_set** %src.addr, align 8
  store %struct.position_set* %dst, %struct.position_set** %dst.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.position_set*, %struct.position_set** %src.addr, align 8
  %nelem = getelementptr inbounds %struct.position_set, %struct.position_set* %1, i32 0, i32 1
  %2 = load i32, i32* %nelem, align 8
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.position_set*, %struct.position_set** %dst.addr, align 8
  %elems = getelementptr inbounds %struct.position_set, %struct.position_set* %3, i32 0, i32 0
  %4 = load %struct.position*, %struct.position** %elems, align 8
  %5 = load i32, i32* %i, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds %struct.position, %struct.position* %4, i64 %idxprom
  %6 = load %struct.position_set*, %struct.position_set** %src.addr, align 8
  %elems1 = getelementptr inbounds %struct.position_set, %struct.position_set* %6, i32 0, i32 0
  %7 = load %struct.position*, %struct.position** %elems1, align 8
  %8 = load i32, i32* %i, align 4
  %idxprom2 = sext i32 %8 to i64
  %arrayidx3 = getelementptr inbounds %struct.position, %struct.position* %7, i64 %idxprom2
  %9 = bitcast %struct.position* %arrayidx to i8*
  %10 = bitcast %struct.position* %arrayidx3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %9, i8* align 4 %10, i64 8, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond, !llvm.loop !115

for.end:                                          ; preds = %for.cond
  %12 = load %struct.position_set*, %struct.position_set** %src.addr, align 8
  %nelem4 = getelementptr inbounds %struct.position_set, %struct.position_set* %12, i32 0, i32 1
  %13 = load i32, i32* %nelem4, align 8
  %14 = load %struct.position_set*, %struct.position_set** %dst.addr, align 8
  %nelem5 = getelementptr inbounds %struct.position_set, %struct.position_set* %14, i32 0, i32 1
  store i32 %13, i32* %nelem5, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @state_index(%struct.dfa* %d, %struct.position_set* %s, i32 %newline, i32 %letter) #0 {
entry:
  %retval = alloca i32, align 4
  %d.addr = alloca %struct.dfa*, align 8
  %s.addr = alloca %struct.position_set*, align 8
  %newline.addr = alloca i32, align 4
  %letter.addr = alloca i32, align 4
  %hash = alloca i32, align 4
  %constraint = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.dfa* %d, %struct.dfa** %d.addr, align 8
  store %struct.position_set* %s, %struct.position_set** %s.addr, align 8
  store i32 %newline, i32* %newline.addr, align 4
  store i32 %letter, i32* %letter.addr, align 4
  store i32 0, i32* %hash, align 4
  %0 = load i32, i32* %newline.addr, align 4
  %tobool = icmp ne i32 %0, 0
  %1 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i32 1, i32 0
  store i32 %cond, i32* %newline.addr, align 4
  %2 = load i32, i32* %letter.addr, align 4
  %tobool1 = icmp ne i32 %2, 0
  %3 = zext i1 %tobool1 to i64
  %cond2 = select i1 %tobool1, i32 1, i32 0
  store i32 %cond2, i32* %letter.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load %struct.position_set*, %struct.position_set** %s.addr, align 8
  %nelem = getelementptr inbounds %struct.position_set, %struct.position_set* %5, i32 0, i32 1
  %6 = load i32, i32* %nelem, align 8
  %cmp = icmp slt i32 %4, %6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load %struct.position_set*, %struct.position_set** %s.addr, align 8
  %elems = getelementptr inbounds %struct.position_set, %struct.position_set* %7, i32 0, i32 0
  %8 = load %struct.position*, %struct.position** %elems, align 8
  %9 = load i32, i32* %i, align 4
  %idxprom = sext i32 %9 to i64
  %arrayidx = getelementptr inbounds %struct.position, %struct.position* %8, i64 %idxprom
  %strchr = getelementptr inbounds %struct.position, %struct.position* %arrayidx, i32 0, i32 0
  %10 = load i32, i32* %strchr, align 4
  %11 = load %struct.position_set*, %struct.position_set** %s.addr, align 8
  %elems3 = getelementptr inbounds %struct.position_set, %struct.position_set* %11, i32 0, i32 0
  %12 = load %struct.position*, %struct.position** %elems3, align 8
  %13 = load i32, i32* %i, align 4
  %idxprom4 = sext i32 %13 to i64
  %arrayidx5 = getelementptr inbounds %struct.position, %struct.position* %12, i64 %idxprom4
  %constraint6 = getelementptr inbounds %struct.position, %struct.position* %arrayidx5, i32 0, i32 1
  %14 = load i32, i32* %constraint6, align 4
  %add = add i32 %10, %14
  %15 = load i32, i32* %hash, align 4
  %xor = xor i32 %15, %add
  store i32 %xor, i32* %hash, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond, !llvm.loop !116

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc80, %for.end
  %17 = load i32, i32* %i, align 4
  %18 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %sindex = getelementptr inbounds %struct.dfa, %struct.dfa* %18, i32 0, i32 10
  %19 = load i32, i32* %sindex, align 8
  %cmp8 = icmp slt i32 %17, %19
  br i1 %cmp8, label %for.body9, label %for.end82

for.body9:                                        ; preds = %for.cond7
  %20 = load i32, i32* %hash, align 4
  %21 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %states = getelementptr inbounds %struct.dfa, %struct.dfa* %21, i32 0, i32 9
  %22 = load %struct.dfa_state*, %struct.dfa_state** %states, align 8
  %23 = load i32, i32* %i, align 4
  %idxprom10 = sext i32 %23 to i64
  %arrayidx11 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %22, i64 %idxprom10
  %hash12 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %arrayidx11, i32 0, i32 0
  %24 = load i32, i32* %hash12, align 8
  %cmp13 = icmp ne i32 %20, %24
  br i1 %cmp13, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body9
  %25 = load %struct.position_set*, %struct.position_set** %s.addr, align 8
  %nelem14 = getelementptr inbounds %struct.position_set, %struct.position_set* %25, i32 0, i32 1
  %26 = load i32, i32* %nelem14, align 8
  %27 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %states15 = getelementptr inbounds %struct.dfa, %struct.dfa* %27, i32 0, i32 9
  %28 = load %struct.dfa_state*, %struct.dfa_state** %states15, align 8
  %29 = load i32, i32* %i, align 4
  %idxprom16 = sext i32 %29 to i64
  %arrayidx17 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %28, i64 %idxprom16
  %elems18 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %arrayidx17, i32 0, i32 1
  %nelem19 = getelementptr inbounds %struct.position_set, %struct.position_set* %elems18, i32 0, i32 1
  %30 = load i32, i32* %nelem19, align 8
  %cmp20 = icmp ne i32 %26, %30
  br i1 %cmp20, label %if.then, label %lor.lhs.false21

lor.lhs.false21:                                  ; preds = %lor.lhs.false
  %31 = load i32, i32* %newline.addr, align 4
  %32 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %states22 = getelementptr inbounds %struct.dfa, %struct.dfa* %32, i32 0, i32 9
  %33 = load %struct.dfa_state*, %struct.dfa_state** %states22, align 8
  %34 = load i32, i32* %i, align 4
  %idxprom23 = sext i32 %34 to i64
  %arrayidx24 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %33, i64 %idxprom23
  %newline25 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %arrayidx24, i32 0, i32 2
  %35 = load i8, i8* %newline25, align 8
  %conv = sext i8 %35 to i32
  %cmp26 = icmp ne i32 %31, %conv
  br i1 %cmp26, label %if.then, label %lor.lhs.false28

lor.lhs.false28:                                  ; preds = %lor.lhs.false21
  %36 = load i32, i32* %letter.addr, align 4
  %37 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %states29 = getelementptr inbounds %struct.dfa, %struct.dfa* %37, i32 0, i32 9
  %38 = load %struct.dfa_state*, %struct.dfa_state** %states29, align 8
  %39 = load i32, i32* %i, align 4
  %idxprom30 = sext i32 %39 to i64
  %arrayidx31 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %38, i64 %idxprom30
  %letter32 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %arrayidx31, i32 0, i32 3
  %40 = load i8, i8* %letter32, align 1
  %conv33 = sext i8 %40 to i32
  %cmp34 = icmp ne i32 %36, %conv33
  br i1 %cmp34, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false28, %lor.lhs.false21, %lor.lhs.false, %for.body9
  br label %for.inc80

if.end:                                           ; preds = %lor.lhs.false28
  store i32 0, i32* %j, align 4
  br label %for.cond36

for.cond36:                                       ; preds = %for.inc72, %if.end
  %41 = load i32, i32* %j, align 4
  %42 = load %struct.position_set*, %struct.position_set** %s.addr, align 8
  %nelem37 = getelementptr inbounds %struct.position_set, %struct.position_set* %42, i32 0, i32 1
  %43 = load i32, i32* %nelem37, align 8
  %cmp38 = icmp slt i32 %41, %43
  br i1 %cmp38, label %for.body40, label %for.end74

for.body40:                                       ; preds = %for.cond36
  %44 = load %struct.position_set*, %struct.position_set** %s.addr, align 8
  %elems41 = getelementptr inbounds %struct.position_set, %struct.position_set* %44, i32 0, i32 0
  %45 = load %struct.position*, %struct.position** %elems41, align 8
  %46 = load i32, i32* %j, align 4
  %idxprom42 = sext i32 %46 to i64
  %arrayidx43 = getelementptr inbounds %struct.position, %struct.position* %45, i64 %idxprom42
  %constraint44 = getelementptr inbounds %struct.position, %struct.position* %arrayidx43, i32 0, i32 1
  %47 = load i32, i32* %constraint44, align 4
  %48 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %states45 = getelementptr inbounds %struct.dfa, %struct.dfa* %48, i32 0, i32 9
  %49 = load %struct.dfa_state*, %struct.dfa_state** %states45, align 8
  %50 = load i32, i32* %i, align 4
  %idxprom46 = sext i32 %50 to i64
  %arrayidx47 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %49, i64 %idxprom46
  %elems48 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %arrayidx47, i32 0, i32 1
  %elems49 = getelementptr inbounds %struct.position_set, %struct.position_set* %elems48, i32 0, i32 0
  %51 = load %struct.position*, %struct.position** %elems49, align 8
  %52 = load i32, i32* %j, align 4
  %idxprom50 = sext i32 %52 to i64
  %arrayidx51 = getelementptr inbounds %struct.position, %struct.position* %51, i64 %idxprom50
  %constraint52 = getelementptr inbounds %struct.position, %struct.position* %arrayidx51, i32 0, i32 1
  %53 = load i32, i32* %constraint52, align 4
  %cmp53 = icmp ne i32 %47, %53
  br i1 %cmp53, label %if.then70, label %lor.lhs.false55

lor.lhs.false55:                                  ; preds = %for.body40
  %54 = load %struct.position_set*, %struct.position_set** %s.addr, align 8
  %elems56 = getelementptr inbounds %struct.position_set, %struct.position_set* %54, i32 0, i32 0
  %55 = load %struct.position*, %struct.position** %elems56, align 8
  %56 = load i32, i32* %j, align 4
  %idxprom57 = sext i32 %56 to i64
  %arrayidx58 = getelementptr inbounds %struct.position, %struct.position* %55, i64 %idxprom57
  %strchr59 = getelementptr inbounds %struct.position, %struct.position* %arrayidx58, i32 0, i32 0
  %57 = load i32, i32* %strchr59, align 4
  %58 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %states60 = getelementptr inbounds %struct.dfa, %struct.dfa* %58, i32 0, i32 9
  %59 = load %struct.dfa_state*, %struct.dfa_state** %states60, align 8
  %60 = load i32, i32* %i, align 4
  %idxprom61 = sext i32 %60 to i64
  %arrayidx62 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %59, i64 %idxprom61
  %elems63 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %arrayidx62, i32 0, i32 1
  %elems64 = getelementptr inbounds %struct.position_set, %struct.position_set* %elems63, i32 0, i32 0
  %61 = load %struct.position*, %struct.position** %elems64, align 8
  %62 = load i32, i32* %j, align 4
  %idxprom65 = sext i32 %62 to i64
  %arrayidx66 = getelementptr inbounds %struct.position, %struct.position* %61, i64 %idxprom65
  %strchr67 = getelementptr inbounds %struct.position, %struct.position* %arrayidx66, i32 0, i32 0
  %63 = load i32, i32* %strchr67, align 4
  %cmp68 = icmp ne i32 %57, %63
  br i1 %cmp68, label %if.then70, label %if.end71

if.then70:                                        ; preds = %lor.lhs.false55, %for.body40
  br label %for.end74

if.end71:                                         ; preds = %lor.lhs.false55
  br label %for.inc72

for.inc72:                                        ; preds = %if.end71
  %64 = load i32, i32* %j, align 4
  %inc73 = add nsw i32 %64, 1
  store i32 %inc73, i32* %j, align 4
  br label %for.cond36, !llvm.loop !117

for.end74:                                        ; preds = %if.then70, %for.cond36
  %65 = load i32, i32* %j, align 4
  %66 = load %struct.position_set*, %struct.position_set** %s.addr, align 8
  %nelem75 = getelementptr inbounds %struct.position_set, %struct.position_set* %66, i32 0, i32 1
  %67 = load i32, i32* %nelem75, align 8
  %cmp76 = icmp eq i32 %65, %67
  br i1 %cmp76, label %if.then78, label %if.end79

if.then78:                                        ; preds = %for.end74
  %68 = load i32, i32* %i, align 4
  store i32 %68, i32* %retval, align 4
  br label %return

if.end79:                                         ; preds = %for.end74
  br label %for.inc80

for.inc80:                                        ; preds = %if.end79, %if.then
  %69 = load i32, i32* %i, align 4
  %inc81 = add nsw i32 %69, 1
  store i32 %inc81, i32* %i, align 4
  br label %for.cond7, !llvm.loop !118

for.end82:                                        ; preds = %for.cond7
  %70 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %sindex83 = getelementptr inbounds %struct.dfa, %struct.dfa* %70, i32 0, i32 10
  %71 = load i32, i32* %sindex83, align 8
  %72 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %salloc = getelementptr inbounds %struct.dfa, %struct.dfa* %72, i32 0, i32 11
  %73 = load i32, i32* %salloc, align 4
  %cmp84 = icmp sge i32 %71, %73
  br i1 %cmp84, label %if.then86, label %if.end97

if.then86:                                        ; preds = %for.end82
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then86
  %74 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %sindex87 = getelementptr inbounds %struct.dfa, %struct.dfa* %74, i32 0, i32 10
  %75 = load i32, i32* %sindex87, align 8
  %76 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %salloc88 = getelementptr inbounds %struct.dfa, %struct.dfa* %76, i32 0, i32 11
  %77 = load i32, i32* %salloc88, align 4
  %cmp89 = icmp sge i32 %75, %77
  br i1 %cmp89, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %78 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %salloc91 = getelementptr inbounds %struct.dfa, %struct.dfa* %78, i32 0, i32 11
  %79 = load i32, i32* %salloc91, align 4
  %mul = mul nsw i32 %79, 2
  store i32 %mul, i32* %salloc91, align 4
  br label %while.cond, !llvm.loop !119

while.end:                                        ; preds = %while.cond
  %80 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %states92 = getelementptr inbounds %struct.dfa, %struct.dfa* %80, i32 0, i32 9
  %81 = load %struct.dfa_state*, %struct.dfa_state** %states92, align 8
  %82 = bitcast %struct.dfa_state* %81 to i8*
  %83 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %salloc93 = getelementptr inbounds %struct.dfa, %struct.dfa* %83, i32 0, i32 11
  %84 = load i32, i32* %salloc93, align 4
  %conv94 = sext i32 %84 to i64
  %mul95 = mul i64 %conv94, 32
  %call = call i8* @xrealloc_1(i8* %82, i64 %mul95)
  %85 = bitcast i8* %call to %struct.dfa_state*
  %86 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %states96 = getelementptr inbounds %struct.dfa, %struct.dfa* %86, i32 0, i32 9
  store %struct.dfa_state* %85, %struct.dfa_state** %states96, align 8
  br label %if.end97

if.end97:                                         ; preds = %while.end, %for.end82
  %87 = load i32, i32* %hash, align 4
  %88 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %states98 = getelementptr inbounds %struct.dfa, %struct.dfa* %88, i32 0, i32 9
  %89 = load %struct.dfa_state*, %struct.dfa_state** %states98, align 8
  %90 = load i32, i32* %i, align 4
  %idxprom99 = sext i32 %90 to i64
  %arrayidx100 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %89, i64 %idxprom99
  %hash101 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %arrayidx100, i32 0, i32 0
  store i32 %87, i32* %hash101, align 8
  %91 = load %struct.position_set*, %struct.position_set** %s.addr, align 8
  %nelem102 = getelementptr inbounds %struct.position_set, %struct.position_set* %91, i32 0, i32 1
  %92 = load i32, i32* %nelem102, align 8
  %conv103 = sext i32 %92 to i64
  %mul104 = mul i64 %conv103, 8
  %call105 = call i8* @xmalloc_1(i64 %mul104)
  %93 = bitcast i8* %call105 to %struct.position*
  %94 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %states106 = getelementptr inbounds %struct.dfa, %struct.dfa* %94, i32 0, i32 9
  %95 = load %struct.dfa_state*, %struct.dfa_state** %states106, align 8
  %96 = load i32, i32* %i, align 4
  %idxprom107 = sext i32 %96 to i64
  %arrayidx108 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %95, i64 %idxprom107
  %elems109 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %arrayidx108, i32 0, i32 1
  %elems110 = getelementptr inbounds %struct.position_set, %struct.position_set* %elems109, i32 0, i32 0
  store %struct.position* %93, %struct.position** %elems110, align 8
  %97 = load %struct.position_set*, %struct.position_set** %s.addr, align 8
  %98 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %states111 = getelementptr inbounds %struct.dfa, %struct.dfa* %98, i32 0, i32 9
  %99 = load %struct.dfa_state*, %struct.dfa_state** %states111, align 8
  %100 = load i32, i32* %i, align 4
  %idxprom112 = sext i32 %100 to i64
  %arrayidx113 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %99, i64 %idxprom112
  %elems114 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %arrayidx113, i32 0, i32 1
  call void @copy(%struct.position_set* %97, %struct.position_set* %elems114)
  %101 = load i32, i32* %newline.addr, align 4
  %conv115 = trunc i32 %101 to i8
  %102 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %states116 = getelementptr inbounds %struct.dfa, %struct.dfa* %102, i32 0, i32 9
  %103 = load %struct.dfa_state*, %struct.dfa_state** %states116, align 8
  %104 = load i32, i32* %i, align 4
  %idxprom117 = sext i32 %104 to i64
  %arrayidx118 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %103, i64 %idxprom117
  %newline119 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %arrayidx118, i32 0, i32 2
  store i8 %conv115, i8* %newline119, align 8
  %105 = load i32, i32* %letter.addr, align 4
  %conv120 = trunc i32 %105 to i8
  %106 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %states121 = getelementptr inbounds %struct.dfa, %struct.dfa* %106, i32 0, i32 9
  %107 = load %struct.dfa_state*, %struct.dfa_state** %states121, align 8
  %108 = load i32, i32* %i, align 4
  %idxprom122 = sext i32 %108 to i64
  %arrayidx123 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %107, i64 %idxprom122
  %letter124 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %arrayidx123, i32 0, i32 3
  store i8 %conv120, i8* %letter124, align 1
  %109 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %states125 = getelementptr inbounds %struct.dfa, %struct.dfa* %109, i32 0, i32 9
  %110 = load %struct.dfa_state*, %struct.dfa_state** %states125, align 8
  %111 = load i32, i32* %i, align 4
  %idxprom126 = sext i32 %111 to i64
  %arrayidx127 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %110, i64 %idxprom126
  %backref = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %arrayidx127, i32 0, i32 4
  store i8 0, i8* %backref, align 2
  %112 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %states128 = getelementptr inbounds %struct.dfa, %struct.dfa* %112, i32 0, i32 9
  %113 = load %struct.dfa_state*, %struct.dfa_state** %states128, align 8
  %114 = load i32, i32* %i, align 4
  %idxprom129 = sext i32 %114 to i64
  %arrayidx130 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %113, i64 %idxprom129
  %constraint131 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %arrayidx130, i32 0, i32 5
  store i8 0, i8* %constraint131, align 1
  %115 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %states132 = getelementptr inbounds %struct.dfa, %struct.dfa* %115, i32 0, i32 9
  %116 = load %struct.dfa_state*, %struct.dfa_state** %states132, align 8
  %117 = load i32, i32* %i, align 4
  %idxprom133 = sext i32 %117 to i64
  %arrayidx134 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %116, i64 %idxprom133
  %first_end = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %arrayidx134, i32 0, i32 6
  store i32 0, i32* %first_end, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond135

for.cond135:                                      ; preds = %for.inc255, %if.end97
  %118 = load i32, i32* %j, align 4
  %119 = load %struct.position_set*, %struct.position_set** %s.addr, align 8
  %nelem136 = getelementptr inbounds %struct.position_set, %struct.position_set* %119, i32 0, i32 1
  %120 = load i32, i32* %nelem136, align 8
  %cmp137 = icmp slt i32 %118, %120
  br i1 %cmp137, label %for.body139, label %for.end257

for.body139:                                      ; preds = %for.cond135
  %121 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %tokens = getelementptr inbounds %struct.dfa, %struct.dfa* %121, i32 0, i32 3
  %122 = load i32*, i32** %tokens, align 8
  %123 = load %struct.position_set*, %struct.position_set** %s.addr, align 8
  %elems140 = getelementptr inbounds %struct.position_set, %struct.position_set* %123, i32 0, i32 0
  %124 = load %struct.position*, %struct.position** %elems140, align 8
  %125 = load i32, i32* %j, align 4
  %idxprom141 = sext i32 %125 to i64
  %arrayidx142 = getelementptr inbounds %struct.position, %struct.position* %124, i64 %idxprom141
  %strchr143 = getelementptr inbounds %struct.position, %struct.position* %arrayidx142, i32 0, i32 0
  %126 = load i32, i32* %strchr143, align 4
  %idxprom144 = zext i32 %126 to i64
  %arrayidx145 = getelementptr inbounds i32, i32* %122, i64 %idxprom144
  %127 = load i32, i32* %arrayidx145, align 4
  %cmp146 = icmp slt i32 %127, 0
  br i1 %cmp146, label %if.then148, label %if.else

if.then148:                                       ; preds = %for.body139
  %128 = load %struct.position_set*, %struct.position_set** %s.addr, align 8
  %elems149 = getelementptr inbounds %struct.position_set, %struct.position_set* %128, i32 0, i32 0
  %129 = load %struct.position*, %struct.position** %elems149, align 8
  %130 = load i32, i32* %j, align 4
  %idxprom150 = sext i32 %130 to i64
  %arrayidx151 = getelementptr inbounds %struct.position, %struct.position* %129, i64 %idxprom150
  %constraint152 = getelementptr inbounds %struct.position, %struct.position* %arrayidx151, i32 0, i32 1
  %131 = load i32, i32* %constraint152, align 4
  store i32 %131, i32* %constraint, align 4
  %132 = load i32, i32* %constraint, align 4
  %133 = load i32, i32* %newline.addr, align 4
  %tobool153 = icmp ne i32 %133, 0
  %134 = zext i1 %tobool153 to i64
  %cond154 = select i1 %tobool153, i32 2, i32 0
  %add155 = add nsw i32 %cond154, 0
  %add156 = add nsw i32 %add155, 4
  %shl = shl i32 1, %add156
  %and = and i32 %132, %shl
  %tobool157 = icmp ne i32 %and, 0
  br i1 %tobool157, label %land.lhs.true, label %lor.lhs.false164

land.lhs.true:                                    ; preds = %if.then148
  %135 = load i32, i32* %constraint, align 4
  %136 = load i32, i32* %letter.addr, align 4
  %tobool158 = icmp ne i32 %136, 0
  %137 = zext i1 %tobool158 to i64
  %cond159 = select i1 %tobool158, i32 2, i32 0
  %add160 = add nsw i32 %cond159, 0
  %shl161 = shl i32 1, %add160
  %and162 = and i32 %135, %shl161
  %tobool163 = icmp ne i32 %and162, 0
  br i1 %tobool163, label %if.then209, label %lor.lhs.false164

lor.lhs.false164:                                 ; preds = %land.lhs.true, %if.then148
  %138 = load i32, i32* %constraint, align 4
  %139 = load i32, i32* %newline.addr, align 4
  %tobool165 = icmp ne i32 %139, 0
  %140 = zext i1 %tobool165 to i64
  %cond166 = select i1 %tobool165, i32 2, i32 0
  %add167 = add nsw i32 %cond166, 0
  %add168 = add nsw i32 %add167, 4
  %shl169 = shl i32 1, %add168
  %and170 = and i32 %138, %shl169
  %tobool171 = icmp ne i32 %and170, 0
  br i1 %tobool171, label %land.lhs.true172, label %lor.lhs.false179

land.lhs.true172:                                 ; preds = %lor.lhs.false164
  %141 = load i32, i32* %constraint, align 4
  %142 = load i32, i32* %letter.addr, align 4
  %tobool173 = icmp ne i32 %142, 0
  %143 = zext i1 %tobool173 to i64
  %cond174 = select i1 %tobool173, i32 2, i32 0
  %add175 = add nsw i32 %cond174, 1
  %shl176 = shl i32 1, %add175
  %and177 = and i32 %141, %shl176
  %tobool178 = icmp ne i32 %and177, 0
  br i1 %tobool178, label %if.then209, label %lor.lhs.false179

lor.lhs.false179:                                 ; preds = %land.lhs.true172, %lor.lhs.false164
  %144 = load i32, i32* %constraint, align 4
  %145 = load i32, i32* %newline.addr, align 4
  %tobool180 = icmp ne i32 %145, 0
  %146 = zext i1 %tobool180 to i64
  %cond181 = select i1 %tobool180, i32 2, i32 0
  %add182 = add nsw i32 %cond181, 1
  %add183 = add nsw i32 %add182, 4
  %shl184 = shl i32 1, %add183
  %and185 = and i32 %144, %shl184
  %tobool186 = icmp ne i32 %and185, 0
  br i1 %tobool186, label %land.lhs.true187, label %lor.lhs.false194

land.lhs.true187:                                 ; preds = %lor.lhs.false179
  %147 = load i32, i32* %constraint, align 4
  %148 = load i32, i32* %letter.addr, align 4
  %tobool188 = icmp ne i32 %148, 0
  %149 = zext i1 %tobool188 to i64
  %cond189 = select i1 %tobool188, i32 2, i32 0
  %add190 = add nsw i32 %cond189, 0
  %shl191 = shl i32 1, %add190
  %and192 = and i32 %147, %shl191
  %tobool193 = icmp ne i32 %and192, 0
  br i1 %tobool193, label %if.then209, label %lor.lhs.false194

lor.lhs.false194:                                 ; preds = %land.lhs.true187, %lor.lhs.false179
  %150 = load i32, i32* %constraint, align 4
  %151 = load i32, i32* %newline.addr, align 4
  %tobool195 = icmp ne i32 %151, 0
  %152 = zext i1 %tobool195 to i64
  %cond196 = select i1 %tobool195, i32 2, i32 0
  %add197 = add nsw i32 %cond196, 1
  %add198 = add nsw i32 %add197, 4
  %shl199 = shl i32 1, %add198
  %and200 = and i32 %150, %shl199
  %tobool201 = icmp ne i32 %and200, 0
  br i1 %tobool201, label %land.lhs.true202, label %if.end216

land.lhs.true202:                                 ; preds = %lor.lhs.false194
  %153 = load i32, i32* %constraint, align 4
  %154 = load i32, i32* %letter.addr, align 4
  %tobool203 = icmp ne i32 %154, 0
  %155 = zext i1 %tobool203 to i64
  %cond204 = select i1 %tobool203, i32 2, i32 0
  %add205 = add nsw i32 %cond204, 1
  %shl206 = shl i32 1, %add205
  %and207 = and i32 %153, %shl206
  %tobool208 = icmp ne i32 %and207, 0
  br i1 %tobool208, label %if.then209, label %if.end216

if.then209:                                       ; preds = %land.lhs.true202, %land.lhs.true187, %land.lhs.true172, %land.lhs.true
  %156 = load i32, i32* %constraint, align 4
  %157 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %states210 = getelementptr inbounds %struct.dfa, %struct.dfa* %157, i32 0, i32 9
  %158 = load %struct.dfa_state*, %struct.dfa_state** %states210, align 8
  %159 = load i32, i32* %i, align 4
  %idxprom211 = sext i32 %159 to i64
  %arrayidx212 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %158, i64 %idxprom211
  %constraint213 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %arrayidx212, i32 0, i32 5
  %160 = load i8, i8* %constraint213, align 1
  %conv214 = zext i8 %160 to i32
  %or = or i32 %conv214, %156
  %conv215 = trunc i32 %or to i8
  store i8 %conv215, i8* %constraint213, align 1
  br label %if.end216

if.end216:                                        ; preds = %if.then209, %land.lhs.true202, %lor.lhs.false194
  %161 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %states217 = getelementptr inbounds %struct.dfa, %struct.dfa* %161, i32 0, i32 9
  %162 = load %struct.dfa_state*, %struct.dfa_state** %states217, align 8
  %163 = load i32, i32* %i, align 4
  %idxprom218 = sext i32 %163 to i64
  %arrayidx219 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %162, i64 %idxprom218
  %first_end220 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %arrayidx219, i32 0, i32 6
  %164 = load i32, i32* %first_end220, align 4
  %tobool221 = icmp ne i32 %164, 0
  br i1 %tobool221, label %if.end234, label %if.then222

if.then222:                                       ; preds = %if.end216
  %165 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %tokens223 = getelementptr inbounds %struct.dfa, %struct.dfa* %165, i32 0, i32 3
  %166 = load i32*, i32** %tokens223, align 8
  %167 = load %struct.position_set*, %struct.position_set** %s.addr, align 8
  %elems224 = getelementptr inbounds %struct.position_set, %struct.position_set* %167, i32 0, i32 0
  %168 = load %struct.position*, %struct.position** %elems224, align 8
  %169 = load i32, i32* %j, align 4
  %idxprom225 = sext i32 %169 to i64
  %arrayidx226 = getelementptr inbounds %struct.position, %struct.position* %168, i64 %idxprom225
  %strchr227 = getelementptr inbounds %struct.position, %struct.position* %arrayidx226, i32 0, i32 0
  %170 = load i32, i32* %strchr227, align 4
  %idxprom228 = zext i32 %170 to i64
  %arrayidx229 = getelementptr inbounds i32, i32* %166, i64 %idxprom228
  %171 = load i32, i32* %arrayidx229, align 4
  %172 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %states230 = getelementptr inbounds %struct.dfa, %struct.dfa* %172, i32 0, i32 9
  %173 = load %struct.dfa_state*, %struct.dfa_state** %states230, align 8
  %174 = load i32, i32* %i, align 4
  %idxprom231 = sext i32 %174 to i64
  %arrayidx232 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %173, i64 %idxprom231
  %first_end233 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %arrayidx232, i32 0, i32 6
  store i32 %171, i32* %first_end233, align 4
  br label %if.end234

if.end234:                                        ; preds = %if.then222, %if.end216
  br label %if.end254

if.else:                                          ; preds = %for.body139
  %175 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %tokens235 = getelementptr inbounds %struct.dfa, %struct.dfa* %175, i32 0, i32 3
  %176 = load i32*, i32** %tokens235, align 8
  %177 = load %struct.position_set*, %struct.position_set** %s.addr, align 8
  %elems236 = getelementptr inbounds %struct.position_set, %struct.position_set* %177, i32 0, i32 0
  %178 = load %struct.position*, %struct.position** %elems236, align 8
  %179 = load i32, i32* %j, align 4
  %idxprom237 = sext i32 %179 to i64
  %arrayidx238 = getelementptr inbounds %struct.position, %struct.position* %178, i64 %idxprom237
  %strchr239 = getelementptr inbounds %struct.position, %struct.position* %arrayidx238, i32 0, i32 0
  %180 = load i32, i32* %strchr239, align 4
  %idxprom240 = zext i32 %180 to i64
  %arrayidx241 = getelementptr inbounds i32, i32* %176, i64 %idxprom240
  %181 = load i32, i32* %arrayidx241, align 4
  %cmp242 = icmp eq i32 %181, 257
  br i1 %cmp242, label %if.then244, label %if.end253

if.then244:                                       ; preds = %if.else
  %182 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %states245 = getelementptr inbounds %struct.dfa, %struct.dfa* %182, i32 0, i32 9
  %183 = load %struct.dfa_state*, %struct.dfa_state** %states245, align 8
  %184 = load i32, i32* %i, align 4
  %idxprom246 = sext i32 %184 to i64
  %arrayidx247 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %183, i64 %idxprom246
  %constraint248 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %arrayidx247, i32 0, i32 5
  store i8 -1, i8* %constraint248, align 1
  %185 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %states249 = getelementptr inbounds %struct.dfa, %struct.dfa* %185, i32 0, i32 9
  %186 = load %struct.dfa_state*, %struct.dfa_state** %states249, align 8
  %187 = load i32, i32* %i, align 4
  %idxprom250 = sext i32 %187 to i64
  %arrayidx251 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %186, i64 %idxprom250
  %backref252 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %arrayidx251, i32 0, i32 4
  store i8 1, i8* %backref252, align 2
  br label %if.end253

if.end253:                                        ; preds = %if.then244, %if.else
  br label %if.end254

if.end254:                                        ; preds = %if.end253, %if.end234
  br label %for.inc255

for.inc255:                                       ; preds = %if.end254
  %188 = load i32, i32* %j, align 4
  %inc256 = add nsw i32 %188, 1
  store i32 %inc256, i32* %j, align 4
  br label %for.cond135, !llvm.loop !120

for.end257:                                       ; preds = %for.cond135
  %189 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %sindex258 = getelementptr inbounds %struct.dfa, %struct.dfa* %189, i32 0, i32 10
  %190 = load i32, i32* %sindex258, align 8
  %inc259 = add nsw i32 %190, 1
  store i32 %inc259, i32* %sindex258, align 8
  %191 = load i32, i32* %i, align 4
  store i32 %191, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end257, %if.then78
  %192 = load i32, i32* %retval, align 4
  ret i32 %192
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @dfastate(i32 %s, %struct.dfa* %d, i32* %trans) #0 {
entry:
  %s.addr = alloca i32, align 4
  %d.addr = alloca %struct.dfa*, align 8
  %trans.addr = alloca i32*, align 8
  %grps = alloca [256 x %struct.position_set], align 16
  %labels = alloca [256 x [8 x i32]], align 16
  %ngrps = alloca i32, align 4
  %pos = alloca %struct.position, align 4
  %matches = alloca [8 x i32], align 16
  %matchesf = alloca i32, align 4
  %intersect = alloca [8 x i32], align 16
  %intersectf = alloca i32, align 4
  %leftovers = alloca [8 x i32], align 16
  %leftoversf = alloca i32, align 4
  %follows = alloca %struct.position_set, align 8
  %tmp = alloca %struct.position_set, align 8
  %state = alloca i32, align 4
  %wants_newline = alloca i32, align 4
  %state_newline = alloca i32, align 4
  %wants_letter = alloca i32, align 4
  %state_letter = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %match = alloca i32, align 4
  %label = alloca i32, align 4
  %c = alloca i32, align 4
  store i32 %s, i32* %s.addr, align 4
  store %struct.dfa* %d, %struct.dfa** %d.addr, align 8
  store i32* %trans, i32** %trans.addr, align 8
  store i32 0, i32* %ngrps, align 4
  %0 = load i32, i32* @dfastate.initialized, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.end3, label %if.then

if.then:                                          ; preds = %entry
  store i32 1, i32* @dfastate.initialized, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 256
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call = call i16** @__ctype_b_loc() #10
  %2 = load i16*, i16** %call, align 8
  %3 = load i32, i32* %i, align 4
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr inbounds i16, i16* %2, i64 %idxprom
  %4 = load i16, i16* %arrayidx, align 2
  %conv = zext i16 %4 to i32
  %and = and i32 %conv, 8
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %if.then2, label %if.end

if.then2:                                         ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  call void @setbit(i32 %5, i32* getelementptr inbounds ([8 x i32], [8 x i32]* @dfastate.letters, i64 0, i64 0))
  br label %if.end

if.end:                                           ; preds = %if.then2, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond, !llvm.loop !121

for.end:                                          ; preds = %for.cond
  call void @setbit(i32 10, i32* getelementptr inbounds ([8 x i32], [8 x i32]* @dfastate.newline, i64 0, i64 0))
  br label %if.end3

if.end3:                                          ; preds = %for.end, %entry
  %arraydecay = getelementptr inbounds [8 x i32], [8 x i32]* %matches, i64 0, i64 0
  call void @zeroset(i32* %arraydecay)
  store i32 0, i32* %i, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc307, %if.end3
  %7 = load i32, i32* %i, align 4
  %8 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %states = getelementptr inbounds %struct.dfa, %struct.dfa* %8, i32 0, i32 9
  %9 = load %struct.dfa_state*, %struct.dfa_state** %states, align 8
  %10 = load i32, i32* %s.addr, align 4
  %idxprom5 = sext i32 %10 to i64
  %arrayidx6 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %9, i64 %idxprom5
  %elems = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %arrayidx6, i32 0, i32 1
  %nelem = getelementptr inbounds %struct.position_set, %struct.position_set* %elems, i32 0, i32 1
  %11 = load i32, i32* %nelem, align 8
  %cmp7 = icmp slt i32 %7, %11
  br i1 %cmp7, label %for.body9, label %for.end309

for.body9:                                        ; preds = %for.cond4
  %12 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %states10 = getelementptr inbounds %struct.dfa, %struct.dfa* %12, i32 0, i32 9
  %13 = load %struct.dfa_state*, %struct.dfa_state** %states10, align 8
  %14 = load i32, i32* %s.addr, align 4
  %idxprom11 = sext i32 %14 to i64
  %arrayidx12 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %13, i64 %idxprom11
  %elems13 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %arrayidx12, i32 0, i32 1
  %elems14 = getelementptr inbounds %struct.position_set, %struct.position_set* %elems13, i32 0, i32 0
  %15 = load %struct.position*, %struct.position** %elems14, align 8
  %16 = load i32, i32* %i, align 4
  %idxprom15 = sext i32 %16 to i64
  %arrayidx16 = getelementptr inbounds %struct.position, %struct.position* %15, i64 %idxprom15
  %17 = bitcast %struct.position* %pos to i8*
  %18 = bitcast %struct.position* %arrayidx16 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %17, i8* align 4 %18, i64 8, i1 false)
  %19 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %tokens = getelementptr inbounds %struct.dfa, %struct.dfa* %19, i32 0, i32 3
  %20 = load i32*, i32** %tokens, align 8
  %strchr = getelementptr inbounds %struct.position, %struct.position* %pos, i32 0, i32 0
  %21 = load i32, i32* %strchr, align 4
  %idxprom17 = zext i32 %21 to i64
  %arrayidx18 = getelementptr inbounds i32, i32* %20, i64 %idxprom17
  %22 = load i32, i32* %arrayidx18, align 4
  %cmp19 = icmp sge i32 %22, 0
  br i1 %cmp19, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %for.body9
  %23 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %tokens21 = getelementptr inbounds %struct.dfa, %struct.dfa* %23, i32 0, i32 3
  %24 = load i32*, i32** %tokens21, align 8
  %strchr22 = getelementptr inbounds %struct.position, %struct.position* %pos, i32 0, i32 0
  %25 = load i32, i32* %strchr22, align 4
  %idxprom23 = zext i32 %25 to i64
  %arrayidx24 = getelementptr inbounds i32, i32* %24, i64 %idxprom23
  %26 = load i32, i32* %arrayidx24, align 4
  %cmp25 = icmp slt i32 %26, 256
  br i1 %cmp25, label %if.then27, label %if.else

if.then27:                                        ; preds = %land.lhs.true
  %27 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %tokens28 = getelementptr inbounds %struct.dfa, %struct.dfa* %27, i32 0, i32 3
  %28 = load i32*, i32** %tokens28, align 8
  %strchr29 = getelementptr inbounds %struct.position, %struct.position* %pos, i32 0, i32 0
  %29 = load i32, i32* %strchr29, align 4
  %idxprom30 = zext i32 %29 to i64
  %arrayidx31 = getelementptr inbounds i32, i32* %28, i64 %idxprom30
  %30 = load i32, i32* %arrayidx31, align 4
  %arraydecay32 = getelementptr inbounds [8 x i32], [8 x i32]* %matches, i64 0, i64 0
  call void @setbit(i32 %30, i32* %arraydecay32)
  br label %if.end50

if.else:                                          ; preds = %land.lhs.true, %for.body9
  %31 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %tokens33 = getelementptr inbounds %struct.dfa, %struct.dfa* %31, i32 0, i32 3
  %32 = load i32*, i32** %tokens33, align 8
  %strchr34 = getelementptr inbounds %struct.position, %struct.position* %pos, i32 0, i32 0
  %33 = load i32, i32* %strchr34, align 4
  %idxprom35 = zext i32 %33 to i64
  %arrayidx36 = getelementptr inbounds i32, i32* %32, i64 %idxprom35
  %34 = load i32, i32* %arrayidx36, align 4
  %cmp37 = icmp sge i32 %34, 273
  br i1 %cmp37, label %if.then39, label %if.else48

if.then39:                                        ; preds = %if.else
  %35 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %charclasses = getelementptr inbounds %struct.dfa, %struct.dfa* %35, i32 0, i32 0
  %36 = load [8 x i32]*, [8 x i32]** %charclasses, align 8
  %37 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %tokens40 = getelementptr inbounds %struct.dfa, %struct.dfa* %37, i32 0, i32 3
  %38 = load i32*, i32** %tokens40, align 8
  %strchr41 = getelementptr inbounds %struct.position, %struct.position* %pos, i32 0, i32 0
  %39 = load i32, i32* %strchr41, align 4
  %idxprom42 = zext i32 %39 to i64
  %arrayidx43 = getelementptr inbounds i32, i32* %38, i64 %idxprom42
  %40 = load i32, i32* %arrayidx43, align 4
  %sub = sub nsw i32 %40, 273
  %idxprom44 = sext i32 %sub to i64
  %arrayidx45 = getelementptr inbounds [8 x i32], [8 x i32]* %36, i64 %idxprom44
  %arraydecay46 = getelementptr inbounds [8 x i32], [8 x i32]* %arrayidx45, i64 0, i64 0
  %arraydecay47 = getelementptr inbounds [8 x i32], [8 x i32]* %matches, i64 0, i64 0
  call void @copyset(i32* %arraydecay46, i32* %arraydecay47)
  br label %if.end49

if.else48:                                        ; preds = %if.else
  br label %for.inc307

if.end49:                                         ; preds = %if.then39
  br label %if.end50

if.end50:                                         ; preds = %if.end49, %if.then27
  %constraint = getelementptr inbounds %struct.position, %struct.position* %pos, i32 0, i32 1
  %41 = load i32, i32* %constraint, align 4
  %cmp51 = icmp ne i32 %41, 255
  br i1 %cmp51, label %if.then53, label %if.end163

if.then53:                                        ; preds = %if.end50
  %constraint54 = getelementptr inbounds %struct.position, %struct.position* %pos, i32 0, i32 1
  %42 = load i32, i32* %constraint54, align 4
  %43 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %states55 = getelementptr inbounds %struct.dfa, %struct.dfa* %43, i32 0, i32 9
  %44 = load %struct.dfa_state*, %struct.dfa_state** %states55, align 8
  %45 = load i32, i32* %s.addr, align 4
  %idxprom56 = sext i32 %45 to i64
  %arrayidx57 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %44, i64 %idxprom56
  %newline = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %arrayidx57, i32 0, i32 2
  %46 = load i8, i8* %newline, align 8
  %conv58 = sext i8 %46 to i32
  %tobool59 = icmp ne i32 %conv58, 0
  %47 = zext i1 %tobool59 to i64
  %cond = select i1 %tobool59, i32 2, i32 0
  %add = add nsw i32 %cond, 1
  %add60 = add nsw i32 %add, 4
  %shl = shl i32 1, %add60
  %and61 = and i32 %42, %shl
  %tobool62 = icmp ne i32 %and61, 0
  br i1 %tobool62, label %if.end65, label %if.then63

if.then63:                                        ; preds = %if.then53
  %arraydecay64 = getelementptr inbounds [8 x i32], [8 x i32]* %matches, i64 0, i64 0
  call void @clrbit(i32 10, i32* %arraydecay64)
  br label %if.end65

if.end65:                                         ; preds = %if.then63, %if.then53
  %constraint66 = getelementptr inbounds %struct.position, %struct.position* %pos, i32 0, i32 1
  %48 = load i32, i32* %constraint66, align 4
  %49 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %states67 = getelementptr inbounds %struct.dfa, %struct.dfa* %49, i32 0, i32 9
  %50 = load %struct.dfa_state*, %struct.dfa_state** %states67, align 8
  %51 = load i32, i32* %s.addr, align 4
  %idxprom68 = sext i32 %51 to i64
  %arrayidx69 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %50, i64 %idxprom68
  %newline70 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %arrayidx69, i32 0, i32 2
  %52 = load i8, i8* %newline70, align 8
  %conv71 = sext i8 %52 to i32
  %tobool72 = icmp ne i32 %conv71, 0
  %53 = zext i1 %tobool72 to i64
  %cond73 = select i1 %tobool72, i32 2, i32 0
  %add74 = add nsw i32 %cond73, 0
  %add75 = add nsw i32 %add74, 4
  %shl76 = shl i32 1, %add75
  %and77 = and i32 %48, %shl76
  %tobool78 = icmp ne i32 %and77, 0
  br i1 %tobool78, label %if.end93, label %if.then79

if.then79:                                        ; preds = %if.end65
  store i32 0, i32* %j, align 4
  br label %for.cond80

for.cond80:                                       ; preds = %for.inc90, %if.then79
  %54 = load i32, i32* %j, align 4
  %conv81 = sext i32 %54 to i64
  %cmp82 = icmp ult i64 %conv81, 8
  br i1 %cmp82, label %for.body84, label %for.end92

for.body84:                                       ; preds = %for.cond80
  %55 = load i32, i32* %j, align 4
  %idxprom85 = sext i32 %55 to i64
  %arrayidx86 = getelementptr inbounds [8 x i32], [8 x i32]* @dfastate.newline, i64 0, i64 %idxprom85
  %56 = load i32, i32* %arrayidx86, align 4
  %57 = load i32, i32* %j, align 4
  %idxprom87 = sext i32 %57 to i64
  %arrayidx88 = getelementptr inbounds [8 x i32], [8 x i32]* %matches, i64 0, i64 %idxprom87
  %58 = load i32, i32* %arrayidx88, align 4
  %and89 = and i32 %58, %56
  store i32 %and89, i32* %arrayidx88, align 4
  br label %for.inc90

for.inc90:                                        ; preds = %for.body84
  %59 = load i32, i32* %j, align 4
  %inc91 = add nsw i32 %59, 1
  store i32 %inc91, i32* %j, align 4
  br label %for.cond80, !llvm.loop !122

for.end92:                                        ; preds = %for.cond80
  br label %if.end93

if.end93:                                         ; preds = %for.end92, %if.end65
  %constraint94 = getelementptr inbounds %struct.position, %struct.position* %pos, i32 0, i32 1
  %60 = load i32, i32* %constraint94, align 4
  %61 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %states95 = getelementptr inbounds %struct.dfa, %struct.dfa* %61, i32 0, i32 9
  %62 = load %struct.dfa_state*, %struct.dfa_state** %states95, align 8
  %63 = load i32, i32* %s.addr, align 4
  %idxprom96 = sext i32 %63 to i64
  %arrayidx97 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %62, i64 %idxprom96
  %letter = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %arrayidx97, i32 0, i32 3
  %64 = load i8, i8* %letter, align 1
  %conv98 = sext i8 %64 to i32
  %tobool99 = icmp ne i32 %conv98, 0
  %65 = zext i1 %tobool99 to i64
  %cond100 = select i1 %tobool99, i32 2, i32 0
  %add101 = add nsw i32 %cond100, 1
  %shl102 = shl i32 1, %add101
  %and103 = and i32 %60, %shl102
  %tobool104 = icmp ne i32 %and103, 0
  br i1 %tobool104, label %if.end119, label %if.then105

if.then105:                                       ; preds = %if.end93
  store i32 0, i32* %j, align 4
  br label %for.cond106

for.cond106:                                      ; preds = %for.inc116, %if.then105
  %66 = load i32, i32* %j, align 4
  %conv107 = sext i32 %66 to i64
  %cmp108 = icmp ult i64 %conv107, 8
  br i1 %cmp108, label %for.body110, label %for.end118

for.body110:                                      ; preds = %for.cond106
  %67 = load i32, i32* %j, align 4
  %idxprom111 = sext i32 %67 to i64
  %arrayidx112 = getelementptr inbounds [8 x i32], [8 x i32]* @dfastate.letters, i64 0, i64 %idxprom111
  %68 = load i32, i32* %arrayidx112, align 4
  %neg = xor i32 %68, -1
  %69 = load i32, i32* %j, align 4
  %idxprom113 = sext i32 %69 to i64
  %arrayidx114 = getelementptr inbounds [8 x i32], [8 x i32]* %matches, i64 0, i64 %idxprom113
  %70 = load i32, i32* %arrayidx114, align 4
  %and115 = and i32 %70, %neg
  store i32 %and115, i32* %arrayidx114, align 4
  br label %for.inc116

for.inc116:                                       ; preds = %for.body110
  %71 = load i32, i32* %j, align 4
  %inc117 = add nsw i32 %71, 1
  store i32 %inc117, i32* %j, align 4
  br label %for.cond106, !llvm.loop !123

for.end118:                                       ; preds = %for.cond106
  br label %if.end119

if.end119:                                        ; preds = %for.end118, %if.end93
  %constraint120 = getelementptr inbounds %struct.position, %struct.position* %pos, i32 0, i32 1
  %72 = load i32, i32* %constraint120, align 4
  %73 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %states121 = getelementptr inbounds %struct.dfa, %struct.dfa* %73, i32 0, i32 9
  %74 = load %struct.dfa_state*, %struct.dfa_state** %states121, align 8
  %75 = load i32, i32* %s.addr, align 4
  %idxprom122 = sext i32 %75 to i64
  %arrayidx123 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %74, i64 %idxprom122
  %letter124 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %arrayidx123, i32 0, i32 3
  %76 = load i8, i8* %letter124, align 1
  %conv125 = sext i8 %76 to i32
  %tobool126 = icmp ne i32 %conv125, 0
  %77 = zext i1 %tobool126 to i64
  %cond127 = select i1 %tobool126, i32 2, i32 0
  %add128 = add nsw i32 %cond127, 0
  %shl129 = shl i32 1, %add128
  %and130 = and i32 %72, %shl129
  %tobool131 = icmp ne i32 %and130, 0
  br i1 %tobool131, label %if.end146, label %if.then132

if.then132:                                       ; preds = %if.end119
  store i32 0, i32* %j, align 4
  br label %for.cond133

for.cond133:                                      ; preds = %for.inc143, %if.then132
  %78 = load i32, i32* %j, align 4
  %conv134 = sext i32 %78 to i64
  %cmp135 = icmp ult i64 %conv134, 8
  br i1 %cmp135, label %for.body137, label %for.end145

for.body137:                                      ; preds = %for.cond133
  %79 = load i32, i32* %j, align 4
  %idxprom138 = sext i32 %79 to i64
  %arrayidx139 = getelementptr inbounds [8 x i32], [8 x i32]* @dfastate.letters, i64 0, i64 %idxprom138
  %80 = load i32, i32* %arrayidx139, align 4
  %81 = load i32, i32* %j, align 4
  %idxprom140 = sext i32 %81 to i64
  %arrayidx141 = getelementptr inbounds [8 x i32], [8 x i32]* %matches, i64 0, i64 %idxprom140
  %82 = load i32, i32* %arrayidx141, align 4
  %and142 = and i32 %82, %80
  store i32 %and142, i32* %arrayidx141, align 4
  br label %for.inc143

for.inc143:                                       ; preds = %for.body137
  %83 = load i32, i32* %j, align 4
  %inc144 = add nsw i32 %83, 1
  store i32 %inc144, i32* %j, align 4
  br label %for.cond133, !llvm.loop !124

for.end145:                                       ; preds = %for.cond133
  br label %if.end146

if.end146:                                        ; preds = %for.end145, %if.end119
  store i32 0, i32* %j, align 4
  br label %for.cond147

for.cond147:                                      ; preds = %for.inc155, %if.end146
  %84 = load i32, i32* %j, align 4
  %conv148 = sext i32 %84 to i64
  %cmp149 = icmp ult i64 %conv148, 8
  br i1 %cmp149, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond147
  %85 = load i32, i32* %j, align 4
  %idxprom151 = sext i32 %85 to i64
  %arrayidx152 = getelementptr inbounds [8 x i32], [8 x i32]* %matches, i64 0, i64 %idxprom151
  %86 = load i32, i32* %arrayidx152, align 4
  %tobool153 = icmp ne i32 %86, 0
  %lnot = xor i1 %tobool153, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond147
  %87 = phi i1 [ false, %for.cond147 ], [ %lnot, %land.rhs ]
  br i1 %87, label %for.body154, label %for.end157

for.body154:                                      ; preds = %land.end
  br label %for.inc155

for.inc155:                                       ; preds = %for.body154
  %88 = load i32, i32* %j, align 4
  %inc156 = add nsw i32 %88, 1
  store i32 %inc156, i32* %j, align 4
  br label %for.cond147, !llvm.loop !125

for.end157:                                       ; preds = %land.end
  %89 = load i32, i32* %j, align 4
  %conv158 = sext i32 %89 to i64
  %cmp159 = icmp eq i64 %conv158, 8
  br i1 %cmp159, label %if.then161, label %if.end162

if.then161:                                       ; preds = %for.end157
  br label %for.inc307

if.end162:                                        ; preds = %for.end157
  br label %if.end163

if.end163:                                        ; preds = %if.end162, %if.end50
  store i32 0, i32* %j, align 4
  br label %for.cond164

for.cond164:                                      ; preds = %for.inc280, %if.end163
  %90 = load i32, i32* %j, align 4
  %91 = load i32, i32* %ngrps, align 4
  %cmp165 = icmp slt i32 %90, %91
  br i1 %cmp165, label %for.body167, label %for.end282

for.body167:                                      ; preds = %for.cond164
  %92 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %tokens168 = getelementptr inbounds %struct.dfa, %struct.dfa* %92, i32 0, i32 3
  %93 = load i32*, i32** %tokens168, align 8
  %strchr169 = getelementptr inbounds %struct.position, %struct.position* %pos, i32 0, i32 0
  %94 = load i32, i32* %strchr169, align 4
  %idxprom170 = zext i32 %94 to i64
  %arrayidx171 = getelementptr inbounds i32, i32* %93, i64 %idxprom170
  %95 = load i32, i32* %arrayidx171, align 4
  %cmp172 = icmp sge i32 %95, 0
  br i1 %cmp172, label %land.lhs.true174, label %if.end192

land.lhs.true174:                                 ; preds = %for.body167
  %96 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %tokens175 = getelementptr inbounds %struct.dfa, %struct.dfa* %96, i32 0, i32 3
  %97 = load i32*, i32** %tokens175, align 8
  %strchr176 = getelementptr inbounds %struct.position, %struct.position* %pos, i32 0, i32 0
  %98 = load i32, i32* %strchr176, align 4
  %idxprom177 = zext i32 %98 to i64
  %arrayidx178 = getelementptr inbounds i32, i32* %97, i64 %idxprom177
  %99 = load i32, i32* %arrayidx178, align 4
  %cmp179 = icmp slt i32 %99, 256
  br i1 %cmp179, label %land.lhs.true181, label %if.end192

land.lhs.true181:                                 ; preds = %land.lhs.true174
  %100 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %tokens182 = getelementptr inbounds %struct.dfa, %struct.dfa* %100, i32 0, i32 3
  %101 = load i32*, i32** %tokens182, align 8
  %strchr183 = getelementptr inbounds %struct.position, %struct.position* %pos, i32 0, i32 0
  %102 = load i32, i32* %strchr183, align 4
  %idxprom184 = zext i32 %102 to i64
  %arrayidx185 = getelementptr inbounds i32, i32* %101, i64 %idxprom184
  %103 = load i32, i32* %arrayidx185, align 4
  %104 = load i32, i32* %j, align 4
  %idxprom186 = sext i32 %104 to i64
  %arrayidx187 = getelementptr inbounds [256 x [8 x i32]], [256 x [8 x i32]]* %labels, i64 0, i64 %idxprom186
  %arraydecay188 = getelementptr inbounds [8 x i32], [8 x i32]* %arrayidx187, i64 0, i64 0
  %call189 = call i32 @tstbit(i32 %103, i32* %arraydecay188)
  %tobool190 = icmp ne i32 %call189, 0
  br i1 %tobool190, label %if.end192, label %if.then191

if.then191:                                       ; preds = %land.lhs.true181
  br label %for.inc280

if.end192:                                        ; preds = %land.lhs.true181, %land.lhs.true174, %for.body167
  store i32 0, i32* %intersectf, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond193

for.cond193:                                      ; preds = %for.inc209, %if.end192
  %105 = load i32, i32* %k, align 4
  %conv194 = sext i32 %105 to i64
  %cmp195 = icmp ult i64 %conv194, 8
  br i1 %cmp195, label %for.body197, label %for.end211

for.body197:                                      ; preds = %for.cond193
  %106 = load i32, i32* %k, align 4
  %idxprom198 = sext i32 %106 to i64
  %arrayidx199 = getelementptr inbounds [8 x i32], [8 x i32]* %matches, i64 0, i64 %idxprom198
  %107 = load i32, i32* %arrayidx199, align 4
  %108 = load i32, i32* %j, align 4
  %idxprom200 = sext i32 %108 to i64
  %arrayidx201 = getelementptr inbounds [256 x [8 x i32]], [256 x [8 x i32]]* %labels, i64 0, i64 %idxprom200
  %109 = load i32, i32* %k, align 4
  %idxprom202 = sext i32 %109 to i64
  %arrayidx203 = getelementptr inbounds [8 x i32], [8 x i32]* %arrayidx201, i64 0, i64 %idxprom202
  %110 = load i32, i32* %arrayidx203, align 4
  %and204 = and i32 %107, %110
  %111 = load i32, i32* %k, align 4
  %idxprom205 = sext i32 %111 to i64
  %arrayidx206 = getelementptr inbounds [8 x i32], [8 x i32]* %intersect, i64 0, i64 %idxprom205
  store i32 %and204, i32* %arrayidx206, align 4
  %tobool207 = icmp ne i32 %and204, 0
  br i1 %tobool207, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body197
  store i32 1, i32* %intersectf, align 4
  br label %cond.end

cond.false:                                       ; preds = %for.body197
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond208 = phi i32 [ 1, %cond.true ], [ 0, %cond.false ]
  br label %for.inc209

for.inc209:                                       ; preds = %cond.end
  %112 = load i32, i32* %k, align 4
  %inc210 = add nsw i32 %112, 1
  store i32 %inc210, i32* %k, align 4
  br label %for.cond193, !llvm.loop !126

for.end211:                                       ; preds = %for.cond193
  %113 = load i32, i32* %intersectf, align 4
  %tobool212 = icmp ne i32 %113, 0
  br i1 %tobool212, label %if.end214, label %if.then213

if.then213:                                       ; preds = %for.end211
  br label %for.inc280

if.end214:                                        ; preds = %for.end211
  store i32 0, i32* %matchesf, align 4
  store i32 0, i32* %leftoversf, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond215

for.cond215:                                      ; preds = %for.inc244, %if.end214
  %114 = load i32, i32* %k, align 4
  %conv216 = sext i32 %114 to i64
  %cmp217 = icmp ult i64 %conv216, 8
  br i1 %cmp217, label %for.body219, label %for.end246

for.body219:                                      ; preds = %for.cond215
  %115 = load i32, i32* %k, align 4
  %idxprom220 = sext i32 %115 to i64
  %arrayidx221 = getelementptr inbounds [8 x i32], [8 x i32]* %matches, i64 0, i64 %idxprom220
  %116 = load i32, i32* %arrayidx221, align 4
  store i32 %116, i32* %match, align 4
  %117 = load i32, i32* %j, align 4
  %idxprom222 = sext i32 %117 to i64
  %arrayidx223 = getelementptr inbounds [256 x [8 x i32]], [256 x [8 x i32]]* %labels, i64 0, i64 %idxprom222
  %118 = load i32, i32* %k, align 4
  %idxprom224 = sext i32 %118 to i64
  %arrayidx225 = getelementptr inbounds [8 x i32], [8 x i32]* %arrayidx223, i64 0, i64 %idxprom224
  %119 = load i32, i32* %arrayidx225, align 4
  store i32 %119, i32* %label, align 4
  %120 = load i32, i32* %match, align 4
  %neg226 = xor i32 %120, -1
  %121 = load i32, i32* %label, align 4
  %and227 = and i32 %neg226, %121
  %122 = load i32, i32* %k, align 4
  %idxprom228 = sext i32 %122 to i64
  %arrayidx229 = getelementptr inbounds [8 x i32], [8 x i32]* %leftovers, i64 0, i64 %idxprom228
  store i32 %and227, i32* %arrayidx229, align 4
  %tobool230 = icmp ne i32 %and227, 0
  br i1 %tobool230, label %cond.true231, label %cond.false232

cond.true231:                                     ; preds = %for.body219
  store i32 1, i32* %leftoversf, align 4
  br label %cond.end233

cond.false232:                                    ; preds = %for.body219
  br label %cond.end233

cond.end233:                                      ; preds = %cond.false232, %cond.true231
  %cond234 = phi i32 [ 1, %cond.true231 ], [ 0, %cond.false232 ]
  %123 = load i32, i32* %match, align 4
  %124 = load i32, i32* %label, align 4
  %neg235 = xor i32 %124, -1
  %and236 = and i32 %123, %neg235
  %125 = load i32, i32* %k, align 4
  %idxprom237 = sext i32 %125 to i64
  %arrayidx238 = getelementptr inbounds [8 x i32], [8 x i32]* %matches, i64 0, i64 %idxprom237
  store i32 %and236, i32* %arrayidx238, align 4
  %tobool239 = icmp ne i32 %and236, 0
  br i1 %tobool239, label %cond.true240, label %cond.false241

cond.true240:                                     ; preds = %cond.end233
  store i32 1, i32* %matchesf, align 4
  br label %cond.end242

cond.false241:                                    ; preds = %cond.end233
  br label %cond.end242

cond.end242:                                      ; preds = %cond.false241, %cond.true240
  %cond243 = phi i32 [ 1, %cond.true240 ], [ 0, %cond.false241 ]
  br label %for.inc244

for.inc244:                                       ; preds = %cond.end242
  %126 = load i32, i32* %k, align 4
  %inc245 = add nsw i32 %126, 1
  store i32 %inc245, i32* %k, align 4
  br label %for.cond215, !llvm.loop !127

for.end246:                                       ; preds = %for.cond215
  %127 = load i32, i32* %leftoversf, align 4
  %tobool247 = icmp ne i32 %127, 0
  br i1 %tobool247, label %if.then248, label %if.end267

if.then248:                                       ; preds = %for.end246
  %arraydecay249 = getelementptr inbounds [8 x i32], [8 x i32]* %leftovers, i64 0, i64 0
  %128 = load i32, i32* %ngrps, align 4
  %idxprom250 = sext i32 %128 to i64
  %arrayidx251 = getelementptr inbounds [256 x [8 x i32]], [256 x [8 x i32]]* %labels, i64 0, i64 %idxprom250
  %arraydecay252 = getelementptr inbounds [8 x i32], [8 x i32]* %arrayidx251, i64 0, i64 0
  call void @copyset(i32* %arraydecay249, i32* %arraydecay252)
  %arraydecay253 = getelementptr inbounds [8 x i32], [8 x i32]* %intersect, i64 0, i64 0
  %129 = load i32, i32* %j, align 4
  %idxprom254 = sext i32 %129 to i64
  %arrayidx255 = getelementptr inbounds [256 x [8 x i32]], [256 x [8 x i32]]* %labels, i64 0, i64 %idxprom254
  %arraydecay256 = getelementptr inbounds [8 x i32], [8 x i32]* %arrayidx255, i64 0, i64 0
  call void @copyset(i32* %arraydecay253, i32* %arraydecay256)
  %130 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %nleaves = getelementptr inbounds %struct.dfa, %struct.dfa* %130, i32 0, i32 7
  %131 = load i32, i32* %nleaves, align 4
  %conv257 = sext i32 %131 to i64
  %mul = mul i64 %conv257, 8
  %call258 = call i8* @xmalloc_1(i64 %mul)
  %132 = bitcast i8* %call258 to %struct.position*
  %133 = load i32, i32* %ngrps, align 4
  %idxprom259 = sext i32 %133 to i64
  %arrayidx260 = getelementptr inbounds [256 x %struct.position_set], [256 x %struct.position_set]* %grps, i64 0, i64 %idxprom259
  %elems261 = getelementptr inbounds %struct.position_set, %struct.position_set* %arrayidx260, i32 0, i32 0
  store %struct.position* %132, %struct.position** %elems261, align 16
  %134 = load i32, i32* %j, align 4
  %idxprom262 = sext i32 %134 to i64
  %arrayidx263 = getelementptr inbounds [256 x %struct.position_set], [256 x %struct.position_set]* %grps, i64 0, i64 %idxprom262
  %135 = load i32, i32* %ngrps, align 4
  %idxprom264 = sext i32 %135 to i64
  %arrayidx265 = getelementptr inbounds [256 x %struct.position_set], [256 x %struct.position_set]* %grps, i64 0, i64 %idxprom264
  call void @copy(%struct.position_set* %arrayidx263, %struct.position_set* %arrayidx265)
  %136 = load i32, i32* %ngrps, align 4
  %inc266 = add nsw i32 %136, 1
  store i32 %inc266, i32* %ngrps, align 4
  br label %if.end267

if.end267:                                        ; preds = %if.then248, %for.end246
  %137 = load i32, i32* %j, align 4
  %idxprom268 = sext i32 %137 to i64
  %arrayidx269 = getelementptr inbounds [256 x %struct.position_set], [256 x %struct.position_set]* %grps, i64 0, i64 %idxprom268
  %elems270 = getelementptr inbounds %struct.position_set, %struct.position_set* %arrayidx269, i32 0, i32 0
  %138 = load %struct.position*, %struct.position** %elems270, align 16
  %139 = load i32, i32* %j, align 4
  %idxprom271 = sext i32 %139 to i64
  %arrayidx272 = getelementptr inbounds [256 x %struct.position_set], [256 x %struct.position_set]* %grps, i64 0, i64 %idxprom271
  %nelem273 = getelementptr inbounds %struct.position_set, %struct.position_set* %arrayidx272, i32 0, i32 1
  %140 = load i32, i32* %nelem273, align 8
  %inc274 = add nsw i32 %140, 1
  store i32 %inc274, i32* %nelem273, align 8
  %idxprom275 = sext i32 %140 to i64
  %arrayidx276 = getelementptr inbounds %struct.position, %struct.position* %138, i64 %idxprom275
  %141 = bitcast %struct.position* %arrayidx276 to i8*
  %142 = bitcast %struct.position* %pos to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %141, i8* align 4 %142, i64 8, i1 false)
  %143 = load i32, i32* %matchesf, align 4
  %tobool277 = icmp ne i32 %143, 0
  br i1 %tobool277, label %if.end279, label %if.then278

if.then278:                                       ; preds = %if.end267
  br label %for.end282

if.end279:                                        ; preds = %if.end267
  br label %for.inc280

for.inc280:                                       ; preds = %if.end279, %if.then213, %if.then191
  %144 = load i32, i32* %j, align 4
  %inc281 = add nsw i32 %144, 1
  store i32 %inc281, i32* %j, align 4
  br label %for.cond164, !llvm.loop !128

for.end282:                                       ; preds = %if.then278, %for.cond164
  %145 = load i32, i32* %j, align 4
  %146 = load i32, i32* %ngrps, align 4
  %cmp283 = icmp eq i32 %145, %146
  br i1 %cmp283, label %if.then285, label %if.end306

if.then285:                                       ; preds = %for.end282
  %arraydecay286 = getelementptr inbounds [8 x i32], [8 x i32]* %matches, i64 0, i64 0
  %147 = load i32, i32* %ngrps, align 4
  %idxprom287 = sext i32 %147 to i64
  %arrayidx288 = getelementptr inbounds [256 x [8 x i32]], [256 x [8 x i32]]* %labels, i64 0, i64 %idxprom287
  %arraydecay289 = getelementptr inbounds [8 x i32], [8 x i32]* %arrayidx288, i64 0, i64 0
  call void @copyset(i32* %arraydecay286, i32* %arraydecay289)
  %arraydecay290 = getelementptr inbounds [8 x i32], [8 x i32]* %matches, i64 0, i64 0
  call void @zeroset(i32* %arraydecay290)
  %148 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %nleaves291 = getelementptr inbounds %struct.dfa, %struct.dfa* %148, i32 0, i32 7
  %149 = load i32, i32* %nleaves291, align 4
  %conv292 = sext i32 %149 to i64
  %mul293 = mul i64 %conv292, 8
  %call294 = call i8* @xmalloc_1(i64 %mul293)
  %150 = bitcast i8* %call294 to %struct.position*
  %151 = load i32, i32* %ngrps, align 4
  %idxprom295 = sext i32 %151 to i64
  %arrayidx296 = getelementptr inbounds [256 x %struct.position_set], [256 x %struct.position_set]* %grps, i64 0, i64 %idxprom295
  %elems297 = getelementptr inbounds %struct.position_set, %struct.position_set* %arrayidx296, i32 0, i32 0
  store %struct.position* %150, %struct.position** %elems297, align 16
  %152 = load i32, i32* %ngrps, align 4
  %idxprom298 = sext i32 %152 to i64
  %arrayidx299 = getelementptr inbounds [256 x %struct.position_set], [256 x %struct.position_set]* %grps, i64 0, i64 %idxprom298
  %nelem300 = getelementptr inbounds %struct.position_set, %struct.position_set* %arrayidx299, i32 0, i32 1
  store i32 1, i32* %nelem300, align 8
  %153 = load i32, i32* %ngrps, align 4
  %idxprom301 = sext i32 %153 to i64
  %arrayidx302 = getelementptr inbounds [256 x %struct.position_set], [256 x %struct.position_set]* %grps, i64 0, i64 %idxprom301
  %elems303 = getelementptr inbounds %struct.position_set, %struct.position_set* %arrayidx302, i32 0, i32 0
  %154 = load %struct.position*, %struct.position** %elems303, align 16
  %arrayidx304 = getelementptr inbounds %struct.position, %struct.position* %154, i64 0
  %155 = bitcast %struct.position* %arrayidx304 to i8*
  %156 = bitcast %struct.position* %pos to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %155, i8* align 4 %156, i64 8, i1 false)
  %157 = load i32, i32* %ngrps, align 4
  %inc305 = add nsw i32 %157, 1
  store i32 %inc305, i32* %ngrps, align 4
  br label %if.end306

if.end306:                                        ; preds = %if.then285, %for.end282
  br label %for.inc307

for.inc307:                                       ; preds = %if.end306, %if.then161, %if.else48
  %158 = load i32, i32* %i, align 4
  %inc308 = add nsw i32 %158, 1
  store i32 %inc308, i32* %i, align 4
  br label %for.cond4, !llvm.loop !129

for.end309:                                       ; preds = %for.cond4
  %159 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %nleaves310 = getelementptr inbounds %struct.dfa, %struct.dfa* %159, i32 0, i32 7
  %160 = load i32, i32* %nleaves310, align 4
  %conv311 = sext i32 %160 to i64
  %mul312 = mul i64 %conv311, 8
  %call313 = call i8* @xmalloc_1(i64 %mul312)
  %161 = bitcast i8* %call313 to %struct.position*
  %elems314 = getelementptr inbounds %struct.position_set, %struct.position_set* %follows, i32 0, i32 0
  store %struct.position* %161, %struct.position** %elems314, align 8
  %162 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %nleaves315 = getelementptr inbounds %struct.dfa, %struct.dfa* %162, i32 0, i32 7
  %163 = load i32, i32* %nleaves315, align 4
  %conv316 = sext i32 %163 to i64
  %mul317 = mul i64 %conv316, 8
  %call318 = call i8* @xmalloc_1(i64 %mul317)
  %164 = bitcast i8* %call318 to %struct.position*
  %elems319 = getelementptr inbounds %struct.position_set, %struct.position_set* %tmp, i32 0, i32 0
  store %struct.position* %164, %struct.position** %elems319, align 8
  %165 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %searchflag = getelementptr inbounds %struct.dfa, %struct.dfa* %165, i32 0, i32 13
  %166 = load i32, i32* %searchflag, align 8
  %tobool320 = icmp ne i32 %166, 0
  br i1 %tobool320, label %if.then321, label %if.else415

if.then321:                                       ; preds = %for.end309
  store i32 0, i32* %wants_newline, align 4
  store i32 0, i32* %wants_letter, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond322

for.cond322:                                      ; preds = %for.inc371, %if.then321
  %167 = load i32, i32* %i, align 4
  %168 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %states323 = getelementptr inbounds %struct.dfa, %struct.dfa* %168, i32 0, i32 9
  %169 = load %struct.dfa_state*, %struct.dfa_state** %states323, align 8
  %arrayidx324 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %169, i64 0
  %elems325 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %arrayidx324, i32 0, i32 1
  %nelem326 = getelementptr inbounds %struct.position_set, %struct.position_set* %elems325, i32 0, i32 1
  %170 = load i32, i32* %nelem326, align 8
  %cmp327 = icmp slt i32 %167, %170
  br i1 %cmp327, label %for.body329, label %for.end373

for.body329:                                      ; preds = %for.cond322
  %171 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %states330 = getelementptr inbounds %struct.dfa, %struct.dfa* %171, i32 0, i32 9
  %172 = load %struct.dfa_state*, %struct.dfa_state** %states330, align 8
  %arrayidx331 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %172, i64 0
  %elems332 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %arrayidx331, i32 0, i32 1
  %elems333 = getelementptr inbounds %struct.position_set, %struct.position_set* %elems332, i32 0, i32 0
  %173 = load %struct.position*, %struct.position** %elems333, align 8
  %174 = load i32, i32* %i, align 4
  %idxprom334 = sext i32 %174 to i64
  %arrayidx335 = getelementptr inbounds %struct.position, %struct.position* %173, i64 %idxprom334
  %constraint336 = getelementptr inbounds %struct.position, %struct.position* %arrayidx335, i32 0, i32 1
  %175 = load i32, i32* %constraint336, align 4
  %and337 = and i32 %175, 192
  %shr = lshr i32 %and337, 2
  %176 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %states338 = getelementptr inbounds %struct.dfa, %struct.dfa* %176, i32 0, i32 9
  %177 = load %struct.dfa_state*, %struct.dfa_state** %states338, align 8
  %arrayidx339 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %177, i64 0
  %elems340 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %arrayidx339, i32 0, i32 1
  %elems341 = getelementptr inbounds %struct.position_set, %struct.position_set* %elems340, i32 0, i32 0
  %178 = load %struct.position*, %struct.position** %elems341, align 8
  %179 = load i32, i32* %i, align 4
  %idxprom342 = sext i32 %179 to i64
  %arrayidx343 = getelementptr inbounds %struct.position, %struct.position* %178, i64 %idxprom342
  %constraint344 = getelementptr inbounds %struct.position, %struct.position* %arrayidx343, i32 0, i32 1
  %180 = load i32, i32* %constraint344, align 4
  %and345 = and i32 %180, 48
  %cmp346 = icmp ne i32 %shr, %and345
  br i1 %cmp346, label %if.then348, label %if.end349

if.then348:                                       ; preds = %for.body329
  store i32 1, i32* %wants_newline, align 4
  br label %if.end349

if.end349:                                        ; preds = %if.then348, %for.body329
  %181 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %states350 = getelementptr inbounds %struct.dfa, %struct.dfa* %181, i32 0, i32 9
  %182 = load %struct.dfa_state*, %struct.dfa_state** %states350, align 8
  %arrayidx351 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %182, i64 0
  %elems352 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %arrayidx351, i32 0, i32 1
  %elems353 = getelementptr inbounds %struct.position_set, %struct.position_set* %elems352, i32 0, i32 0
  %183 = load %struct.position*, %struct.position** %elems353, align 8
  %184 = load i32, i32* %i, align 4
  %idxprom354 = sext i32 %184 to i64
  %arrayidx355 = getelementptr inbounds %struct.position, %struct.position* %183, i64 %idxprom354
  %constraint356 = getelementptr inbounds %struct.position, %struct.position* %arrayidx355, i32 0, i32 1
  %185 = load i32, i32* %constraint356, align 4
  %and357 = and i32 %185, 12
  %shr358 = lshr i32 %and357, 2
  %186 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %states359 = getelementptr inbounds %struct.dfa, %struct.dfa* %186, i32 0, i32 9
  %187 = load %struct.dfa_state*, %struct.dfa_state** %states359, align 8
  %arrayidx360 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %187, i64 0
  %elems361 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %arrayidx360, i32 0, i32 1
  %elems362 = getelementptr inbounds %struct.position_set, %struct.position_set* %elems361, i32 0, i32 0
  %188 = load %struct.position*, %struct.position** %elems362, align 8
  %189 = load i32, i32* %i, align 4
  %idxprom363 = sext i32 %189 to i64
  %arrayidx364 = getelementptr inbounds %struct.position, %struct.position* %188, i64 %idxprom363
  %constraint365 = getelementptr inbounds %struct.position, %struct.position* %arrayidx364, i32 0, i32 1
  %190 = load i32, i32* %constraint365, align 4
  %and366 = and i32 %190, 3
  %cmp367 = icmp ne i32 %shr358, %and366
  br i1 %cmp367, label %if.then369, label %if.end370

if.then369:                                       ; preds = %if.end349
  store i32 1, i32* %wants_letter, align 4
  br label %if.end370

if.end370:                                        ; preds = %if.then369, %if.end349
  br label %for.inc371

for.inc371:                                       ; preds = %if.end370
  %191 = load i32, i32* %i, align 4
  %inc372 = add nsw i32 %191, 1
  store i32 %inc372, i32* %i, align 4
  br label %for.cond322, !llvm.loop !130

for.end373:                                       ; preds = %for.cond322
  %192 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %states374 = getelementptr inbounds %struct.dfa, %struct.dfa* %192, i32 0, i32 9
  %193 = load %struct.dfa_state*, %struct.dfa_state** %states374, align 8
  %arrayidx375 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %193, i64 0
  %elems376 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %arrayidx375, i32 0, i32 1
  call void @copy(%struct.position_set* %elems376, %struct.position_set* %follows)
  %194 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %call377 = call i32 @state_index(%struct.dfa* %194, %struct.position_set* %follows, i32 0, i32 0)
  store i32 %call377, i32* %state, align 4
  %195 = load i32, i32* %wants_newline, align 4
  %tobool378 = icmp ne i32 %195, 0
  br i1 %tobool378, label %if.then379, label %if.else381

if.then379:                                       ; preds = %for.end373
  %196 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %call380 = call i32 @state_index(%struct.dfa* %196, %struct.position_set* %follows, i32 1, i32 0)
  store i32 %call380, i32* %state_newline, align 4
  br label %if.end382

if.else381:                                       ; preds = %for.end373
  %197 = load i32, i32* %state, align 4
  store i32 %197, i32* %state_newline, align 4
  br label %if.end382

if.end382:                                        ; preds = %if.else381, %if.then379
  %198 = load i32, i32* %wants_letter, align 4
  %tobool383 = icmp ne i32 %198, 0
  br i1 %tobool383, label %if.then384, label %if.else386

if.then384:                                       ; preds = %if.end382
  %199 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %call385 = call i32 @state_index(%struct.dfa* %199, %struct.position_set* %follows, i32 0, i32 1)
  store i32 %call385, i32* %state_letter, align 4
  br label %if.end387

if.else386:                                       ; preds = %if.end382
  %200 = load i32, i32* %state, align 4
  store i32 %200, i32* %state_letter, align 4
  br label %if.end387

if.end387:                                        ; preds = %if.else386, %if.then384
  store i32 0, i32* %i, align 4
  br label %for.cond388

for.cond388:                                      ; preds = %for.inc412, %if.end387
  %201 = load i32, i32* %i, align 4
  %cmp389 = icmp slt i32 %201, 256
  br i1 %cmp389, label %for.body391, label %for.end414

for.body391:                                      ; preds = %for.cond388
  %202 = load i32, i32* %i, align 4
  %cmp392 = icmp eq i32 %202, 10
  br i1 %cmp392, label %if.then394, label %if.else397

if.then394:                                       ; preds = %for.body391
  %203 = load i32, i32* %state_newline, align 4
  %204 = load i32*, i32** %trans.addr, align 8
  %205 = load i32, i32* %i, align 4
  %idxprom395 = sext i32 %205 to i64
  %arrayidx396 = getelementptr inbounds i32, i32* %204, i64 %idxprom395
  store i32 %203, i32* %arrayidx396, align 4
  br label %if.end411

if.else397:                                       ; preds = %for.body391
  %call398 = call i16** @__ctype_b_loc() #10
  %206 = load i16*, i16** %call398, align 8
  %207 = load i32, i32* %i, align 4
  %idxprom399 = sext i32 %207 to i64
  %arrayidx400 = getelementptr inbounds i16, i16* %206, i64 %idxprom399
  %208 = load i16, i16* %arrayidx400, align 2
  %conv401 = zext i16 %208 to i32
  %and402 = and i32 %conv401, 8
  %tobool403 = icmp ne i32 %and402, 0
  br i1 %tobool403, label %if.then404, label %if.else407

if.then404:                                       ; preds = %if.else397
  %209 = load i32, i32* %state_letter, align 4
  %210 = load i32*, i32** %trans.addr, align 8
  %211 = load i32, i32* %i, align 4
  %idxprom405 = sext i32 %211 to i64
  %arrayidx406 = getelementptr inbounds i32, i32* %210, i64 %idxprom405
  store i32 %209, i32* %arrayidx406, align 4
  br label %if.end410

if.else407:                                       ; preds = %if.else397
  %212 = load i32, i32* %state, align 4
  %213 = load i32*, i32** %trans.addr, align 8
  %214 = load i32, i32* %i, align 4
  %idxprom408 = sext i32 %214 to i64
  %arrayidx409 = getelementptr inbounds i32, i32* %213, i64 %idxprom408
  store i32 %212, i32* %arrayidx409, align 4
  br label %if.end410

if.end410:                                        ; preds = %if.else407, %if.then404
  br label %if.end411

if.end411:                                        ; preds = %if.end410, %if.then394
  br label %for.inc412

for.inc412:                                       ; preds = %if.end411
  %215 = load i32, i32* %i, align 4
  %inc413 = add nsw i32 %215, 1
  store i32 %inc413, i32* %i, align 4
  br label %for.cond388, !llvm.loop !131

for.end414:                                       ; preds = %for.cond388
  br label %if.end425

if.else415:                                       ; preds = %for.end309
  store i32 0, i32* %i, align 4
  br label %for.cond416

for.cond416:                                      ; preds = %for.inc422, %if.else415
  %216 = load i32, i32* %i, align 4
  %cmp417 = icmp slt i32 %216, 256
  br i1 %cmp417, label %for.body419, label %for.end424

for.body419:                                      ; preds = %for.cond416
  %217 = load i32*, i32** %trans.addr, align 8
  %218 = load i32, i32* %i, align 4
  %idxprom420 = sext i32 %218 to i64
  %arrayidx421 = getelementptr inbounds i32, i32* %217, i64 %idxprom420
  store i32 -1, i32* %arrayidx421, align 4
  br label %for.inc422

for.inc422:                                       ; preds = %for.body419
  %219 = load i32, i32* %i, align 4
  %inc423 = add nsw i32 %219, 1
  store i32 %inc423, i32* %i, align 4
  br label %for.cond416, !llvm.loop !132

for.end424:                                       ; preds = %for.cond416
  br label %if.end425

if.end425:                                        ; preds = %for.end424, %for.end414
  store i32 0, i32* %i, align 4
  br label %for.cond426

for.cond426:                                      ; preds = %for.inc632, %if.end425
  %220 = load i32, i32* %i, align 4
  %221 = load i32, i32* %ngrps, align 4
  %cmp427 = icmp slt i32 %220, %221
  br i1 %cmp427, label %for.body429, label %for.end634

for.body429:                                      ; preds = %for.cond426
  %nelem430 = getelementptr inbounds %struct.position_set, %struct.position_set* %follows, i32 0, i32 1
  store i32 0, i32* %nelem430, align 8
  store i32 0, i32* %j, align 4
  br label %for.cond431

for.cond431:                                      ; preds = %for.inc467, %for.body429
  %222 = load i32, i32* %j, align 4
  %223 = load i32, i32* %i, align 4
  %idxprom432 = sext i32 %223 to i64
  %arrayidx433 = getelementptr inbounds [256 x %struct.position_set], [256 x %struct.position_set]* %grps, i64 0, i64 %idxprom432
  %nelem434 = getelementptr inbounds %struct.position_set, %struct.position_set* %arrayidx433, i32 0, i32 1
  %224 = load i32, i32* %nelem434, align 8
  %cmp435 = icmp slt i32 %222, %224
  br i1 %cmp435, label %for.body437, label %for.end469

for.body437:                                      ; preds = %for.cond431
  store i32 0, i32* %k, align 4
  br label %for.cond438

for.cond438:                                      ; preds = %for.inc464, %for.body437
  %225 = load i32, i32* %k, align 4
  %226 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %follows439 = getelementptr inbounds %struct.dfa, %struct.dfa* %226, i32 0, i32 12
  %227 = load %struct.position_set*, %struct.position_set** %follows439, align 8
  %228 = load i32, i32* %i, align 4
  %idxprom440 = sext i32 %228 to i64
  %arrayidx441 = getelementptr inbounds [256 x %struct.position_set], [256 x %struct.position_set]* %grps, i64 0, i64 %idxprom440
  %elems442 = getelementptr inbounds %struct.position_set, %struct.position_set* %arrayidx441, i32 0, i32 0
  %229 = load %struct.position*, %struct.position** %elems442, align 16
  %230 = load i32, i32* %j, align 4
  %idxprom443 = sext i32 %230 to i64
  %arrayidx444 = getelementptr inbounds %struct.position, %struct.position* %229, i64 %idxprom443
  %strchr445 = getelementptr inbounds %struct.position, %struct.position* %arrayidx444, i32 0, i32 0
  %231 = load i32, i32* %strchr445, align 4
  %idxprom446 = zext i32 %231 to i64
  %arrayidx447 = getelementptr inbounds %struct.position_set, %struct.position_set* %227, i64 %idxprom446
  %nelem448 = getelementptr inbounds %struct.position_set, %struct.position_set* %arrayidx447, i32 0, i32 1
  %232 = load i32, i32* %nelem448, align 8
  %cmp449 = icmp slt i32 %225, %232
  br i1 %cmp449, label %for.body451, label %for.end466

for.body451:                                      ; preds = %for.cond438
  %233 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %follows452 = getelementptr inbounds %struct.dfa, %struct.dfa* %233, i32 0, i32 12
  %234 = load %struct.position_set*, %struct.position_set** %follows452, align 8
  %235 = load i32, i32* %i, align 4
  %idxprom453 = sext i32 %235 to i64
  %arrayidx454 = getelementptr inbounds [256 x %struct.position_set], [256 x %struct.position_set]* %grps, i64 0, i64 %idxprom453
  %elems455 = getelementptr inbounds %struct.position_set, %struct.position_set* %arrayidx454, i32 0, i32 0
  %236 = load %struct.position*, %struct.position** %elems455, align 16
  %237 = load i32, i32* %j, align 4
  %idxprom456 = sext i32 %237 to i64
  %arrayidx457 = getelementptr inbounds %struct.position, %struct.position* %236, i64 %idxprom456
  %strchr458 = getelementptr inbounds %struct.position, %struct.position* %arrayidx457, i32 0, i32 0
  %238 = load i32, i32* %strchr458, align 4
  %idxprom459 = zext i32 %238 to i64
  %arrayidx460 = getelementptr inbounds %struct.position_set, %struct.position_set* %234, i64 %idxprom459
  %elems461 = getelementptr inbounds %struct.position_set, %struct.position_set* %arrayidx460, i32 0, i32 0
  %239 = load %struct.position*, %struct.position** %elems461, align 8
  %240 = load i32, i32* %k, align 4
  %idxprom462 = sext i32 %240 to i64
  %arrayidx463 = getelementptr inbounds %struct.position, %struct.position* %239, i64 %idxprom462
  %241 = bitcast %struct.position* %arrayidx463 to i64*
  %242 = load i64, i64* %241, align 4
  call void @insert(i64 %242, %struct.position_set* %follows)
  br label %for.inc464

for.inc464:                                       ; preds = %for.body451
  %243 = load i32, i32* %k, align 4
  %inc465 = add nsw i32 %243, 1
  store i32 %inc465, i32* %k, align 4
  br label %for.cond438, !llvm.loop !133

for.end466:                                       ; preds = %for.cond438
  br label %for.inc467

for.inc467:                                       ; preds = %for.end466
  %244 = load i32, i32* %j, align 4
  %inc468 = add nsw i32 %244, 1
  store i32 %inc468, i32* %j, align 4
  br label %for.cond431, !llvm.loop !134

for.end469:                                       ; preds = %for.cond431
  %245 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %searchflag470 = getelementptr inbounds %struct.dfa, %struct.dfa* %245, i32 0, i32 13
  %246 = load i32, i32* %searchflag470, align 8
  %tobool471 = icmp ne i32 %246, 0
  br i1 %tobool471, label %if.then472, label %if.end490

if.then472:                                       ; preds = %for.end469
  store i32 0, i32* %j, align 4
  br label %for.cond473

for.cond473:                                      ; preds = %for.inc487, %if.then472
  %247 = load i32, i32* %j, align 4
  %248 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %states474 = getelementptr inbounds %struct.dfa, %struct.dfa* %248, i32 0, i32 9
  %249 = load %struct.dfa_state*, %struct.dfa_state** %states474, align 8
  %arrayidx475 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %249, i64 0
  %elems476 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %arrayidx475, i32 0, i32 1
  %nelem477 = getelementptr inbounds %struct.position_set, %struct.position_set* %elems476, i32 0, i32 1
  %250 = load i32, i32* %nelem477, align 8
  %cmp478 = icmp slt i32 %247, %250
  br i1 %cmp478, label %for.body480, label %for.end489

for.body480:                                      ; preds = %for.cond473
  %251 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %states481 = getelementptr inbounds %struct.dfa, %struct.dfa* %251, i32 0, i32 9
  %252 = load %struct.dfa_state*, %struct.dfa_state** %states481, align 8
  %arrayidx482 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %252, i64 0
  %elems483 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %arrayidx482, i32 0, i32 1
  %elems484 = getelementptr inbounds %struct.position_set, %struct.position_set* %elems483, i32 0, i32 0
  %253 = load %struct.position*, %struct.position** %elems484, align 8
  %254 = load i32, i32* %j, align 4
  %idxprom485 = sext i32 %254 to i64
  %arrayidx486 = getelementptr inbounds %struct.position, %struct.position* %253, i64 %idxprom485
  %255 = bitcast %struct.position* %arrayidx486 to i64*
  %256 = load i64, i64* %255, align 4
  call void @insert(i64 %256, %struct.position_set* %follows)
  br label %for.inc487

for.inc487:                                       ; preds = %for.body480
  %257 = load i32, i32* %j, align 4
  %inc488 = add nsw i32 %257, 1
  store i32 %inc488, i32* %j, align 4
  br label %for.cond473, !llvm.loop !135

for.end489:                                       ; preds = %for.cond473
  br label %if.end490

if.end490:                                        ; preds = %for.end489, %for.end469
  store i32 0, i32* %wants_newline, align 4
  %258 = load i32, i32* %i, align 4
  %idxprom491 = sext i32 %258 to i64
  %arrayidx492 = getelementptr inbounds [256 x [8 x i32]], [256 x [8 x i32]]* %labels, i64 0, i64 %idxprom491
  %arraydecay493 = getelementptr inbounds [8 x i32], [8 x i32]* %arrayidx492, i64 0, i64 0
  %call494 = call i32 @tstbit(i32 10, i32* %arraydecay493)
  %tobool495 = icmp ne i32 %call494, 0
  br i1 %tobool495, label %if.then496, label %if.end520

if.then496:                                       ; preds = %if.end490
  store i32 0, i32* %j, align 4
  br label %for.cond497

for.cond497:                                      ; preds = %for.inc517, %if.then496
  %259 = load i32, i32* %j, align 4
  %nelem498 = getelementptr inbounds %struct.position_set, %struct.position_set* %follows, i32 0, i32 1
  %260 = load i32, i32* %nelem498, align 8
  %cmp499 = icmp slt i32 %259, %260
  br i1 %cmp499, label %for.body501, label %for.end519

for.body501:                                      ; preds = %for.cond497
  %elems502 = getelementptr inbounds %struct.position_set, %struct.position_set* %follows, i32 0, i32 0
  %261 = load %struct.position*, %struct.position** %elems502, align 8
  %262 = load i32, i32* %j, align 4
  %idxprom503 = sext i32 %262 to i64
  %arrayidx504 = getelementptr inbounds %struct.position, %struct.position* %261, i64 %idxprom503
  %constraint505 = getelementptr inbounds %struct.position, %struct.position* %arrayidx504, i32 0, i32 1
  %263 = load i32, i32* %constraint505, align 4
  %and506 = and i32 %263, 192
  %shr507 = lshr i32 %and506, 2
  %elems508 = getelementptr inbounds %struct.position_set, %struct.position_set* %follows, i32 0, i32 0
  %264 = load %struct.position*, %struct.position** %elems508, align 8
  %265 = load i32, i32* %j, align 4
  %idxprom509 = sext i32 %265 to i64
  %arrayidx510 = getelementptr inbounds %struct.position, %struct.position* %264, i64 %idxprom509
  %constraint511 = getelementptr inbounds %struct.position, %struct.position* %arrayidx510, i32 0, i32 1
  %266 = load i32, i32* %constraint511, align 4
  %and512 = and i32 %266, 48
  %cmp513 = icmp ne i32 %shr507, %and512
  br i1 %cmp513, label %if.then515, label %if.end516

if.then515:                                       ; preds = %for.body501
  store i32 1, i32* %wants_newline, align 4
  br label %if.end516

if.end516:                                        ; preds = %if.then515, %for.body501
  br label %for.inc517

for.inc517:                                       ; preds = %if.end516
  %267 = load i32, i32* %j, align 4
  %inc518 = add nsw i32 %267, 1
  store i32 %inc518, i32* %j, align 4
  br label %for.cond497, !llvm.loop !136

for.end519:                                       ; preds = %for.cond497
  br label %if.end520

if.end520:                                        ; preds = %for.end519, %if.end490
  store i32 0, i32* %wants_letter, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond521

for.cond521:                                      ; preds = %for.inc536, %if.end520
  %268 = load i32, i32* %j, align 4
  %conv522 = sext i32 %268 to i64
  %cmp523 = icmp ult i64 %conv522, 8
  br i1 %cmp523, label %for.body525, label %for.end538

for.body525:                                      ; preds = %for.cond521
  %269 = load i32, i32* %i, align 4
  %idxprom526 = sext i32 %269 to i64
  %arrayidx527 = getelementptr inbounds [256 x [8 x i32]], [256 x [8 x i32]]* %labels, i64 0, i64 %idxprom526
  %270 = load i32, i32* %j, align 4
  %idxprom528 = sext i32 %270 to i64
  %arrayidx529 = getelementptr inbounds [8 x i32], [8 x i32]* %arrayidx527, i64 0, i64 %idxprom528
  %271 = load i32, i32* %arrayidx529, align 4
  %272 = load i32, i32* %j, align 4
  %idxprom530 = sext i32 %272 to i64
  %arrayidx531 = getelementptr inbounds [8 x i32], [8 x i32]* @dfastate.letters, i64 0, i64 %idxprom530
  %273 = load i32, i32* %arrayidx531, align 4
  %and532 = and i32 %271, %273
  %tobool533 = icmp ne i32 %and532, 0
  br i1 %tobool533, label %if.then534, label %if.end535

if.then534:                                       ; preds = %for.body525
  br label %for.end538

if.end535:                                        ; preds = %for.body525
  br label %for.inc536

for.inc536:                                       ; preds = %if.end535
  %274 = load i32, i32* %j, align 4
  %inc537 = add nsw i32 %274, 1
  store i32 %inc537, i32* %j, align 4
  br label %for.cond521, !llvm.loop !137

for.end538:                                       ; preds = %if.then534, %for.cond521
  %275 = load i32, i32* %j, align 4
  %conv539 = sext i32 %275 to i64
  %cmp540 = icmp ult i64 %conv539, 8
  br i1 %cmp540, label %if.then542, label %if.end566

if.then542:                                       ; preds = %for.end538
  store i32 0, i32* %j, align 4
  br label %for.cond543

for.cond543:                                      ; preds = %for.inc563, %if.then542
  %276 = load i32, i32* %j, align 4
  %nelem544 = getelementptr inbounds %struct.position_set, %struct.position_set* %follows, i32 0, i32 1
  %277 = load i32, i32* %nelem544, align 8
  %cmp545 = icmp slt i32 %276, %277
  br i1 %cmp545, label %for.body547, label %for.end565

for.body547:                                      ; preds = %for.cond543
  %elems548 = getelementptr inbounds %struct.position_set, %struct.position_set* %follows, i32 0, i32 0
  %278 = load %struct.position*, %struct.position** %elems548, align 8
  %279 = load i32, i32* %j, align 4
  %idxprom549 = sext i32 %279 to i64
  %arrayidx550 = getelementptr inbounds %struct.position, %struct.position* %278, i64 %idxprom549
  %constraint551 = getelementptr inbounds %struct.position, %struct.position* %arrayidx550, i32 0, i32 1
  %280 = load i32, i32* %constraint551, align 4
  %and552 = and i32 %280, 12
  %shr553 = lshr i32 %and552, 2
  %elems554 = getelementptr inbounds %struct.position_set, %struct.position_set* %follows, i32 0, i32 0
  %281 = load %struct.position*, %struct.position** %elems554, align 8
  %282 = load i32, i32* %j, align 4
  %idxprom555 = sext i32 %282 to i64
  %arrayidx556 = getelementptr inbounds %struct.position, %struct.position* %281, i64 %idxprom555
  %constraint557 = getelementptr inbounds %struct.position, %struct.position* %arrayidx556, i32 0, i32 1
  %283 = load i32, i32* %constraint557, align 4
  %and558 = and i32 %283, 3
  %cmp559 = icmp ne i32 %shr553, %and558
  br i1 %cmp559, label %if.then561, label %if.end562

if.then561:                                       ; preds = %for.body547
  store i32 1, i32* %wants_letter, align 4
  br label %if.end562

if.end562:                                        ; preds = %if.then561, %for.body547
  br label %for.inc563

for.inc563:                                       ; preds = %if.end562
  %284 = load i32, i32* %j, align 4
  %inc564 = add nsw i32 %284, 1
  store i32 %inc564, i32* %j, align 4
  br label %for.cond543, !llvm.loop !138

for.end565:                                       ; preds = %for.cond543
  br label %if.end566

if.end566:                                        ; preds = %for.end565, %for.end538
  %285 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %call567 = call i32 @state_index(%struct.dfa* %285, %struct.position_set* %follows, i32 0, i32 0)
  store i32 %call567, i32* %state, align 4
  %286 = load i32, i32* %wants_newline, align 4
  %tobool568 = icmp ne i32 %286, 0
  br i1 %tobool568, label %if.then569, label %if.else571

if.then569:                                       ; preds = %if.end566
  %287 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %call570 = call i32 @state_index(%struct.dfa* %287, %struct.position_set* %follows, i32 1, i32 0)
  store i32 %call570, i32* %state_newline, align 4
  br label %if.end572

if.else571:                                       ; preds = %if.end566
  %288 = load i32, i32* %state, align 4
  store i32 %288, i32* %state_newline, align 4
  br label %if.end572

if.end572:                                        ; preds = %if.else571, %if.then569
  %289 = load i32, i32* %wants_letter, align 4
  %tobool573 = icmp ne i32 %289, 0
  br i1 %tobool573, label %if.then574, label %if.else576

if.then574:                                       ; preds = %if.end572
  %290 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %call575 = call i32 @state_index(%struct.dfa* %290, %struct.position_set* %follows, i32 0, i32 1)
  store i32 %call575, i32* %state_letter, align 4
  br label %if.end577

if.else576:                                       ; preds = %if.end572
  %291 = load i32, i32* %state, align 4
  store i32 %291, i32* %state_letter, align 4
  br label %if.end577

if.end577:                                        ; preds = %if.else576, %if.then574
  store i32 0, i32* %j, align 4
  br label %for.cond578

for.cond578:                                      ; preds = %for.inc629, %if.end577
  %292 = load i32, i32* %j, align 4
  %conv579 = sext i32 %292 to i64
  %cmp580 = icmp ult i64 %conv579, 8
  br i1 %cmp580, label %for.body582, label %for.end631

for.body582:                                      ; preds = %for.cond578
  store i32 0, i32* %k, align 4
  br label %for.cond583

for.cond583:                                      ; preds = %for.inc626, %for.body582
  %293 = load i32, i32* %k, align 4
  %conv584 = sext i32 %293 to i64
  %cmp585 = icmp ult i64 %conv584, 32
  br i1 %cmp585, label %for.body587, label %for.end628

for.body587:                                      ; preds = %for.cond583
  %294 = load i32, i32* %i, align 4
  %idxprom588 = sext i32 %294 to i64
  %arrayidx589 = getelementptr inbounds [256 x [8 x i32]], [256 x [8 x i32]]* %labels, i64 0, i64 %idxprom588
  %295 = load i32, i32* %j, align 4
  %idxprom590 = sext i32 %295 to i64
  %arrayidx591 = getelementptr inbounds [8 x i32], [8 x i32]* %arrayidx589, i64 0, i64 %idxprom590
  %296 = load i32, i32* %arrayidx591, align 4
  %297 = load i32, i32* %k, align 4
  %shl592 = shl i32 1, %297
  %and593 = and i32 %296, %shl592
  %tobool594 = icmp ne i32 %and593, 0
  br i1 %tobool594, label %if.then595, label %if.end625

if.then595:                                       ; preds = %for.body587
  %298 = load i32, i32* %j, align 4
  %conv596 = sext i32 %298 to i64
  %mul597 = mul i64 %conv596, 32
  %299 = load i32, i32* %k, align 4
  %conv598 = sext i32 %299 to i64
  %add599 = add i64 %mul597, %conv598
  %conv600 = trunc i64 %add599 to i32
  store i32 %conv600, i32* %c, align 4
  %300 = load i32, i32* %c, align 4
  %cmp601 = icmp eq i32 %300, 10
  br i1 %cmp601, label %if.then603, label %if.else606

if.then603:                                       ; preds = %if.then595
  %301 = load i32, i32* %state_newline, align 4
  %302 = load i32*, i32** %trans.addr, align 8
  %303 = load i32, i32* %c, align 4
  %idxprom604 = sext i32 %303 to i64
  %arrayidx605 = getelementptr inbounds i32, i32* %302, i64 %idxprom604
  store i32 %301, i32* %arrayidx605, align 4
  br label %if.end624

if.else606:                                       ; preds = %if.then595
  %call607 = call i16** @__ctype_b_loc() #10
  %304 = load i16*, i16** %call607, align 8
  %305 = load i32, i32* %c, align 4
  %idxprom608 = sext i32 %305 to i64
  %arrayidx609 = getelementptr inbounds i16, i16* %304, i64 %idxprom608
  %306 = load i16, i16* %arrayidx609, align 2
  %conv610 = zext i16 %306 to i32
  %and611 = and i32 %conv610, 8
  %tobool612 = icmp ne i32 %and611, 0
  br i1 %tobool612, label %if.then613, label %if.else616

if.then613:                                       ; preds = %if.else606
  %307 = load i32, i32* %state_letter, align 4
  %308 = load i32*, i32** %trans.addr, align 8
  %309 = load i32, i32* %c, align 4
  %idxprom614 = sext i32 %309 to i64
  %arrayidx615 = getelementptr inbounds i32, i32* %308, i64 %idxprom614
  store i32 %307, i32* %arrayidx615, align 4
  br label %if.end623

if.else616:                                       ; preds = %if.else606
  %310 = load i32, i32* %c, align 4
  %cmp617 = icmp slt i32 %310, 256
  br i1 %cmp617, label %if.then619, label %if.end622

if.then619:                                       ; preds = %if.else616
  %311 = load i32, i32* %state, align 4
  %312 = load i32*, i32** %trans.addr, align 8
  %313 = load i32, i32* %c, align 4
  %idxprom620 = sext i32 %313 to i64
  %arrayidx621 = getelementptr inbounds i32, i32* %312, i64 %idxprom620
  store i32 %311, i32* %arrayidx621, align 4
  br label %if.end622

if.end622:                                        ; preds = %if.then619, %if.else616
  br label %if.end623

if.end623:                                        ; preds = %if.end622, %if.then613
  br label %if.end624

if.end624:                                        ; preds = %if.end623, %if.then603
  br label %if.end625

if.end625:                                        ; preds = %if.end624, %for.body587
  br label %for.inc626

for.inc626:                                       ; preds = %if.end625
  %314 = load i32, i32* %k, align 4
  %inc627 = add nsw i32 %314, 1
  store i32 %inc627, i32* %k, align 4
  br label %for.cond583, !llvm.loop !139

for.end628:                                       ; preds = %for.cond583
  br label %for.inc629

for.inc629:                                       ; preds = %for.end628
  %315 = load i32, i32* %j, align 4
  %inc630 = add nsw i32 %315, 1
  store i32 %inc630, i32* %j, align 4
  br label %for.cond578, !llvm.loop !140

for.end631:                                       ; preds = %for.cond578
  br label %for.inc632

for.inc632:                                       ; preds = %for.end631
  %316 = load i32, i32* %i, align 4
  %inc633 = add nsw i32 %316, 1
  store i32 %inc633, i32* %i, align 4
  br label %for.cond426, !llvm.loop !141

for.end634:                                       ; preds = %for.cond426
  store i32 0, i32* %i, align 4
  br label %for.cond635

for.cond635:                                      ; preds = %for.inc642, %for.end634
  %317 = load i32, i32* %i, align 4
  %318 = load i32, i32* %ngrps, align 4
  %cmp636 = icmp slt i32 %317, %318
  br i1 %cmp636, label %for.body638, label %for.end644

for.body638:                                      ; preds = %for.cond635
  %319 = load i32, i32* %i, align 4
  %idxprom639 = sext i32 %319 to i64
  %arrayidx640 = getelementptr inbounds [256 x %struct.position_set], [256 x %struct.position_set]* %grps, i64 0, i64 %idxprom639
  %elems641 = getelementptr inbounds %struct.position_set, %struct.position_set* %arrayidx640, i32 0, i32 0
  %320 = load %struct.position*, %struct.position** %elems641, align 16
  %321 = bitcast %struct.position* %320 to i8*
  call void @free(i8* %321) #9
  br label %for.inc642

for.inc642:                                       ; preds = %for.body638
  %322 = load i32, i32* %i, align 4
  %inc643 = add nsw i32 %322, 1
  store i32 %inc643, i32* %i, align 4
  br label %for.cond635, !llvm.loop !142

for.end644:                                       ; preds = %for.cond635
  %elems645 = getelementptr inbounds %struct.position_set, %struct.position_set* %follows, i32 0, i32 0
  %323 = load %struct.position*, %struct.position** %elems645, align 8
  %324 = bitcast %struct.position* %323 to i8*
  call void @free(i8* %324) #9
  %elems646 = getelementptr inbounds %struct.position_set, %struct.position_set* %tmp, i32 0, i32 0
  %325 = load %struct.position*, %struct.position** %elems646, align 8
  %326 = bitcast %struct.position* %325 to i8*
  call void @free(i8* %326) #9
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @setbit(i32 %b, i32* %c) #0 {
entry:
  %b.addr = alloca i32, align 4
  %c.addr = alloca i32*, align 8
  store i32 %b, i32* %b.addr, align 4
  store i32* %c, i32** %c.addr, align 8
  %0 = load i32, i32* %b.addr, align 4
  %conv = sext i32 %0 to i64
  %rem = urem i64 %conv, 32
  %sh_prom = trunc i64 %rem to i32
  %shl = shl i32 1, %sh_prom
  %1 = load i32*, i32** %c.addr, align 8
  %2 = load i32, i32* %b.addr, align 4
  %conv1 = sext i32 %2 to i64
  %div = udiv i64 %conv1, 32
  %arrayidx = getelementptr inbounds i32, i32* %1, i64 %div
  %3 = load i32, i32* %arrayidx, align 4
  %or = or i32 %3, %shl
  store i32 %or, i32* %arrayidx, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @zeroset(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 8
  %i = alloca i32, align 4
  store i32* %s, i32** %s.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %conv = sext i32 %0 to i64
  %cmp = icmp ult i64 %conv, 8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32*, i32** %s.addr, align 8
  %2 = load i32, i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds i32, i32* %1, i64 %idxprom
  store i32 0, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %3 = load i32, i32* %i, align 4
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond, !llvm.loop !143

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @copyset(i32* %src, i32* %dst) #0 {
entry:
  %src.addr = alloca i32*, align 8
  %dst.addr = alloca i32*, align 8
  %i = alloca i32, align 4
  store i32* %src, i32** %src.addr, align 8
  store i32* %dst, i32** %dst.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %conv = sext i32 %0 to i64
  %cmp = icmp ult i64 %conv, 8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32*, i32** %src.addr, align 8
  %2 = load i32, i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds i32, i32* %1, i64 %idxprom
  %3 = load i32, i32* %arrayidx, align 4
  %4 = load i32*, i32** %dst.addr, align 8
  %5 = load i32, i32* %i, align 4
  %idxprom2 = sext i32 %5 to i64
  %arrayidx3 = getelementptr inbounds i32, i32* %4, i64 %idxprom2
  store i32 %3, i32* %arrayidx3, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond, !llvm.loop !144

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @clrbit(i32 %b, i32* %c) #0 {
entry:
  %b.addr = alloca i32, align 4
  %c.addr = alloca i32*, align 8
  store i32 %b, i32* %b.addr, align 4
  store i32* %c, i32** %c.addr, align 8
  %0 = load i32, i32* %b.addr, align 4
  %conv = sext i32 %0 to i64
  %rem = urem i64 %conv, 32
  %sh_prom = trunc i64 %rem to i32
  %shl = shl i32 1, %sh_prom
  %neg = xor i32 %shl, -1
  %1 = load i32*, i32** %c.addr, align 8
  %2 = load i32, i32* %b.addr, align 4
  %conv1 = sext i32 %2 to i64
  %div = udiv i64 %conv1, 32
  %arrayidx = getelementptr inbounds i32, i32* %1, i64 %div
  %3 = load i32, i32* %arrayidx, align 4
  %and = and i32 %3, %neg
  store i32 %and, i32* %arrayidx, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @tstbit(i32 %b, i32* %c) #0 {
entry:
  %b.addr = alloca i32, align 4
  %c.addr = alloca i32*, align 8
  store i32 %b, i32* %b.addr, align 4
  store i32* %c, i32** %c.addr, align 8
  %0 = load i32*, i32** %c.addr, align 8
  %1 = load i32, i32* %b.addr, align 4
  %conv = sext i32 %1 to i64
  %div = udiv i64 %conv, 32
  %arrayidx = getelementptr inbounds i32, i32* %0, i64 %div
  %2 = load i32, i32* %arrayidx, align 4
  %3 = load i32, i32* %b.addr, align 4
  %conv1 = sext i32 %3 to i64
  %rem = urem i64 %conv1, 32
  %sh_prom = trunc i64 %rem to i32
  %shl = shl i32 1, %sh_prom
  %and = and i32 %2, %shl
  ret i32 %and
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @dfaexec(%struct.dfa* %d, i8* %begin, i8* %end, i32 %newline, i32* %count, i32* %backref) #0 {
entry:
  %retval = alloca i8*, align 8
  %d.addr = alloca %struct.dfa*, align 8
  %begin.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %newline.addr = alloca i32, align 4
  %count.addr = alloca i32*, align 8
  %backref.addr = alloca i32*, align 8
  %s = alloca i32, align 4
  %s1 = alloca i32, align 4
  %tmp = alloca i32, align 4
  %p = alloca i8*, align 8
  %trans = alloca i32**, align 8
  %t = alloca i32*, align 8
  %i = alloca i32, align 4
  store %struct.dfa* %d, %struct.dfa** %d.addr, align 8
  store i8* %begin, i8** %begin.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i32 %newline, i32* %newline.addr, align 4
  store i32* %count, i32** %count.addr, align 8
  store i32* %backref, i32** %backref.addr, align 8
  %0 = load i32, i32* @dfaexec.sbit_init, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.end13, label %if.then

if.then:                                          ; preds = %entry
  store i32 1, i32* @dfaexec.sbit_init, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 256
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %cmp1 = icmp eq i32 %2, 10
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %for.body
  %3 = load i32, i32* %i, align 4
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* @dfaexec.sbit, i64 0, i64 %idxprom
  store i32 4, i32* %arrayidx, align 4
  br label %if.end12

if.else:                                          ; preds = %for.body
  %call = call i16** @__ctype_b_loc() #10
  %4 = load i16*, i16** %call, align 8
  %5 = load i32, i32* %i, align 4
  %idxprom3 = sext i32 %5 to i64
  %arrayidx4 = getelementptr inbounds i16, i16* %4, i64 %idxprom3
  %6 = load i16, i16* %arrayidx4, align 2
  %conv = zext i16 %6 to i32
  %and = and i32 %conv, 8
  %tobool5 = icmp ne i32 %and, 0
  br i1 %tobool5, label %if.then6, label %if.else9

if.then6:                                         ; preds = %if.else
  %7 = load i32, i32* %i, align 4
  %idxprom7 = sext i32 %7 to i64
  %arrayidx8 = getelementptr inbounds [256 x i32], [256 x i32]* @dfaexec.sbit, i64 0, i64 %idxprom7
  store i32 2, i32* %arrayidx8, align 4
  br label %if.end

if.else9:                                         ; preds = %if.else
  %8 = load i32, i32* %i, align 4
  %idxprom10 = sext i32 %8 to i64
  %arrayidx11 = getelementptr inbounds [256 x i32], [256 x i32]* @dfaexec.sbit, i64 0, i64 %idxprom10
  store i32 1, i32* %arrayidx11, align 4
  br label %if.end

if.end:                                           ; preds = %if.else9, %if.then6
  br label %if.end12

if.end12:                                         ; preds = %if.end, %if.then2
  br label %for.inc

for.inc:                                          ; preds = %if.end12
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond, !llvm.loop !145

for.end:                                          ; preds = %for.cond
  br label %if.end13

if.end13:                                         ; preds = %for.end, %entry
  %10 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %tralloc = getelementptr inbounds %struct.dfa, %struct.dfa* %10, i32 0, i32 14
  %11 = load i32, i32* %tralloc, align 4
  %tobool14 = icmp ne i32 %11, 0
  br i1 %tobool14, label %if.end16, label %if.then15

if.then15:                                        ; preds = %if.end13
  %12 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  call void @build_state_zero(%struct.dfa* %12)
  br label %if.end16

if.end16:                                         ; preds = %if.then15, %if.end13
  store i32 0, i32* %s1, align 4
  store i32 0, i32* %s, align 4
  %13 = load i8*, i8** %begin.addr, align 8
  store i8* %13, i8** %p, align 8
  %14 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %trans17 = getelementptr inbounds %struct.dfa, %struct.dfa* %14, i32 0, i32 16
  %15 = load i32**, i32*** %trans17, align 8
  store i32** %15, i32*** %trans, align 8
  %16 = load i8*, i8** %end.addr, align 8
  store i8 10, i8* %16, align 1
  br label %for.cond18

for.cond18:                                       ; preds = %if.end103, %if.then100, %if.then91, %if.end65, %if.end16
  %17 = load i32**, i32*** %trans, align 8
  %18 = load i32, i32* %s, align 4
  %idxprom19 = sext i32 %18 to i64
  %arrayidx20 = getelementptr inbounds i32*, i32** %17, i64 %idxprom19
  %19 = load i32*, i32** %arrayidx20, align 8
  store i32* %19, i32** %t, align 8
  %cmp21 = icmp ne i32* %19, null
  br i1 %cmp21, label %if.then23, label %if.end38

if.then23:                                        ; preds = %for.cond18
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.then23
  %20 = load i32*, i32** %t, align 8
  %21 = load i8*, i8** %p, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %21, i32 1
  store i8* %incdec.ptr, i8** %p, align 8
  %22 = load i8, i8* %21, align 1
  %idxprom24 = zext i8 %22 to i64
  %arrayidx25 = getelementptr inbounds i32, i32* %20, i64 %idxprom24
  %23 = load i32, i32* %arrayidx25, align 4
  store i32 %23, i32* %s1, align 4
  %24 = load i32**, i32*** %trans, align 8
  %25 = load i32, i32* %s1, align 4
  %idxprom26 = sext i32 %25 to i64
  %arrayidx27 = getelementptr inbounds i32*, i32** %24, i64 %idxprom26
  %26 = load i32*, i32** %arrayidx27, align 8
  store i32* %26, i32** %t, align 8
  %tobool28 = icmp ne i32* %26, null
  br i1 %tobool28, label %if.end30, label %if.then29

if.then29:                                        ; preds = %do.body
  br label %last_was_s

if.end30:                                         ; preds = %do.body
  %27 = load i32*, i32** %t, align 8
  %28 = load i8*, i8** %p, align 8
  %incdec.ptr31 = getelementptr inbounds i8, i8* %28, i32 1
  store i8* %incdec.ptr31, i8** %p, align 8
  %29 = load i8, i8* %28, align 1
  %idxprom32 = zext i8 %29 to i64
  %arrayidx33 = getelementptr inbounds i32, i32* %27, i64 %idxprom32
  %30 = load i32, i32* %arrayidx33, align 4
  store i32 %30, i32* %s, align 4
  br label %do.cond

do.cond:                                          ; preds = %if.end30
  %31 = load i32**, i32*** %trans, align 8
  %32 = load i32, i32* %s, align 4
  %idxprom34 = sext i32 %32 to i64
  %arrayidx35 = getelementptr inbounds i32*, i32** %31, i64 %idxprom34
  %33 = load i32*, i32** %arrayidx35, align 8
  store i32* %33, i32** %t, align 8
  %cmp36 = icmp ne i32* %33, null
  br i1 %cmp36, label %do.body, label %do.end, !llvm.loop !146

do.end:                                           ; preds = %do.cond
  br label %if.end38

if.end38:                                         ; preds = %do.end, %for.cond18
  br label %last_was_s1

last_was_s:                                       ; preds = %if.then29
  %34 = load i32, i32* %s, align 4
  store i32 %34, i32* %tmp, align 4
  %35 = load i32, i32* %s1, align 4
  store i32 %35, i32* %s, align 4
  %36 = load i32, i32* %tmp, align 4
  store i32 %36, i32* %s1, align 4
  br label %last_was_s1

last_was_s1:                                      ; preds = %last_was_s, %if.end38
  %37 = load i32, i32* %s, align 4
  %cmp39 = icmp sge i32 %37, 0
  br i1 %cmp39, label %land.lhs.true, label %if.end72

land.lhs.true:                                    ; preds = %last_was_s1
  %38 = load i8*, i8** %p, align 8
  %39 = load i8*, i8** %end.addr, align 8
  %cmp41 = icmp ule i8* %38, %39
  br i1 %cmp41, label %land.lhs.true43, label %if.end72

land.lhs.true43:                                  ; preds = %land.lhs.true
  %40 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %fails = getelementptr inbounds %struct.dfa, %struct.dfa* %40, i32 0, i32 18
  %41 = load i32**, i32*** %fails, align 8
  %42 = load i32, i32* %s, align 4
  %idxprom44 = sext i32 %42 to i64
  %arrayidx45 = getelementptr inbounds i32*, i32** %41, i64 %idxprom44
  %43 = load i32*, i32** %arrayidx45, align 8
  %tobool46 = icmp ne i32* %43, null
  br i1 %tobool46, label %if.then47, label %if.end72

if.then47:                                        ; preds = %land.lhs.true43
  %44 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %success = getelementptr inbounds %struct.dfa, %struct.dfa* %44, i32 0, i32 19
  %45 = load i32*, i32** %success, align 8
  %46 = load i32, i32* %s, align 4
  %idxprom48 = sext i32 %46 to i64
  %arrayidx49 = getelementptr inbounds i32, i32* %45, i64 %idxprom48
  %47 = load i32, i32* %arrayidx49, align 4
  %48 = load i8*, i8** %p, align 8
  %49 = load i8, i8* %48, align 1
  %idxprom50 = zext i8 %49 to i64
  %arrayidx51 = getelementptr inbounds [256 x i32], [256 x i32]* @dfaexec.sbit, i64 0, i64 %idxprom50
  %50 = load i32, i32* %arrayidx51, align 4
  %and52 = and i32 %47, %50
  %tobool53 = icmp ne i32 %and52, 0
  br i1 %tobool53, label %if.then54, label %if.end65

if.then54:                                        ; preds = %if.then47
  %51 = load i32*, i32** %backref.addr, align 8
  %tobool55 = icmp ne i32* %51, null
  br i1 %tobool55, label %if.then56, label %if.end64

if.then56:                                        ; preds = %if.then54
  %52 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %states = getelementptr inbounds %struct.dfa, %struct.dfa* %52, i32 0, i32 9
  %53 = load %struct.dfa_state*, %struct.dfa_state** %states, align 8
  %54 = load i32, i32* %s, align 4
  %idxprom57 = sext i32 %54 to i64
  %arrayidx58 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %53, i64 %idxprom57
  %backref59 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %arrayidx58, i32 0, i32 4
  %55 = load i8, i8* %backref59, align 2
  %tobool60 = icmp ne i8 %55, 0
  br i1 %tobool60, label %if.then61, label %if.else62

if.then61:                                        ; preds = %if.then56
  %56 = load i32*, i32** %backref.addr, align 8
  store i32 1, i32* %56, align 4
  br label %if.end63

if.else62:                                        ; preds = %if.then56
  %57 = load i32*, i32** %backref.addr, align 8
  store i32 0, i32* %57, align 4
  br label %if.end63

if.end63:                                         ; preds = %if.else62, %if.then61
  br label %if.end64

if.end64:                                         ; preds = %if.end63, %if.then54
  %58 = load i8*, i8** %p, align 8
  store i8* %58, i8** %retval, align 8
  br label %return

if.end65:                                         ; preds = %if.then47
  %59 = load i32, i32* %s, align 4
  store i32 %59, i32* %s1, align 4
  %60 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %fails66 = getelementptr inbounds %struct.dfa, %struct.dfa* %60, i32 0, i32 18
  %61 = load i32**, i32*** %fails66, align 8
  %62 = load i32, i32* %s, align 4
  %idxprom67 = sext i32 %62 to i64
  %arrayidx68 = getelementptr inbounds i32*, i32** %61, i64 %idxprom67
  %63 = load i32*, i32** %arrayidx68, align 8
  %64 = load i8*, i8** %p, align 8
  %incdec.ptr69 = getelementptr inbounds i8, i8* %64, i32 1
  store i8* %incdec.ptr69, i8** %p, align 8
  %65 = load i8, i8* %64, align 1
  %idxprom70 = zext i8 %65 to i64
  %arrayidx71 = getelementptr inbounds i32, i32* %63, i64 %idxprom70
  %66 = load i32, i32* %arrayidx71, align 4
  store i32 %66, i32* %s, align 4
  br label %for.cond18

if.end72:                                         ; preds = %land.lhs.true43, %land.lhs.true, %last_was_s1
  %67 = load i32*, i32** %count.addr, align 8
  %tobool73 = icmp ne i32* %67, null
  br i1 %tobool73, label %land.lhs.true74, label %if.end84

land.lhs.true74:                                  ; preds = %if.end72
  %68 = load i8*, i8** %p, align 8
  %69 = load i8*, i8** %end.addr, align 8
  %cmp75 = icmp ule i8* %68, %69
  br i1 %cmp75, label %land.lhs.true77, label %if.end84

land.lhs.true77:                                  ; preds = %land.lhs.true74
  %70 = load i8*, i8** %p, align 8
  %arrayidx78 = getelementptr inbounds i8, i8* %70, i64 -1
  %71 = load i8, i8* %arrayidx78, align 1
  %conv79 = zext i8 %71 to i32
  %cmp80 = icmp eq i32 %conv79, 10
  br i1 %cmp80, label %if.then82, label %if.end84

if.then82:                                        ; preds = %land.lhs.true77
  %72 = load i32*, i32** %count.addr, align 8
  %73 = load i32, i32* %72, align 4
  %inc83 = add nsw i32 %73, 1
  store i32 %inc83, i32* %72, align 4
  br label %if.end84

if.end84:                                         ; preds = %if.then82, %land.lhs.true77, %land.lhs.true74, %if.end72
  %74 = load i8*, i8** %p, align 8
  %75 = load i8*, i8** %end.addr, align 8
  %cmp85 = icmp ugt i8* %74, %75
  br i1 %cmp85, label %if.then87, label %if.end88

if.then87:                                        ; preds = %if.end84
  store i8* null, i8** %retval, align 8
  br label %return

if.end88:                                         ; preds = %if.end84
  %76 = load i32, i32* %s, align 4
  %cmp89 = icmp sge i32 %76, 0
  br i1 %cmp89, label %if.then91, label %if.end93

if.then91:                                        ; preds = %if.end88
  %77 = load i32, i32* %s, align 4
  %78 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  call void @build_state(i32 %77, %struct.dfa* %78)
  %79 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %trans92 = getelementptr inbounds %struct.dfa, %struct.dfa* %79, i32 0, i32 16
  %80 = load i32**, i32*** %trans92, align 8
  store i32** %80, i32*** %trans, align 8
  br label %for.cond18

if.end93:                                         ; preds = %if.end88
  %81 = load i8*, i8** %p, align 8
  %arrayidx94 = getelementptr inbounds i8, i8* %81, i64 -1
  %82 = load i8, i8* %arrayidx94, align 1
  %conv95 = zext i8 %82 to i32
  %cmp96 = icmp eq i32 %conv95, 10
  br i1 %cmp96, label %land.lhs.true98, label %if.end103

land.lhs.true98:                                  ; preds = %if.end93
  %83 = load i32, i32* %newline.addr, align 4
  %tobool99 = icmp ne i32 %83, 0
  br i1 %tobool99, label %if.then100, label %if.end103

if.then100:                                       ; preds = %land.lhs.true98
  %84 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %newlines = getelementptr inbounds %struct.dfa, %struct.dfa* %84, i32 0, i32 20
  %85 = load i32*, i32** %newlines, align 8
  %86 = load i32, i32* %s1, align 4
  %idxprom101 = sext i32 %86 to i64
  %arrayidx102 = getelementptr inbounds i32, i32* %85, i64 %idxprom101
  %87 = load i32, i32* %arrayidx102, align 4
  store i32 %87, i32* %s, align 4
  br label %for.cond18

if.end103:                                        ; preds = %land.lhs.true98, %if.end93
  store i32 0, i32* %s, align 4
  br label %for.cond18

return:                                           ; preds = %if.then87, %if.end64
  %88 = load i8*, i8** %retval, align 8
  ret i8* %88
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @build_state_zero(%struct.dfa* %d) #0 {
entry:
  %d.addr = alloca %struct.dfa*, align 8
  store %struct.dfa* %d, %struct.dfa** %d.addr, align 8
  %0 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %tralloc = getelementptr inbounds %struct.dfa, %struct.dfa* %0, i32 0, i32 14
  store i32 1, i32* %tralloc, align 4
  %1 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %trcount = getelementptr inbounds %struct.dfa, %struct.dfa* %1, i32 0, i32 15
  store i32 0, i32* %trcount, align 8
  %2 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %tralloc1 = getelementptr inbounds %struct.dfa, %struct.dfa* %2, i32 0, i32 14
  %3 = load i32, i32* %tralloc1, align 4
  %add = add nsw i32 %3, 1
  %call = call i8* @xcalloc(i32 %add, i64 8)
  %4 = bitcast i8* %call to i32**
  %5 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %realtrans = getelementptr inbounds %struct.dfa, %struct.dfa* %5, i32 0, i32 17
  store i32** %4, i32*** %realtrans, align 8
  %6 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %realtrans2 = getelementptr inbounds %struct.dfa, %struct.dfa* %6, i32 0, i32 17
  %7 = load i32**, i32*** %realtrans2, align 8
  %add.ptr = getelementptr inbounds i32*, i32** %7, i64 1
  %8 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %trans = getelementptr inbounds %struct.dfa, %struct.dfa* %8, i32 0, i32 16
  store i32** %add.ptr, i32*** %trans, align 8
  %9 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %tralloc3 = getelementptr inbounds %struct.dfa, %struct.dfa* %9, i32 0, i32 14
  %10 = load i32, i32* %tralloc3, align 4
  %call4 = call i8* @xcalloc(i32 %10, i64 8)
  %11 = bitcast i8* %call4 to i32**
  %12 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %fails = getelementptr inbounds %struct.dfa, %struct.dfa* %12, i32 0, i32 18
  store i32** %11, i32*** %fails, align 8
  %13 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %tralloc5 = getelementptr inbounds %struct.dfa, %struct.dfa* %13, i32 0, i32 14
  %14 = load i32, i32* %tralloc5, align 4
  %conv = sext i32 %14 to i64
  %mul = mul i64 %conv, 4
  %call6 = call i8* @xmalloc_1(i64 %mul)
  %15 = bitcast i8* %call6 to i32*
  %16 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %success = getelementptr inbounds %struct.dfa, %struct.dfa* %16, i32 0, i32 19
  store i32* %15, i32** %success, align 8
  %17 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %tralloc7 = getelementptr inbounds %struct.dfa, %struct.dfa* %17, i32 0, i32 14
  %18 = load i32, i32* %tralloc7, align 4
  %conv8 = sext i32 %18 to i64
  %mul9 = mul i64 %conv8, 4
  %call10 = call i8* @xmalloc_1(i64 %mul9)
  %19 = bitcast i8* %call10 to i32*
  %20 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %newlines = getelementptr inbounds %struct.dfa, %struct.dfa* %20, i32 0, i32 20
  store i32* %19, i32** %newlines, align 8
  %21 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  call void @build_state(i32 0, %struct.dfa* %21)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @build_state(i32 %s, %struct.dfa* %d) #0 {
entry:
  %s.addr = alloca i32, align 4
  %d.addr = alloca %struct.dfa*, align 8
  %trans = alloca i32*, align 8
  %i = alloca i32, align 4
  %oldalloc = alloca i32, align 4
  store i32 %s, i32* %s.addr, align 4
  store %struct.dfa* %d, %struct.dfa** %d.addr, align 8
  %0 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %trcount = getelementptr inbounds %struct.dfa, %struct.dfa* %0, i32 0, i32 15
  %1 = load i32, i32* %trcount, align 8
  %cmp = icmp sge i32 %1, 1024
  br i1 %cmp, label %if.then, label %if.end22

if.then:                                          ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %2 = load i32, i32* %i, align 4
  %3 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %tralloc = getelementptr inbounds %struct.dfa, %struct.dfa* %3, i32 0, i32 14
  %4 = load i32, i32* %tralloc, align 4
  %cmp1 = icmp slt i32 %2, %4
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %trans2 = getelementptr inbounds %struct.dfa, %struct.dfa* %5, i32 0, i32 16
  %6 = load i32**, i32*** %trans2, align 8
  %7 = load i32, i32* %i, align 4
  %idxprom = sext i32 %7 to i64
  %arrayidx = getelementptr inbounds i32*, i32** %6, i64 %idxprom
  %8 = load i32*, i32** %arrayidx, align 8
  %tobool = icmp ne i32* %8, null
  br i1 %tobool, label %if.then3, label %if.else

if.then3:                                         ; preds = %for.body
  %9 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %trans4 = getelementptr inbounds %struct.dfa, %struct.dfa* %9, i32 0, i32 16
  %10 = load i32**, i32*** %trans4, align 8
  %11 = load i32, i32* %i, align 4
  %idxprom5 = sext i32 %11 to i64
  %arrayidx6 = getelementptr inbounds i32*, i32** %10, i64 %idxprom5
  %12 = load i32*, i32** %arrayidx6, align 8
  %13 = bitcast i32* %12 to i8*
  call void @free(i8* %13) #9
  %14 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %trans7 = getelementptr inbounds %struct.dfa, %struct.dfa* %14, i32 0, i32 16
  %15 = load i32**, i32*** %trans7, align 8
  %16 = load i32, i32* %i, align 4
  %idxprom8 = sext i32 %16 to i64
  %arrayidx9 = getelementptr inbounds i32*, i32** %15, i64 %idxprom8
  store i32* null, i32** %arrayidx9, align 8
  br label %if.end20

if.else:                                          ; preds = %for.body
  %17 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %fails = getelementptr inbounds %struct.dfa, %struct.dfa* %17, i32 0, i32 18
  %18 = load i32**, i32*** %fails, align 8
  %19 = load i32, i32* %i, align 4
  %idxprom10 = sext i32 %19 to i64
  %arrayidx11 = getelementptr inbounds i32*, i32** %18, i64 %idxprom10
  %20 = load i32*, i32** %arrayidx11, align 8
  %tobool12 = icmp ne i32* %20, null
  br i1 %tobool12, label %if.then13, label %if.end

if.then13:                                        ; preds = %if.else
  %21 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %fails14 = getelementptr inbounds %struct.dfa, %struct.dfa* %21, i32 0, i32 18
  %22 = load i32**, i32*** %fails14, align 8
  %23 = load i32, i32* %i, align 4
  %idxprom15 = sext i32 %23 to i64
  %arrayidx16 = getelementptr inbounds i32*, i32** %22, i64 %idxprom15
  %24 = load i32*, i32** %arrayidx16, align 8
  %25 = bitcast i32* %24 to i8*
  call void @free(i8* %25) #9
  %26 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %fails17 = getelementptr inbounds %struct.dfa, %struct.dfa* %26, i32 0, i32 18
  %27 = load i32**, i32*** %fails17, align 8
  %28 = load i32, i32* %i, align 4
  %idxprom18 = sext i32 %28 to i64
  %arrayidx19 = getelementptr inbounds i32*, i32** %27, i64 %idxprom18
  store i32* null, i32** %arrayidx19, align 8
  br label %if.end

if.end:                                           ; preds = %if.then13, %if.else
  br label %if.end20

if.end20:                                         ; preds = %if.end, %if.then3
  br label %for.inc

for.inc:                                          ; preds = %if.end20
  %29 = load i32, i32* %i, align 4
  %inc = add nsw i32 %29, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond, !llvm.loop !147

for.end:                                          ; preds = %for.cond
  %30 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %trcount21 = getelementptr inbounds %struct.dfa, %struct.dfa* %30, i32 0, i32 15
  store i32 0, i32* %trcount21, align 8
  br label %if.end22

if.end22:                                         ; preds = %for.end, %entry
  %31 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %trcount23 = getelementptr inbounds %struct.dfa, %struct.dfa* %31, i32 0, i32 15
  %32 = load i32, i32* %trcount23, align 8
  %inc24 = add nsw i32 %32, 1
  store i32 %inc24, i32* %trcount23, align 8
  %33 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %success = getelementptr inbounds %struct.dfa, %struct.dfa* %33, i32 0, i32 19
  %34 = load i32*, i32** %success, align 8
  %35 = load i32, i32* %s.addr, align 4
  %idxprom25 = sext i32 %35 to i64
  %arrayidx26 = getelementptr inbounds i32, i32* %34, i64 %idxprom25
  store i32 0, i32* %arrayidx26, align 4
  %36 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %states = getelementptr inbounds %struct.dfa, %struct.dfa* %36, i32 0, i32 9
  %37 = load %struct.dfa_state*, %struct.dfa_state** %states, align 8
  %38 = load i32, i32* %s.addr, align 4
  %idxprom27 = sext i32 %38 to i64
  %arrayidx28 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %37, i64 %idxprom27
  %constraint = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %arrayidx28, i32 0, i32 5
  %39 = load i8, i8* %constraint, align 1
  %conv = zext i8 %39 to i32
  %40 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %states29 = getelementptr inbounds %struct.dfa, %struct.dfa* %40, i32 0, i32 9
  %41 = load %struct.dfa_state*, %struct.dfa_state** %states29, align 8
  %42 = load i32, i32* %s.addr, align 4
  %idxprom30 = sext i32 %42 to i64
  %arrayidx31 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %41, i64 %idxprom30
  %newline = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %arrayidx31, i32 0, i32 2
  %43 = load i8, i8* %newline, align 8
  %conv32 = sext i8 %43 to i32
  %tobool33 = icmp ne i32 %conv32, 0
  %44 = zext i1 %tobool33 to i64
  %cond = select i1 %tobool33, i32 2, i32 0
  %add = add nsw i32 %cond, 1
  %add34 = add nsw i32 %add, 4
  %shl = shl i32 1, %add34
  %and = and i32 %conv, %shl
  %tobool35 = icmp ne i32 %and, 0
  br i1 %tobool35, label %land.lhs.true, label %if.end55

land.lhs.true:                                    ; preds = %if.end22
  %45 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %states36 = getelementptr inbounds %struct.dfa, %struct.dfa* %45, i32 0, i32 9
  %46 = load %struct.dfa_state*, %struct.dfa_state** %states36, align 8
  %47 = load i32, i32* %s.addr, align 4
  %idxprom37 = sext i32 %47 to i64
  %arrayidx38 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %46, i64 %idxprom37
  %constraint39 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %arrayidx38, i32 0, i32 5
  %48 = load i8, i8* %constraint39, align 1
  %conv40 = zext i8 %48 to i32
  %49 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %states41 = getelementptr inbounds %struct.dfa, %struct.dfa* %49, i32 0, i32 9
  %50 = load %struct.dfa_state*, %struct.dfa_state** %states41, align 8
  %51 = load i32, i32* %s.addr, align 4
  %idxprom42 = sext i32 %51 to i64
  %arrayidx43 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %50, i64 %idxprom42
  %letter = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %arrayidx43, i32 0, i32 3
  %52 = load i8, i8* %letter, align 1
  %conv44 = sext i8 %52 to i32
  %tobool45 = icmp ne i32 %conv44, 0
  %53 = zext i1 %tobool45 to i64
  %cond46 = select i1 %tobool45, i32 2, i32 0
  %add47 = add nsw i32 %cond46, 0
  %shl48 = shl i32 1, %add47
  %and49 = and i32 %conv40, %shl48
  %tobool50 = icmp ne i32 %and49, 0
  br i1 %tobool50, label %if.then51, label %if.end55

if.then51:                                        ; preds = %land.lhs.true
  %54 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %success52 = getelementptr inbounds %struct.dfa, %struct.dfa* %54, i32 0, i32 19
  %55 = load i32*, i32** %success52, align 8
  %56 = load i32, i32* %s.addr, align 4
  %idxprom53 = sext i32 %56 to i64
  %arrayidx54 = getelementptr inbounds i32, i32* %55, i64 %idxprom53
  %57 = load i32, i32* %arrayidx54, align 4
  %or = or i32 %57, 4
  store i32 %or, i32* %arrayidx54, align 4
  br label %if.end55

if.end55:                                         ; preds = %if.then51, %land.lhs.true, %if.end22
  %58 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %states56 = getelementptr inbounds %struct.dfa, %struct.dfa* %58, i32 0, i32 9
  %59 = load %struct.dfa_state*, %struct.dfa_state** %states56, align 8
  %60 = load i32, i32* %s.addr, align 4
  %idxprom57 = sext i32 %60 to i64
  %arrayidx58 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %59, i64 %idxprom57
  %constraint59 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %arrayidx58, i32 0, i32 5
  %61 = load i8, i8* %constraint59, align 1
  %conv60 = zext i8 %61 to i32
  %62 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %states61 = getelementptr inbounds %struct.dfa, %struct.dfa* %62, i32 0, i32 9
  %63 = load %struct.dfa_state*, %struct.dfa_state** %states61, align 8
  %64 = load i32, i32* %s.addr, align 4
  %idxprom62 = sext i32 %64 to i64
  %arrayidx63 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %63, i64 %idxprom62
  %newline64 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %arrayidx63, i32 0, i32 2
  %65 = load i8, i8* %newline64, align 8
  %conv65 = sext i8 %65 to i32
  %tobool66 = icmp ne i32 %conv65, 0
  %66 = zext i1 %tobool66 to i64
  %cond67 = select i1 %tobool66, i32 2, i32 0
  %add68 = add nsw i32 %cond67, 0
  %add69 = add nsw i32 %add68, 4
  %shl70 = shl i32 1, %add69
  %and71 = and i32 %conv60, %shl70
  %tobool72 = icmp ne i32 %and71, 0
  br i1 %tobool72, label %land.lhs.true73, label %if.end95

land.lhs.true73:                                  ; preds = %if.end55
  %67 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %states74 = getelementptr inbounds %struct.dfa, %struct.dfa* %67, i32 0, i32 9
  %68 = load %struct.dfa_state*, %struct.dfa_state** %states74, align 8
  %69 = load i32, i32* %s.addr, align 4
  %idxprom75 = sext i32 %69 to i64
  %arrayidx76 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %68, i64 %idxprom75
  %constraint77 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %arrayidx76, i32 0, i32 5
  %70 = load i8, i8* %constraint77, align 1
  %conv78 = zext i8 %70 to i32
  %71 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %states79 = getelementptr inbounds %struct.dfa, %struct.dfa* %71, i32 0, i32 9
  %72 = load %struct.dfa_state*, %struct.dfa_state** %states79, align 8
  %73 = load i32, i32* %s.addr, align 4
  %idxprom80 = sext i32 %73 to i64
  %arrayidx81 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %72, i64 %idxprom80
  %letter82 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %arrayidx81, i32 0, i32 3
  %74 = load i8, i8* %letter82, align 1
  %conv83 = sext i8 %74 to i32
  %tobool84 = icmp ne i32 %conv83, 0
  %75 = zext i1 %tobool84 to i64
  %cond85 = select i1 %tobool84, i32 2, i32 0
  %add86 = add nsw i32 %cond85, 1
  %shl87 = shl i32 1, %add86
  %and88 = and i32 %conv78, %shl87
  %tobool89 = icmp ne i32 %and88, 0
  br i1 %tobool89, label %if.then90, label %if.end95

if.then90:                                        ; preds = %land.lhs.true73
  %76 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %success91 = getelementptr inbounds %struct.dfa, %struct.dfa* %76, i32 0, i32 19
  %77 = load i32*, i32** %success91, align 8
  %78 = load i32, i32* %s.addr, align 4
  %idxprom92 = sext i32 %78 to i64
  %arrayidx93 = getelementptr inbounds i32, i32* %77, i64 %idxprom92
  %79 = load i32, i32* %arrayidx93, align 4
  %or94 = or i32 %79, 2
  store i32 %or94, i32* %arrayidx93, align 4
  br label %if.end95

if.end95:                                         ; preds = %if.then90, %land.lhs.true73, %if.end55
  %80 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %states96 = getelementptr inbounds %struct.dfa, %struct.dfa* %80, i32 0, i32 9
  %81 = load %struct.dfa_state*, %struct.dfa_state** %states96, align 8
  %82 = load i32, i32* %s.addr, align 4
  %idxprom97 = sext i32 %82 to i64
  %arrayidx98 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %81, i64 %idxprom97
  %constraint99 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %arrayidx98, i32 0, i32 5
  %83 = load i8, i8* %constraint99, align 1
  %conv100 = zext i8 %83 to i32
  %84 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %states101 = getelementptr inbounds %struct.dfa, %struct.dfa* %84, i32 0, i32 9
  %85 = load %struct.dfa_state*, %struct.dfa_state** %states101, align 8
  %86 = load i32, i32* %s.addr, align 4
  %idxprom102 = sext i32 %86 to i64
  %arrayidx103 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %85, i64 %idxprom102
  %newline104 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %arrayidx103, i32 0, i32 2
  %87 = load i8, i8* %newline104, align 8
  %conv105 = sext i8 %87 to i32
  %tobool106 = icmp ne i32 %conv105, 0
  %88 = zext i1 %tobool106 to i64
  %cond107 = select i1 %tobool106, i32 2, i32 0
  %add108 = add nsw i32 %cond107, 0
  %add109 = add nsw i32 %add108, 4
  %shl110 = shl i32 1, %add109
  %and111 = and i32 %conv100, %shl110
  %tobool112 = icmp ne i32 %and111, 0
  br i1 %tobool112, label %land.lhs.true113, label %if.end135

land.lhs.true113:                                 ; preds = %if.end95
  %89 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %states114 = getelementptr inbounds %struct.dfa, %struct.dfa* %89, i32 0, i32 9
  %90 = load %struct.dfa_state*, %struct.dfa_state** %states114, align 8
  %91 = load i32, i32* %s.addr, align 4
  %idxprom115 = sext i32 %91 to i64
  %arrayidx116 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %90, i64 %idxprom115
  %constraint117 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %arrayidx116, i32 0, i32 5
  %92 = load i8, i8* %constraint117, align 1
  %conv118 = zext i8 %92 to i32
  %93 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %states119 = getelementptr inbounds %struct.dfa, %struct.dfa* %93, i32 0, i32 9
  %94 = load %struct.dfa_state*, %struct.dfa_state** %states119, align 8
  %95 = load i32, i32* %s.addr, align 4
  %idxprom120 = sext i32 %95 to i64
  %arrayidx121 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %94, i64 %idxprom120
  %letter122 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %arrayidx121, i32 0, i32 3
  %96 = load i8, i8* %letter122, align 1
  %conv123 = sext i8 %96 to i32
  %tobool124 = icmp ne i32 %conv123, 0
  %97 = zext i1 %tobool124 to i64
  %cond125 = select i1 %tobool124, i32 2, i32 0
  %add126 = add nsw i32 %cond125, 0
  %shl127 = shl i32 1, %add126
  %and128 = and i32 %conv118, %shl127
  %tobool129 = icmp ne i32 %and128, 0
  br i1 %tobool129, label %if.then130, label %if.end135

if.then130:                                       ; preds = %land.lhs.true113
  %98 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %success131 = getelementptr inbounds %struct.dfa, %struct.dfa* %98, i32 0, i32 19
  %99 = load i32*, i32** %success131, align 8
  %100 = load i32, i32* %s.addr, align 4
  %idxprom132 = sext i32 %100 to i64
  %arrayidx133 = getelementptr inbounds i32, i32* %99, i64 %idxprom132
  %101 = load i32, i32* %arrayidx133, align 4
  %or134 = or i32 %101, 1
  store i32 %or134, i32* %arrayidx133, align 4
  br label %if.end135

if.end135:                                        ; preds = %if.then130, %land.lhs.true113, %if.end95
  %call = call i8* @xmalloc_1(i64 1024)
  %102 = bitcast i8* %call to i32*
  store i32* %102, i32** %trans, align 8
  %103 = load i32, i32* %s.addr, align 4
  %104 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %105 = load i32*, i32** %trans, align 8
  call void @dfastate(i32 %103, %struct.dfa* %104, i32* %105)
  store i32 0, i32* %i, align 4
  br label %for.cond136

for.cond136:                                      ; preds = %for.inc192, %if.end135
  %106 = load i32, i32* %i, align 4
  %cmp137 = icmp slt i32 %106, 256
  br i1 %cmp137, label %for.body139, label %for.end194

for.body139:                                      ; preds = %for.cond136
  %107 = load i32*, i32** %trans, align 8
  %108 = load i32, i32* %i, align 4
  %idxprom140 = sext i32 %108 to i64
  %arrayidx141 = getelementptr inbounds i32, i32* %107, i64 %idxprom140
  %109 = load i32, i32* %arrayidx141, align 4
  %110 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %tralloc142 = getelementptr inbounds %struct.dfa, %struct.dfa* %110, i32 0, i32 14
  %111 = load i32, i32* %tralloc142, align 4
  %cmp143 = icmp sge i32 %109, %111
  br i1 %cmp143, label %if.then145, label %if.end191

if.then145:                                       ; preds = %for.body139
  %112 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %tralloc146 = getelementptr inbounds %struct.dfa, %struct.dfa* %112, i32 0, i32 14
  %113 = load i32, i32* %tralloc146, align 4
  store i32 %113, i32* %oldalloc, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then145
  %114 = load i32*, i32** %trans, align 8
  %115 = load i32, i32* %i, align 4
  %idxprom147 = sext i32 %115 to i64
  %arrayidx148 = getelementptr inbounds i32, i32* %114, i64 %idxprom147
  %116 = load i32, i32* %arrayidx148, align 4
  %117 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %tralloc149 = getelementptr inbounds %struct.dfa, %struct.dfa* %117, i32 0, i32 14
  %118 = load i32, i32* %tralloc149, align 4
  %cmp150 = icmp sge i32 %116, %118
  br i1 %cmp150, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %119 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %tralloc152 = getelementptr inbounds %struct.dfa, %struct.dfa* %119, i32 0, i32 14
  %120 = load i32, i32* %tralloc152, align 4
  %mul = mul nsw i32 %120, 2
  store i32 %mul, i32* %tralloc152, align 4
  br label %while.cond, !llvm.loop !148

while.end:                                        ; preds = %while.cond
  %121 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %realtrans = getelementptr inbounds %struct.dfa, %struct.dfa* %121, i32 0, i32 17
  %122 = load i32**, i32*** %realtrans, align 8
  %123 = bitcast i32** %122 to i8*
  %124 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %tralloc153 = getelementptr inbounds %struct.dfa, %struct.dfa* %124, i32 0, i32 14
  %125 = load i32, i32* %tralloc153, align 4
  %add154 = add nsw i32 %125, 1
  %conv155 = sext i32 %add154 to i64
  %mul156 = mul i64 %conv155, 8
  %call157 = call i8* @xrealloc_1(i8* %123, i64 %mul156)
  %126 = bitcast i8* %call157 to i32**
  %127 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %realtrans158 = getelementptr inbounds %struct.dfa, %struct.dfa* %127, i32 0, i32 17
  store i32** %126, i32*** %realtrans158, align 8
  %128 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %realtrans159 = getelementptr inbounds %struct.dfa, %struct.dfa* %128, i32 0, i32 17
  %129 = load i32**, i32*** %realtrans159, align 8
  %add.ptr = getelementptr inbounds i32*, i32** %129, i64 1
  %130 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %trans160 = getelementptr inbounds %struct.dfa, %struct.dfa* %130, i32 0, i32 16
  store i32** %add.ptr, i32*** %trans160, align 8
  %131 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %fails161 = getelementptr inbounds %struct.dfa, %struct.dfa* %131, i32 0, i32 18
  %132 = load i32**, i32*** %fails161, align 8
  %133 = bitcast i32** %132 to i8*
  %134 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %tralloc162 = getelementptr inbounds %struct.dfa, %struct.dfa* %134, i32 0, i32 14
  %135 = load i32, i32* %tralloc162, align 4
  %conv163 = sext i32 %135 to i64
  %mul164 = mul i64 %conv163, 8
  %call165 = call i8* @xrealloc_1(i8* %133, i64 %mul164)
  %136 = bitcast i8* %call165 to i32**
  %137 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %fails166 = getelementptr inbounds %struct.dfa, %struct.dfa* %137, i32 0, i32 18
  store i32** %136, i32*** %fails166, align 8
  %138 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %success167 = getelementptr inbounds %struct.dfa, %struct.dfa* %138, i32 0, i32 19
  %139 = load i32*, i32** %success167, align 8
  %140 = bitcast i32* %139 to i8*
  %141 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %tralloc168 = getelementptr inbounds %struct.dfa, %struct.dfa* %141, i32 0, i32 14
  %142 = load i32, i32* %tralloc168, align 4
  %conv169 = sext i32 %142 to i64
  %mul170 = mul i64 %conv169, 4
  %call171 = call i8* @xrealloc_1(i8* %140, i64 %mul170)
  %143 = bitcast i8* %call171 to i32*
  %144 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %success172 = getelementptr inbounds %struct.dfa, %struct.dfa* %144, i32 0, i32 19
  store i32* %143, i32** %success172, align 8
  %145 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %newlines = getelementptr inbounds %struct.dfa, %struct.dfa* %145, i32 0, i32 20
  %146 = load i32*, i32** %newlines, align 8
  %147 = bitcast i32* %146 to i8*
  %148 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %tralloc173 = getelementptr inbounds %struct.dfa, %struct.dfa* %148, i32 0, i32 14
  %149 = load i32, i32* %tralloc173, align 4
  %conv174 = sext i32 %149 to i64
  %mul175 = mul i64 %conv174, 4
  %call176 = call i8* @xrealloc_1(i8* %147, i64 %mul175)
  %150 = bitcast i8* %call176 to i32*
  %151 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %newlines177 = getelementptr inbounds %struct.dfa, %struct.dfa* %151, i32 0, i32 20
  store i32* %150, i32** %newlines177, align 8
  br label %while.cond178

while.cond178:                                    ; preds = %while.body182, %while.end
  %152 = load i32, i32* %oldalloc, align 4
  %153 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %tralloc179 = getelementptr inbounds %struct.dfa, %struct.dfa* %153, i32 0, i32 14
  %154 = load i32, i32* %tralloc179, align 4
  %cmp180 = icmp slt i32 %152, %154
  br i1 %cmp180, label %while.body182, label %while.end190

while.body182:                                    ; preds = %while.cond178
  %155 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %trans183 = getelementptr inbounds %struct.dfa, %struct.dfa* %155, i32 0, i32 16
  %156 = load i32**, i32*** %trans183, align 8
  %157 = load i32, i32* %oldalloc, align 4
  %idxprom184 = sext i32 %157 to i64
  %arrayidx185 = getelementptr inbounds i32*, i32** %156, i64 %idxprom184
  store i32* null, i32** %arrayidx185, align 8
  %158 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %fails186 = getelementptr inbounds %struct.dfa, %struct.dfa* %158, i32 0, i32 18
  %159 = load i32**, i32*** %fails186, align 8
  %160 = load i32, i32* %oldalloc, align 4
  %inc187 = add nsw i32 %160, 1
  store i32 %inc187, i32* %oldalloc, align 4
  %idxprom188 = sext i32 %160 to i64
  %arrayidx189 = getelementptr inbounds i32*, i32** %159, i64 %idxprom188
  store i32* null, i32** %arrayidx189, align 8
  br label %while.cond178, !llvm.loop !149

while.end190:                                     ; preds = %while.cond178
  br label %if.end191

if.end191:                                        ; preds = %while.end190, %for.body139
  br label %for.inc192

for.inc192:                                       ; preds = %if.end191
  %161 = load i32, i32* %i, align 4
  %inc193 = add nsw i32 %161, 1
  store i32 %inc193, i32* %i, align 4
  br label %for.cond136, !llvm.loop !150

for.end194:                                       ; preds = %for.cond136
  %162 = load i32*, i32** %trans, align 8
  %arrayidx195 = getelementptr inbounds i32, i32* %162, i64 10
  %163 = load i32, i32* %arrayidx195, align 4
  %164 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %newlines196 = getelementptr inbounds %struct.dfa, %struct.dfa* %164, i32 0, i32 20
  %165 = load i32*, i32** %newlines196, align 8
  %166 = load i32, i32* %s.addr, align 4
  %idxprom197 = sext i32 %166 to i64
  %arrayidx198 = getelementptr inbounds i32, i32* %165, i64 %idxprom197
  store i32 %163, i32* %arrayidx198, align 4
  %167 = load i32*, i32** %trans, align 8
  %arrayidx199 = getelementptr inbounds i32, i32* %167, i64 10
  store i32 -1, i32* %arrayidx199, align 4
  %168 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %states200 = getelementptr inbounds %struct.dfa, %struct.dfa* %168, i32 0, i32 9
  %169 = load %struct.dfa_state*, %struct.dfa_state** %states200, align 8
  %170 = load i32, i32* %s.addr, align 4
  %idxprom201 = sext i32 %170 to i64
  %arrayidx202 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %169, i64 %idxprom201
  %constraint203 = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %arrayidx202, i32 0, i32 5
  %171 = load i8, i8* %constraint203, align 1
  %tobool204 = icmp ne i8 %171, 0
  br i1 %tobool204, label %if.then205, label %if.else209

if.then205:                                       ; preds = %for.end194
  %172 = load i32*, i32** %trans, align 8
  %173 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %fails206 = getelementptr inbounds %struct.dfa, %struct.dfa* %173, i32 0, i32 18
  %174 = load i32**, i32*** %fails206, align 8
  %175 = load i32, i32* %s.addr, align 4
  %idxprom207 = sext i32 %175 to i64
  %arrayidx208 = getelementptr inbounds i32*, i32** %174, i64 %idxprom207
  store i32* %172, i32** %arrayidx208, align 8
  br label %if.end213

if.else209:                                       ; preds = %for.end194
  %176 = load i32*, i32** %trans, align 8
  %177 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %trans210 = getelementptr inbounds %struct.dfa, %struct.dfa* %177, i32 0, i32 16
  %178 = load i32**, i32*** %trans210, align 8
  %179 = load i32, i32* %s.addr, align 4
  %idxprom211 = sext i32 %179 to i64
  %arrayidx212 = getelementptr inbounds i32*, i32** %178, i64 %idxprom211
  store i32* %176, i32** %arrayidx212, align 8
  br label %if.end213

if.end213:                                        ; preds = %if.else209, %if.then205
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @dfainit(%struct.dfa* %d) #0 {
entry:
  %d.addr = alloca %struct.dfa*, align 8
  store %struct.dfa* %d, %struct.dfa** %d.addr, align 8
  %0 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %calloc = getelementptr inbounds %struct.dfa, %struct.dfa* %0, i32 0, i32 2
  store i32 1, i32* %calloc, align 4
  %1 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %calloc1 = getelementptr inbounds %struct.dfa, %struct.dfa* %1, i32 0, i32 2
  %2 = load i32, i32* %calloc1, align 4
  %conv = sext i32 %2 to i64
  %mul = mul i64 %conv, 32
  %call = call i8* @xmalloc_1(i64 %mul)
  %3 = bitcast i8* %call to [8 x i32]*
  %4 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %charclasses = getelementptr inbounds %struct.dfa, %struct.dfa* %4, i32 0, i32 0
  store [8 x i32]* %3, [8 x i32]** %charclasses, align 8
  %5 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %cindex = getelementptr inbounds %struct.dfa, %struct.dfa* %5, i32 0, i32 1
  store i32 0, i32* %cindex, align 8
  %6 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %talloc = getelementptr inbounds %struct.dfa, %struct.dfa* %6, i32 0, i32 5
  store i32 1, i32* %talloc, align 4
  %7 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %talloc2 = getelementptr inbounds %struct.dfa, %struct.dfa* %7, i32 0, i32 5
  %8 = load i32, i32* %talloc2, align 4
  %conv3 = sext i32 %8 to i64
  %mul4 = mul i64 %conv3, 4
  %call5 = call i8* @xmalloc_1(i64 %mul4)
  %9 = bitcast i8* %call5 to i32*
  %10 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %tokens = getelementptr inbounds %struct.dfa, %struct.dfa* %10, i32 0, i32 3
  store i32* %9, i32** %tokens, align 8
  %11 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %nregexps = getelementptr inbounds %struct.dfa, %struct.dfa* %11, i32 0, i32 8
  store i32 0, i32* %nregexps, align 8
  %12 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %nleaves = getelementptr inbounds %struct.dfa, %struct.dfa* %12, i32 0, i32 7
  store i32 0, i32* %nleaves, align 4
  %13 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %depth = getelementptr inbounds %struct.dfa, %struct.dfa* %13, i32 0, i32 6
  store i32 0, i32* %depth, align 8
  %14 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %tindex = getelementptr inbounds %struct.dfa, %struct.dfa* %14, i32 0, i32 4
  store i32 0, i32* %tindex, align 8
  %15 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %searchflag = getelementptr inbounds %struct.dfa, %struct.dfa* %15, i32 0, i32 13
  store i32 0, i32* %searchflag, align 8
  %16 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %tralloc = getelementptr inbounds %struct.dfa, %struct.dfa* %16, i32 0, i32 14
  store i32 0, i32* %tralloc, align 4
  %17 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %musts = getelementptr inbounds %struct.dfa, %struct.dfa* %17, i32 0, i32 21
  store %struct.dfamust* null, %struct.dfamust** %musts, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @dfacomp(i8* %s, i64 %len, %struct.dfa* %d, i32 %searchflag) #0 {
entry:
  %s.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %d.addr = alloca %struct.dfa*, align 8
  %searchflag.addr = alloca i32, align 4
  %copy = alloca i8*, align 8
  %i = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  store %struct.dfa* %d, %struct.dfa** %d.addr, align 8
  store i32 %searchflag, i32* %searchflag.addr, align 4
  %0 = load i32, i32* @case_fold, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.else23

if.then:                                          ; preds = %entry
  %1 = load i64, i64* %len.addr, align 8
  %call = call noalias align 16 i8* @malloc(i64 %1) #9
  store i8* %call, i8** %copy, align 8
  %2 = load i8*, i8** %copy, align 8
  %tobool1 = icmp ne i8* %2, null
  br i1 %tobool1, label %if.end, label %if.then2

if.then2:                                         ; preds = %if.then
  call void @dfaerror(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.20, i64 0, i64 0))
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  store i32 0, i32* @case_fold, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %3 = load i32, i32* %i, align 4
  %conv = sext i32 %3 to i64
  %4 = load i64, i64* %len.addr, align 8
  %cmp = icmp ult i64 %conv, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call4 = call i16** @__ctype_b_loc() #10
  %5 = load i16*, i16** %call4, align 8
  %6 = load i8*, i8** %s.addr, align 8
  %7 = load i32, i32* %i, align 4
  %idxprom = sext i32 %7 to i64
  %arrayidx = getelementptr inbounds i8, i8* %6, i64 %idxprom
  %8 = load i8, i8* %arrayidx, align 1
  %conv5 = sext i8 %8 to i32
  %idxprom6 = sext i32 %conv5 to i64
  %arrayidx7 = getelementptr inbounds i16, i16* %5, i64 %idxprom6
  %9 = load i16, i16* %arrayidx7, align 2
  %conv8 = zext i16 %9 to i32
  %and = and i32 %conv8, 256
  %tobool9 = icmp ne i32 %and, 0
  br i1 %tobool9, label %if.then10, label %if.else

if.then10:                                        ; preds = %for.body
  %10 = load i8*, i8** %s.addr, align 8
  %11 = load i32, i32* %i, align 4
  %idxprom11 = sext i32 %11 to i64
  %arrayidx12 = getelementptr inbounds i8, i8* %10, i64 %idxprom11
  %12 = load i8, i8* %arrayidx12, align 1
  %conv13 = sext i8 %12 to i32
  %call14 = call i32 @tolower(i32 %conv13) #11
  %conv15 = trunc i32 %call14 to i8
  %13 = load i8*, i8** %copy, align 8
  %14 = load i32, i32* %i, align 4
  %idxprom16 = sext i32 %14 to i64
  %arrayidx17 = getelementptr inbounds i8, i8* %13, i64 %idxprom16
  store i8 %conv15, i8* %arrayidx17, align 1
  br label %if.end22

if.else:                                          ; preds = %for.body
  %15 = load i8*, i8** %s.addr, align 8
  %16 = load i32, i32* %i, align 4
  %idxprom18 = sext i32 %16 to i64
  %arrayidx19 = getelementptr inbounds i8, i8* %15, i64 %idxprom18
  %17 = load i8, i8* %arrayidx19, align 1
  %18 = load i8*, i8** %copy, align 8
  %19 = load i32, i32* %i, align 4
  %idxprom20 = sext i32 %19 to i64
  %arrayidx21 = getelementptr inbounds i8, i8* %18, i64 %idxprom20
  store i8 %17, i8* %arrayidx21, align 1
  br label %if.end22

if.end22:                                         ; preds = %if.else, %if.then10
  br label %for.inc

for.inc:                                          ; preds = %if.end22
  %20 = load i32, i32* %i, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond, !llvm.loop !151

for.end:                                          ; preds = %for.cond
  %21 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  call void @dfainit(%struct.dfa* %21)
  %22 = load i8*, i8** %copy, align 8
  %23 = load i64, i64* %len.addr, align 8
  %24 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  call void @dfaparse(i8* %22, i64 %23, %struct.dfa* %24)
  %25 = load i8*, i8** %copy, align 8
  call void @free(i8* %25) #9
  %26 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  call void @dfamust(%struct.dfa* %26)
  %27 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %nregexps = getelementptr inbounds %struct.dfa, %struct.dfa* %27, i32 0, i32 8
  store i32 0, i32* %nregexps, align 8
  %28 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %nleaves = getelementptr inbounds %struct.dfa, %struct.dfa* %28, i32 0, i32 7
  store i32 0, i32* %nleaves, align 4
  %29 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %depth = getelementptr inbounds %struct.dfa, %struct.dfa* %29, i32 0, i32 6
  store i32 0, i32* %depth, align 8
  %30 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %tindex = getelementptr inbounds %struct.dfa, %struct.dfa* %30, i32 0, i32 4
  store i32 0, i32* %tindex, align 8
  %31 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %cindex = getelementptr inbounds %struct.dfa, %struct.dfa* %31, i32 0, i32 1
  store i32 0, i32* %cindex, align 8
  store i32 1, i32* @case_fold, align 4
  %32 = load i8*, i8** %s.addr, align 8
  %33 = load i64, i64* %len.addr, align 8
  %34 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  call void @dfaparse(i8* %32, i64 %33, %struct.dfa* %34)
  %35 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %36 = load i32, i32* %searchflag.addr, align 4
  call void @dfaanalyze(%struct.dfa* %35, i32 %36)
  br label %if.end24

if.else23:                                        ; preds = %entry
  %37 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  call void @dfainit(%struct.dfa* %37)
  %38 = load i8*, i8** %s.addr, align 8
  %39 = load i64, i64* %len.addr, align 8
  %40 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  call void @dfaparse(i8* %38, i64 %39, %struct.dfa* %40)
  %41 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  call void @dfamust(%struct.dfa* %41)
  %42 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %43 = load i32, i32* %searchflag.addr, align 4
  call void @dfaanalyze(%struct.dfa* %42, i32 %43)
  br label %if.end24

if.end24:                                         ; preds = %if.else23, %for.end
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @dfafree(%struct.dfa* %d) #0 {
entry:
  %d.addr = alloca %struct.dfa*, align 8
  %i = alloca i32, align 4
  %dm = alloca %struct.dfamust*, align 8
  %ndm = alloca %struct.dfamust*, align 8
  store %struct.dfa* %d, %struct.dfa** %d.addr, align 8
  %0 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %charclasses = getelementptr inbounds %struct.dfa, %struct.dfa* %0, i32 0, i32 0
  %1 = load [8 x i32]*, [8 x i32]** %charclasses, align 8
  %2 = bitcast [8 x i32]* %1 to i8*
  call void @free(i8* %2) #9
  %3 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %tokens = getelementptr inbounds %struct.dfa, %struct.dfa* %3, i32 0, i32 3
  %4 = load i32*, i32** %tokens, align 8
  %5 = bitcast i32* %4 to i8*
  call void @free(i8* %5) #9
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %6 = load i32, i32* %i, align 4
  %7 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %sindex = getelementptr inbounds %struct.dfa, %struct.dfa* %7, i32 0, i32 10
  %8 = load i32, i32* %sindex, align 8
  %cmp = icmp slt i32 %6, %8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %states = getelementptr inbounds %struct.dfa, %struct.dfa* %9, i32 0, i32 9
  %10 = load %struct.dfa_state*, %struct.dfa_state** %states, align 8
  %11 = load i32, i32* %i, align 4
  %idxprom = sext i32 %11 to i64
  %arrayidx = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %10, i64 %idxprom
  %elems = getelementptr inbounds %struct.dfa_state, %struct.dfa_state* %arrayidx, i32 0, i32 1
  %elems1 = getelementptr inbounds %struct.position_set, %struct.position_set* %elems, i32 0, i32 0
  %12 = load %struct.position*, %struct.position** %elems1, align 8
  %13 = bitcast %struct.position* %12 to i8*
  call void @free(i8* %13) #9
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond, !llvm.loop !152

for.end:                                          ; preds = %for.cond
  %15 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %states2 = getelementptr inbounds %struct.dfa, %struct.dfa* %15, i32 0, i32 9
  %16 = load %struct.dfa_state*, %struct.dfa_state** %states2, align 8
  %17 = bitcast %struct.dfa_state* %16 to i8*
  call void @free(i8* %17) #9
  store i32 0, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc13, %for.end
  %18 = load i32, i32* %i, align 4
  %19 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %tindex = getelementptr inbounds %struct.dfa, %struct.dfa* %19, i32 0, i32 4
  %20 = load i32, i32* %tindex, align 8
  %cmp4 = icmp slt i32 %18, %20
  br i1 %cmp4, label %for.body5, label %for.end15

for.body5:                                        ; preds = %for.cond3
  %21 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %follows = getelementptr inbounds %struct.dfa, %struct.dfa* %21, i32 0, i32 12
  %22 = load %struct.position_set*, %struct.position_set** %follows, align 8
  %23 = load i32, i32* %i, align 4
  %idxprom6 = sext i32 %23 to i64
  %arrayidx7 = getelementptr inbounds %struct.position_set, %struct.position_set* %22, i64 %idxprom6
  %elems8 = getelementptr inbounds %struct.position_set, %struct.position_set* %arrayidx7, i32 0, i32 0
  %24 = load %struct.position*, %struct.position** %elems8, align 8
  %tobool = icmp ne %struct.position* %24, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body5
  %25 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %follows9 = getelementptr inbounds %struct.dfa, %struct.dfa* %25, i32 0, i32 12
  %26 = load %struct.position_set*, %struct.position_set** %follows9, align 8
  %27 = load i32, i32* %i, align 4
  %idxprom10 = sext i32 %27 to i64
  %arrayidx11 = getelementptr inbounds %struct.position_set, %struct.position_set* %26, i64 %idxprom10
  %elems12 = getelementptr inbounds %struct.position_set, %struct.position_set* %arrayidx11, i32 0, i32 0
  %28 = load %struct.position*, %struct.position** %elems12, align 8
  %29 = bitcast %struct.position* %28 to i8*
  call void @free(i8* %29) #9
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body5
  br label %for.inc13

for.inc13:                                        ; preds = %if.end
  %30 = load i32, i32* %i, align 4
  %inc14 = add nsw i32 %30, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond3, !llvm.loop !153

for.end15:                                        ; preds = %for.cond3
  %31 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %follows16 = getelementptr inbounds %struct.dfa, %struct.dfa* %31, i32 0, i32 12
  %32 = load %struct.position_set*, %struct.position_set** %follows16, align 8
  %33 = bitcast %struct.position_set* %32 to i8*
  call void @free(i8* %33) #9
  store i32 0, i32* %i, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %for.inc36, %for.end15
  %34 = load i32, i32* %i, align 4
  %35 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %tralloc = getelementptr inbounds %struct.dfa, %struct.dfa* %35, i32 0, i32 14
  %36 = load i32, i32* %tralloc, align 4
  %cmp18 = icmp slt i32 %34, %36
  br i1 %cmp18, label %for.body19, label %for.end38

for.body19:                                       ; preds = %for.cond17
  %37 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %trans = getelementptr inbounds %struct.dfa, %struct.dfa* %37, i32 0, i32 16
  %38 = load i32**, i32*** %trans, align 8
  %39 = load i32, i32* %i, align 4
  %idxprom20 = sext i32 %39 to i64
  %arrayidx21 = getelementptr inbounds i32*, i32** %38, i64 %idxprom20
  %40 = load i32*, i32** %arrayidx21, align 8
  %tobool22 = icmp ne i32* %40, null
  br i1 %tobool22, label %if.then23, label %if.else

if.then23:                                        ; preds = %for.body19
  %41 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %trans24 = getelementptr inbounds %struct.dfa, %struct.dfa* %41, i32 0, i32 16
  %42 = load i32**, i32*** %trans24, align 8
  %43 = load i32, i32* %i, align 4
  %idxprom25 = sext i32 %43 to i64
  %arrayidx26 = getelementptr inbounds i32*, i32** %42, i64 %idxprom25
  %44 = load i32*, i32** %arrayidx26, align 8
  %45 = bitcast i32* %44 to i8*
  call void @free(i8* %45) #9
  br label %if.end35

if.else:                                          ; preds = %for.body19
  %46 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %fails = getelementptr inbounds %struct.dfa, %struct.dfa* %46, i32 0, i32 18
  %47 = load i32**, i32*** %fails, align 8
  %48 = load i32, i32* %i, align 4
  %idxprom27 = sext i32 %48 to i64
  %arrayidx28 = getelementptr inbounds i32*, i32** %47, i64 %idxprom27
  %49 = load i32*, i32** %arrayidx28, align 8
  %tobool29 = icmp ne i32* %49, null
  br i1 %tobool29, label %if.then30, label %if.end34

if.then30:                                        ; preds = %if.else
  %50 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %fails31 = getelementptr inbounds %struct.dfa, %struct.dfa* %50, i32 0, i32 18
  %51 = load i32**, i32*** %fails31, align 8
  %52 = load i32, i32* %i, align 4
  %idxprom32 = sext i32 %52 to i64
  %arrayidx33 = getelementptr inbounds i32*, i32** %51, i64 %idxprom32
  %53 = load i32*, i32** %arrayidx33, align 8
  %54 = bitcast i32* %53 to i8*
  call void @free(i8* %54) #9
  br label %if.end34

if.end34:                                         ; preds = %if.then30, %if.else
  br label %if.end35

if.end35:                                         ; preds = %if.end34, %if.then23
  br label %for.inc36

for.inc36:                                        ; preds = %if.end35
  %55 = load i32, i32* %i, align 4
  %inc37 = add nsw i32 %55, 1
  store i32 %inc37, i32* %i, align 4
  br label %for.cond17, !llvm.loop !154

for.end38:                                        ; preds = %for.cond17
  %56 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %realtrans = getelementptr inbounds %struct.dfa, %struct.dfa* %56, i32 0, i32 17
  %57 = load i32**, i32*** %realtrans, align 8
  %58 = bitcast i32** %57 to i8*
  call void @free(i8* %58) #9
  %59 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %fails39 = getelementptr inbounds %struct.dfa, %struct.dfa* %59, i32 0, i32 18
  %60 = load i32**, i32*** %fails39, align 8
  %61 = bitcast i32** %60 to i8*
  call void @free(i8* %61) #9
  %62 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %newlines = getelementptr inbounds %struct.dfa, %struct.dfa* %62, i32 0, i32 20
  %63 = load i32*, i32** %newlines, align 8
  %64 = bitcast i32* %63 to i8*
  call void @free(i8* %64) #9
  %65 = load %struct.dfa*, %struct.dfa** %d.addr, align 8
  %musts = getelementptr inbounds %struct.dfa, %struct.dfa* %65, i32 0, i32 21
  %66 = load %struct.dfamust*, %struct.dfamust** %musts, align 8
  store %struct.dfamust* %66, %struct.dfamust** %dm, align 8
  br label %for.cond40

for.cond40:                                       ; preds = %for.inc43, %for.end38
  %67 = load %struct.dfamust*, %struct.dfamust** %dm, align 8
  %tobool41 = icmp ne %struct.dfamust* %67, null
  br i1 %tobool41, label %for.body42, label %for.end44

for.body42:                                       ; preds = %for.cond40
  %68 = load %struct.dfamust*, %struct.dfamust** %dm, align 8
  %next = getelementptr inbounds %struct.dfamust, %struct.dfamust* %68, i32 0, i32 2
  %69 = load %struct.dfamust*, %struct.dfamust** %next, align 8
  store %struct.dfamust* %69, %struct.dfamust** %ndm, align 8
  %70 = load %struct.dfamust*, %struct.dfamust** %dm, align 8
  %must = getelementptr inbounds %struct.dfamust, %struct.dfamust* %70, i32 0, i32 1
  %71 = load i8*, i8** %must, align 8
  call void @free(i8* %71) #9
  %72 = load %struct.dfamust*, %struct.dfamust** %dm, align 8
  %73 = bitcast %struct.dfamust* %72 to i8*
  call void @free(i8* %73) #9
  br label %for.inc43

for.inc43:                                        ; preds = %for.body42
  %74 = load %struct.dfamust*, %struct.dfamust** %ndm, align 8
  store %struct.dfamust* %74, %struct.dfamust** %dm, align 8
  br label %for.cond40, !llvm.loop !155

for.end44:                                        ; preds = %for.cond40
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @kwsalloc(i8* %trans) #0 {
entry:
  %retval = alloca i8*, align 8
  %trans.addr = alloca i8*, align 8
  %kwset = alloca %struct.kwset*, align 8
  %__h = alloca %struct.obstack*, align 8
  %__o = alloca %struct.obstack*, align 8
  %__len = alloca i32, align 4
  %tmp = alloca i8*, align 8
  %__o1 = alloca %struct.obstack*, align 8
  %value = alloca i8*, align 8
  %tmp35 = alloca i8*, align 8
  store i8* %trans, i8** %trans.addr, align 8
  %call = call i8* @xmalloc(i64 2440)
  %0 = bitcast i8* %call to %struct.kwset*
  store %struct.kwset* %0, %struct.kwset** %kwset, align 8
  %1 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %tobool = icmp ne %struct.kwset* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %obstack = getelementptr inbounds %struct.kwset, %struct.kwset* %2, i32 0, i32 0
  call void @_obstack_begin(%struct.obstack* %obstack, i32 0, i32 0, i8* (...)* bitcast (i8* (i64)* @xmalloc to i8* (...)*), void (...)* bitcast (void (i8*)* @free to void (...)*))
  %3 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %words = getelementptr inbounds %struct.kwset, %struct.kwset* %3, i32 0, i32 1
  store i32 0, i32* %words, align 8
  %4 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %obstack1 = getelementptr inbounds %struct.kwset, %struct.kwset* %4, i32 0, i32 0
  store %struct.obstack* %obstack1, %struct.obstack** %__h, align 8
  %5 = load %struct.obstack*, %struct.obstack** %__h, align 8
  store %struct.obstack* %5, %struct.obstack** %__o, align 8
  store i32 56, i32* %__len, align 4
  %6 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %chunk_limit = getelementptr inbounds %struct.obstack, %struct.obstack* %6, i32 0, i32 4
  %7 = load i8*, i8** %chunk_limit, align 8
  %8 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %next_free = getelementptr inbounds %struct.obstack, %struct.obstack* %8, i32 0, i32 3
  %9 = load i8*, i8** %next_free, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %7 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %9 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %10 = load i32, i32* %__len, align 4
  %conv = sext i32 %10 to i64
  %cmp = icmp slt i64 %sub.ptr.sub, %conv
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %11 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %12 = load i32, i32* %__len, align 4
  call void @_obstack_newchunk(%struct.obstack* %11, i32 %12)
  br label %cond.end

cond.false:                                       ; preds = %if.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ]
  %13 = load i32, i32* %__len, align 4
  %14 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %next_free3 = getelementptr inbounds %struct.obstack, %struct.obstack* %14, i32 0, i32 3
  %15 = load i8*, i8** %next_free3, align 8
  %idx.ext = sext i32 %13 to i64
  %add.ptr = getelementptr inbounds i8, i8* %15, i64 %idx.ext
  store i8* %add.ptr, i8** %next_free3, align 8
  %16 = load %struct.obstack*, %struct.obstack** %__h, align 8
  store %struct.obstack* %16, %struct.obstack** %__o1, align 8
  %17 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %object_base = getelementptr inbounds %struct.obstack, %struct.obstack* %17, i32 0, i32 2
  %18 = load i8*, i8** %object_base, align 8
  store i8* %18, i8** %value, align 8
  %19 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %next_free4 = getelementptr inbounds %struct.obstack, %struct.obstack* %19, i32 0, i32 3
  %20 = load i8*, i8** %next_free4, align 8
  %21 = load i8*, i8** %value, align 8
  %cmp5 = icmp eq i8* %20, %21
  br i1 %cmp5, label %if.then7, label %if.end8

if.then7:                                         ; preds = %cond.end
  %22 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %maybe_empty_object = getelementptr inbounds %struct.obstack, %struct.obstack* %22, i32 0, i32 10
  %bf.load = load i8, i8* %maybe_empty_object, align 8
  %bf.clear = and i8 %bf.load, -3
  %bf.set = or i8 %bf.clear, 2
  store i8 %bf.set, i8* %maybe_empty_object, align 8
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %cond.end
  %23 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %next_free9 = getelementptr inbounds %struct.obstack, %struct.obstack* %23, i32 0, i32 3
  %24 = load i8*, i8** %next_free9, align 8
  %sub.ptr.lhs.cast10 = ptrtoint i8* %24 to i64
  %sub.ptr.sub11 = sub i64 %sub.ptr.lhs.cast10, 0
  %25 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %alignment_mask = getelementptr inbounds %struct.obstack, %struct.obstack* %25, i32 0, i32 6
  %26 = load i32, i32* %alignment_mask, align 8
  %conv12 = sext i32 %26 to i64
  %add = add nsw i64 %sub.ptr.sub11, %conv12
  %27 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %alignment_mask13 = getelementptr inbounds %struct.obstack, %struct.obstack* %27, i32 0, i32 6
  %28 = load i32, i32* %alignment_mask13, align 8
  %neg = xor i32 %28, -1
  %conv14 = sext i32 %neg to i64
  %and = and i64 %add, %conv14
  %29 = inttoptr i64 %and to i8*
  %30 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %next_free15 = getelementptr inbounds %struct.obstack, %struct.obstack* %30, i32 0, i32 3
  store i8* %29, i8** %next_free15, align 8
  %31 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %next_free16 = getelementptr inbounds %struct.obstack, %struct.obstack* %31, i32 0, i32 3
  %32 = load i8*, i8** %next_free16, align 8
  %33 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %chunk = getelementptr inbounds %struct.obstack, %struct.obstack* %33, i32 0, i32 1
  %34 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8
  %35 = bitcast %struct._obstack_chunk* %34 to i8*
  %sub.ptr.lhs.cast17 = ptrtoint i8* %32 to i64
  %sub.ptr.rhs.cast18 = ptrtoint i8* %35 to i64
  %sub.ptr.sub19 = sub i64 %sub.ptr.lhs.cast17, %sub.ptr.rhs.cast18
  %36 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %chunk_limit20 = getelementptr inbounds %struct.obstack, %struct.obstack* %36, i32 0, i32 4
  %37 = load i8*, i8** %chunk_limit20, align 8
  %38 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %chunk21 = getelementptr inbounds %struct.obstack, %struct.obstack* %38, i32 0, i32 1
  %39 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk21, align 8
  %40 = bitcast %struct._obstack_chunk* %39 to i8*
  %sub.ptr.lhs.cast22 = ptrtoint i8* %37 to i64
  %sub.ptr.rhs.cast23 = ptrtoint i8* %40 to i64
  %sub.ptr.sub24 = sub i64 %sub.ptr.lhs.cast22, %sub.ptr.rhs.cast23
  %cmp25 = icmp sgt i64 %sub.ptr.sub19, %sub.ptr.sub24
  br i1 %cmp25, label %cond.true27, label %cond.false30

cond.true27:                                      ; preds = %if.end8
  %41 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %chunk_limit28 = getelementptr inbounds %struct.obstack, %struct.obstack* %41, i32 0, i32 4
  %42 = load i8*, i8** %chunk_limit28, align 8
  %43 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %next_free29 = getelementptr inbounds %struct.obstack, %struct.obstack* %43, i32 0, i32 3
  store i8* %42, i8** %next_free29, align 8
  br label %cond.end31

cond.false30:                                     ; preds = %if.end8
  br label %cond.end31

cond.end31:                                       ; preds = %cond.false30, %cond.true27
  %cond32 = phi i8* [ %42, %cond.true27 ], [ null, %cond.false30 ]
  %44 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %next_free33 = getelementptr inbounds %struct.obstack, %struct.obstack* %44, i32 0, i32 3
  %45 = load i8*, i8** %next_free33, align 8
  %46 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %object_base34 = getelementptr inbounds %struct.obstack, %struct.obstack* %46, i32 0, i32 2
  store i8* %45, i8** %object_base34, align 8
  %47 = load i8*, i8** %value, align 8
  store i8* %47, i8** %tmp35, align 8
  %48 = load i8*, i8** %tmp35, align 8
  store i8* %48, i8** %tmp, align 8
  %49 = load i8*, i8** %tmp, align 8
  %50 = bitcast i8* %49 to %struct.trie*
  %51 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %trie = getelementptr inbounds %struct.kwset, %struct.kwset* %51, i32 0, i32 2
  store %struct.trie* %50, %struct.trie** %trie, align 8
  %52 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %trie36 = getelementptr inbounds %struct.kwset, %struct.kwset* %52, i32 0, i32 2
  %53 = load %struct.trie*, %struct.trie** %trie36, align 8
  %tobool37 = icmp ne %struct.trie* %53, null
  br i1 %tobool37, label %if.end39, label %if.then38

if.then38:                                        ; preds = %cond.end31
  %54 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %55 = bitcast %struct.kwset* %54 to i8*
  call void @kwsfree(i8* %55)
  store i8* null, i8** %retval, align 8
  br label %return

if.end39:                                         ; preds = %cond.end31
  %56 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %trie40 = getelementptr inbounds %struct.kwset, %struct.kwset* %56, i32 0, i32 2
  %57 = load %struct.trie*, %struct.trie** %trie40, align 8
  %accepting = getelementptr inbounds %struct.trie, %struct.trie* %57, i32 0, i32 0
  store i32 0, i32* %accepting, align 8
  %58 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %trie41 = getelementptr inbounds %struct.kwset, %struct.kwset* %58, i32 0, i32 2
  %59 = load %struct.trie*, %struct.trie** %trie41, align 8
  %links = getelementptr inbounds %struct.trie, %struct.trie* %59, i32 0, i32 1
  store %struct.tree* null, %struct.tree** %links, align 8
  %60 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %trie42 = getelementptr inbounds %struct.kwset, %struct.kwset* %60, i32 0, i32 2
  %61 = load %struct.trie*, %struct.trie** %trie42, align 8
  %parent = getelementptr inbounds %struct.trie, %struct.trie* %61, i32 0, i32 2
  store %struct.trie* null, %struct.trie** %parent, align 8
  %62 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %trie43 = getelementptr inbounds %struct.kwset, %struct.kwset* %62, i32 0, i32 2
  %63 = load %struct.trie*, %struct.trie** %trie43, align 8
  %next = getelementptr inbounds %struct.trie, %struct.trie* %63, i32 0, i32 3
  store %struct.trie* null, %struct.trie** %next, align 8
  %64 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %trie44 = getelementptr inbounds %struct.kwset, %struct.kwset* %64, i32 0, i32 2
  %65 = load %struct.trie*, %struct.trie** %trie44, align 8
  %fail = getelementptr inbounds %struct.trie, %struct.trie* %65, i32 0, i32 4
  store %struct.trie* null, %struct.trie** %fail, align 8
  %66 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %trie45 = getelementptr inbounds %struct.kwset, %struct.kwset* %66, i32 0, i32 2
  %67 = load %struct.trie*, %struct.trie** %trie45, align 8
  %depth = getelementptr inbounds %struct.trie, %struct.trie* %67, i32 0, i32 5
  store i32 0, i32* %depth, align 8
  %68 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %trie46 = getelementptr inbounds %struct.kwset, %struct.kwset* %68, i32 0, i32 2
  %69 = load %struct.trie*, %struct.trie** %trie46, align 8
  %shift = getelementptr inbounds %struct.trie, %struct.trie* %69, i32 0, i32 6
  store i32 0, i32* %shift, align 4
  %70 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %mind = getelementptr inbounds %struct.kwset, %struct.kwset* %70, i32 0, i32 3
  store i32 2147483647, i32* %mind, align 8
  %71 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %maxd = getelementptr inbounds %struct.kwset, %struct.kwset* %71, i32 0, i32 4
  store i32 -1, i32* %maxd, align 4
  %72 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %target = getelementptr inbounds %struct.kwset, %struct.kwset* %72, i32 0, i32 7
  store i8* null, i8** %target, align 8
  %73 = load i8*, i8** %trans.addr, align 8
  %74 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %trans47 = getelementptr inbounds %struct.kwset, %struct.kwset* %74, i32 0, i32 9
  store i8* %73, i8** %trans47, align 8
  %75 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %76 = bitcast %struct.kwset* %75 to i8*
  store i8* %76, i8** %retval, align 8
  br label %return

return:                                           ; preds = %if.end39, %if.then38, %if.then
  %77 = load i8*, i8** %retval, align 8
  ret i8* %77
}

declare dso_local void @_obstack_begin(%struct.obstack*, i32, i32, i8* (...)*, void (...)*) #5

declare dso_local void @_obstack_newchunk(%struct.obstack*, i32) #5

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @kwsfree(i8* %kws) #0 {
entry:
  %kws.addr = alloca i8*, align 8
  %kwset = alloca %struct.kwset*, align 8
  %__o = alloca %struct.obstack*, align 8
  %__obj = alloca i8*, align 8
  store i8* %kws, i8** %kws.addr, align 8
  %0 = load i8*, i8** %kws.addr, align 8
  %1 = bitcast i8* %0 to %struct.kwset*
  store %struct.kwset* %1, %struct.kwset** %kwset, align 8
  %2 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %obstack = getelementptr inbounds %struct.kwset, %struct.kwset* %2, i32 0, i32 0
  store %struct.obstack* %obstack, %struct.obstack** %__o, align 8
  store i8* null, i8** %__obj, align 8
  %3 = load i8*, i8** %__obj, align 8
  %4 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %chunk = getelementptr inbounds %struct.obstack, %struct.obstack* %4, i32 0, i32 1
  %5 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8
  %6 = bitcast %struct._obstack_chunk* %5 to i8*
  %cmp = icmp ugt i8* %3, %6
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %7 = load i8*, i8** %__obj, align 8
  %8 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %chunk_limit = getelementptr inbounds %struct.obstack, %struct.obstack* %8, i32 0, i32 4
  %9 = load i8*, i8** %chunk_limit, align 8
  %cmp1 = icmp ult i8* %7, %9
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %10 = load i8*, i8** %__obj, align 8
  %11 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %object_base = getelementptr inbounds %struct.obstack, %struct.obstack* %11, i32 0, i32 2
  store i8* %10, i8** %object_base, align 8
  %12 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %next_free = getelementptr inbounds %struct.obstack, %struct.obstack* %12, i32 0, i32 3
  store i8* %10, i8** %next_free, align 8
  br label %if.end

if.else:                                          ; preds = %land.lhs.true, %entry
  %13 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %14 = load i8*, i8** %__obj, align 8
  call void @obstack_free(%struct.obstack* %13, i8* %14)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %15 = load i8*, i8** %kws.addr, align 8
  call void @free(i8* %15) #9
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @kwsincr(i8* %kws, i8* %text, i64 %len) #0 {
entry:
  %retval = alloca i8*, align 8
  %kws.addr = alloca i8*, align 8
  %text.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %kwset = alloca %struct.kwset*, align 8
  %trie = alloca %struct.trie*, align 8
  %label = alloca i8, align 1
  %link = alloca %struct.tree*, align 8
  %depth = alloca i32, align 4
  %links = alloca [12 x %struct.tree*], align 16
  %dirs = alloca [12 x i32], align 16
  %t = alloca %struct.tree*, align 8
  %r = alloca %struct.tree*, align 8
  %l = alloca %struct.tree*, align 8
  %rl = alloca %struct.tree*, align 8
  %lr = alloca %struct.tree*, align 8
  %__h = alloca %struct.obstack*, align 8
  %__o = alloca %struct.obstack*, align 8
  %__len = alloca i32, align 4
  %tmp = alloca i8*, align 8
  %__o1 = alloca %struct.obstack*, align 8
  %value = alloca i8*, align 8
  %tmp72 = alloca i8*, align 8
  %__h78 = alloca %struct.obstack*, align 8
  %__o80 = alloca %struct.obstack*, align 8
  %__len81 = alloca i32, align 4
  %tmp97 = alloca i8*, align 8
  %__o198 = alloca %struct.obstack*, align 8
  %value99 = alloca i8*, align 8
  %tmp141 = alloca i8*, align 8
  store i8* %kws, i8** %kws.addr, align 8
  store i8* %text, i8** %text.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  %0 = load i8*, i8** %kws.addr, align 8
  %1 = bitcast i8* %0 to %struct.kwset*
  store %struct.kwset* %1, %struct.kwset** %kwset, align 8
  %2 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %trie1 = getelementptr inbounds %struct.kwset, %struct.kwset* %2, i32 0, i32 2
  %3 = load %struct.trie*, %struct.trie** %trie1, align 8
  store %struct.trie* %3, %struct.trie** %trie, align 8
  %4 = load i64, i64* %len.addr, align 8
  %5 = load i8*, i8** %text.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %5, i64 %4
  store i8* %add.ptr, i8** %text.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end322, %entry
  %6 = load i64, i64* %len.addr, align 8
  %dec = add i64 %6, -1
  store i64 %dec, i64* %len.addr, align 8
  %tobool = icmp ne i64 %6, 0
  br i1 %tobool, label %while.body, label %while.end324

while.body:                                       ; preds = %while.cond
  %7 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %trans = getelementptr inbounds %struct.kwset, %struct.kwset* %7, i32 0, i32 9
  %8 = load i8*, i8** %trans, align 8
  %tobool2 = icmp ne i8* %8, null
  br i1 %tobool2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %9 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %trans3 = getelementptr inbounds %struct.kwset, %struct.kwset* %9, i32 0, i32 9
  %10 = load i8*, i8** %trans3, align 8
  %11 = load i8*, i8** %text.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %11, i32 -1
  store i8* %incdec.ptr, i8** %text.addr, align 8
  %12 = load i8, i8* %incdec.ptr, align 1
  %idxprom = zext i8 %12 to i64
  %arrayidx = getelementptr inbounds i8, i8* %10, i64 %idxprom
  %13 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %13 to i32
  br label %cond.end

cond.false:                                       ; preds = %while.body
  %14 = load i8*, i8** %text.addr, align 8
  %incdec.ptr4 = getelementptr inbounds i8, i8* %14, i32 -1
  store i8* %incdec.ptr4, i8** %text.addr, align 8
  %15 = load i8, i8* %incdec.ptr4, align 1
  %conv5 = sext i8 %15 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv, %cond.true ], [ %conv5, %cond.false ]
  %conv6 = trunc i32 %cond to i8
  store i8 %conv6, i8* %label, align 1
  %16 = load %struct.trie*, %struct.trie** %trie, align 8
  %links7 = getelementptr inbounds %struct.trie, %struct.trie* %16, i32 0, i32 1
  %17 = load %struct.tree*, %struct.tree** %links7, align 8
  store %struct.tree* %17, %struct.tree** %link, align 8
  %18 = load %struct.trie*, %struct.trie** %trie, align 8
  %links8 = getelementptr inbounds %struct.trie, %struct.trie* %18, i32 0, i32 1
  %19 = bitcast %struct.tree** %links8 to %struct.tree*
  %arrayidx9 = getelementptr inbounds [12 x %struct.tree*], [12 x %struct.tree*]* %links, i64 0, i64 0
  store %struct.tree* %19, %struct.tree** %arrayidx9, align 16
  %arrayidx10 = getelementptr inbounds [12 x i32], [12 x i32]* %dirs, i64 0, i64 0
  store i32 0, i32* %arrayidx10, align 16
  store i32 1, i32* %depth, align 4
  br label %while.cond11

while.cond11:                                     ; preds = %if.end, %cond.end
  %20 = load %struct.tree*, %struct.tree** %link, align 8
  %tobool12 = icmp ne %struct.tree* %20, null
  br i1 %tobool12, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond11
  %21 = load i8, i8* %label, align 1
  %conv13 = zext i8 %21 to i32
  %22 = load %struct.tree*, %struct.tree** %link, align 8
  %label14 = getelementptr inbounds %struct.tree, %struct.tree* %22, i32 0, i32 3
  %23 = load i8, i8* %label14, align 8
  %conv15 = zext i8 %23 to i32
  %cmp = icmp ne i32 %conv13, %conv15
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond11
  %24 = phi i1 [ false, %while.cond11 ], [ %cmp, %land.rhs ]
  br i1 %24, label %while.body17, label %while.end

while.body17:                                     ; preds = %land.end
  %25 = load %struct.tree*, %struct.tree** %link, align 8
  %26 = load i32, i32* %depth, align 4
  %idxprom18 = sext i32 %26 to i64
  %arrayidx19 = getelementptr inbounds [12 x %struct.tree*], [12 x %struct.tree*]* %links, i64 0, i64 %idxprom18
  store %struct.tree* %25, %struct.tree** %arrayidx19, align 8
  %27 = load i8, i8* %label, align 1
  %conv20 = zext i8 %27 to i32
  %28 = load %struct.tree*, %struct.tree** %link, align 8
  %label21 = getelementptr inbounds %struct.tree, %struct.tree* %28, i32 0, i32 3
  %29 = load i8, i8* %label21, align 8
  %conv22 = zext i8 %29 to i32
  %cmp23 = icmp slt i32 %conv20, %conv22
  br i1 %cmp23, label %if.then, label %if.else

if.then:                                          ; preds = %while.body17
  %30 = load i32, i32* %depth, align 4
  %inc = add nsw i32 %30, 1
  store i32 %inc, i32* %depth, align 4
  %idxprom25 = sext i32 %30 to i64
  %arrayidx26 = getelementptr inbounds [12 x i32], [12 x i32]* %dirs, i64 0, i64 %idxprom25
  store i32 0, i32* %arrayidx26, align 4
  %31 = load %struct.tree*, %struct.tree** %link, align 8
  %llink = getelementptr inbounds %struct.tree, %struct.tree* %31, i32 0, i32 0
  %32 = load %struct.tree*, %struct.tree** %llink, align 8
  store %struct.tree* %32, %struct.tree** %link, align 8
  br label %if.end

if.else:                                          ; preds = %while.body17
  %33 = load i32, i32* %depth, align 4
  %inc27 = add nsw i32 %33, 1
  store i32 %inc27, i32* %depth, align 4
  %idxprom28 = sext i32 %33 to i64
  %arrayidx29 = getelementptr inbounds [12 x i32], [12 x i32]* %dirs, i64 0, i64 %idxprom28
  store i32 1, i32* %arrayidx29, align 4
  %34 = load %struct.tree*, %struct.tree** %link, align 8
  %rlink = getelementptr inbounds %struct.tree, %struct.tree* %34, i32 0, i32 1
  %35 = load %struct.tree*, %struct.tree** %rlink, align 8
  store %struct.tree* %35, %struct.tree** %link, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %while.cond11, !llvm.loop !156

while.end:                                        ; preds = %land.end
  %36 = load %struct.tree*, %struct.tree** %link, align 8
  %tobool30 = icmp ne %struct.tree* %36, null
  br i1 %tobool30, label %if.end322, label %if.then31

if.then31:                                        ; preds = %while.end
  %37 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %obstack = getelementptr inbounds %struct.kwset, %struct.kwset* %37, i32 0, i32 0
  store %struct.obstack* %obstack, %struct.obstack** %__h, align 8
  %38 = load %struct.obstack*, %struct.obstack** %__h, align 8
  store %struct.obstack* %38, %struct.obstack** %__o, align 8
  store i32 32, i32* %__len, align 4
  %39 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %chunk_limit = getelementptr inbounds %struct.obstack, %struct.obstack* %39, i32 0, i32 4
  %40 = load i8*, i8** %chunk_limit, align 8
  %41 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %next_free = getelementptr inbounds %struct.obstack, %struct.obstack* %41, i32 0, i32 3
  %42 = load i8*, i8** %next_free, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %40 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %42 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %43 = load i32, i32* %__len, align 4
  %conv32 = sext i32 %43 to i64
  %cmp33 = icmp slt i64 %sub.ptr.sub, %conv32
  br i1 %cmp33, label %cond.true35, label %cond.false36

cond.true35:                                      ; preds = %if.then31
  %44 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %45 = load i32, i32* %__len, align 4
  call void @_obstack_newchunk(%struct.obstack* %44, i32 %45)
  br label %cond.end37

cond.false36:                                     ; preds = %if.then31
  br label %cond.end37

cond.end37:                                       ; preds = %cond.false36, %cond.true35
  %cond38 = phi i32 [ 0, %cond.true35 ], [ 0, %cond.false36 ]
  %46 = load i32, i32* %__len, align 4
  %47 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %next_free39 = getelementptr inbounds %struct.obstack, %struct.obstack* %47, i32 0, i32 3
  %48 = load i8*, i8** %next_free39, align 8
  %idx.ext = sext i32 %46 to i64
  %add.ptr40 = getelementptr inbounds i8, i8* %48, i64 %idx.ext
  store i8* %add.ptr40, i8** %next_free39, align 8
  %49 = load %struct.obstack*, %struct.obstack** %__h, align 8
  store %struct.obstack* %49, %struct.obstack** %__o1, align 8
  %50 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %object_base = getelementptr inbounds %struct.obstack, %struct.obstack* %50, i32 0, i32 2
  %51 = load i8*, i8** %object_base, align 8
  store i8* %51, i8** %value, align 8
  %52 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %next_free41 = getelementptr inbounds %struct.obstack, %struct.obstack* %52, i32 0, i32 3
  %53 = load i8*, i8** %next_free41, align 8
  %54 = load i8*, i8** %value, align 8
  %cmp42 = icmp eq i8* %53, %54
  br i1 %cmp42, label %if.then44, label %if.end45

if.then44:                                        ; preds = %cond.end37
  %55 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %maybe_empty_object = getelementptr inbounds %struct.obstack, %struct.obstack* %55, i32 0, i32 10
  %bf.load = load i8, i8* %maybe_empty_object, align 8
  %bf.clear = and i8 %bf.load, -3
  %bf.set = or i8 %bf.clear, 2
  store i8 %bf.set, i8* %maybe_empty_object, align 8
  br label %if.end45

if.end45:                                         ; preds = %if.then44, %cond.end37
  %56 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %next_free46 = getelementptr inbounds %struct.obstack, %struct.obstack* %56, i32 0, i32 3
  %57 = load i8*, i8** %next_free46, align 8
  %sub.ptr.lhs.cast47 = ptrtoint i8* %57 to i64
  %sub.ptr.sub48 = sub i64 %sub.ptr.lhs.cast47, 0
  %58 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %alignment_mask = getelementptr inbounds %struct.obstack, %struct.obstack* %58, i32 0, i32 6
  %59 = load i32, i32* %alignment_mask, align 8
  %conv49 = sext i32 %59 to i64
  %add = add nsw i64 %sub.ptr.sub48, %conv49
  %60 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %alignment_mask50 = getelementptr inbounds %struct.obstack, %struct.obstack* %60, i32 0, i32 6
  %61 = load i32, i32* %alignment_mask50, align 8
  %neg = xor i32 %61, -1
  %conv51 = sext i32 %neg to i64
  %and = and i64 %add, %conv51
  %62 = inttoptr i64 %and to i8*
  %63 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %next_free52 = getelementptr inbounds %struct.obstack, %struct.obstack* %63, i32 0, i32 3
  store i8* %62, i8** %next_free52, align 8
  %64 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %next_free53 = getelementptr inbounds %struct.obstack, %struct.obstack* %64, i32 0, i32 3
  %65 = load i8*, i8** %next_free53, align 8
  %66 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %chunk = getelementptr inbounds %struct.obstack, %struct.obstack* %66, i32 0, i32 1
  %67 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8
  %68 = bitcast %struct._obstack_chunk* %67 to i8*
  %sub.ptr.lhs.cast54 = ptrtoint i8* %65 to i64
  %sub.ptr.rhs.cast55 = ptrtoint i8* %68 to i64
  %sub.ptr.sub56 = sub i64 %sub.ptr.lhs.cast54, %sub.ptr.rhs.cast55
  %69 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %chunk_limit57 = getelementptr inbounds %struct.obstack, %struct.obstack* %69, i32 0, i32 4
  %70 = load i8*, i8** %chunk_limit57, align 8
  %71 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %chunk58 = getelementptr inbounds %struct.obstack, %struct.obstack* %71, i32 0, i32 1
  %72 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk58, align 8
  %73 = bitcast %struct._obstack_chunk* %72 to i8*
  %sub.ptr.lhs.cast59 = ptrtoint i8* %70 to i64
  %sub.ptr.rhs.cast60 = ptrtoint i8* %73 to i64
  %sub.ptr.sub61 = sub i64 %sub.ptr.lhs.cast59, %sub.ptr.rhs.cast60
  %cmp62 = icmp sgt i64 %sub.ptr.sub56, %sub.ptr.sub61
  br i1 %cmp62, label %cond.true64, label %cond.false67

cond.true64:                                      ; preds = %if.end45
  %74 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %chunk_limit65 = getelementptr inbounds %struct.obstack, %struct.obstack* %74, i32 0, i32 4
  %75 = load i8*, i8** %chunk_limit65, align 8
  %76 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %next_free66 = getelementptr inbounds %struct.obstack, %struct.obstack* %76, i32 0, i32 3
  store i8* %75, i8** %next_free66, align 8
  br label %cond.end68

cond.false67:                                     ; preds = %if.end45
  br label %cond.end68

cond.end68:                                       ; preds = %cond.false67, %cond.true64
  %cond69 = phi i8* [ %75, %cond.true64 ], [ null, %cond.false67 ]
  %77 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %next_free70 = getelementptr inbounds %struct.obstack, %struct.obstack* %77, i32 0, i32 3
  %78 = load i8*, i8** %next_free70, align 8
  %79 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %object_base71 = getelementptr inbounds %struct.obstack, %struct.obstack* %79, i32 0, i32 2
  store i8* %78, i8** %object_base71, align 8
  %80 = load i8*, i8** %value, align 8
  store i8* %80, i8** %tmp72, align 8
  %81 = load i8*, i8** %tmp72, align 8
  store i8* %81, i8** %tmp, align 8
  %82 = load i8*, i8** %tmp, align 8
  %83 = bitcast i8* %82 to %struct.tree*
  store %struct.tree* %83, %struct.tree** %link, align 8
  %84 = load %struct.tree*, %struct.tree** %link, align 8
  %tobool73 = icmp ne %struct.tree* %84, null
  br i1 %tobool73, label %if.end75, label %if.then74

if.then74:                                        ; preds = %cond.end68
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0), i8** %retval, align 8
  br label %return

if.end75:                                         ; preds = %cond.end68
  %85 = load %struct.tree*, %struct.tree** %link, align 8
  %llink76 = getelementptr inbounds %struct.tree, %struct.tree* %85, i32 0, i32 0
  store %struct.tree* null, %struct.tree** %llink76, align 8
  %86 = load %struct.tree*, %struct.tree** %link, align 8
  %rlink77 = getelementptr inbounds %struct.tree, %struct.tree* %86, i32 0, i32 1
  store %struct.tree* null, %struct.tree** %rlink77, align 8
  %87 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %obstack79 = getelementptr inbounds %struct.kwset, %struct.kwset* %87, i32 0, i32 0
  store %struct.obstack* %obstack79, %struct.obstack** %__h78, align 8
  %88 = load %struct.obstack*, %struct.obstack** %__h78, align 8
  store %struct.obstack* %88, %struct.obstack** %__o80, align 8
  store i32 56, i32* %__len81, align 4
  %89 = load %struct.obstack*, %struct.obstack** %__o80, align 8
  %chunk_limit82 = getelementptr inbounds %struct.obstack, %struct.obstack* %89, i32 0, i32 4
  %90 = load i8*, i8** %chunk_limit82, align 8
  %91 = load %struct.obstack*, %struct.obstack** %__o80, align 8
  %next_free83 = getelementptr inbounds %struct.obstack, %struct.obstack* %91, i32 0, i32 3
  %92 = load i8*, i8** %next_free83, align 8
  %sub.ptr.lhs.cast84 = ptrtoint i8* %90 to i64
  %sub.ptr.rhs.cast85 = ptrtoint i8* %92 to i64
  %sub.ptr.sub86 = sub i64 %sub.ptr.lhs.cast84, %sub.ptr.rhs.cast85
  %93 = load i32, i32* %__len81, align 4
  %conv87 = sext i32 %93 to i64
  %cmp88 = icmp slt i64 %sub.ptr.sub86, %conv87
  br i1 %cmp88, label %cond.true90, label %cond.false91

cond.true90:                                      ; preds = %if.end75
  %94 = load %struct.obstack*, %struct.obstack** %__o80, align 8
  %95 = load i32, i32* %__len81, align 4
  call void @_obstack_newchunk(%struct.obstack* %94, i32 %95)
  br label %cond.end92

cond.false91:                                     ; preds = %if.end75
  br label %cond.end92

cond.end92:                                       ; preds = %cond.false91, %cond.true90
  %cond93 = phi i32 [ 0, %cond.true90 ], [ 0, %cond.false91 ]
  %96 = load i32, i32* %__len81, align 4
  %97 = load %struct.obstack*, %struct.obstack** %__o80, align 8
  %next_free94 = getelementptr inbounds %struct.obstack, %struct.obstack* %97, i32 0, i32 3
  %98 = load i8*, i8** %next_free94, align 8
  %idx.ext95 = sext i32 %96 to i64
  %add.ptr96 = getelementptr inbounds i8, i8* %98, i64 %idx.ext95
  store i8* %add.ptr96, i8** %next_free94, align 8
  %99 = load %struct.obstack*, %struct.obstack** %__h78, align 8
  store %struct.obstack* %99, %struct.obstack** %__o198, align 8
  %100 = load %struct.obstack*, %struct.obstack** %__o198, align 8
  %object_base100 = getelementptr inbounds %struct.obstack, %struct.obstack* %100, i32 0, i32 2
  %101 = load i8*, i8** %object_base100, align 8
  store i8* %101, i8** %value99, align 8
  %102 = load %struct.obstack*, %struct.obstack** %__o198, align 8
  %next_free101 = getelementptr inbounds %struct.obstack, %struct.obstack* %102, i32 0, i32 3
  %103 = load i8*, i8** %next_free101, align 8
  %104 = load i8*, i8** %value99, align 8
  %cmp102 = icmp eq i8* %103, %104
  br i1 %cmp102, label %if.then104, label %if.end109

if.then104:                                       ; preds = %cond.end92
  %105 = load %struct.obstack*, %struct.obstack** %__o198, align 8
  %maybe_empty_object105 = getelementptr inbounds %struct.obstack, %struct.obstack* %105, i32 0, i32 10
  %bf.load106 = load i8, i8* %maybe_empty_object105, align 8
  %bf.clear107 = and i8 %bf.load106, -3
  %bf.set108 = or i8 %bf.clear107, 2
  store i8 %bf.set108, i8* %maybe_empty_object105, align 8
  br label %if.end109

if.end109:                                        ; preds = %if.then104, %cond.end92
  %106 = load %struct.obstack*, %struct.obstack** %__o198, align 8
  %next_free110 = getelementptr inbounds %struct.obstack, %struct.obstack* %106, i32 0, i32 3
  %107 = load i8*, i8** %next_free110, align 8
  %sub.ptr.lhs.cast111 = ptrtoint i8* %107 to i64
  %sub.ptr.sub112 = sub i64 %sub.ptr.lhs.cast111, 0
  %108 = load %struct.obstack*, %struct.obstack** %__o198, align 8
  %alignment_mask113 = getelementptr inbounds %struct.obstack, %struct.obstack* %108, i32 0, i32 6
  %109 = load i32, i32* %alignment_mask113, align 8
  %conv114 = sext i32 %109 to i64
  %add115 = add nsw i64 %sub.ptr.sub112, %conv114
  %110 = load %struct.obstack*, %struct.obstack** %__o198, align 8
  %alignment_mask116 = getelementptr inbounds %struct.obstack, %struct.obstack* %110, i32 0, i32 6
  %111 = load i32, i32* %alignment_mask116, align 8
  %neg117 = xor i32 %111, -1
  %conv118 = sext i32 %neg117 to i64
  %and119 = and i64 %add115, %conv118
  %112 = inttoptr i64 %and119 to i8*
  %113 = load %struct.obstack*, %struct.obstack** %__o198, align 8
  %next_free120 = getelementptr inbounds %struct.obstack, %struct.obstack* %113, i32 0, i32 3
  store i8* %112, i8** %next_free120, align 8
  %114 = load %struct.obstack*, %struct.obstack** %__o198, align 8
  %next_free121 = getelementptr inbounds %struct.obstack, %struct.obstack* %114, i32 0, i32 3
  %115 = load i8*, i8** %next_free121, align 8
  %116 = load %struct.obstack*, %struct.obstack** %__o198, align 8
  %chunk122 = getelementptr inbounds %struct.obstack, %struct.obstack* %116, i32 0, i32 1
  %117 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk122, align 8
  %118 = bitcast %struct._obstack_chunk* %117 to i8*
  %sub.ptr.lhs.cast123 = ptrtoint i8* %115 to i64
  %sub.ptr.rhs.cast124 = ptrtoint i8* %118 to i64
  %sub.ptr.sub125 = sub i64 %sub.ptr.lhs.cast123, %sub.ptr.rhs.cast124
  %119 = load %struct.obstack*, %struct.obstack** %__o198, align 8
  %chunk_limit126 = getelementptr inbounds %struct.obstack, %struct.obstack* %119, i32 0, i32 4
  %120 = load i8*, i8** %chunk_limit126, align 8
  %121 = load %struct.obstack*, %struct.obstack** %__o198, align 8
  %chunk127 = getelementptr inbounds %struct.obstack, %struct.obstack* %121, i32 0, i32 1
  %122 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk127, align 8
  %123 = bitcast %struct._obstack_chunk* %122 to i8*
  %sub.ptr.lhs.cast128 = ptrtoint i8* %120 to i64
  %sub.ptr.rhs.cast129 = ptrtoint i8* %123 to i64
  %sub.ptr.sub130 = sub i64 %sub.ptr.lhs.cast128, %sub.ptr.rhs.cast129
  %cmp131 = icmp sgt i64 %sub.ptr.sub125, %sub.ptr.sub130
  br i1 %cmp131, label %cond.true133, label %cond.false136

cond.true133:                                     ; preds = %if.end109
  %124 = load %struct.obstack*, %struct.obstack** %__o198, align 8
  %chunk_limit134 = getelementptr inbounds %struct.obstack, %struct.obstack* %124, i32 0, i32 4
  %125 = load i8*, i8** %chunk_limit134, align 8
  %126 = load %struct.obstack*, %struct.obstack** %__o198, align 8
  %next_free135 = getelementptr inbounds %struct.obstack, %struct.obstack* %126, i32 0, i32 3
  store i8* %125, i8** %next_free135, align 8
  br label %cond.end137

cond.false136:                                    ; preds = %if.end109
  br label %cond.end137

cond.end137:                                      ; preds = %cond.false136, %cond.true133
  %cond138 = phi i8* [ %125, %cond.true133 ], [ null, %cond.false136 ]
  %127 = load %struct.obstack*, %struct.obstack** %__o198, align 8
  %next_free139 = getelementptr inbounds %struct.obstack, %struct.obstack* %127, i32 0, i32 3
  %128 = load i8*, i8** %next_free139, align 8
  %129 = load %struct.obstack*, %struct.obstack** %__o198, align 8
  %object_base140 = getelementptr inbounds %struct.obstack, %struct.obstack* %129, i32 0, i32 2
  store i8* %128, i8** %object_base140, align 8
  %130 = load i8*, i8** %value99, align 8
  store i8* %130, i8** %tmp141, align 8
  %131 = load i8*, i8** %tmp141, align 8
  store i8* %131, i8** %tmp97, align 8
  %132 = load i8*, i8** %tmp97, align 8
  %133 = bitcast i8* %132 to %struct.trie*
  %134 = load %struct.tree*, %struct.tree** %link, align 8
  %trie142 = getelementptr inbounds %struct.tree, %struct.tree* %134, i32 0, i32 2
  store %struct.trie* %133, %struct.trie** %trie142, align 8
  %135 = load %struct.tree*, %struct.tree** %link, align 8
  %trie143 = getelementptr inbounds %struct.tree, %struct.tree* %135, i32 0, i32 2
  %136 = load %struct.trie*, %struct.trie** %trie143, align 8
  %tobool144 = icmp ne %struct.trie* %136, null
  br i1 %tobool144, label %if.end146, label %if.then145

if.then145:                                       ; preds = %cond.end137
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0), i8** %retval, align 8
  br label %return

if.end146:                                        ; preds = %cond.end137
  %137 = load %struct.tree*, %struct.tree** %link, align 8
  %trie147 = getelementptr inbounds %struct.tree, %struct.tree* %137, i32 0, i32 2
  %138 = load %struct.trie*, %struct.trie** %trie147, align 8
  %accepting = getelementptr inbounds %struct.trie, %struct.trie* %138, i32 0, i32 0
  store i32 0, i32* %accepting, align 8
  %139 = load %struct.tree*, %struct.tree** %link, align 8
  %trie148 = getelementptr inbounds %struct.tree, %struct.tree* %139, i32 0, i32 2
  %140 = load %struct.trie*, %struct.trie** %trie148, align 8
  %links149 = getelementptr inbounds %struct.trie, %struct.trie* %140, i32 0, i32 1
  store %struct.tree* null, %struct.tree** %links149, align 8
  %141 = load %struct.trie*, %struct.trie** %trie, align 8
  %142 = load %struct.tree*, %struct.tree** %link, align 8
  %trie150 = getelementptr inbounds %struct.tree, %struct.tree* %142, i32 0, i32 2
  %143 = load %struct.trie*, %struct.trie** %trie150, align 8
  %parent = getelementptr inbounds %struct.trie, %struct.trie* %143, i32 0, i32 2
  store %struct.trie* %141, %struct.trie** %parent, align 8
  %144 = load %struct.tree*, %struct.tree** %link, align 8
  %trie151 = getelementptr inbounds %struct.tree, %struct.tree* %144, i32 0, i32 2
  %145 = load %struct.trie*, %struct.trie** %trie151, align 8
  %next = getelementptr inbounds %struct.trie, %struct.trie* %145, i32 0, i32 3
  store %struct.trie* null, %struct.trie** %next, align 8
  %146 = load %struct.tree*, %struct.tree** %link, align 8
  %trie152 = getelementptr inbounds %struct.tree, %struct.tree* %146, i32 0, i32 2
  %147 = load %struct.trie*, %struct.trie** %trie152, align 8
  %fail = getelementptr inbounds %struct.trie, %struct.trie* %147, i32 0, i32 4
  store %struct.trie* null, %struct.trie** %fail, align 8
  %148 = load %struct.trie*, %struct.trie** %trie, align 8
  %depth153 = getelementptr inbounds %struct.trie, %struct.trie* %148, i32 0, i32 5
  %149 = load i32, i32* %depth153, align 8
  %add154 = add nsw i32 %149, 1
  %150 = load %struct.tree*, %struct.tree** %link, align 8
  %trie155 = getelementptr inbounds %struct.tree, %struct.tree* %150, i32 0, i32 2
  %151 = load %struct.trie*, %struct.trie** %trie155, align 8
  %depth156 = getelementptr inbounds %struct.trie, %struct.trie* %151, i32 0, i32 5
  store i32 %add154, i32* %depth156, align 8
  %152 = load %struct.tree*, %struct.tree** %link, align 8
  %trie157 = getelementptr inbounds %struct.tree, %struct.tree* %152, i32 0, i32 2
  %153 = load %struct.trie*, %struct.trie** %trie157, align 8
  %shift = getelementptr inbounds %struct.trie, %struct.trie* %153, i32 0, i32 6
  store i32 0, i32* %shift, align 4
  %154 = load i8, i8* %label, align 1
  %155 = load %struct.tree*, %struct.tree** %link, align 8
  %label158 = getelementptr inbounds %struct.tree, %struct.tree* %155, i32 0, i32 3
  store i8 %154, i8* %label158, align 8
  %156 = load %struct.tree*, %struct.tree** %link, align 8
  %balance = getelementptr inbounds %struct.tree, %struct.tree* %156, i32 0, i32 4
  store i8 0, i8* %balance, align 1
  %157 = load i32, i32* %depth, align 4
  %dec159 = add nsw i32 %157, -1
  store i32 %dec159, i32* %depth, align 4
  %idxprom160 = sext i32 %dec159 to i64
  %arrayidx161 = getelementptr inbounds [12 x i32], [12 x i32]* %dirs, i64 0, i64 %idxprom160
  %158 = load i32, i32* %arrayidx161, align 4
  %cmp162 = icmp eq i32 %158, 0
  br i1 %cmp162, label %if.then164, label %if.else168

if.then164:                                       ; preds = %if.end146
  %159 = load %struct.tree*, %struct.tree** %link, align 8
  %160 = load i32, i32* %depth, align 4
  %idxprom165 = sext i32 %160 to i64
  %arrayidx166 = getelementptr inbounds [12 x %struct.tree*], [12 x %struct.tree*]* %links, i64 0, i64 %idxprom165
  %161 = load %struct.tree*, %struct.tree** %arrayidx166, align 8
  %llink167 = getelementptr inbounds %struct.tree, %struct.tree* %161, i32 0, i32 0
  store %struct.tree* %159, %struct.tree** %llink167, align 8
  br label %if.end172

if.else168:                                       ; preds = %if.end146
  %162 = load %struct.tree*, %struct.tree** %link, align 8
  %163 = load i32, i32* %depth, align 4
  %idxprom169 = sext i32 %163 to i64
  %arrayidx170 = getelementptr inbounds [12 x %struct.tree*], [12 x %struct.tree*]* %links, i64 0, i64 %idxprom169
  %164 = load %struct.tree*, %struct.tree** %arrayidx170, align 8
  %rlink171 = getelementptr inbounds %struct.tree, %struct.tree* %164, i32 0, i32 1
  store %struct.tree* %162, %struct.tree** %rlink171, align 8
  br label %if.end172

if.end172:                                        ; preds = %if.else168, %if.then164
  br label %while.cond173

while.cond173:                                    ; preds = %if.end196, %if.end172
  %165 = load i32, i32* %depth, align 4
  %tobool174 = icmp ne i32 %165, 0
  br i1 %tobool174, label %land.rhs175, label %land.end180

land.rhs175:                                      ; preds = %while.cond173
  %166 = load i32, i32* %depth, align 4
  %idxprom176 = sext i32 %166 to i64
  %arrayidx177 = getelementptr inbounds [12 x %struct.tree*], [12 x %struct.tree*]* %links, i64 0, i64 %idxprom176
  %167 = load %struct.tree*, %struct.tree** %arrayidx177, align 8
  %balance178 = getelementptr inbounds %struct.tree, %struct.tree* %167, i32 0, i32 4
  %168 = load i8, i8* %balance178, align 1
  %tobool179 = icmp ne i8 %168, 0
  %lnot = xor i1 %tobool179, true
  br label %land.end180

land.end180:                                      ; preds = %land.rhs175, %while.cond173
  %169 = phi i1 [ false, %while.cond173 ], [ %lnot, %land.rhs175 ]
  br i1 %169, label %while.body181, label %while.end198

while.body181:                                    ; preds = %land.end180
  %170 = load i32, i32* %depth, align 4
  %idxprom182 = sext i32 %170 to i64
  %arrayidx183 = getelementptr inbounds [12 x i32], [12 x i32]* %dirs, i64 0, i64 %idxprom182
  %171 = load i32, i32* %arrayidx183, align 4
  %cmp184 = icmp eq i32 %171, 0
  br i1 %cmp184, label %if.then186, label %if.else191

if.then186:                                       ; preds = %while.body181
  %172 = load i32, i32* %depth, align 4
  %idxprom187 = sext i32 %172 to i64
  %arrayidx188 = getelementptr inbounds [12 x %struct.tree*], [12 x %struct.tree*]* %links, i64 0, i64 %idxprom187
  %173 = load %struct.tree*, %struct.tree** %arrayidx188, align 8
  %balance189 = getelementptr inbounds %struct.tree, %struct.tree* %173, i32 0, i32 4
  %174 = load i8, i8* %balance189, align 1
  %dec190 = add i8 %174, -1
  store i8 %dec190, i8* %balance189, align 1
  br label %if.end196

if.else191:                                       ; preds = %while.body181
  %175 = load i32, i32* %depth, align 4
  %idxprom192 = sext i32 %175 to i64
  %arrayidx193 = getelementptr inbounds [12 x %struct.tree*], [12 x %struct.tree*]* %links, i64 0, i64 %idxprom192
  %176 = load %struct.tree*, %struct.tree** %arrayidx193, align 8
  %balance194 = getelementptr inbounds %struct.tree, %struct.tree* %176, i32 0, i32 4
  %177 = load i8, i8* %balance194, align 1
  %inc195 = add i8 %177, 1
  store i8 %inc195, i8* %balance194, align 1
  br label %if.end196

if.end196:                                        ; preds = %if.else191, %if.then186
  %178 = load i32, i32* %depth, align 4
  %dec197 = add nsw i32 %178, -1
  store i32 %dec197, i32* %depth, align 4
  br label %while.cond173, !llvm.loop !157

while.end198:                                     ; preds = %land.end180
  %179 = load i32, i32* %depth, align 4
  %tobool199 = icmp ne i32 %179, 0
  br i1 %tobool199, label %land.lhs.true, label %if.end321

land.lhs.true:                                    ; preds = %while.end198
  %180 = load i32, i32* %depth, align 4
  %idxprom200 = sext i32 %180 to i64
  %arrayidx201 = getelementptr inbounds [12 x i32], [12 x i32]* %dirs, i64 0, i64 %idxprom200
  %181 = load i32, i32* %arrayidx201, align 4
  %cmp202 = icmp eq i32 %181, 0
  br i1 %cmp202, label %land.lhs.true204, label %lor.lhs.false

land.lhs.true204:                                 ; preds = %land.lhs.true
  %182 = load i32, i32* %depth, align 4
  %idxprom205 = sext i32 %182 to i64
  %arrayidx206 = getelementptr inbounds [12 x %struct.tree*], [12 x %struct.tree*]* %links, i64 0, i64 %idxprom205
  %183 = load %struct.tree*, %struct.tree** %arrayidx206, align 8
  %balance207 = getelementptr inbounds %struct.tree, %struct.tree* %183, i32 0, i32 4
  %184 = load i8, i8* %balance207, align 1
  %dec208 = add i8 %184, -1
  store i8 %dec208, i8* %balance207, align 1
  %conv209 = sext i8 %dec208 to i32
  %tobool210 = icmp ne i32 %conv209, 0
  br i1 %tobool210, label %if.then222, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true204, %land.lhs.true
  %185 = load i32, i32* %depth, align 4
  %idxprom211 = sext i32 %185 to i64
  %arrayidx212 = getelementptr inbounds [12 x i32], [12 x i32]* %dirs, i64 0, i64 %idxprom211
  %186 = load i32, i32* %arrayidx212, align 4
  %cmp213 = icmp eq i32 %186, 1
  br i1 %cmp213, label %land.lhs.true215, label %if.end321

land.lhs.true215:                                 ; preds = %lor.lhs.false
  %187 = load i32, i32* %depth, align 4
  %idxprom216 = sext i32 %187 to i64
  %arrayidx217 = getelementptr inbounds [12 x %struct.tree*], [12 x %struct.tree*]* %links, i64 0, i64 %idxprom216
  %188 = load %struct.tree*, %struct.tree** %arrayidx217, align 8
  %balance218 = getelementptr inbounds %struct.tree, %struct.tree* %188, i32 0, i32 4
  %189 = load i8, i8* %balance218, align 1
  %inc219 = add i8 %189, 1
  store i8 %inc219, i8* %balance218, align 1
  %conv220 = sext i8 %inc219 to i32
  %tobool221 = icmp ne i32 %conv220, 0
  br i1 %tobool221, label %if.then222, label %if.end321

if.then222:                                       ; preds = %land.lhs.true215, %land.lhs.true204
  %190 = load i32, i32* %depth, align 4
  %idxprom223 = sext i32 %190 to i64
  %arrayidx224 = getelementptr inbounds [12 x %struct.tree*], [12 x %struct.tree*]* %links, i64 0, i64 %idxprom223
  %191 = load %struct.tree*, %struct.tree** %arrayidx224, align 8
  %balance225 = getelementptr inbounds %struct.tree, %struct.tree* %191, i32 0, i32 4
  %192 = load i8, i8* %balance225, align 1
  %conv226 = sext i8 %192 to i32
  switch i32 %conv226, label %sw.epilog305 [
    i32 -2, label %sw.bb
    i32 2, label %sw.bb265
  ]

sw.bb:                                            ; preds = %if.then222
  %193 = load i32, i32* %depth, align 4
  %add227 = add nsw i32 %193, 1
  %idxprom228 = sext i32 %add227 to i64
  %arrayidx229 = getelementptr inbounds [12 x i32], [12 x i32]* %dirs, i64 0, i64 %idxprom228
  %194 = load i32, i32* %arrayidx229, align 4
  switch i32 %194, label %sw.epilog [
    i32 0, label %sw.bb230
    i32 1, label %sw.bb239
  ]

sw.bb230:                                         ; preds = %sw.bb
  %195 = load i32, i32* %depth, align 4
  %idxprom231 = sext i32 %195 to i64
  %arrayidx232 = getelementptr inbounds [12 x %struct.tree*], [12 x %struct.tree*]* %links, i64 0, i64 %idxprom231
  %196 = load %struct.tree*, %struct.tree** %arrayidx232, align 8
  store %struct.tree* %196, %struct.tree** %r, align 8
  %197 = load %struct.tree*, %struct.tree** %r, align 8
  %llink233 = getelementptr inbounds %struct.tree, %struct.tree* %197, i32 0, i32 0
  %198 = load %struct.tree*, %struct.tree** %llink233, align 8
  store %struct.tree* %198, %struct.tree** %t, align 8
  %199 = load %struct.tree*, %struct.tree** %t, align 8
  %rlink234 = getelementptr inbounds %struct.tree, %struct.tree* %199, i32 0, i32 1
  %200 = load %struct.tree*, %struct.tree** %rlink234, align 8
  store %struct.tree* %200, %struct.tree** %rl, align 8
  %201 = load %struct.tree*, %struct.tree** %r, align 8
  %202 = load %struct.tree*, %struct.tree** %t, align 8
  %rlink235 = getelementptr inbounds %struct.tree, %struct.tree* %202, i32 0, i32 1
  store %struct.tree* %201, %struct.tree** %rlink235, align 8
  %203 = load %struct.tree*, %struct.tree** %rl, align 8
  %204 = load %struct.tree*, %struct.tree** %r, align 8
  %llink236 = getelementptr inbounds %struct.tree, %struct.tree* %204, i32 0, i32 0
  store %struct.tree* %203, %struct.tree** %llink236, align 8
  %205 = load %struct.tree*, %struct.tree** %r, align 8
  %balance237 = getelementptr inbounds %struct.tree, %struct.tree* %205, i32 0, i32 4
  store i8 0, i8* %balance237, align 1
  %206 = load %struct.tree*, %struct.tree** %t, align 8
  %balance238 = getelementptr inbounds %struct.tree, %struct.tree* %206, i32 0, i32 4
  store i8 0, i8* %balance238, align 1
  br label %sw.epilog

sw.bb239:                                         ; preds = %sw.bb
  %207 = load i32, i32* %depth, align 4
  %idxprom240 = sext i32 %207 to i64
  %arrayidx241 = getelementptr inbounds [12 x %struct.tree*], [12 x %struct.tree*]* %links, i64 0, i64 %idxprom240
  %208 = load %struct.tree*, %struct.tree** %arrayidx241, align 8
  store %struct.tree* %208, %struct.tree** %r, align 8
  %209 = load %struct.tree*, %struct.tree** %r, align 8
  %llink242 = getelementptr inbounds %struct.tree, %struct.tree* %209, i32 0, i32 0
  %210 = load %struct.tree*, %struct.tree** %llink242, align 8
  store %struct.tree* %210, %struct.tree** %l, align 8
  %211 = load %struct.tree*, %struct.tree** %l, align 8
  %rlink243 = getelementptr inbounds %struct.tree, %struct.tree* %211, i32 0, i32 1
  %212 = load %struct.tree*, %struct.tree** %rlink243, align 8
  store %struct.tree* %212, %struct.tree** %t, align 8
  %213 = load %struct.tree*, %struct.tree** %t, align 8
  %rlink244 = getelementptr inbounds %struct.tree, %struct.tree* %213, i32 0, i32 1
  %214 = load %struct.tree*, %struct.tree** %rlink244, align 8
  store %struct.tree* %214, %struct.tree** %rl, align 8
  %215 = load %struct.tree*, %struct.tree** %t, align 8
  %llink245 = getelementptr inbounds %struct.tree, %struct.tree* %215, i32 0, i32 0
  %216 = load %struct.tree*, %struct.tree** %llink245, align 8
  store %struct.tree* %216, %struct.tree** %lr, align 8
  %217 = load %struct.tree*, %struct.tree** %l, align 8
  %218 = load %struct.tree*, %struct.tree** %t, align 8
  %llink246 = getelementptr inbounds %struct.tree, %struct.tree* %218, i32 0, i32 0
  store %struct.tree* %217, %struct.tree** %llink246, align 8
  %219 = load %struct.tree*, %struct.tree** %lr, align 8
  %220 = load %struct.tree*, %struct.tree** %l, align 8
  %rlink247 = getelementptr inbounds %struct.tree, %struct.tree* %220, i32 0, i32 1
  store %struct.tree* %219, %struct.tree** %rlink247, align 8
  %221 = load %struct.tree*, %struct.tree** %r, align 8
  %222 = load %struct.tree*, %struct.tree** %t, align 8
  %rlink248 = getelementptr inbounds %struct.tree, %struct.tree* %222, i32 0, i32 1
  store %struct.tree* %221, %struct.tree** %rlink248, align 8
  %223 = load %struct.tree*, %struct.tree** %rl, align 8
  %224 = load %struct.tree*, %struct.tree** %r, align 8
  %llink249 = getelementptr inbounds %struct.tree, %struct.tree* %224, i32 0, i32 0
  store %struct.tree* %223, %struct.tree** %llink249, align 8
  %225 = load %struct.tree*, %struct.tree** %t, align 8
  %balance250 = getelementptr inbounds %struct.tree, %struct.tree* %225, i32 0, i32 4
  %226 = load i8, i8* %balance250, align 1
  %conv251 = sext i8 %226 to i32
  %cmp252 = icmp ne i32 %conv251, 1
  %227 = zext i1 %cmp252 to i64
  %cond254 = select i1 %cmp252, i32 0, i32 -1
  %conv255 = trunc i32 %cond254 to i8
  %228 = load %struct.tree*, %struct.tree** %l, align 8
  %balance256 = getelementptr inbounds %struct.tree, %struct.tree* %228, i32 0, i32 4
  store i8 %conv255, i8* %balance256, align 1
  %229 = load %struct.tree*, %struct.tree** %t, align 8
  %balance257 = getelementptr inbounds %struct.tree, %struct.tree* %229, i32 0, i32 4
  %230 = load i8, i8* %balance257, align 1
  %conv258 = sext i8 %230 to i32
  %cmp259 = icmp ne i32 %conv258, -1
  %231 = zext i1 %cmp259 to i64
  %cond261 = select i1 %cmp259, i32 0, i32 1
  %conv262 = trunc i32 %cond261 to i8
  %232 = load %struct.tree*, %struct.tree** %r, align 8
  %balance263 = getelementptr inbounds %struct.tree, %struct.tree* %232, i32 0, i32 4
  store i8 %conv262, i8* %balance263, align 1
  %233 = load %struct.tree*, %struct.tree** %t, align 8
  %balance264 = getelementptr inbounds %struct.tree, %struct.tree* %233, i32 0, i32 4
  store i8 0, i8* %balance264, align 1
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.bb, %sw.bb239, %sw.bb230
  br label %sw.epilog305

sw.bb265:                                         ; preds = %if.then222
  %234 = load i32, i32* %depth, align 4
  %add266 = add nsw i32 %234, 1
  %idxprom267 = sext i32 %add266 to i64
  %arrayidx268 = getelementptr inbounds [12 x i32], [12 x i32]* %dirs, i64 0, i64 %idxprom267
  %235 = load i32, i32* %arrayidx268, align 4
  switch i32 %235, label %sw.epilog304 [
    i32 1, label %sw.bb269
    i32 0, label %sw.bb278
  ]

sw.bb269:                                         ; preds = %sw.bb265
  %236 = load i32, i32* %depth, align 4
  %idxprom270 = sext i32 %236 to i64
  %arrayidx271 = getelementptr inbounds [12 x %struct.tree*], [12 x %struct.tree*]* %links, i64 0, i64 %idxprom270
  %237 = load %struct.tree*, %struct.tree** %arrayidx271, align 8
  store %struct.tree* %237, %struct.tree** %l, align 8
  %238 = load %struct.tree*, %struct.tree** %l, align 8
  %rlink272 = getelementptr inbounds %struct.tree, %struct.tree* %238, i32 0, i32 1
  %239 = load %struct.tree*, %struct.tree** %rlink272, align 8
  store %struct.tree* %239, %struct.tree** %t, align 8
  %240 = load %struct.tree*, %struct.tree** %t, align 8
  %llink273 = getelementptr inbounds %struct.tree, %struct.tree* %240, i32 0, i32 0
  %241 = load %struct.tree*, %struct.tree** %llink273, align 8
  store %struct.tree* %241, %struct.tree** %lr, align 8
  %242 = load %struct.tree*, %struct.tree** %l, align 8
  %243 = load %struct.tree*, %struct.tree** %t, align 8
  %llink274 = getelementptr inbounds %struct.tree, %struct.tree* %243, i32 0, i32 0
  store %struct.tree* %242, %struct.tree** %llink274, align 8
  %244 = load %struct.tree*, %struct.tree** %lr, align 8
  %245 = load %struct.tree*, %struct.tree** %l, align 8
  %rlink275 = getelementptr inbounds %struct.tree, %struct.tree* %245, i32 0, i32 1
  store %struct.tree* %244, %struct.tree** %rlink275, align 8
  %246 = load %struct.tree*, %struct.tree** %l, align 8
  %balance276 = getelementptr inbounds %struct.tree, %struct.tree* %246, i32 0, i32 4
  store i8 0, i8* %balance276, align 1
  %247 = load %struct.tree*, %struct.tree** %t, align 8
  %balance277 = getelementptr inbounds %struct.tree, %struct.tree* %247, i32 0, i32 4
  store i8 0, i8* %balance277, align 1
  br label %sw.epilog304

sw.bb278:                                         ; preds = %sw.bb265
  %248 = load i32, i32* %depth, align 4
  %idxprom279 = sext i32 %248 to i64
  %arrayidx280 = getelementptr inbounds [12 x %struct.tree*], [12 x %struct.tree*]* %links, i64 0, i64 %idxprom279
  %249 = load %struct.tree*, %struct.tree** %arrayidx280, align 8
  store %struct.tree* %249, %struct.tree** %l, align 8
  %250 = load %struct.tree*, %struct.tree** %l, align 8
  %rlink281 = getelementptr inbounds %struct.tree, %struct.tree* %250, i32 0, i32 1
  %251 = load %struct.tree*, %struct.tree** %rlink281, align 8
  store %struct.tree* %251, %struct.tree** %r, align 8
  %252 = load %struct.tree*, %struct.tree** %r, align 8
  %llink282 = getelementptr inbounds %struct.tree, %struct.tree* %252, i32 0, i32 0
  %253 = load %struct.tree*, %struct.tree** %llink282, align 8
  store %struct.tree* %253, %struct.tree** %t, align 8
  %254 = load %struct.tree*, %struct.tree** %t, align 8
  %llink283 = getelementptr inbounds %struct.tree, %struct.tree* %254, i32 0, i32 0
  %255 = load %struct.tree*, %struct.tree** %llink283, align 8
  store %struct.tree* %255, %struct.tree** %lr, align 8
  %256 = load %struct.tree*, %struct.tree** %t, align 8
  %rlink284 = getelementptr inbounds %struct.tree, %struct.tree* %256, i32 0, i32 1
  %257 = load %struct.tree*, %struct.tree** %rlink284, align 8
  store %struct.tree* %257, %struct.tree** %rl, align 8
  %258 = load %struct.tree*, %struct.tree** %l, align 8
  %259 = load %struct.tree*, %struct.tree** %t, align 8
  %llink285 = getelementptr inbounds %struct.tree, %struct.tree* %259, i32 0, i32 0
  store %struct.tree* %258, %struct.tree** %llink285, align 8
  %260 = load %struct.tree*, %struct.tree** %lr, align 8
  %261 = load %struct.tree*, %struct.tree** %l, align 8
  %rlink286 = getelementptr inbounds %struct.tree, %struct.tree* %261, i32 0, i32 1
  store %struct.tree* %260, %struct.tree** %rlink286, align 8
  %262 = load %struct.tree*, %struct.tree** %r, align 8
  %263 = load %struct.tree*, %struct.tree** %t, align 8
  %rlink287 = getelementptr inbounds %struct.tree, %struct.tree* %263, i32 0, i32 1
  store %struct.tree* %262, %struct.tree** %rlink287, align 8
  %264 = load %struct.tree*, %struct.tree** %rl, align 8
  %265 = load %struct.tree*, %struct.tree** %r, align 8
  %llink288 = getelementptr inbounds %struct.tree, %struct.tree* %265, i32 0, i32 0
  store %struct.tree* %264, %struct.tree** %llink288, align 8
  %266 = load %struct.tree*, %struct.tree** %t, align 8
  %balance289 = getelementptr inbounds %struct.tree, %struct.tree* %266, i32 0, i32 4
  %267 = load i8, i8* %balance289, align 1
  %conv290 = sext i8 %267 to i32
  %cmp291 = icmp ne i32 %conv290, 1
  %268 = zext i1 %cmp291 to i64
  %cond293 = select i1 %cmp291, i32 0, i32 -1
  %conv294 = trunc i32 %cond293 to i8
  %269 = load %struct.tree*, %struct.tree** %l, align 8
  %balance295 = getelementptr inbounds %struct.tree, %struct.tree* %269, i32 0, i32 4
  store i8 %conv294, i8* %balance295, align 1
  %270 = load %struct.tree*, %struct.tree** %t, align 8
  %balance296 = getelementptr inbounds %struct.tree, %struct.tree* %270, i32 0, i32 4
  %271 = load i8, i8* %balance296, align 1
  %conv297 = sext i8 %271 to i32
  %cmp298 = icmp ne i32 %conv297, -1
  %272 = zext i1 %cmp298 to i64
  %cond300 = select i1 %cmp298, i32 0, i32 1
  %conv301 = trunc i32 %cond300 to i8
  %273 = load %struct.tree*, %struct.tree** %r, align 8
  %balance302 = getelementptr inbounds %struct.tree, %struct.tree* %273, i32 0, i32 4
  store i8 %conv301, i8* %balance302, align 1
  %274 = load %struct.tree*, %struct.tree** %t, align 8
  %balance303 = getelementptr inbounds %struct.tree, %struct.tree* %274, i32 0, i32 4
  store i8 0, i8* %balance303, align 1
  br label %sw.epilog304

sw.epilog304:                                     ; preds = %sw.bb265, %sw.bb278, %sw.bb269
  br label %sw.epilog305

sw.epilog305:                                     ; preds = %if.then222, %sw.epilog304, %sw.epilog
  %275 = load i32, i32* %depth, align 4
  %sub = sub nsw i32 %275, 1
  %idxprom306 = sext i32 %sub to i64
  %arrayidx307 = getelementptr inbounds [12 x i32], [12 x i32]* %dirs, i64 0, i64 %idxprom306
  %276 = load i32, i32* %arrayidx307, align 4
  %cmp308 = icmp eq i32 %276, 0
  br i1 %cmp308, label %if.then310, label %if.else315

if.then310:                                       ; preds = %sw.epilog305
  %277 = load %struct.tree*, %struct.tree** %t, align 8
  %278 = load i32, i32* %depth, align 4
  %sub311 = sub nsw i32 %278, 1
  %idxprom312 = sext i32 %sub311 to i64
  %arrayidx313 = getelementptr inbounds [12 x %struct.tree*], [12 x %struct.tree*]* %links, i64 0, i64 %idxprom312
  %279 = load %struct.tree*, %struct.tree** %arrayidx313, align 8
  %llink314 = getelementptr inbounds %struct.tree, %struct.tree* %279, i32 0, i32 0
  store %struct.tree* %277, %struct.tree** %llink314, align 8
  br label %if.end320

if.else315:                                       ; preds = %sw.epilog305
  %280 = load %struct.tree*, %struct.tree** %t, align 8
  %281 = load i32, i32* %depth, align 4
  %sub316 = sub nsw i32 %281, 1
  %idxprom317 = sext i32 %sub316 to i64
  %arrayidx318 = getelementptr inbounds [12 x %struct.tree*], [12 x %struct.tree*]* %links, i64 0, i64 %idxprom317
  %282 = load %struct.tree*, %struct.tree** %arrayidx318, align 8
  %rlink319 = getelementptr inbounds %struct.tree, %struct.tree* %282, i32 0, i32 1
  store %struct.tree* %280, %struct.tree** %rlink319, align 8
  br label %if.end320

if.end320:                                        ; preds = %if.else315, %if.then310
  br label %if.end321

if.end321:                                        ; preds = %if.end320, %land.lhs.true215, %lor.lhs.false, %while.end198
  br label %if.end322

if.end322:                                        ; preds = %if.end321, %while.end
  %283 = load %struct.tree*, %struct.tree** %link, align 8
  %trie323 = getelementptr inbounds %struct.tree, %struct.tree* %283, i32 0, i32 2
  %284 = load %struct.trie*, %struct.trie** %trie323, align 8
  store %struct.trie* %284, %struct.trie** %trie, align 8
  br label %while.cond, !llvm.loop !158

while.end324:                                     ; preds = %while.cond
  %285 = load %struct.trie*, %struct.trie** %trie, align 8
  %accepting325 = getelementptr inbounds %struct.trie, %struct.trie* %285, i32 0, i32 0
  %286 = load i32, i32* %accepting325, align 8
  %tobool326 = icmp ne i32 %286, 0
  br i1 %tobool326, label %if.end330, label %if.then327

if.then327:                                       ; preds = %while.end324
  %287 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %words = getelementptr inbounds %struct.kwset, %struct.kwset* %287, i32 0, i32 1
  %288 = load i32, i32* %words, align 8
  %mul = mul nsw i32 2, %288
  %add328 = add nsw i32 1, %mul
  %289 = load %struct.trie*, %struct.trie** %trie, align 8
  %accepting329 = getelementptr inbounds %struct.trie, %struct.trie* %289, i32 0, i32 0
  store i32 %add328, i32* %accepting329, align 8
  br label %if.end330

if.end330:                                        ; preds = %if.then327, %while.end324
  %290 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %words331 = getelementptr inbounds %struct.kwset, %struct.kwset* %290, i32 0, i32 1
  %291 = load i32, i32* %words331, align 8
  %inc332 = add nsw i32 %291, 1
  store i32 %inc332, i32* %words331, align 8
  %292 = load %struct.trie*, %struct.trie** %trie, align 8
  %depth333 = getelementptr inbounds %struct.trie, %struct.trie* %292, i32 0, i32 5
  %293 = load i32, i32* %depth333, align 8
  %294 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %mind = getelementptr inbounds %struct.kwset, %struct.kwset* %294, i32 0, i32 3
  %295 = load i32, i32* %mind, align 8
  %cmp334 = icmp slt i32 %293, %295
  br i1 %cmp334, label %if.then336, label %if.end339

if.then336:                                       ; preds = %if.end330
  %296 = load %struct.trie*, %struct.trie** %trie, align 8
  %depth337 = getelementptr inbounds %struct.trie, %struct.trie* %296, i32 0, i32 5
  %297 = load i32, i32* %depth337, align 8
  %298 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %mind338 = getelementptr inbounds %struct.kwset, %struct.kwset* %298, i32 0, i32 3
  store i32 %297, i32* %mind338, align 8
  br label %if.end339

if.end339:                                        ; preds = %if.then336, %if.end330
  %299 = load %struct.trie*, %struct.trie** %trie, align 8
  %depth340 = getelementptr inbounds %struct.trie, %struct.trie* %299, i32 0, i32 5
  %300 = load i32, i32* %depth340, align 8
  %301 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %maxd = getelementptr inbounds %struct.kwset, %struct.kwset* %301, i32 0, i32 4
  %302 = load i32, i32* %maxd, align 4
  %cmp341 = icmp sgt i32 %300, %302
  br i1 %cmp341, label %if.then343, label %if.end346

if.then343:                                       ; preds = %if.end339
  %303 = load %struct.trie*, %struct.trie** %trie, align 8
  %depth344 = getelementptr inbounds %struct.trie, %struct.trie* %303, i32 0, i32 5
  %304 = load i32, i32* %depth344, align 8
  %305 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %maxd345 = getelementptr inbounds %struct.kwset, %struct.kwset* %305, i32 0, i32 4
  store i32 %304, i32* %maxd345, align 4
  br label %if.end346

if.end346:                                        ; preds = %if.then343, %if.end339
  store i8* null, i8** %retval, align 8
  br label %return

return:                                           ; preds = %if.end346, %if.then145, %if.then74
  %306 = load i8*, i8** %retval, align 8
  ret i8* %306
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @kwsprep(i8* %kws) #0 {
entry:
  %kws.addr = alloca i8*, align 8
  %kwset = alloca %struct.kwset*, align 8
  %i = alloca i32, align 4
  %curr = alloca %struct.trie*, align 8
  %fail = alloca %struct.trie*, align 8
  %trans = alloca i8*, align 8
  %delta = alloca [256 x i8], align 16
  %last = alloca %struct.trie*, align 8
  %next = alloca [256 x %struct.trie*], align 16
  %__h = alloca %struct.obstack*, align 8
  %__o = alloca %struct.obstack*, align 8
  %__len = alloca i32, align 4
  %tmp = alloca i8*, align 8
  %__o1 = alloca %struct.obstack*, align 8
  %value = alloca i8*, align 8
  %tmp54 = alloca i8*, align 8
  store i8* %kws, i8** %kws.addr, align 8
  %0 = load i8*, i8** %kws.addr, align 8
  %1 = bitcast i8* %0 to %struct.kwset*
  store %struct.kwset* %1, %struct.kwset** %kwset, align 8
  %2 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %mind = getelementptr inbounds %struct.kwset, %struct.kwset* %2, i32 0, i32 3
  %3 = load i32, i32* %mind, align 8
  %cmp = icmp slt i32 %3, 256
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %4 = load i32, i32* %i, align 4
  %cmp1 = icmp slt i32 %4, 256
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %mind2 = getelementptr inbounds %struct.kwset, %struct.kwset* %5, i32 0, i32 3
  %6 = load i32, i32* %mind2, align 8
  %conv = trunc i32 %6 to i8
  %7 = load i32, i32* %i, align 4
  %idxprom = sext i32 %7 to i64
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* %delta, i64 0, i64 %idxprom
  store i8 %conv, i8* %arrayidx, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond, !llvm.loop !159

for.end:                                          ; preds = %for.cond
  br label %if.end

if.else:                                          ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc9, %if.else
  %9 = load i32, i32* %i, align 4
  %cmp4 = icmp slt i32 %9, 256
  br i1 %cmp4, label %for.body6, label %for.end11

for.body6:                                        ; preds = %for.cond3
  %10 = load i32, i32* %i, align 4
  %idxprom7 = sext i32 %10 to i64
  %arrayidx8 = getelementptr inbounds [256 x i8], [256 x i8]* %delta, i64 0, i64 %idxprom7
  store i8 -1, i8* %arrayidx8, align 1
  br label %for.inc9

for.inc9:                                         ; preds = %for.body6
  %11 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %11, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond3, !llvm.loop !160

for.end11:                                        ; preds = %for.cond3
  br label %if.end

if.end:                                           ; preds = %for.end11, %for.end
  %12 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %words = getelementptr inbounds %struct.kwset, %struct.kwset* %12, i32 0, i32 1
  %13 = load i32, i32* %words, align 8
  %cmp12 = icmp eq i32 %13, 1
  br i1 %cmp12, label %land.lhs.true, label %if.else113

land.lhs.true:                                    ; preds = %if.end
  %14 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %trans14 = getelementptr inbounds %struct.kwset, %struct.kwset* %14, i32 0, i32 9
  %15 = load i8*, i8** %trans14, align 8
  %cmp15 = icmp eq i8* %15, null
  br i1 %cmp15, label %if.then17, label %if.else113

if.then17:                                        ; preds = %land.lhs.true
  %16 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %obstack = getelementptr inbounds %struct.kwset, %struct.kwset* %16, i32 0, i32 0
  store %struct.obstack* %obstack, %struct.obstack** %__h, align 8
  %17 = load %struct.obstack*, %struct.obstack** %__h, align 8
  store %struct.obstack* %17, %struct.obstack** %__o, align 8
  %18 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %mind18 = getelementptr inbounds %struct.kwset, %struct.kwset* %18, i32 0, i32 3
  %19 = load i32, i32* %mind18, align 8
  store i32 %19, i32* %__len, align 4
  %20 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %chunk_limit = getelementptr inbounds %struct.obstack, %struct.obstack* %20, i32 0, i32 4
  %21 = load i8*, i8** %chunk_limit, align 8
  %22 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %next_free = getelementptr inbounds %struct.obstack, %struct.obstack* %22, i32 0, i32 3
  %23 = load i8*, i8** %next_free, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %21 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %23 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %24 = load i32, i32* %__len, align 4
  %conv19 = sext i32 %24 to i64
  %cmp20 = icmp slt i64 %sub.ptr.sub, %conv19
  br i1 %cmp20, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then17
  %25 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %26 = load i32, i32* %__len, align 4
  call void @_obstack_newchunk(%struct.obstack* %25, i32 %26)
  br label %cond.end

cond.false:                                       ; preds = %if.then17
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ]
  %27 = load i32, i32* %__len, align 4
  %28 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %next_free22 = getelementptr inbounds %struct.obstack, %struct.obstack* %28, i32 0, i32 3
  %29 = load i8*, i8** %next_free22, align 8
  %idx.ext = sext i32 %27 to i64
  %add.ptr = getelementptr inbounds i8, i8* %29, i64 %idx.ext
  store i8* %add.ptr, i8** %next_free22, align 8
  %30 = load %struct.obstack*, %struct.obstack** %__h, align 8
  store %struct.obstack* %30, %struct.obstack** %__o1, align 8
  %31 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %object_base = getelementptr inbounds %struct.obstack, %struct.obstack* %31, i32 0, i32 2
  %32 = load i8*, i8** %object_base, align 8
  store i8* %32, i8** %value, align 8
  %33 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %next_free23 = getelementptr inbounds %struct.obstack, %struct.obstack* %33, i32 0, i32 3
  %34 = load i8*, i8** %next_free23, align 8
  %35 = load i8*, i8** %value, align 8
  %cmp24 = icmp eq i8* %34, %35
  br i1 %cmp24, label %if.then26, label %if.end27

if.then26:                                        ; preds = %cond.end
  %36 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %maybe_empty_object = getelementptr inbounds %struct.obstack, %struct.obstack* %36, i32 0, i32 10
  %bf.load = load i8, i8* %maybe_empty_object, align 8
  %bf.clear = and i8 %bf.load, -3
  %bf.set = or i8 %bf.clear, 2
  store i8 %bf.set, i8* %maybe_empty_object, align 8
  br label %if.end27

if.end27:                                         ; preds = %if.then26, %cond.end
  %37 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %next_free28 = getelementptr inbounds %struct.obstack, %struct.obstack* %37, i32 0, i32 3
  %38 = load i8*, i8** %next_free28, align 8
  %sub.ptr.lhs.cast29 = ptrtoint i8* %38 to i64
  %sub.ptr.sub30 = sub i64 %sub.ptr.lhs.cast29, 0
  %39 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %alignment_mask = getelementptr inbounds %struct.obstack, %struct.obstack* %39, i32 0, i32 6
  %40 = load i32, i32* %alignment_mask, align 8
  %conv31 = sext i32 %40 to i64
  %add = add nsw i64 %sub.ptr.sub30, %conv31
  %41 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %alignment_mask32 = getelementptr inbounds %struct.obstack, %struct.obstack* %41, i32 0, i32 6
  %42 = load i32, i32* %alignment_mask32, align 8
  %neg = xor i32 %42, -1
  %conv33 = sext i32 %neg to i64
  %and = and i64 %add, %conv33
  %43 = inttoptr i64 %and to i8*
  %44 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %next_free34 = getelementptr inbounds %struct.obstack, %struct.obstack* %44, i32 0, i32 3
  store i8* %43, i8** %next_free34, align 8
  %45 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %next_free35 = getelementptr inbounds %struct.obstack, %struct.obstack* %45, i32 0, i32 3
  %46 = load i8*, i8** %next_free35, align 8
  %47 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %chunk = getelementptr inbounds %struct.obstack, %struct.obstack* %47, i32 0, i32 1
  %48 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8
  %49 = bitcast %struct._obstack_chunk* %48 to i8*
  %sub.ptr.lhs.cast36 = ptrtoint i8* %46 to i64
  %sub.ptr.rhs.cast37 = ptrtoint i8* %49 to i64
  %sub.ptr.sub38 = sub i64 %sub.ptr.lhs.cast36, %sub.ptr.rhs.cast37
  %50 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %chunk_limit39 = getelementptr inbounds %struct.obstack, %struct.obstack* %50, i32 0, i32 4
  %51 = load i8*, i8** %chunk_limit39, align 8
  %52 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %chunk40 = getelementptr inbounds %struct.obstack, %struct.obstack* %52, i32 0, i32 1
  %53 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk40, align 8
  %54 = bitcast %struct._obstack_chunk* %53 to i8*
  %sub.ptr.lhs.cast41 = ptrtoint i8* %51 to i64
  %sub.ptr.rhs.cast42 = ptrtoint i8* %54 to i64
  %sub.ptr.sub43 = sub i64 %sub.ptr.lhs.cast41, %sub.ptr.rhs.cast42
  %cmp44 = icmp sgt i64 %sub.ptr.sub38, %sub.ptr.sub43
  br i1 %cmp44, label %cond.true46, label %cond.false49

cond.true46:                                      ; preds = %if.end27
  %55 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %chunk_limit47 = getelementptr inbounds %struct.obstack, %struct.obstack* %55, i32 0, i32 4
  %56 = load i8*, i8** %chunk_limit47, align 8
  %57 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %next_free48 = getelementptr inbounds %struct.obstack, %struct.obstack* %57, i32 0, i32 3
  store i8* %56, i8** %next_free48, align 8
  br label %cond.end50

cond.false49:                                     ; preds = %if.end27
  br label %cond.end50

cond.end50:                                       ; preds = %cond.false49, %cond.true46
  %cond51 = phi i8* [ %56, %cond.true46 ], [ null, %cond.false49 ]
  %58 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %next_free52 = getelementptr inbounds %struct.obstack, %struct.obstack* %58, i32 0, i32 3
  %59 = load i8*, i8** %next_free52, align 8
  %60 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %object_base53 = getelementptr inbounds %struct.obstack, %struct.obstack* %60, i32 0, i32 2
  store i8* %59, i8** %object_base53, align 8
  %61 = load i8*, i8** %value, align 8
  store i8* %61, i8** %tmp54, align 8
  %62 = load i8*, i8** %tmp54, align 8
  store i8* %62, i8** %tmp, align 8
  %63 = load i8*, i8** %tmp, align 8
  %64 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %target = getelementptr inbounds %struct.kwset, %struct.kwset* %64, i32 0, i32 7
  store i8* %63, i8** %target, align 8
  %65 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %mind55 = getelementptr inbounds %struct.kwset, %struct.kwset* %65, i32 0, i32 3
  %66 = load i32, i32* %mind55, align 8
  %sub = sub nsw i32 %66, 1
  store i32 %sub, i32* %i, align 4
  %67 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %trie = getelementptr inbounds %struct.kwset, %struct.kwset* %67, i32 0, i32 2
  %68 = load %struct.trie*, %struct.trie** %trie, align 8
  store %struct.trie* %68, %struct.trie** %curr, align 8
  br label %for.cond56

for.cond56:                                       ; preds = %for.inc65, %cond.end50
  %69 = load i32, i32* %i, align 4
  %cmp57 = icmp sge i32 %69, 0
  br i1 %cmp57, label %for.body59, label %for.end66

for.body59:                                       ; preds = %for.cond56
  %70 = load %struct.trie*, %struct.trie** %curr, align 8
  %links = getelementptr inbounds %struct.trie, %struct.trie* %70, i32 0, i32 1
  %71 = load %struct.tree*, %struct.tree** %links, align 8
  %label = getelementptr inbounds %struct.tree, %struct.tree* %71, i32 0, i32 3
  %72 = load i8, i8* %label, align 8
  %73 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %target60 = getelementptr inbounds %struct.kwset, %struct.kwset* %73, i32 0, i32 7
  %74 = load i8*, i8** %target60, align 8
  %75 = load i32, i32* %i, align 4
  %idxprom61 = sext i32 %75 to i64
  %arrayidx62 = getelementptr inbounds i8, i8* %74, i64 %idxprom61
  store i8 %72, i8* %arrayidx62, align 1
  %76 = load %struct.trie*, %struct.trie** %curr, align 8
  %links63 = getelementptr inbounds %struct.trie, %struct.trie* %76, i32 0, i32 1
  %77 = load %struct.tree*, %struct.tree** %links63, align 8
  %trie64 = getelementptr inbounds %struct.tree, %struct.tree* %77, i32 0, i32 2
  %78 = load %struct.trie*, %struct.trie** %trie64, align 8
  store %struct.trie* %78, %struct.trie** %curr, align 8
  br label %for.inc65

for.inc65:                                        ; preds = %for.body59
  %79 = load i32, i32* %i, align 4
  %dec = add nsw i32 %79, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond56, !llvm.loop !161

for.end66:                                        ; preds = %for.cond56
  store i32 0, i32* %i, align 4
  br label %for.cond67

for.cond67:                                       ; preds = %for.inc81, %for.end66
  %80 = load i32, i32* %i, align 4
  %81 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %mind68 = getelementptr inbounds %struct.kwset, %struct.kwset* %81, i32 0, i32 3
  %82 = load i32, i32* %mind68, align 8
  %cmp69 = icmp slt i32 %80, %82
  br i1 %cmp69, label %for.body71, label %for.end83

for.body71:                                       ; preds = %for.cond67
  %83 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %mind72 = getelementptr inbounds %struct.kwset, %struct.kwset* %83, i32 0, i32 3
  %84 = load i32, i32* %mind72, align 8
  %85 = load i32, i32* %i, align 4
  %add73 = add nsw i32 %85, 1
  %sub74 = sub nsw i32 %84, %add73
  %conv75 = trunc i32 %sub74 to i8
  %86 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %target76 = getelementptr inbounds %struct.kwset, %struct.kwset* %86, i32 0, i32 7
  %87 = load i8*, i8** %target76, align 8
  %88 = load i32, i32* %i, align 4
  %idxprom77 = sext i32 %88 to i64
  %arrayidx78 = getelementptr inbounds i8, i8* %87, i64 %idxprom77
  %89 = load i8, i8* %arrayidx78, align 1
  %idxprom79 = zext i8 %89 to i64
  %arrayidx80 = getelementptr inbounds [256 x i8], [256 x i8]* %delta, i64 0, i64 %idxprom79
  store i8 %conv75, i8* %arrayidx80, align 1
  br label %for.inc81

for.inc81:                                        ; preds = %for.body71
  %90 = load i32, i32* %i, align 4
  %inc82 = add nsw i32 %90, 1
  store i32 %inc82, i32* %i, align 4
  br label %for.cond67, !llvm.loop !162

for.end83:                                        ; preds = %for.cond67
  %91 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %mind84 = getelementptr inbounds %struct.kwset, %struct.kwset* %91, i32 0, i32 3
  %92 = load i32, i32* %mind84, align 8
  %93 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %mind285 = getelementptr inbounds %struct.kwset, %struct.kwset* %93, i32 0, i32 8
  store i32 %92, i32* %mind285, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond86

for.cond86:                                       ; preds = %for.inc110, %for.end83
  %94 = load i32, i32* %i, align 4
  %95 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %mind87 = getelementptr inbounds %struct.kwset, %struct.kwset* %95, i32 0, i32 3
  %96 = load i32, i32* %mind87, align 8
  %sub88 = sub nsw i32 %96, 1
  %cmp89 = icmp slt i32 %94, %sub88
  br i1 %cmp89, label %for.body91, label %for.end112

for.body91:                                       ; preds = %for.cond86
  %97 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %target92 = getelementptr inbounds %struct.kwset, %struct.kwset* %97, i32 0, i32 7
  %98 = load i8*, i8** %target92, align 8
  %99 = load i32, i32* %i, align 4
  %idxprom93 = sext i32 %99 to i64
  %arrayidx94 = getelementptr inbounds i8, i8* %98, i64 %idxprom93
  %100 = load i8, i8* %arrayidx94, align 1
  %conv95 = sext i8 %100 to i32
  %101 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %target96 = getelementptr inbounds %struct.kwset, %struct.kwset* %101, i32 0, i32 7
  %102 = load i8*, i8** %target96, align 8
  %103 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %mind97 = getelementptr inbounds %struct.kwset, %struct.kwset* %103, i32 0, i32 3
  %104 = load i32, i32* %mind97, align 8
  %sub98 = sub nsw i32 %104, 1
  %idxprom99 = sext i32 %sub98 to i64
  %arrayidx100 = getelementptr inbounds i8, i8* %102, i64 %idxprom99
  %105 = load i8, i8* %arrayidx100, align 1
  %conv101 = sext i8 %105 to i32
  %cmp102 = icmp eq i32 %conv95, %conv101
  br i1 %cmp102, label %if.then104, label %if.end109

if.then104:                                       ; preds = %for.body91
  %106 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %mind105 = getelementptr inbounds %struct.kwset, %struct.kwset* %106, i32 0, i32 3
  %107 = load i32, i32* %mind105, align 8
  %108 = load i32, i32* %i, align 4
  %add106 = add nsw i32 %108, 1
  %sub107 = sub nsw i32 %107, %add106
  %109 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %mind2108 = getelementptr inbounds %struct.kwset, %struct.kwset* %109, i32 0, i32 8
  store i32 %sub107, i32* %mind2108, align 8
  br label %if.end109

if.end109:                                        ; preds = %if.then104, %for.body91
  br label %for.inc110

for.inc110:                                       ; preds = %if.end109
  %110 = load i32, i32* %i, align 4
  %inc111 = add nsw i32 %110, 1
  store i32 %inc111, i32* %i, align 4
  br label %for.cond86, !llvm.loop !163

for.end112:                                       ; preds = %for.cond86
  br label %if.end234

if.else113:                                       ; preds = %land.lhs.true, %if.end
  %111 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %trie114 = getelementptr inbounds %struct.kwset, %struct.kwset* %111, i32 0, i32 2
  %112 = load %struct.trie*, %struct.trie** %trie114, align 8
  store %struct.trie* %112, %struct.trie** %last, align 8
  store %struct.trie* %112, %struct.trie** %curr, align 8
  br label %for.cond115

for.cond115:                                      ; preds = %for.inc162, %if.else113
  %113 = load %struct.trie*, %struct.trie** %curr, align 8
  %tobool = icmp ne %struct.trie* %113, null
  br i1 %tobool, label %for.body116, label %for.end164

for.body116:                                      ; preds = %for.cond115
  %114 = load %struct.trie*, %struct.trie** %curr, align 8
  %links117 = getelementptr inbounds %struct.trie, %struct.trie* %114, i32 0, i32 1
  %115 = load %struct.tree*, %struct.tree** %links117, align 8
  call void @enqueue(%struct.tree* %115, %struct.trie** %last)
  %116 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %mind118 = getelementptr inbounds %struct.kwset, %struct.kwset* %116, i32 0, i32 3
  %117 = load i32, i32* %mind118, align 8
  %118 = load %struct.trie*, %struct.trie** %curr, align 8
  %shift = getelementptr inbounds %struct.trie, %struct.trie* %118, i32 0, i32 6
  store i32 %117, i32* %shift, align 4
  %119 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %mind119 = getelementptr inbounds %struct.kwset, %struct.kwset* %119, i32 0, i32 3
  %120 = load i32, i32* %mind119, align 8
  %121 = load %struct.trie*, %struct.trie** %curr, align 8
  %maxshift = getelementptr inbounds %struct.trie, %struct.trie* %121, i32 0, i32 7
  store i32 %120, i32* %maxshift, align 8
  %122 = load %struct.trie*, %struct.trie** %curr, align 8
  %links120 = getelementptr inbounds %struct.trie, %struct.trie* %122, i32 0, i32 1
  %123 = load %struct.tree*, %struct.tree** %links120, align 8
  %124 = load %struct.trie*, %struct.trie** %curr, align 8
  %depth = getelementptr inbounds %struct.trie, %struct.trie* %124, i32 0, i32 5
  %125 = load i32, i32* %depth, align 8
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %delta, i64 0, i64 0
  call void @treedelta(%struct.tree* %123, i32 %125, i8* %arraydecay)
  %126 = load %struct.trie*, %struct.trie** %curr, align 8
  %links121 = getelementptr inbounds %struct.trie, %struct.trie* %126, i32 0, i32 1
  %127 = load %struct.tree*, %struct.tree** %links121, align 8
  %128 = load %struct.trie*, %struct.trie** %curr, align 8
  %fail122 = getelementptr inbounds %struct.trie, %struct.trie* %128, i32 0, i32 4
  %129 = load %struct.trie*, %struct.trie** %fail122, align 8
  %130 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %trie123 = getelementptr inbounds %struct.kwset, %struct.kwset* %130, i32 0, i32 2
  %131 = load %struct.trie*, %struct.trie** %trie123, align 8
  call void @treefails(%struct.tree* %127, %struct.trie* %129, %struct.trie* %131)
  %132 = load %struct.trie*, %struct.trie** %curr, align 8
  %fail124 = getelementptr inbounds %struct.trie, %struct.trie* %132, i32 0, i32 4
  %133 = load %struct.trie*, %struct.trie** %fail124, align 8
  store %struct.trie* %133, %struct.trie** %fail, align 8
  br label %for.cond125

for.cond125:                                      ; preds = %for.inc159, %for.body116
  %134 = load %struct.trie*, %struct.trie** %fail, align 8
  %tobool126 = icmp ne %struct.trie* %134, null
  br i1 %tobool126, label %for.body127, label %for.end161

for.body127:                                      ; preds = %for.cond125
  %135 = load %struct.trie*, %struct.trie** %fail, align 8
  %links128 = getelementptr inbounds %struct.trie, %struct.trie* %135, i32 0, i32 1
  %136 = load %struct.tree*, %struct.tree** %links128, align 8
  %137 = load %struct.trie*, %struct.trie** %curr, align 8
  %links129 = getelementptr inbounds %struct.trie, %struct.trie* %137, i32 0, i32 1
  %138 = load %struct.tree*, %struct.tree** %links129, align 8
  %call = call i32 @hasevery(%struct.tree* %136, %struct.tree* %138)
  %tobool130 = icmp ne i32 %call, 0
  br i1 %tobool130, label %if.end144, label %if.then131

if.then131:                                       ; preds = %for.body127
  %139 = load %struct.trie*, %struct.trie** %curr, align 8
  %depth132 = getelementptr inbounds %struct.trie, %struct.trie* %139, i32 0, i32 5
  %140 = load i32, i32* %depth132, align 8
  %141 = load %struct.trie*, %struct.trie** %fail, align 8
  %depth133 = getelementptr inbounds %struct.trie, %struct.trie* %141, i32 0, i32 5
  %142 = load i32, i32* %depth133, align 8
  %sub134 = sub nsw i32 %140, %142
  %143 = load %struct.trie*, %struct.trie** %fail, align 8
  %shift135 = getelementptr inbounds %struct.trie, %struct.trie* %143, i32 0, i32 6
  %144 = load i32, i32* %shift135, align 4
  %cmp136 = icmp slt i32 %sub134, %144
  br i1 %cmp136, label %if.then138, label %if.end143

if.then138:                                       ; preds = %if.then131
  %145 = load %struct.trie*, %struct.trie** %curr, align 8
  %depth139 = getelementptr inbounds %struct.trie, %struct.trie* %145, i32 0, i32 5
  %146 = load i32, i32* %depth139, align 8
  %147 = load %struct.trie*, %struct.trie** %fail, align 8
  %depth140 = getelementptr inbounds %struct.trie, %struct.trie* %147, i32 0, i32 5
  %148 = load i32, i32* %depth140, align 8
  %sub141 = sub nsw i32 %146, %148
  %149 = load %struct.trie*, %struct.trie** %fail, align 8
  %shift142 = getelementptr inbounds %struct.trie, %struct.trie* %149, i32 0, i32 6
  store i32 %sub141, i32* %shift142, align 4
  br label %if.end143

if.end143:                                        ; preds = %if.then138, %if.then131
  br label %if.end144

if.end144:                                        ; preds = %if.end143, %for.body127
  %150 = load %struct.trie*, %struct.trie** %curr, align 8
  %accepting = getelementptr inbounds %struct.trie, %struct.trie* %150, i32 0, i32 0
  %151 = load i32, i32* %accepting, align 8
  %tobool145 = icmp ne i32 %151, 0
  br i1 %tobool145, label %land.lhs.true146, label %if.end158

land.lhs.true146:                                 ; preds = %if.end144
  %152 = load %struct.trie*, %struct.trie** %fail, align 8
  %maxshift147 = getelementptr inbounds %struct.trie, %struct.trie* %152, i32 0, i32 7
  %153 = load i32, i32* %maxshift147, align 8
  %154 = load %struct.trie*, %struct.trie** %curr, align 8
  %depth148 = getelementptr inbounds %struct.trie, %struct.trie* %154, i32 0, i32 5
  %155 = load i32, i32* %depth148, align 8
  %156 = load %struct.trie*, %struct.trie** %fail, align 8
  %depth149 = getelementptr inbounds %struct.trie, %struct.trie* %156, i32 0, i32 5
  %157 = load i32, i32* %depth149, align 8
  %sub150 = sub nsw i32 %155, %157
  %cmp151 = icmp sgt i32 %153, %sub150
  br i1 %cmp151, label %if.then153, label %if.end158

if.then153:                                       ; preds = %land.lhs.true146
  %158 = load %struct.trie*, %struct.trie** %curr, align 8
  %depth154 = getelementptr inbounds %struct.trie, %struct.trie* %158, i32 0, i32 5
  %159 = load i32, i32* %depth154, align 8
  %160 = load %struct.trie*, %struct.trie** %fail, align 8
  %depth155 = getelementptr inbounds %struct.trie, %struct.trie* %160, i32 0, i32 5
  %161 = load i32, i32* %depth155, align 8
  %sub156 = sub nsw i32 %159, %161
  %162 = load %struct.trie*, %struct.trie** %fail, align 8
  %maxshift157 = getelementptr inbounds %struct.trie, %struct.trie* %162, i32 0, i32 7
  store i32 %sub156, i32* %maxshift157, align 8
  br label %if.end158

if.end158:                                        ; preds = %if.then153, %land.lhs.true146, %if.end144
  br label %for.inc159

for.inc159:                                       ; preds = %if.end158
  %163 = load %struct.trie*, %struct.trie** %fail, align 8
  %fail160 = getelementptr inbounds %struct.trie, %struct.trie* %163, i32 0, i32 4
  %164 = load %struct.trie*, %struct.trie** %fail160, align 8
  store %struct.trie* %164, %struct.trie** %fail, align 8
  br label %for.cond125, !llvm.loop !164

for.end161:                                       ; preds = %for.cond125
  br label %for.inc162

for.inc162:                                       ; preds = %for.end161
  %165 = load %struct.trie*, %struct.trie** %curr, align 8
  %next163 = getelementptr inbounds %struct.trie, %struct.trie* %165, i32 0, i32 3
  %166 = load %struct.trie*, %struct.trie** %next163, align 8
  store %struct.trie* %166, %struct.trie** %curr, align 8
  br label %for.cond115, !llvm.loop !165

for.end164:                                       ; preds = %for.cond115
  %167 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %trie165 = getelementptr inbounds %struct.kwset, %struct.kwset* %167, i32 0, i32 2
  %168 = load %struct.trie*, %struct.trie** %trie165, align 8
  %next166 = getelementptr inbounds %struct.trie, %struct.trie* %168, i32 0, i32 3
  %169 = load %struct.trie*, %struct.trie** %next166, align 8
  store %struct.trie* %169, %struct.trie** %curr, align 8
  br label %for.cond167

for.cond167:                                      ; preds = %for.inc187, %for.end164
  %170 = load %struct.trie*, %struct.trie** %curr, align 8
  %tobool168 = icmp ne %struct.trie* %170, null
  br i1 %tobool168, label %for.body169, label %for.end189

for.body169:                                      ; preds = %for.cond167
  %171 = load %struct.trie*, %struct.trie** %curr, align 8
  %maxshift170 = getelementptr inbounds %struct.trie, %struct.trie* %171, i32 0, i32 7
  %172 = load i32, i32* %maxshift170, align 8
  %173 = load %struct.trie*, %struct.trie** %curr, align 8
  %parent = getelementptr inbounds %struct.trie, %struct.trie* %173, i32 0, i32 2
  %174 = load %struct.trie*, %struct.trie** %parent, align 8
  %maxshift171 = getelementptr inbounds %struct.trie, %struct.trie* %174, i32 0, i32 7
  %175 = load i32, i32* %maxshift171, align 8
  %cmp172 = icmp sgt i32 %172, %175
  br i1 %cmp172, label %if.then174, label %if.end178

if.then174:                                       ; preds = %for.body169
  %176 = load %struct.trie*, %struct.trie** %curr, align 8
  %parent175 = getelementptr inbounds %struct.trie, %struct.trie* %176, i32 0, i32 2
  %177 = load %struct.trie*, %struct.trie** %parent175, align 8
  %maxshift176 = getelementptr inbounds %struct.trie, %struct.trie* %177, i32 0, i32 7
  %178 = load i32, i32* %maxshift176, align 8
  %179 = load %struct.trie*, %struct.trie** %curr, align 8
  %maxshift177 = getelementptr inbounds %struct.trie, %struct.trie* %179, i32 0, i32 7
  store i32 %178, i32* %maxshift177, align 8
  br label %if.end178

if.end178:                                        ; preds = %if.then174, %for.body169
  %180 = load %struct.trie*, %struct.trie** %curr, align 8
  %shift179 = getelementptr inbounds %struct.trie, %struct.trie* %180, i32 0, i32 6
  %181 = load i32, i32* %shift179, align 4
  %182 = load %struct.trie*, %struct.trie** %curr, align 8
  %maxshift180 = getelementptr inbounds %struct.trie, %struct.trie* %182, i32 0, i32 7
  %183 = load i32, i32* %maxshift180, align 8
  %cmp181 = icmp sgt i32 %181, %183
  br i1 %cmp181, label %if.then183, label %if.end186

if.then183:                                       ; preds = %if.end178
  %184 = load %struct.trie*, %struct.trie** %curr, align 8
  %maxshift184 = getelementptr inbounds %struct.trie, %struct.trie* %184, i32 0, i32 7
  %185 = load i32, i32* %maxshift184, align 8
  %186 = load %struct.trie*, %struct.trie** %curr, align 8
  %shift185 = getelementptr inbounds %struct.trie, %struct.trie* %186, i32 0, i32 6
  store i32 %185, i32* %shift185, align 4
  br label %if.end186

if.end186:                                        ; preds = %if.then183, %if.end178
  br label %for.inc187

for.inc187:                                       ; preds = %if.end186
  %187 = load %struct.trie*, %struct.trie** %curr, align 8
  %next188 = getelementptr inbounds %struct.trie, %struct.trie* %187, i32 0, i32 3
  %188 = load %struct.trie*, %struct.trie** %next188, align 8
  store %struct.trie* %188, %struct.trie** %curr, align 8
  br label %for.cond167, !llvm.loop !166

for.end189:                                       ; preds = %for.cond167
  store i32 0, i32* %i, align 4
  br label %for.cond190

for.cond190:                                      ; preds = %for.inc196, %for.end189
  %189 = load i32, i32* %i, align 4
  %cmp191 = icmp slt i32 %189, 256
  br i1 %cmp191, label %for.body193, label %for.end198

for.body193:                                      ; preds = %for.cond190
  %190 = load i32, i32* %i, align 4
  %idxprom194 = sext i32 %190 to i64
  %arrayidx195 = getelementptr inbounds [256 x %struct.trie*], [256 x %struct.trie*]* %next, i64 0, i64 %idxprom194
  store %struct.trie* null, %struct.trie** %arrayidx195, align 8
  br label %for.inc196

for.inc196:                                       ; preds = %for.body193
  %191 = load i32, i32* %i, align 4
  %inc197 = add nsw i32 %191, 1
  store i32 %inc197, i32* %i, align 4
  br label %for.cond190, !llvm.loop !167

for.end198:                                       ; preds = %for.cond190
  %192 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %trie199 = getelementptr inbounds %struct.kwset, %struct.kwset* %192, i32 0, i32 2
  %193 = load %struct.trie*, %struct.trie** %trie199, align 8
  %links200 = getelementptr inbounds %struct.trie, %struct.trie* %193, i32 0, i32 1
  %194 = load %struct.tree*, %struct.tree** %links200, align 8
  %arraydecay201 = getelementptr inbounds [256 x %struct.trie*], [256 x %struct.trie*]* %next, i64 0, i64 0
  call void @treenext(%struct.tree* %194, %struct.trie** %arraydecay201)
  %195 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %trans202 = getelementptr inbounds %struct.kwset, %struct.kwset* %195, i32 0, i32 9
  %196 = load i8*, i8** %trans202, align 8
  store i8* %196, i8** %trans, align 8
  %cmp203 = icmp ne i8* %196, null
  br i1 %cmp203, label %if.then205, label %if.else220

if.then205:                                       ; preds = %for.end198
  store i32 0, i32* %i, align 4
  br label %for.cond206

for.cond206:                                      ; preds = %for.inc217, %if.then205
  %197 = load i32, i32* %i, align 4
  %cmp207 = icmp slt i32 %197, 256
  br i1 %cmp207, label %for.body209, label %for.end219

for.body209:                                      ; preds = %for.cond206
  %198 = load i8*, i8** %trans, align 8
  %199 = load i32, i32* %i, align 4
  %idxprom210 = sext i32 %199 to i64
  %arrayidx211 = getelementptr inbounds i8, i8* %198, i64 %idxprom210
  %200 = load i8, i8* %arrayidx211, align 1
  %idxprom212 = zext i8 %200 to i64
  %arrayidx213 = getelementptr inbounds [256 x %struct.trie*], [256 x %struct.trie*]* %next, i64 0, i64 %idxprom212
  %201 = load %struct.trie*, %struct.trie** %arrayidx213, align 8
  %202 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %next214 = getelementptr inbounds %struct.kwset, %struct.kwset* %202, i32 0, i32 6
  %203 = load i32, i32* %i, align 4
  %idxprom215 = sext i32 %203 to i64
  %arrayidx216 = getelementptr inbounds [256 x %struct.trie*], [256 x %struct.trie*]* %next214, i64 0, i64 %idxprom215
  store %struct.trie* %201, %struct.trie** %arrayidx216, align 8
  br label %for.inc217

for.inc217:                                       ; preds = %for.body209
  %204 = load i32, i32* %i, align 4
  %inc218 = add nsw i32 %204, 1
  store i32 %inc218, i32* %i, align 4
  br label %for.cond206, !llvm.loop !168

for.end219:                                       ; preds = %for.cond206
  br label %if.end233

if.else220:                                       ; preds = %for.end198
  store i32 0, i32* %i, align 4
  br label %for.cond221

for.cond221:                                      ; preds = %for.inc230, %if.else220
  %205 = load i32, i32* %i, align 4
  %cmp222 = icmp slt i32 %205, 256
  br i1 %cmp222, label %for.body224, label %for.end232

for.body224:                                      ; preds = %for.cond221
  %206 = load i32, i32* %i, align 4
  %idxprom225 = sext i32 %206 to i64
  %arrayidx226 = getelementptr inbounds [256 x %struct.trie*], [256 x %struct.trie*]* %next, i64 0, i64 %idxprom225
  %207 = load %struct.trie*, %struct.trie** %arrayidx226, align 8
  %208 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %next227 = getelementptr inbounds %struct.kwset, %struct.kwset* %208, i32 0, i32 6
  %209 = load i32, i32* %i, align 4
  %idxprom228 = sext i32 %209 to i64
  %arrayidx229 = getelementptr inbounds [256 x %struct.trie*], [256 x %struct.trie*]* %next227, i64 0, i64 %idxprom228
  store %struct.trie* %207, %struct.trie** %arrayidx229, align 8
  br label %for.inc230

for.inc230:                                       ; preds = %for.body224
  %210 = load i32, i32* %i, align 4
  %inc231 = add nsw i32 %210, 1
  store i32 %inc231, i32* %i, align 4
  br label %for.cond221, !llvm.loop !169

for.end232:                                       ; preds = %for.cond221
  br label %if.end233

if.end233:                                        ; preds = %for.end232, %for.end219
  br label %if.end234

if.end234:                                        ; preds = %if.end233, %for.end112
  %211 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %trans235 = getelementptr inbounds %struct.kwset, %struct.kwset* %211, i32 0, i32 9
  %212 = load i8*, i8** %trans235, align 8
  store i8* %212, i8** %trans, align 8
  %cmp236 = icmp ne i8* %212, null
  br i1 %cmp236, label %if.then238, label %if.else253

if.then238:                                       ; preds = %if.end234
  store i32 0, i32* %i, align 4
  br label %for.cond239

for.cond239:                                      ; preds = %for.inc250, %if.then238
  %213 = load i32, i32* %i, align 4
  %cmp240 = icmp slt i32 %213, 256
  br i1 %cmp240, label %for.body242, label %for.end252

for.body242:                                      ; preds = %for.cond239
  %214 = load i8*, i8** %trans, align 8
  %215 = load i32, i32* %i, align 4
  %idxprom243 = sext i32 %215 to i64
  %arrayidx244 = getelementptr inbounds i8, i8* %214, i64 %idxprom243
  %216 = load i8, i8* %arrayidx244, align 1
  %idxprom245 = zext i8 %216 to i64
  %arrayidx246 = getelementptr inbounds [256 x i8], [256 x i8]* %delta, i64 0, i64 %idxprom245
  %217 = load i8, i8* %arrayidx246, align 1
  %218 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %delta247 = getelementptr inbounds %struct.kwset, %struct.kwset* %218, i32 0, i32 5
  %219 = load i32, i32* %i, align 4
  %idxprom248 = sext i32 %219 to i64
  %arrayidx249 = getelementptr inbounds [256 x i8], [256 x i8]* %delta247, i64 0, i64 %idxprom248
  store i8 %217, i8* %arrayidx249, align 1
  br label %for.inc250

for.inc250:                                       ; preds = %for.body242
  %220 = load i32, i32* %i, align 4
  %inc251 = add nsw i32 %220, 1
  store i32 %inc251, i32* %i, align 4
  br label %for.cond239, !llvm.loop !170

for.end252:                                       ; preds = %for.cond239
  br label %if.end266

if.else253:                                       ; preds = %if.end234
  store i32 0, i32* %i, align 4
  br label %for.cond254

for.cond254:                                      ; preds = %for.inc263, %if.else253
  %221 = load i32, i32* %i, align 4
  %cmp255 = icmp slt i32 %221, 256
  br i1 %cmp255, label %for.body257, label %for.end265

for.body257:                                      ; preds = %for.cond254
  %222 = load i32, i32* %i, align 4
  %idxprom258 = sext i32 %222 to i64
  %arrayidx259 = getelementptr inbounds [256 x i8], [256 x i8]* %delta, i64 0, i64 %idxprom258
  %223 = load i8, i8* %arrayidx259, align 1
  %224 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %delta260 = getelementptr inbounds %struct.kwset, %struct.kwset* %224, i32 0, i32 5
  %225 = load i32, i32* %i, align 4
  %idxprom261 = sext i32 %225 to i64
  %arrayidx262 = getelementptr inbounds [256 x i8], [256 x i8]* %delta260, i64 0, i64 %idxprom261
  store i8 %223, i8* %arrayidx262, align 1
  br label %for.inc263

for.inc263:                                       ; preds = %for.body257
  %226 = load i32, i32* %i, align 4
  %inc264 = add nsw i32 %226, 1
  store i32 %inc264, i32* %i, align 4
  br label %for.cond254, !llvm.loop !171

for.end265:                                       ; preds = %for.cond254
  br label %if.end266

if.end266:                                        ; preds = %for.end265, %for.end252
  ret i8* null
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @enqueue(%struct.tree* %tree, %struct.trie** %last) #0 {
entry:
  %tree.addr = alloca %struct.tree*, align 8
  %last.addr = alloca %struct.trie**, align 8
  store %struct.tree* %tree, %struct.tree** %tree.addr, align 8
  store %struct.trie** %last, %struct.trie*** %last.addr, align 8
  %0 = load %struct.tree*, %struct.tree** %tree.addr, align 8
  %tobool = icmp ne %struct.tree* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.tree*, %struct.tree** %tree.addr, align 8
  %llink = getelementptr inbounds %struct.tree, %struct.tree* %1, i32 0, i32 0
  %2 = load %struct.tree*, %struct.tree** %llink, align 8
  %3 = load %struct.trie**, %struct.trie*** %last.addr, align 8
  call void @enqueue(%struct.tree* %2, %struct.trie** %3)
  %4 = load %struct.tree*, %struct.tree** %tree.addr, align 8
  %rlink = getelementptr inbounds %struct.tree, %struct.tree* %4, i32 0, i32 1
  %5 = load %struct.tree*, %struct.tree** %rlink, align 8
  %6 = load %struct.trie**, %struct.trie*** %last.addr, align 8
  call void @enqueue(%struct.tree* %5, %struct.trie** %6)
  %7 = load %struct.tree*, %struct.tree** %tree.addr, align 8
  %trie = getelementptr inbounds %struct.tree, %struct.tree* %7, i32 0, i32 2
  %8 = load %struct.trie*, %struct.trie** %trie, align 8
  %9 = load %struct.trie**, %struct.trie*** %last.addr, align 8
  %10 = load %struct.trie*, %struct.trie** %9, align 8
  %next = getelementptr inbounds %struct.trie, %struct.trie* %10, i32 0, i32 3
  store %struct.trie* %8, %struct.trie** %next, align 8
  %11 = load %struct.trie**, %struct.trie*** %last.addr, align 8
  store %struct.trie* %8, %struct.trie** %11, align 8
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @treedelta(%struct.tree* %tree, i32 %depth, i8* %delta) #0 {
entry:
  %tree.addr = alloca %struct.tree*, align 8
  %depth.addr = alloca i32, align 4
  %delta.addr = alloca i8*, align 8
  store %struct.tree* %tree, %struct.tree** %tree.addr, align 8
  store i32 %depth, i32* %depth.addr, align 4
  store i8* %delta, i8** %delta.addr, align 8
  %0 = load %struct.tree*, %struct.tree** %tree.addr, align 8
  %tobool = icmp ne %struct.tree* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %if.end7

if.end:                                           ; preds = %entry
  %1 = load %struct.tree*, %struct.tree** %tree.addr, align 8
  %llink = getelementptr inbounds %struct.tree, %struct.tree* %1, i32 0, i32 0
  %2 = load %struct.tree*, %struct.tree** %llink, align 8
  %3 = load i32, i32* %depth.addr, align 4
  %4 = load i8*, i8** %delta.addr, align 8
  call void @treedelta(%struct.tree* %2, i32 %3, i8* %4)
  %5 = load %struct.tree*, %struct.tree** %tree.addr, align 8
  %rlink = getelementptr inbounds %struct.tree, %struct.tree* %5, i32 0, i32 1
  %6 = load %struct.tree*, %struct.tree** %rlink, align 8
  %7 = load i32, i32* %depth.addr, align 4
  %8 = load i8*, i8** %delta.addr, align 8
  call void @treedelta(%struct.tree* %6, i32 %7, i8* %8)
  %9 = load i32, i32* %depth.addr, align 4
  %10 = load i8*, i8** %delta.addr, align 8
  %11 = load %struct.tree*, %struct.tree** %tree.addr, align 8
  %label = getelementptr inbounds %struct.tree, %struct.tree* %11, i32 0, i32 3
  %12 = load i8, i8* %label, align 8
  %idxprom = zext i8 %12 to i64
  %arrayidx = getelementptr inbounds i8, i8* %10, i64 %idxprom
  %13 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %13 to i32
  %cmp = icmp ult i32 %9, %conv
  br i1 %cmp, label %if.then2, label %if.end7

if.then2:                                         ; preds = %if.end
  %14 = load i32, i32* %depth.addr, align 4
  %conv3 = trunc i32 %14 to i8
  %15 = load i8*, i8** %delta.addr, align 8
  %16 = load %struct.tree*, %struct.tree** %tree.addr, align 8
  %label4 = getelementptr inbounds %struct.tree, %struct.tree* %16, i32 0, i32 3
  %17 = load i8, i8* %label4, align 8
  %idxprom5 = zext i8 %17 to i64
  %arrayidx6 = getelementptr inbounds i8, i8* %15, i64 %idxprom5
  store i8 %conv3, i8* %arrayidx6, align 1
  br label %if.end7

if.end7:                                          ; preds = %if.then, %if.then2, %if.end
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @treefails(%struct.tree* %tree, %struct.trie* %fail, %struct.trie* %recourse) #0 {
entry:
  %tree.addr = alloca %struct.tree*, align 8
  %fail.addr = alloca %struct.trie*, align 8
  %recourse.addr = alloca %struct.trie*, align 8
  %link = alloca %struct.tree*, align 8
  store %struct.tree* %tree, %struct.tree** %tree.addr, align 8
  store %struct.trie* %fail, %struct.trie** %fail.addr, align 8
  store %struct.trie* %recourse, %struct.trie** %recourse.addr, align 8
  %0 = load %struct.tree*, %struct.tree** %tree.addr, align 8
  %tobool = icmp ne %struct.tree* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.tree*, %struct.tree** %tree.addr, align 8
  %llink = getelementptr inbounds %struct.tree, %struct.tree* %1, i32 0, i32 0
  %2 = load %struct.tree*, %struct.tree** %llink, align 8
  %3 = load %struct.trie*, %struct.trie** %fail.addr, align 8
  %4 = load %struct.trie*, %struct.trie** %recourse.addr, align 8
  call void @treefails(%struct.tree* %2, %struct.trie* %3, %struct.trie* %4)
  %5 = load %struct.tree*, %struct.tree** %tree.addr, align 8
  %rlink = getelementptr inbounds %struct.tree, %struct.tree* %5, i32 0, i32 1
  %6 = load %struct.tree*, %struct.tree** %rlink, align 8
  %7 = load %struct.trie*, %struct.trie** %fail.addr, align 8
  %8 = load %struct.trie*, %struct.trie** %recourse.addr, align 8
  call void @treefails(%struct.tree* %6, %struct.trie* %7, %struct.trie* %8)
  br label %while.cond

while.cond:                                       ; preds = %if.end22, %if.end
  %9 = load %struct.trie*, %struct.trie** %fail.addr, align 8
  %tobool1 = icmp ne %struct.trie* %9, null
  br i1 %tobool1, label %while.body, label %while.end24

while.body:                                       ; preds = %while.cond
  %10 = load %struct.trie*, %struct.trie** %fail.addr, align 8
  %links = getelementptr inbounds %struct.trie, %struct.trie* %10, i32 0, i32 1
  %11 = load %struct.tree*, %struct.tree** %links, align 8
  store %struct.tree* %11, %struct.tree** %link, align 8
  br label %while.cond2

while.cond2:                                      ; preds = %if.end17, %while.body
  %12 = load %struct.tree*, %struct.tree** %link, align 8
  %tobool3 = icmp ne %struct.tree* %12, null
  br i1 %tobool3, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond2
  %13 = load %struct.tree*, %struct.tree** %tree.addr, align 8
  %label = getelementptr inbounds %struct.tree, %struct.tree* %13, i32 0, i32 3
  %14 = load i8, i8* %label, align 8
  %conv = zext i8 %14 to i32
  %15 = load %struct.tree*, %struct.tree** %link, align 8
  %label4 = getelementptr inbounds %struct.tree, %struct.tree* %15, i32 0, i32 3
  %16 = load i8, i8* %label4, align 8
  %conv5 = zext i8 %16 to i32
  %cmp = icmp ne i32 %conv, %conv5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond2
  %17 = phi i1 [ false, %while.cond2 ], [ %cmp, %land.rhs ]
  br i1 %17, label %while.body7, label %while.end

while.body7:                                      ; preds = %land.end
  %18 = load %struct.tree*, %struct.tree** %tree.addr, align 8
  %label8 = getelementptr inbounds %struct.tree, %struct.tree* %18, i32 0, i32 3
  %19 = load i8, i8* %label8, align 8
  %conv9 = zext i8 %19 to i32
  %20 = load %struct.tree*, %struct.tree** %link, align 8
  %label10 = getelementptr inbounds %struct.tree, %struct.tree* %20, i32 0, i32 3
  %21 = load i8, i8* %label10, align 8
  %conv11 = zext i8 %21 to i32
  %cmp12 = icmp slt i32 %conv9, %conv11
  br i1 %cmp12, label %if.then14, label %if.else

if.then14:                                        ; preds = %while.body7
  %22 = load %struct.tree*, %struct.tree** %link, align 8
  %llink15 = getelementptr inbounds %struct.tree, %struct.tree* %22, i32 0, i32 0
  %23 = load %struct.tree*, %struct.tree** %llink15, align 8
  store %struct.tree* %23, %struct.tree** %link, align 8
  br label %if.end17

if.else:                                          ; preds = %while.body7
  %24 = load %struct.tree*, %struct.tree** %link, align 8
  %rlink16 = getelementptr inbounds %struct.tree, %struct.tree* %24, i32 0, i32 1
  %25 = load %struct.tree*, %struct.tree** %rlink16, align 8
  store %struct.tree* %25, %struct.tree** %link, align 8
  br label %if.end17

if.end17:                                         ; preds = %if.else, %if.then14
  br label %while.cond2, !llvm.loop !172

while.end:                                        ; preds = %land.end
  %26 = load %struct.tree*, %struct.tree** %link, align 8
  %tobool18 = icmp ne %struct.tree* %26, null
  br i1 %tobool18, label %if.then19, label %if.end22

if.then19:                                        ; preds = %while.end
  %27 = load %struct.tree*, %struct.tree** %link, align 8
  %trie = getelementptr inbounds %struct.tree, %struct.tree* %27, i32 0, i32 2
  %28 = load %struct.trie*, %struct.trie** %trie, align 8
  %29 = load %struct.tree*, %struct.tree** %tree.addr, align 8
  %trie20 = getelementptr inbounds %struct.tree, %struct.tree* %29, i32 0, i32 2
  %30 = load %struct.trie*, %struct.trie** %trie20, align 8
  %fail21 = getelementptr inbounds %struct.trie, %struct.trie* %30, i32 0, i32 4
  store %struct.trie* %28, %struct.trie** %fail21, align 8
  br label %return

if.end22:                                         ; preds = %while.end
  %31 = load %struct.trie*, %struct.trie** %fail.addr, align 8
  %fail23 = getelementptr inbounds %struct.trie, %struct.trie* %31, i32 0, i32 4
  %32 = load %struct.trie*, %struct.trie** %fail23, align 8
  store %struct.trie* %32, %struct.trie** %fail.addr, align 8
  br label %while.cond, !llvm.loop !173

while.end24:                                      ; preds = %while.cond
  %33 = load %struct.trie*, %struct.trie** %recourse.addr, align 8
  %34 = load %struct.tree*, %struct.tree** %tree.addr, align 8
  %trie25 = getelementptr inbounds %struct.tree, %struct.tree* %34, i32 0, i32 2
  %35 = load %struct.trie*, %struct.trie** %trie25, align 8
  %fail26 = getelementptr inbounds %struct.trie, %struct.trie* %35, i32 0, i32 4
  store %struct.trie* %33, %struct.trie** %fail26, align 8
  br label %return

return:                                           ; preds = %while.end24, %if.then19, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @hasevery(%struct.tree* %a, %struct.tree* %b) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca %struct.tree*, align 8
  %b.addr = alloca %struct.tree*, align 8
  store %struct.tree* %a, %struct.tree** %a.addr, align 8
  store %struct.tree* %b, %struct.tree** %b.addr, align 8
  %0 = load %struct.tree*, %struct.tree** %b.addr, align 8
  %tobool = icmp ne %struct.tree* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.tree*, %struct.tree** %a.addr, align 8
  %2 = load %struct.tree*, %struct.tree** %b.addr, align 8
  %llink = getelementptr inbounds %struct.tree, %struct.tree* %2, i32 0, i32 0
  %3 = load %struct.tree*, %struct.tree** %llink, align 8
  %call = call i32 @hasevery(%struct.tree* %1, %struct.tree* %3)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.end3, label %if.then2

if.then2:                                         ; preds = %if.end
  store i32 0, i32* %retval, align 4
  br label %return

if.end3:                                          ; preds = %if.end
  %4 = load %struct.tree*, %struct.tree** %a.addr, align 8
  %5 = load %struct.tree*, %struct.tree** %b.addr, align 8
  %rlink = getelementptr inbounds %struct.tree, %struct.tree* %5, i32 0, i32 1
  %6 = load %struct.tree*, %struct.tree** %rlink, align 8
  %call4 = call i32 @hasevery(%struct.tree* %4, %struct.tree* %6)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end3
  store i32 0, i32* %retval, align 4
  br label %return

if.end7:                                          ; preds = %if.end3
  br label %while.cond

while.cond:                                       ; preds = %if.end21, %if.end7
  %7 = load %struct.tree*, %struct.tree** %a.addr, align 8
  %tobool8 = icmp ne %struct.tree* %7, null
  br i1 %tobool8, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %8 = load %struct.tree*, %struct.tree** %b.addr, align 8
  %label = getelementptr inbounds %struct.tree, %struct.tree* %8, i32 0, i32 3
  %9 = load i8, i8* %label, align 8
  %conv = zext i8 %9 to i32
  %10 = load %struct.tree*, %struct.tree** %a.addr, align 8
  %label9 = getelementptr inbounds %struct.tree, %struct.tree* %10, i32 0, i32 3
  %11 = load i8, i8* %label9, align 8
  %conv10 = zext i8 %11 to i32
  %cmp = icmp ne i32 %conv, %conv10
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %12 = phi i1 [ false, %while.cond ], [ %cmp, %land.rhs ]
  br i1 %12, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %13 = load %struct.tree*, %struct.tree** %b.addr, align 8
  %label12 = getelementptr inbounds %struct.tree, %struct.tree* %13, i32 0, i32 3
  %14 = load i8, i8* %label12, align 8
  %conv13 = zext i8 %14 to i32
  %15 = load %struct.tree*, %struct.tree** %a.addr, align 8
  %label14 = getelementptr inbounds %struct.tree, %struct.tree* %15, i32 0, i32 3
  %16 = load i8, i8* %label14, align 8
  %conv15 = zext i8 %16 to i32
  %cmp16 = icmp slt i32 %conv13, %conv15
  br i1 %cmp16, label %if.then18, label %if.else

if.then18:                                        ; preds = %while.body
  %17 = load %struct.tree*, %struct.tree** %a.addr, align 8
  %llink19 = getelementptr inbounds %struct.tree, %struct.tree* %17, i32 0, i32 0
  %18 = load %struct.tree*, %struct.tree** %llink19, align 8
  store %struct.tree* %18, %struct.tree** %a.addr, align 8
  br label %if.end21

if.else:                                          ; preds = %while.body
  %19 = load %struct.tree*, %struct.tree** %a.addr, align 8
  %rlink20 = getelementptr inbounds %struct.tree, %struct.tree* %19, i32 0, i32 1
  %20 = load %struct.tree*, %struct.tree** %rlink20, align 8
  store %struct.tree* %20, %struct.tree** %a.addr, align 8
  br label %if.end21

if.end21:                                         ; preds = %if.else, %if.then18
  br label %while.cond, !llvm.loop !174

while.end:                                        ; preds = %land.end
  %21 = load %struct.tree*, %struct.tree** %a.addr, align 8
  %tobool22 = icmp ne %struct.tree* %21, null
  %lnot = xor i1 %tobool22, true
  %lnot23 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot23 to i32
  store i32 %lnot.ext, i32* %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then6, %if.then2, %if.then
  %22 = load i32, i32* %retval, align 4
  ret i32 %22
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @treenext(%struct.tree* %tree, %struct.trie** %next) #0 {
entry:
  %tree.addr = alloca %struct.tree*, align 8
  %next.addr = alloca %struct.trie**, align 8
  store %struct.tree* %tree, %struct.tree** %tree.addr, align 8
  store %struct.trie** %next, %struct.trie*** %next.addr, align 8
  %0 = load %struct.tree*, %struct.tree** %tree.addr, align 8
  %tobool = icmp ne %struct.tree* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.tree*, %struct.tree** %tree.addr, align 8
  %llink = getelementptr inbounds %struct.tree, %struct.tree* %1, i32 0, i32 0
  %2 = load %struct.tree*, %struct.tree** %llink, align 8
  %3 = load %struct.trie**, %struct.trie*** %next.addr, align 8
  call void @treenext(%struct.tree* %2, %struct.trie** %3)
  %4 = load %struct.tree*, %struct.tree** %tree.addr, align 8
  %rlink = getelementptr inbounds %struct.tree, %struct.tree* %4, i32 0, i32 1
  %5 = load %struct.tree*, %struct.tree** %rlink, align 8
  %6 = load %struct.trie**, %struct.trie*** %next.addr, align 8
  call void @treenext(%struct.tree* %5, %struct.trie** %6)
  %7 = load %struct.tree*, %struct.tree** %tree.addr, align 8
  %trie = getelementptr inbounds %struct.tree, %struct.tree* %7, i32 0, i32 2
  %8 = load %struct.trie*, %struct.trie** %trie, align 8
  %9 = load %struct.trie**, %struct.trie*** %next.addr, align 8
  %10 = load %struct.tree*, %struct.tree** %tree.addr, align 8
  %label = getelementptr inbounds %struct.tree, %struct.tree* %10, i32 0, i32 3
  %11 = load i8, i8* %label, align 8
  %idxprom = zext i8 %11 to i64
  %arrayidx = getelementptr inbounds %struct.trie*, %struct.trie** %9, i64 %idxprom
  store %struct.trie* %8, %struct.trie** %arrayidx, align 8
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @kwsexec(i8* %kws, i8* %text, i64 %size, %struct.kwsmatch* %kwsmatch) #0 {
entry:
  %retval = alloca i8*, align 8
  %kws.addr = alloca i8*, align 8
  %text.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %kwsmatch.addr = alloca %struct.kwsmatch*, align 8
  %kwset = alloca %struct.kwset*, align 8
  %ret = alloca i8*, align 8
  store i8* %kws, i8** %kws.addr, align 8
  store i8* %text, i8** %text.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  store %struct.kwsmatch* %kwsmatch, %struct.kwsmatch** %kwsmatch.addr, align 8
  %0 = load i8*, i8** %kws.addr, align 8
  %1 = bitcast i8* %0 to %struct.kwset*
  store %struct.kwset* %1, %struct.kwset** %kwset, align 8
  %2 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %words = getelementptr inbounds %struct.kwset, %struct.kwset* %2, i32 0, i32 1
  %3 = load i32, i32* %words, align 8
  %cmp = icmp eq i32 %3, 1
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %trans = getelementptr inbounds %struct.kwset, %struct.kwset* %4, i32 0, i32 9
  %5 = load i8*, i8** %trans, align 8
  %cmp1 = icmp eq i8* %5, null
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %6 = load i8*, i8** %kws.addr, align 8
  %7 = load i8*, i8** %text.addr, align 8
  %8 = load i64, i64* %size.addr, align 8
  %call = call i8* @bmexec(i8* %6, i8* %7, i64 %8)
  store i8* %call, i8** %ret, align 8
  %9 = load %struct.kwsmatch*, %struct.kwsmatch** %kwsmatch.addr, align 8
  %cmp2 = icmp ne %struct.kwsmatch* %9, null
  br i1 %cmp2, label %land.lhs.true3, label %if.end

land.lhs.true3:                                   ; preds = %if.then
  %10 = load i8*, i8** %ret, align 8
  %cmp4 = icmp ne i8* %10, null
  br i1 %cmp4, label %if.then5, label %if.end

if.then5:                                         ; preds = %land.lhs.true3
  %11 = load %struct.kwsmatch*, %struct.kwsmatch** %kwsmatch.addr, align 8
  %strchr = getelementptr inbounds %struct.kwsmatch, %struct.kwsmatch* %11, i32 0, i32 0
  store i32 0, i32* %strchr, align 8
  %12 = load i8*, i8** %ret, align 8
  %13 = load %struct.kwsmatch*, %struct.kwsmatch** %kwsmatch.addr, align 8
  %beg = getelementptr inbounds %struct.kwsmatch, %struct.kwsmatch* %13, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x i8*], [1 x i8*]* %beg, i64 0, i64 0
  store i8* %12, i8** %arrayidx, align 8
  %14 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %mind = getelementptr inbounds %struct.kwset, %struct.kwset* %14, i32 0, i32 3
  %15 = load i32, i32* %mind, align 8
  %conv = sext i32 %15 to i64
  %16 = load %struct.kwsmatch*, %struct.kwsmatch** %kwsmatch.addr, align 8
  %size6 = getelementptr inbounds %struct.kwsmatch, %struct.kwsmatch* %16, i32 0, i32 2
  %arrayidx7 = getelementptr inbounds [1 x i64], [1 x i64]* %size6, i64 0, i64 0
  store i64 %conv, i64* %arrayidx7, align 8
  br label %if.end

if.end:                                           ; preds = %if.then5, %land.lhs.true3, %if.then
  %17 = load i8*, i8** %ret, align 8
  store i8* %17, i8** %retval, align 8
  br label %return

if.else:                                          ; preds = %land.lhs.true, %entry
  %18 = load i8*, i8** %kws.addr, align 8
  %19 = load i8*, i8** %text.addr, align 8
  %20 = load i64, i64* %size.addr, align 8
  %21 = load %struct.kwsmatch*, %struct.kwsmatch** %kwsmatch.addr, align 8
  %call8 = call i8* @cwexec(i8* %18, i8* %19, i64 %20, %struct.kwsmatch* %21)
  store i8* %call8, i8** %retval, align 8
  br label %return

return:                                           ; preds = %if.else, %if.end
  %22 = load i8*, i8** %retval, align 8
  ret i8* %22
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @bmexec(i8* %kws, i8* %text, i64 %size) #0 {
entry:
  %retval = alloca i8*, align 8
  %kws.addr = alloca i8*, align 8
  %text.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %kwset = alloca %struct.kwset*, align 8
  %d1 = alloca i8*, align 8
  %ep = alloca i8*, align 8
  %sp = alloca i8*, align 8
  %tp = alloca i8*, align 8
  %d = alloca i32, align 4
  %gc = alloca i32, align 4
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  %md2 = alloca i32, align 4
  store i8* %kws, i8** %kws.addr, align 8
  store i8* %text, i8** %text.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  %0 = load i8*, i8** %kws.addr, align 8
  %1 = bitcast i8* %0 to %struct.kwset*
  store %struct.kwset* %1, %struct.kwset** %kwset, align 8
  %2 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %mind = getelementptr inbounds %struct.kwset, %struct.kwset* %2, i32 0, i32 3
  %3 = load i32, i32* %mind, align 8
  store i32 %3, i32* %len, align 4
  %4 = load i32, i32* %len, align 4
  %cmp = icmp eq i32 %4, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load i8*, i8** %text.addr, align 8
  store i8* %5, i8** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %6 = load i32, i32* %len, align 4
  %conv = sext i32 %6 to i64
  %7 = load i64, i64* %size.addr, align 8
  %cmp1 = icmp ugt i64 %conv, %7
  br i1 %cmp1, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  store i8* null, i8** %retval, align 8
  br label %return

if.end4:                                          ; preds = %if.end
  %8 = load i32, i32* %len, align 4
  %cmp5 = icmp eq i32 %8, 1
  br i1 %cmp5, label %if.then7, label %if.end9

if.then7:                                         ; preds = %if.end4
  %9 = load i8*, i8** %text.addr, align 8
  %10 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %target = getelementptr inbounds %struct.kwset, %struct.kwset* %10, i32 0, i32 7
  %11 = load i8*, i8** %target, align 8
  %arrayidx = getelementptr inbounds i8, i8* %11, i64 0
  %12 = load i8, i8* %arrayidx, align 1
  %conv8 = sext i8 %12 to i32
  %13 = load i64, i64* %size.addr, align 8
  %call = call i8* @memchr(i8* %9, i32 %conv8, i64 %13) #11
  store i8* %call, i8** %retval, align 8
  br label %return

if.end9:                                          ; preds = %if.end4
  %14 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %delta = getelementptr inbounds %struct.kwset, %struct.kwset* %14, i32 0, i32 5
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %delta, i64 0, i64 0
  store i8* %arraydecay, i8** %d1, align 8
  %15 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %target10 = getelementptr inbounds %struct.kwset, %struct.kwset* %15, i32 0, i32 7
  %16 = load i8*, i8** %target10, align 8
  %17 = load i32, i32* %len, align 4
  %idx.ext = sext i32 %17 to i64
  %add.ptr = getelementptr inbounds i8, i8* %16, i64 %idx.ext
  store i8* %add.ptr, i8** %sp, align 8
  %18 = load i8*, i8** %sp, align 8
  %arrayidx11 = getelementptr inbounds i8, i8* %18, i64 -2
  %19 = load i8, i8* %arrayidx11, align 1
  %conv12 = zext i8 %19 to i32
  store i32 %conv12, i32* %gc, align 4
  %20 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %mind2 = getelementptr inbounds %struct.kwset, %struct.kwset* %20, i32 0, i32 8
  %21 = load i32, i32* %mind2, align 8
  store i32 %21, i32* %md2, align 4
  %22 = load i8*, i8** %text.addr, align 8
  %23 = load i32, i32* %len, align 4
  %idx.ext13 = sext i32 %23 to i64
  %add.ptr14 = getelementptr inbounds i8, i8* %22, i64 %idx.ext13
  store i8* %add.ptr14, i8** %tp, align 8
  %24 = load i64, i64* %size.addr, align 8
  %25 = load i32, i32* %len, align 4
  %mul = mul nsw i32 12, %25
  %conv15 = sext i32 %mul to i64
  %cmp16 = icmp ugt i64 %24, %conv15
  br i1 %cmp16, label %if.then18, label %if.end124

if.then18:                                        ; preds = %if.end9
  %26 = load i8*, i8** %text.addr, align 8
  %27 = load i64, i64* %size.addr, align 8
  %add.ptr19 = getelementptr inbounds i8, i8* %26, i64 %27
  %28 = load i32, i32* %len, align 4
  %mul20 = mul nsw i32 11, %28
  %idx.ext21 = sext i32 %mul20 to i64
  %idx.neg = sub i64 0, %idx.ext21
  %add.ptr22 = getelementptr inbounds i8, i8* %add.ptr19, i64 %idx.neg
  store i8* %add.ptr22, i8** %ep, align 8
  br label %for.cond

for.cond:                                         ; preds = %if.end120, %if.then18
  br label %while.cond

while.cond:                                       ; preds = %if.end83, %for.cond
  %29 = load i8*, i8** %tp, align 8
  %30 = load i8*, i8** %ep, align 8
  %cmp23 = icmp ule i8* %29, %30
  br i1 %cmp23, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %31 = load i8*, i8** %d1, align 8
  %32 = load i8*, i8** %tp, align 8
  %arrayidx25 = getelementptr inbounds i8, i8* %32, i64 -1
  %33 = load i8, i8* %arrayidx25, align 1
  %idxprom = zext i8 %33 to i64
  %arrayidx26 = getelementptr inbounds i8, i8* %31, i64 %idxprom
  %34 = load i8, i8* %arrayidx26, align 1
  %conv27 = zext i8 %34 to i32
  store i32 %conv27, i32* %d, align 4
  %35 = load i32, i32* %d, align 4
  %36 = load i8*, i8** %tp, align 8
  %idx.ext28 = sext i32 %35 to i64
  %add.ptr29 = getelementptr inbounds i8, i8* %36, i64 %idx.ext28
  store i8* %add.ptr29, i8** %tp, align 8
  %37 = load i8*, i8** %d1, align 8
  %38 = load i8*, i8** %tp, align 8
  %arrayidx30 = getelementptr inbounds i8, i8* %38, i64 -1
  %39 = load i8, i8* %arrayidx30, align 1
  %idxprom31 = zext i8 %39 to i64
  %arrayidx32 = getelementptr inbounds i8, i8* %37, i64 %idxprom31
  %40 = load i8, i8* %arrayidx32, align 1
  %conv33 = zext i8 %40 to i32
  store i32 %conv33, i32* %d, align 4
  %41 = load i32, i32* %d, align 4
  %42 = load i8*, i8** %tp, align 8
  %idx.ext34 = sext i32 %41 to i64
  %add.ptr35 = getelementptr inbounds i8, i8* %42, i64 %idx.ext34
  store i8* %add.ptr35, i8** %tp, align 8
  %43 = load i32, i32* %d, align 4
  %cmp36 = icmp eq i32 %43, 0
  br i1 %cmp36, label %if.then38, label %if.end39

if.then38:                                        ; preds = %while.body
  br label %found

if.end39:                                         ; preds = %while.body
  %44 = load i8*, i8** %d1, align 8
  %45 = load i8*, i8** %tp, align 8
  %arrayidx40 = getelementptr inbounds i8, i8* %45, i64 -1
  %46 = load i8, i8* %arrayidx40, align 1
  %idxprom41 = zext i8 %46 to i64
  %arrayidx42 = getelementptr inbounds i8, i8* %44, i64 %idxprom41
  %47 = load i8, i8* %arrayidx42, align 1
  %conv43 = zext i8 %47 to i32
  store i32 %conv43, i32* %d, align 4
  %48 = load i32, i32* %d, align 4
  %49 = load i8*, i8** %tp, align 8
  %idx.ext44 = sext i32 %48 to i64
  %add.ptr45 = getelementptr inbounds i8, i8* %49, i64 %idx.ext44
  store i8* %add.ptr45, i8** %tp, align 8
  %50 = load i8*, i8** %d1, align 8
  %51 = load i8*, i8** %tp, align 8
  %arrayidx46 = getelementptr inbounds i8, i8* %51, i64 -1
  %52 = load i8, i8* %arrayidx46, align 1
  %idxprom47 = zext i8 %52 to i64
  %arrayidx48 = getelementptr inbounds i8, i8* %50, i64 %idxprom47
  %53 = load i8, i8* %arrayidx48, align 1
  %conv49 = zext i8 %53 to i32
  store i32 %conv49, i32* %d, align 4
  %54 = load i32, i32* %d, align 4
  %55 = load i8*, i8** %tp, align 8
  %idx.ext50 = sext i32 %54 to i64
  %add.ptr51 = getelementptr inbounds i8, i8* %55, i64 %idx.ext50
  store i8* %add.ptr51, i8** %tp, align 8
  %56 = load i8*, i8** %d1, align 8
  %57 = load i8*, i8** %tp, align 8
  %arrayidx52 = getelementptr inbounds i8, i8* %57, i64 -1
  %58 = load i8, i8* %arrayidx52, align 1
  %idxprom53 = zext i8 %58 to i64
  %arrayidx54 = getelementptr inbounds i8, i8* %56, i64 %idxprom53
  %59 = load i8, i8* %arrayidx54, align 1
  %conv55 = zext i8 %59 to i32
  store i32 %conv55, i32* %d, align 4
  %60 = load i32, i32* %d, align 4
  %61 = load i8*, i8** %tp, align 8
  %idx.ext56 = sext i32 %60 to i64
  %add.ptr57 = getelementptr inbounds i8, i8* %61, i64 %idx.ext56
  store i8* %add.ptr57, i8** %tp, align 8
  %62 = load i32, i32* %d, align 4
  %cmp58 = icmp eq i32 %62, 0
  br i1 %cmp58, label %if.then60, label %if.end61

if.then60:                                        ; preds = %if.end39
  br label %found

if.end61:                                         ; preds = %if.end39
  %63 = load i8*, i8** %d1, align 8
  %64 = load i8*, i8** %tp, align 8
  %arrayidx62 = getelementptr inbounds i8, i8* %64, i64 -1
  %65 = load i8, i8* %arrayidx62, align 1
  %idxprom63 = zext i8 %65 to i64
  %arrayidx64 = getelementptr inbounds i8, i8* %63, i64 %idxprom63
  %66 = load i8, i8* %arrayidx64, align 1
  %conv65 = zext i8 %66 to i32
  store i32 %conv65, i32* %d, align 4
  %67 = load i32, i32* %d, align 4
  %68 = load i8*, i8** %tp, align 8
  %idx.ext66 = sext i32 %67 to i64
  %add.ptr67 = getelementptr inbounds i8, i8* %68, i64 %idx.ext66
  store i8* %add.ptr67, i8** %tp, align 8
  %69 = load i8*, i8** %d1, align 8
  %70 = load i8*, i8** %tp, align 8
  %arrayidx68 = getelementptr inbounds i8, i8* %70, i64 -1
  %71 = load i8, i8* %arrayidx68, align 1
  %idxprom69 = zext i8 %71 to i64
  %arrayidx70 = getelementptr inbounds i8, i8* %69, i64 %idxprom69
  %72 = load i8, i8* %arrayidx70, align 1
  %conv71 = zext i8 %72 to i32
  store i32 %conv71, i32* %d, align 4
  %73 = load i32, i32* %d, align 4
  %74 = load i8*, i8** %tp, align 8
  %idx.ext72 = sext i32 %73 to i64
  %add.ptr73 = getelementptr inbounds i8, i8* %74, i64 %idx.ext72
  store i8* %add.ptr73, i8** %tp, align 8
  %75 = load i8*, i8** %d1, align 8
  %76 = load i8*, i8** %tp, align 8
  %arrayidx74 = getelementptr inbounds i8, i8* %76, i64 -1
  %77 = load i8, i8* %arrayidx74, align 1
  %idxprom75 = zext i8 %77 to i64
  %arrayidx76 = getelementptr inbounds i8, i8* %75, i64 %idxprom75
  %78 = load i8, i8* %arrayidx76, align 1
  %conv77 = zext i8 %78 to i32
  store i32 %conv77, i32* %d, align 4
  %79 = load i32, i32* %d, align 4
  %80 = load i8*, i8** %tp, align 8
  %idx.ext78 = sext i32 %79 to i64
  %add.ptr79 = getelementptr inbounds i8, i8* %80, i64 %idx.ext78
  store i8* %add.ptr79, i8** %tp, align 8
  %81 = load i32, i32* %d, align 4
  %cmp80 = icmp eq i32 %81, 0
  br i1 %cmp80, label %if.then82, label %if.end83

if.then82:                                        ; preds = %if.end61
  br label %found

if.end83:                                         ; preds = %if.end61
  %82 = load i8*, i8** %d1, align 8
  %83 = load i8*, i8** %tp, align 8
  %arrayidx84 = getelementptr inbounds i8, i8* %83, i64 -1
  %84 = load i8, i8* %arrayidx84, align 1
  %idxprom85 = zext i8 %84 to i64
  %arrayidx86 = getelementptr inbounds i8, i8* %82, i64 %idxprom85
  %85 = load i8, i8* %arrayidx86, align 1
  %conv87 = zext i8 %85 to i32
  store i32 %conv87, i32* %d, align 4
  %86 = load i32, i32* %d, align 4
  %87 = load i8*, i8** %tp, align 8
  %idx.ext88 = sext i32 %86 to i64
  %add.ptr89 = getelementptr inbounds i8, i8* %87, i64 %idx.ext88
  store i8* %add.ptr89, i8** %tp, align 8
  %88 = load i8*, i8** %d1, align 8
  %89 = load i8*, i8** %tp, align 8
  %arrayidx90 = getelementptr inbounds i8, i8* %89, i64 -1
  %90 = load i8, i8* %arrayidx90, align 1
  %idxprom91 = zext i8 %90 to i64
  %arrayidx92 = getelementptr inbounds i8, i8* %88, i64 %idxprom91
  %91 = load i8, i8* %arrayidx92, align 1
  %conv93 = zext i8 %91 to i32
  store i32 %conv93, i32* %d, align 4
  %92 = load i32, i32* %d, align 4
  %93 = load i8*, i8** %tp, align 8
  %idx.ext94 = sext i32 %92 to i64
  %add.ptr95 = getelementptr inbounds i8, i8* %93, i64 %idx.ext94
  store i8* %add.ptr95, i8** %tp, align 8
  br label %while.cond, !llvm.loop !175

while.end:                                        ; preds = %while.cond
  br label %for.end123

found:                                            ; preds = %if.then82, %if.then60, %if.then38
  %94 = load i8*, i8** %tp, align 8
  %arrayidx96 = getelementptr inbounds i8, i8* %94, i64 -2
  %95 = load i8, i8* %arrayidx96, align 1
  %conv97 = zext i8 %95 to i32
  %96 = load i32, i32* %gc, align 4
  %cmp98 = icmp eq i32 %conv97, %96
  br i1 %cmp98, label %if.then100, label %if.end120

if.then100:                                       ; preds = %found
  store i32 3, i32* %i, align 4
  br label %for.cond101

for.cond101:                                      ; preds = %for.inc, %if.then100
  %97 = load i32, i32* %i, align 4
  %98 = load i32, i32* %len, align 4
  %cmp102 = icmp sle i32 %97, %98
  br i1 %cmp102, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond101
  %99 = load i8*, i8** %tp, align 8
  %100 = load i32, i32* %i, align 4
  %sub = sub nsw i32 0, %100
  %idxprom104 = sext i32 %sub to i64
  %arrayidx105 = getelementptr inbounds i8, i8* %99, i64 %idxprom104
  %101 = load i8, i8* %arrayidx105, align 1
  %conv106 = zext i8 %101 to i32
  %102 = load i8*, i8** %sp, align 8
  %103 = load i32, i32* %i, align 4
  %sub107 = sub nsw i32 0, %103
  %idxprom108 = sext i32 %sub107 to i64
  %arrayidx109 = getelementptr inbounds i8, i8* %102, i64 %idxprom108
  %104 = load i8, i8* %arrayidx109, align 1
  %conv110 = zext i8 %104 to i32
  %cmp111 = icmp eq i32 %conv106, %conv110
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond101
  %105 = phi i1 [ false, %for.cond101 ], [ %cmp111, %land.rhs ]
  br i1 %105, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %106 = load i32, i32* %i, align 4
  %inc = add nsw i32 %106, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond101, !llvm.loop !176

for.end:                                          ; preds = %land.end
  %107 = load i32, i32* %i, align 4
  %108 = load i32, i32* %len, align 4
  %cmp113 = icmp sgt i32 %107, %108
  br i1 %cmp113, label %if.then115, label %if.end119

if.then115:                                       ; preds = %for.end
  %109 = load i8*, i8** %tp, align 8
  %110 = load i32, i32* %len, align 4
  %idx.ext116 = sext i32 %110 to i64
  %idx.neg117 = sub i64 0, %idx.ext116
  %add.ptr118 = getelementptr inbounds i8, i8* %109, i64 %idx.neg117
  store i8* %add.ptr118, i8** %retval, align 8
  br label %return

if.end119:                                        ; preds = %for.end
  br label %if.end120

if.end120:                                        ; preds = %if.end119, %found
  %111 = load i32, i32* %md2, align 4
  %112 = load i8*, i8** %tp, align 8
  %idx.ext121 = sext i32 %111 to i64
  %add.ptr122 = getelementptr inbounds i8, i8* %112, i64 %idx.ext121
  store i8* %add.ptr122, i8** %tp, align 8
  br label %for.cond

for.end123:                                       ; preds = %while.end
  br label %if.end124

if.end124:                                        ; preds = %for.end123, %if.end9
  %113 = load i8*, i8** %text.addr, align 8
  %114 = load i64, i64* %size.addr, align 8
  %add.ptr125 = getelementptr inbounds i8, i8* %113, i64 %114
  store i8* %add.ptr125, i8** %ep, align 8
  %115 = load i8*, i8** %d1, align 8
  %116 = load i8*, i8** %tp, align 8
  %arrayidx126 = getelementptr inbounds i8, i8* %116, i64 -1
  %117 = load i8, i8* %arrayidx126, align 1
  %idxprom127 = zext i8 %117 to i64
  %arrayidx128 = getelementptr inbounds i8, i8* %115, i64 %idxprom127
  %118 = load i8, i8* %arrayidx128, align 1
  %conv129 = zext i8 %118 to i32
  store i32 %conv129, i32* %d, align 4
  br label %while.cond130

while.cond130:                                    ; preds = %if.end176, %if.then143, %if.end124
  %119 = load i32, i32* %d, align 4
  %conv131 = sext i32 %119 to i64
  %120 = load i8*, i8** %ep, align 8
  %121 = load i8*, i8** %tp, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %120 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %121 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp132 = icmp sle i64 %conv131, %sub.ptr.sub
  br i1 %cmp132, label %while.body134, label %while.end177

while.body134:                                    ; preds = %while.cond130
  %122 = load i8*, i8** %d1, align 8
  %123 = load i32, i32* %d, align 4
  %124 = load i8*, i8** %tp, align 8
  %idx.ext135 = sext i32 %123 to i64
  %add.ptr136 = getelementptr inbounds i8, i8* %124, i64 %idx.ext135
  store i8* %add.ptr136, i8** %tp, align 8
  %arrayidx137 = getelementptr inbounds i8, i8* %add.ptr136, i64 -1
  %125 = load i8, i8* %arrayidx137, align 1
  %idxprom138 = zext i8 %125 to i64
  %arrayidx139 = getelementptr inbounds i8, i8* %122, i64 %idxprom138
  %126 = load i8, i8* %arrayidx139, align 1
  %conv140 = zext i8 %126 to i32
  store i32 %conv140, i32* %d, align 4
  %127 = load i32, i32* %d, align 4
  %cmp141 = icmp ne i32 %127, 0
  br i1 %cmp141, label %if.then143, label %if.end144

if.then143:                                       ; preds = %while.body134
  br label %while.cond130, !llvm.loop !177

if.end144:                                        ; preds = %while.body134
  %128 = load i8*, i8** %tp, align 8
  %arrayidx145 = getelementptr inbounds i8, i8* %128, i64 -2
  %129 = load i8, i8* %arrayidx145, align 1
  %conv146 = sext i8 %129 to i32
  %130 = load i32, i32* %gc, align 4
  %cmp147 = icmp eq i32 %conv146, %130
  br i1 %cmp147, label %if.then149, label %if.end176

if.then149:                                       ; preds = %if.end144
  store i32 3, i32* %i, align 4
  br label %for.cond150

for.cond150:                                      ; preds = %for.inc166, %if.then149
  %131 = load i32, i32* %i, align 4
  %132 = load i32, i32* %len, align 4
  %cmp151 = icmp sle i32 %131, %132
  br i1 %cmp151, label %land.rhs153, label %land.end164

land.rhs153:                                      ; preds = %for.cond150
  %133 = load i8*, i8** %tp, align 8
  %134 = load i32, i32* %i, align 4
  %sub154 = sub nsw i32 0, %134
  %idxprom155 = sext i32 %sub154 to i64
  %arrayidx156 = getelementptr inbounds i8, i8* %133, i64 %idxprom155
  %135 = load i8, i8* %arrayidx156, align 1
  %conv157 = zext i8 %135 to i32
  %136 = load i8*, i8** %sp, align 8
  %137 = load i32, i32* %i, align 4
  %sub158 = sub nsw i32 0, %137
  %idxprom159 = sext i32 %sub158 to i64
  %arrayidx160 = getelementptr inbounds i8, i8* %136, i64 %idxprom159
  %138 = load i8, i8* %arrayidx160, align 1
  %conv161 = zext i8 %138 to i32
  %cmp162 = icmp eq i32 %conv157, %conv161
  br label %land.end164

land.end164:                                      ; preds = %land.rhs153, %for.cond150
  %139 = phi i1 [ false, %for.cond150 ], [ %cmp162, %land.rhs153 ]
  br i1 %139, label %for.body165, label %for.end168

for.body165:                                      ; preds = %land.end164
  br label %for.inc166

for.inc166:                                       ; preds = %for.body165
  %140 = load i32, i32* %i, align 4
  %inc167 = add nsw i32 %140, 1
  store i32 %inc167, i32* %i, align 4
  br label %for.cond150, !llvm.loop !178

for.end168:                                       ; preds = %land.end164
  %141 = load i32, i32* %i, align 4
  %142 = load i32, i32* %len, align 4
  %cmp169 = icmp sgt i32 %141, %142
  br i1 %cmp169, label %if.then171, label %if.end175

if.then171:                                       ; preds = %for.end168
  %143 = load i8*, i8** %tp, align 8
  %144 = load i32, i32* %len, align 4
  %idx.ext172 = sext i32 %144 to i64
  %idx.neg173 = sub i64 0, %idx.ext172
  %add.ptr174 = getelementptr inbounds i8, i8* %143, i64 %idx.neg173
  store i8* %add.ptr174, i8** %retval, align 8
  br label %return

if.end175:                                        ; preds = %for.end168
  br label %if.end176

if.end176:                                        ; preds = %if.end175, %if.end144
  %145 = load i32, i32* %md2, align 4
  store i32 %145, i32* %d, align 4
  br label %while.cond130, !llvm.loop !177

while.end177:                                     ; preds = %while.cond130
  store i8* null, i8** %retval, align 8
  br label %return

return:                                           ; preds = %while.end177, %if.then171, %if.then115, %if.then7, %if.then3, %if.then
  %146 = load i8*, i8** %retval, align 8
  ret i8* %146
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @cwexec(i8* %kws, i8* %text, i64 %len, %struct.kwsmatch* %kwsmatch) #0 {
entry:
  %retval = alloca i8*, align 8
  %kws.addr = alloca i8*, align 8
  %text.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %kwsmatch.addr = alloca %struct.kwsmatch*, align 8
  %kwset = alloca %struct.kwset*, align 8
  %next = alloca %struct.trie**, align 8
  %trie = alloca %struct.trie*, align 8
  %accept = alloca %struct.trie*, align 8
  %beg = alloca i8*, align 8
  %lim = alloca i8*, align 8
  %mch = alloca i8*, align 8
  %lmch = alloca i8*, align 8
  %c = alloca i8, align 1
  %delta = alloca i8*, align 8
  %d = alloca i32, align 4
  %end = alloca i8*, align 8
  %qlim = alloca i8*, align 8
  %tree = alloca %struct.tree*, align 8
  %trans = alloca i8*, align 8
  store i8* %kws, i8** %kws.addr, align 8
  store i8* %text, i8** %text.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  store %struct.kwsmatch* %kwsmatch, %struct.kwsmatch** %kwsmatch.addr, align 8
  %0 = load i8*, i8** %kws.addr, align 8
  %1 = bitcast i8* %0 to %struct.kwset*
  store %struct.kwset* %1, %struct.kwset** %kwset, align 8
  %2 = load i64, i64* %len.addr, align 8
  %3 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %mind = getelementptr inbounds %struct.kwset, %struct.kwset* %3, i32 0, i32 3
  %4 = load i32, i32* %mind, align 8
  %conv = sext i32 %4 to i64
  %cmp = icmp ult i64 %2, %conv
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %5 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %next2 = getelementptr inbounds %struct.kwset, %struct.kwset* %5, i32 0, i32 6
  %arraydecay = getelementptr inbounds [256 x %struct.trie*], [256 x %struct.trie*]* %next2, i64 0, i64 0
  store %struct.trie** %arraydecay, %struct.trie*** %next, align 8
  %6 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %delta3 = getelementptr inbounds %struct.kwset, %struct.kwset* %6, i32 0, i32 5
  %arraydecay4 = getelementptr inbounds [256 x i8], [256 x i8]* %delta3, i64 0, i64 0
  store i8* %arraydecay4, i8** %delta, align 8
  %7 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %trans5 = getelementptr inbounds %struct.kwset, %struct.kwset* %7, i32 0, i32 9
  %8 = load i8*, i8** %trans5, align 8
  store i8* %8, i8** %trans, align 8
  %9 = load i8*, i8** %text.addr, align 8
  %10 = load i64, i64* %len.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %9, i64 %10
  store i8* %add.ptr, i8** %lim, align 8
  %11 = load i8*, i8** %text.addr, align 8
  store i8* %11, i8** %end, align 8
  %12 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %mind6 = getelementptr inbounds %struct.kwset, %struct.kwset* %12, i32 0, i32 3
  %13 = load i32, i32* %mind6, align 8
  store i32 %13, i32* %d, align 4
  %cmp7 = icmp ne i32 %13, 0
  br i1 %cmp7, label %if.then9, label %if.else

if.then9:                                         ; preds = %if.end
  store i8* null, i8** %mch, align 8
  br label %if.end11

if.else:                                          ; preds = %if.end
  %14 = load i8*, i8** %text.addr, align 8
  store i8* %14, i8** %mch, align 8
  %15 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %trie10 = getelementptr inbounds %struct.kwset, %struct.kwset* %15, i32 0, i32 2
  %16 = load %struct.trie*, %struct.trie** %trie10, align 8
  store %struct.trie* %16, %struct.trie** %accept, align 8
  br label %match

if.end11:                                         ; preds = %if.then9
  %17 = load i64, i64* %len.addr, align 8
  %18 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %mind12 = getelementptr inbounds %struct.kwset, %struct.kwset* %18, i32 0, i32 3
  %19 = load i32, i32* %mind12, align 8
  %mul = mul nsw i32 4, %19
  %conv13 = sext i32 %mul to i64
  %cmp14 = icmp uge i64 %17, %conv13
  br i1 %cmp14, label %if.then16, label %if.else20

if.then16:                                        ; preds = %if.end11
  %20 = load i8*, i8** %lim, align 8
  %21 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %mind17 = getelementptr inbounds %struct.kwset, %struct.kwset* %21, i32 0, i32 3
  %22 = load i32, i32* %mind17, align 8
  %mul18 = mul nsw i32 4, %22
  %idx.ext = sext i32 %mul18 to i64
  %idx.neg = sub i64 0, %idx.ext
  %add.ptr19 = getelementptr inbounds i8, i8* %20, i64 %idx.neg
  store i8* %add.ptr19, i8** %qlim, align 8
  br label %if.end21

if.else20:                                        ; preds = %if.end11
  store i8* null, i8** %qlim, align 8
  br label %if.end21

if.end21:                                         ; preds = %if.else20, %if.then16
  br label %while.cond

while.cond:                                       ; preds = %if.end108, %if.then57, %if.end21
  %23 = load i8*, i8** %lim, align 8
  %24 = load i8*, i8** %end, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %23 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %24 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %25 = load i32, i32* %d, align 4
  %conv22 = sext i32 %25 to i64
  %cmp23 = icmp sge i64 %sub.ptr.sub, %conv22
  br i1 %cmp23, label %while.body, label %while.end109

while.body:                                       ; preds = %while.cond
  %26 = load i8*, i8** %qlim, align 8
  %tobool = icmp ne i8* %26, null
  br i1 %tobool, label %land.lhs.true, label %if.else48

land.lhs.true:                                    ; preds = %while.body
  %27 = load i8*, i8** %end, align 8
  %28 = load i8*, i8** %qlim, align 8
  %cmp25 = icmp ule i8* %27, %28
  br i1 %cmp25, label %if.then27, label %if.else48

if.then27:                                        ; preds = %land.lhs.true
  %29 = load i32, i32* %d, align 4
  %sub = sub nsw i32 %29, 1
  %30 = load i8*, i8** %end, align 8
  %idx.ext28 = sext i32 %sub to i64
  %add.ptr29 = getelementptr inbounds i8, i8* %30, i64 %idx.ext28
  store i8* %add.ptr29, i8** %end, align 8
  br label %while.cond30

while.cond30:                                     ; preds = %while.body35, %if.then27
  %31 = load i8*, i8** %delta, align 8
  %32 = load i8*, i8** %end, align 8
  %33 = load i8, i8* %32, align 1
  store i8 %33, i8* %c, align 1
  %idxprom = zext i8 %33 to i64
  %arrayidx = getelementptr inbounds i8, i8* %31, i64 %idxprom
  %34 = load i8, i8* %arrayidx, align 1
  %conv31 = zext i8 %34 to i32
  store i32 %conv31, i32* %d, align 4
  %tobool32 = icmp ne i32 %conv31, 0
  br i1 %tobool32, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond30
  %35 = load i8*, i8** %end, align 8
  %36 = load i8*, i8** %qlim, align 8
  %cmp33 = icmp ult i8* %35, %36
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond30
  %37 = phi i1 [ false, %while.cond30 ], [ %cmp33, %land.rhs ]
  br i1 %37, label %while.body35, label %while.end

while.body35:                                     ; preds = %land.end
  %38 = load i32, i32* %d, align 4
  %39 = load i8*, i8** %end, align 8
  %idx.ext36 = sext i32 %38 to i64
  %add.ptr37 = getelementptr inbounds i8, i8* %39, i64 %idx.ext36
  store i8* %add.ptr37, i8** %end, align 8
  %40 = load i8*, i8** %delta, align 8
  %41 = load i8*, i8** %end, align 8
  %42 = load i8, i8* %41, align 1
  %idxprom38 = zext i8 %42 to i64
  %arrayidx39 = getelementptr inbounds i8, i8* %40, i64 %idxprom38
  %43 = load i8, i8* %arrayidx39, align 1
  %conv40 = zext i8 %43 to i32
  %44 = load i8*, i8** %end, align 8
  %idx.ext41 = sext i32 %conv40 to i64
  %add.ptr42 = getelementptr inbounds i8, i8* %44, i64 %idx.ext41
  store i8* %add.ptr42, i8** %end, align 8
  %45 = load i8*, i8** %delta, align 8
  %46 = load i8*, i8** %end, align 8
  %47 = load i8, i8* %46, align 1
  %idxprom43 = zext i8 %47 to i64
  %arrayidx44 = getelementptr inbounds i8, i8* %45, i64 %idxprom43
  %48 = load i8, i8* %arrayidx44, align 1
  %conv45 = zext i8 %48 to i32
  %49 = load i8*, i8** %end, align 8
  %idx.ext46 = sext i32 %conv45 to i64
  %add.ptr47 = getelementptr inbounds i8, i8* %49, i64 %idx.ext46
  store i8* %add.ptr47, i8** %end, align 8
  br label %while.cond30, !llvm.loop !179

while.end:                                        ; preds = %land.end
  %50 = load i8*, i8** %end, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %50, i32 1
  store i8* %incdec.ptr, i8** %end, align 8
  br label %if.end55

if.else48:                                        ; preds = %land.lhs.true, %while.body
  %51 = load i8*, i8** %delta, align 8
  %52 = load i32, i32* %d, align 4
  %53 = load i8*, i8** %end, align 8
  %idx.ext49 = sext i32 %52 to i64
  %add.ptr50 = getelementptr inbounds i8, i8* %53, i64 %idx.ext49
  store i8* %add.ptr50, i8** %end, align 8
  %arrayidx51 = getelementptr inbounds i8, i8* %add.ptr50, i64 -1
  %54 = load i8, i8* %arrayidx51, align 1
  store i8 %54, i8* %c, align 1
  %idxprom52 = zext i8 %54 to i64
  %arrayidx53 = getelementptr inbounds i8, i8* %51, i64 %idxprom52
  %55 = load i8, i8* %arrayidx53, align 1
  %conv54 = zext i8 %55 to i32
  store i32 %conv54, i32* %d, align 4
  br label %if.end55

if.end55:                                         ; preds = %if.else48, %while.end
  %56 = load i32, i32* %d, align 4
  %tobool56 = icmp ne i32 %56, 0
  br i1 %tobool56, label %if.then57, label %if.end58

if.then57:                                        ; preds = %if.end55
  br label %while.cond, !llvm.loop !180

if.end58:                                         ; preds = %if.end55
  %57 = load i8*, i8** %end, align 8
  %add.ptr59 = getelementptr inbounds i8, i8* %57, i64 -1
  store i8* %add.ptr59, i8** %beg, align 8
  %58 = load %struct.trie**, %struct.trie*** %next, align 8
  %59 = load i8, i8* %c, align 1
  %idxprom60 = zext i8 %59 to i64
  %arrayidx61 = getelementptr inbounds %struct.trie*, %struct.trie** %58, i64 %idxprom60
  %60 = load %struct.trie*, %struct.trie** %arrayidx61, align 8
  store %struct.trie* %60, %struct.trie** %trie, align 8
  %61 = load %struct.trie*, %struct.trie** %trie, align 8
  %accepting = getelementptr inbounds %struct.trie, %struct.trie* %61, i32 0, i32 0
  %62 = load i32, i32* %accepting, align 8
  %tobool62 = icmp ne i32 %62, 0
  br i1 %tobool62, label %if.then63, label %if.end64

if.then63:                                        ; preds = %if.end58
  %63 = load i8*, i8** %beg, align 8
  store i8* %63, i8** %mch, align 8
  %64 = load %struct.trie*, %struct.trie** %trie, align 8
  store %struct.trie* %64, %struct.trie** %accept, align 8
  br label %if.end64

if.end64:                                         ; preds = %if.then63, %if.end58
  %65 = load %struct.trie*, %struct.trie** %trie, align 8
  %shift = getelementptr inbounds %struct.trie, %struct.trie* %65, i32 0, i32 6
  %66 = load i32, i32* %shift, align 4
  store i32 %66, i32* %d, align 4
  br label %while.cond65

while.cond65:                                     ; preds = %if.end103, %if.end64
  %67 = load i8*, i8** %beg, align 8
  %68 = load i8*, i8** %text.addr, align 8
  %cmp66 = icmp ugt i8* %67, %68
  br i1 %cmp66, label %while.body68, label %while.end105

while.body68:                                     ; preds = %while.cond65
  %69 = load i8*, i8** %trans, align 8
  %tobool69 = icmp ne i8* %69, null
  br i1 %tobool69, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body68
  %70 = load i8*, i8** %trans, align 8
  %71 = load i8*, i8** %beg, align 8
  %incdec.ptr70 = getelementptr inbounds i8, i8* %71, i32 -1
  store i8* %incdec.ptr70, i8** %beg, align 8
  %72 = load i8, i8* %incdec.ptr70, align 1
  %idxprom71 = zext i8 %72 to i64
  %arrayidx72 = getelementptr inbounds i8, i8* %70, i64 %idxprom71
  %73 = load i8, i8* %arrayidx72, align 1
  %conv73 = sext i8 %73 to i32
  br label %cond.end

cond.false:                                       ; preds = %while.body68
  %74 = load i8*, i8** %beg, align 8
  %incdec.ptr74 = getelementptr inbounds i8, i8* %74, i32 -1
  store i8* %incdec.ptr74, i8** %beg, align 8
  %75 = load i8, i8* %incdec.ptr74, align 1
  %conv75 = sext i8 %75 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv73, %cond.true ], [ %conv75, %cond.false ]
  %conv76 = trunc i32 %cond to i8
  store i8 %conv76, i8* %c, align 1
  %76 = load %struct.trie*, %struct.trie** %trie, align 8
  %links = getelementptr inbounds %struct.trie, %struct.trie* %76, i32 0, i32 1
  %77 = load %struct.tree*, %struct.tree** %links, align 8
  store %struct.tree* %77, %struct.tree** %tree, align 8
  br label %while.cond77

while.cond77:                                     ; preds = %if.end93, %cond.end
  %78 = load %struct.tree*, %struct.tree** %tree, align 8
  %tobool78 = icmp ne %struct.tree* %78, null
  br i1 %tobool78, label %land.rhs79, label %land.end84

land.rhs79:                                       ; preds = %while.cond77
  %79 = load i8, i8* %c, align 1
  %conv80 = zext i8 %79 to i32
  %80 = load %struct.tree*, %struct.tree** %tree, align 8
  %label = getelementptr inbounds %struct.tree, %struct.tree* %80, i32 0, i32 3
  %81 = load i8, i8* %label, align 8
  %conv81 = zext i8 %81 to i32
  %cmp82 = icmp ne i32 %conv80, %conv81
  br label %land.end84

land.end84:                                       ; preds = %land.rhs79, %while.cond77
  %82 = phi i1 [ false, %while.cond77 ], [ %cmp82, %land.rhs79 ]
  br i1 %82, label %while.body85, label %while.end94

while.body85:                                     ; preds = %land.end84
  %83 = load i8, i8* %c, align 1
  %conv86 = zext i8 %83 to i32
  %84 = load %struct.tree*, %struct.tree** %tree, align 8
  %label87 = getelementptr inbounds %struct.tree, %struct.tree* %84, i32 0, i32 3
  %85 = load i8, i8* %label87, align 8
  %conv88 = zext i8 %85 to i32
  %cmp89 = icmp slt i32 %conv86, %conv88
  br i1 %cmp89, label %if.then91, label %if.else92

if.then91:                                        ; preds = %while.body85
  %86 = load %struct.tree*, %struct.tree** %tree, align 8
  %llink = getelementptr inbounds %struct.tree, %struct.tree* %86, i32 0, i32 0
  %87 = load %struct.tree*, %struct.tree** %llink, align 8
  store %struct.tree* %87, %struct.tree** %tree, align 8
  br label %if.end93

if.else92:                                        ; preds = %while.body85
  %88 = load %struct.tree*, %struct.tree** %tree, align 8
  %rlink = getelementptr inbounds %struct.tree, %struct.tree* %88, i32 0, i32 1
  %89 = load %struct.tree*, %struct.tree** %rlink, align 8
  store %struct.tree* %89, %struct.tree** %tree, align 8
  br label %if.end93

if.end93:                                         ; preds = %if.else92, %if.then91
  br label %while.cond77, !llvm.loop !181

while.end94:                                      ; preds = %land.end84
  %90 = load %struct.tree*, %struct.tree** %tree, align 8
  %tobool95 = icmp ne %struct.tree* %90, null
  br i1 %tobool95, label %if.then96, label %if.else102

if.then96:                                        ; preds = %while.end94
  %91 = load %struct.tree*, %struct.tree** %tree, align 8
  %trie97 = getelementptr inbounds %struct.tree, %struct.tree* %91, i32 0, i32 2
  %92 = load %struct.trie*, %struct.trie** %trie97, align 8
  store %struct.trie* %92, %struct.trie** %trie, align 8
  %93 = load %struct.trie*, %struct.trie** %trie, align 8
  %accepting98 = getelementptr inbounds %struct.trie, %struct.trie* %93, i32 0, i32 0
  %94 = load i32, i32* %accepting98, align 8
  %tobool99 = icmp ne i32 %94, 0
  br i1 %tobool99, label %if.then100, label %if.end101

if.then100:                                       ; preds = %if.then96
  %95 = load i8*, i8** %beg, align 8
  store i8* %95, i8** %mch, align 8
  %96 = load %struct.trie*, %struct.trie** %trie, align 8
  store %struct.trie* %96, %struct.trie** %accept, align 8
  br label %if.end101

if.end101:                                        ; preds = %if.then100, %if.then96
  br label %if.end103

if.else102:                                       ; preds = %while.end94
  br label %while.end105

if.end103:                                        ; preds = %if.end101
  %97 = load %struct.trie*, %struct.trie** %trie, align 8
  %shift104 = getelementptr inbounds %struct.trie, %struct.trie* %97, i32 0, i32 6
  %98 = load i32, i32* %shift104, align 4
  store i32 %98, i32* %d, align 4
  br label %while.cond65, !llvm.loop !182

while.end105:                                     ; preds = %if.else102, %while.cond65
  %99 = load i8*, i8** %mch, align 8
  %tobool106 = icmp ne i8* %99, null
  br i1 %tobool106, label %if.then107, label %if.end108

if.then107:                                       ; preds = %while.end105
  br label %match

if.end108:                                        ; preds = %while.end105
  br label %while.cond, !llvm.loop !180

while.end109:                                     ; preds = %while.cond
  store i8* null, i8** %retval, align 8
  br label %return

match:                                            ; preds = %if.then206, %if.then107, %if.else
  %100 = load i8*, i8** %lim, align 8
  %101 = load i8*, i8** %mch, align 8
  %sub.ptr.lhs.cast110 = ptrtoint i8* %100 to i64
  %sub.ptr.rhs.cast111 = ptrtoint i8* %101 to i64
  %sub.ptr.sub112 = sub i64 %sub.ptr.lhs.cast110, %sub.ptr.rhs.cast111
  %102 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %maxd = getelementptr inbounds %struct.kwset, %struct.kwset* %102, i32 0, i32 4
  %103 = load i32, i32* %maxd, align 4
  %conv113 = sext i32 %103 to i64
  %cmp114 = icmp sgt i64 %sub.ptr.sub112, %conv113
  br i1 %cmp114, label %if.then116, label %if.end120

if.then116:                                       ; preds = %match
  %104 = load i8*, i8** %mch, align 8
  %105 = load %struct.kwset*, %struct.kwset** %kwset, align 8
  %maxd117 = getelementptr inbounds %struct.kwset, %struct.kwset* %105, i32 0, i32 4
  %106 = load i32, i32* %maxd117, align 4
  %idx.ext118 = sext i32 %106 to i64
  %add.ptr119 = getelementptr inbounds i8, i8* %104, i64 %idx.ext118
  store i8* %add.ptr119, i8** %lim, align 8
  br label %if.end120

if.end120:                                        ; preds = %if.then116, %match
  store i8* null, i8** %lmch, align 8
  store i32 1, i32* %d, align 4
  br label %while.cond121

while.cond121:                                    ; preds = %if.end210, %if.then143, %if.then137, %if.end120
  %107 = load i8*, i8** %lim, align 8
  %108 = load i8*, i8** %end, align 8
  %sub.ptr.lhs.cast122 = ptrtoint i8* %107 to i64
  %sub.ptr.rhs.cast123 = ptrtoint i8* %108 to i64
  %sub.ptr.sub124 = sub i64 %sub.ptr.lhs.cast122, %sub.ptr.rhs.cast123
  %109 = load i32, i32* %d, align 4
  %conv125 = sext i32 %109 to i64
  %cmp126 = icmp sge i64 %sub.ptr.sub124, %conv125
  br i1 %cmp126, label %while.body128, label %while.end211

while.body128:                                    ; preds = %while.cond121
  %110 = load i8*, i8** %delta, align 8
  %111 = load i32, i32* %d, align 4
  %112 = load i8*, i8** %end, align 8
  %idx.ext129 = sext i32 %111 to i64
  %add.ptr130 = getelementptr inbounds i8, i8* %112, i64 %idx.ext129
  store i8* %add.ptr130, i8** %end, align 8
  %arrayidx131 = getelementptr inbounds i8, i8* %add.ptr130, i64 -1
  %113 = load i8, i8* %arrayidx131, align 1
  store i8 %113, i8* %c, align 1
  %idxprom132 = zext i8 %113 to i64
  %arrayidx133 = getelementptr inbounds i8, i8* %110, i64 %idxprom132
  %114 = load i8, i8* %arrayidx133, align 1
  %conv134 = zext i8 %114 to i32
  store i32 %conv134, i32* %d, align 4
  %cmp135 = icmp ne i32 %conv134, 0
  br i1 %cmp135, label %if.then137, label %if.end138

if.then137:                                       ; preds = %while.body128
  br label %while.cond121, !llvm.loop !183

if.end138:                                        ; preds = %while.body128
  %115 = load i8*, i8** %end, align 8
  %add.ptr139 = getelementptr inbounds i8, i8* %115, i64 -1
  store i8* %add.ptr139, i8** %beg, align 8
  %116 = load %struct.trie**, %struct.trie*** %next, align 8
  %117 = load i8, i8* %c, align 1
  %idxprom140 = zext i8 %117 to i64
  %arrayidx141 = getelementptr inbounds %struct.trie*, %struct.trie** %116, i64 %idxprom140
  %118 = load %struct.trie*, %struct.trie** %arrayidx141, align 8
  store %struct.trie* %118, %struct.trie** %trie, align 8
  %tobool142 = icmp ne %struct.trie* %118, null
  br i1 %tobool142, label %if.end144, label %if.then143

if.then143:                                       ; preds = %if.end138
  store i32 1, i32* %d, align 4
  br label %while.cond121, !llvm.loop !183

if.end144:                                        ; preds = %if.end138
  %119 = load %struct.trie*, %struct.trie** %trie, align 8
  %accepting145 = getelementptr inbounds %struct.trie, %struct.trie* %119, i32 0, i32 0
  %120 = load i32, i32* %accepting145, align 8
  %tobool146 = icmp ne i32 %120, 0
  br i1 %tobool146, label %land.lhs.true147, label %if.end151

land.lhs.true147:                                 ; preds = %if.end144
  %121 = load i8*, i8** %beg, align 8
  %122 = load i8*, i8** %mch, align 8
  %cmp148 = icmp ule i8* %121, %122
  br i1 %cmp148, label %if.then150, label %if.end151

if.then150:                                       ; preds = %land.lhs.true147
  %123 = load i8*, i8** %beg, align 8
  store i8* %123, i8** %lmch, align 8
  %124 = load %struct.trie*, %struct.trie** %trie, align 8
  store %struct.trie* %124, %struct.trie** %accept, align 8
  br label %if.end151

if.end151:                                        ; preds = %if.then150, %land.lhs.true147, %if.end144
  %125 = load %struct.trie*, %struct.trie** %trie, align 8
  %shift152 = getelementptr inbounds %struct.trie, %struct.trie* %125, i32 0, i32 6
  %126 = load i32, i32* %shift152, align 4
  store i32 %126, i32* %d, align 4
  br label %while.cond153

while.cond153:                                    ; preds = %if.end202, %if.end151
  %127 = load i8*, i8** %beg, align 8
  %128 = load i8*, i8** %text.addr, align 8
  %cmp154 = icmp ugt i8* %127, %128
  br i1 %cmp154, label %while.body156, label %while.end204

while.body156:                                    ; preds = %while.cond153
  %129 = load i8*, i8** %trans, align 8
  %tobool157 = icmp ne i8* %129, null
  br i1 %tobool157, label %cond.true158, label %cond.false163

cond.true158:                                     ; preds = %while.body156
  %130 = load i8*, i8** %trans, align 8
  %131 = load i8*, i8** %beg, align 8
  %incdec.ptr159 = getelementptr inbounds i8, i8* %131, i32 -1
  store i8* %incdec.ptr159, i8** %beg, align 8
  %132 = load i8, i8* %incdec.ptr159, align 1
  %idxprom160 = zext i8 %132 to i64
  %arrayidx161 = getelementptr inbounds i8, i8* %130, i64 %idxprom160
  %133 = load i8, i8* %arrayidx161, align 1
  %conv162 = sext i8 %133 to i32
  br label %cond.end166

cond.false163:                                    ; preds = %while.body156
  %134 = load i8*, i8** %beg, align 8
  %incdec.ptr164 = getelementptr inbounds i8, i8* %134, i32 -1
  store i8* %incdec.ptr164, i8** %beg, align 8
  %135 = load i8, i8* %incdec.ptr164, align 1
  %conv165 = sext i8 %135 to i32
  br label %cond.end166

cond.end166:                                      ; preds = %cond.false163, %cond.true158
  %cond167 = phi i32 [ %conv162, %cond.true158 ], [ %conv165, %cond.false163 ]
  %conv168 = trunc i32 %cond167 to i8
  store i8 %conv168, i8* %c, align 1
  %136 = load %struct.trie*, %struct.trie** %trie, align 8
  %links169 = getelementptr inbounds %struct.trie, %struct.trie* %136, i32 0, i32 1
  %137 = load %struct.tree*, %struct.tree** %links169, align 8
  store %struct.tree* %137, %struct.tree** %tree, align 8
  br label %while.cond170

while.cond170:                                    ; preds = %if.end189, %cond.end166
  %138 = load %struct.tree*, %struct.tree** %tree, align 8
  %tobool171 = icmp ne %struct.tree* %138, null
  br i1 %tobool171, label %land.rhs172, label %land.end178

land.rhs172:                                      ; preds = %while.cond170
  %139 = load i8, i8* %c, align 1
  %conv173 = zext i8 %139 to i32
  %140 = load %struct.tree*, %struct.tree** %tree, align 8
  %label174 = getelementptr inbounds %struct.tree, %struct.tree* %140, i32 0, i32 3
  %141 = load i8, i8* %label174, align 8
  %conv175 = zext i8 %141 to i32
  %cmp176 = icmp ne i32 %conv173, %conv175
  br label %land.end178

land.end178:                                      ; preds = %land.rhs172, %while.cond170
  %142 = phi i1 [ false, %while.cond170 ], [ %cmp176, %land.rhs172 ]
  br i1 %142, label %while.body179, label %while.end190

while.body179:                                    ; preds = %land.end178
  %143 = load i8, i8* %c, align 1
  %conv180 = zext i8 %143 to i32
  %144 = load %struct.tree*, %struct.tree** %tree, align 8
  %label181 = getelementptr inbounds %struct.tree, %struct.tree* %144, i32 0, i32 3
  %145 = load i8, i8* %label181, align 8
  %conv182 = zext i8 %145 to i32
  %cmp183 = icmp slt i32 %conv180, %conv182
  br i1 %cmp183, label %if.then185, label %if.else187

if.then185:                                       ; preds = %while.body179
  %146 = load %struct.tree*, %struct.tree** %tree, align 8
  %llink186 = getelementptr inbounds %struct.tree, %struct.tree* %146, i32 0, i32 0
  %147 = load %struct.tree*, %struct.tree** %llink186, align 8
  store %struct.tree* %147, %struct.tree** %tree, align 8
  br label %if.end189

if.else187:                                       ; preds = %while.body179
  %148 = load %struct.tree*, %struct.tree** %tree, align 8
  %rlink188 = getelementptr inbounds %struct.tree, %struct.tree* %148, i32 0, i32 1
  %149 = load %struct.tree*, %struct.tree** %rlink188, align 8
  store %struct.tree* %149, %struct.tree** %tree, align 8
  br label %if.end189

if.end189:                                        ; preds = %if.else187, %if.then185
  br label %while.cond170, !llvm.loop !184

while.end190:                                     ; preds = %land.end178
  %150 = load %struct.tree*, %struct.tree** %tree, align 8
  %tobool191 = icmp ne %struct.tree* %150, null
  br i1 %tobool191, label %if.then192, label %if.else201

if.then192:                                       ; preds = %while.end190
  %151 = load %struct.tree*, %struct.tree** %tree, align 8
  %trie193 = getelementptr inbounds %struct.tree, %struct.tree* %151, i32 0, i32 2
  %152 = load %struct.trie*, %struct.trie** %trie193, align 8
  store %struct.trie* %152, %struct.trie** %trie, align 8
  %153 = load %struct.trie*, %struct.trie** %trie, align 8
  %accepting194 = getelementptr inbounds %struct.trie, %struct.trie* %153, i32 0, i32 0
  %154 = load i32, i32* %accepting194, align 8
  %tobool195 = icmp ne i32 %154, 0
  br i1 %tobool195, label %land.lhs.true196, label %if.end200

land.lhs.true196:                                 ; preds = %if.then192
  %155 = load i8*, i8** %beg, align 8
  %156 = load i8*, i8** %mch, align 8
  %cmp197 = icmp ule i8* %155, %156
  br i1 %cmp197, label %if.then199, label %if.end200

if.then199:                                       ; preds = %land.lhs.true196
  %157 = load i8*, i8** %beg, align 8
  store i8* %157, i8** %lmch, align 8
  %158 = load %struct.trie*, %struct.trie** %trie, align 8
  store %struct.trie* %158, %struct.trie** %accept, align 8
  br label %if.end200

if.end200:                                        ; preds = %if.then199, %land.lhs.true196, %if.then192
  br label %if.end202

if.else201:                                       ; preds = %while.end190
  br label %while.end204

if.end202:                                        ; preds = %if.end200
  %159 = load %struct.trie*, %struct.trie** %trie, align 8
  %shift203 = getelementptr inbounds %struct.trie, %struct.trie* %159, i32 0, i32 6
  %160 = load i32, i32* %shift203, align 4
  store i32 %160, i32* %d, align 4
  br label %while.cond153, !llvm.loop !185

while.end204:                                     ; preds = %if.else201, %while.cond153
  %161 = load i8*, i8** %lmch, align 8
  %tobool205 = icmp ne i8* %161, null
  br i1 %tobool205, label %if.then206, label %if.end207

if.then206:                                       ; preds = %while.end204
  %162 = load i8*, i8** %lmch, align 8
  store i8* %162, i8** %mch, align 8
  br label %match

if.end207:                                        ; preds = %while.end204
  %163 = load i32, i32* %d, align 4
  %tobool208 = icmp ne i32 %163, 0
  br i1 %tobool208, label %if.end210, label %if.then209

if.then209:                                       ; preds = %if.end207
  store i32 1, i32* %d, align 4
  br label %if.end210

if.end210:                                        ; preds = %if.then209, %if.end207
  br label %while.cond121, !llvm.loop !183

while.end211:                                     ; preds = %while.cond121
  %164 = load %struct.kwsmatch*, %struct.kwsmatch** %kwsmatch.addr, align 8
  %tobool212 = icmp ne %struct.kwsmatch* %164, null
  br i1 %tobool212, label %if.then213, label %if.end219

if.then213:                                       ; preds = %while.end211
  %165 = load %struct.trie*, %struct.trie** %accept, align 8
  %accepting214 = getelementptr inbounds %struct.trie, %struct.trie* %165, i32 0, i32 0
  %166 = load i32, i32* %accepting214, align 8
  %div = udiv i32 %166, 2
  %167 = load %struct.kwsmatch*, %struct.kwsmatch** %kwsmatch.addr, align 8
  %strchr = getelementptr inbounds %struct.kwsmatch, %struct.kwsmatch* %167, i32 0, i32 0
  store i32 %div, i32* %strchr, align 8
  %168 = load i8*, i8** %mch, align 8
  %169 = load %struct.kwsmatch*, %struct.kwsmatch** %kwsmatch.addr, align 8
  %beg215 = getelementptr inbounds %struct.kwsmatch, %struct.kwsmatch* %169, i32 0, i32 1
  %arrayidx216 = getelementptr inbounds [1 x i8*], [1 x i8*]* %beg215, i64 0, i64 0
  store i8* %168, i8** %arrayidx216, align 8
  %170 = load %struct.trie*, %struct.trie** %accept, align 8
  %depth = getelementptr inbounds %struct.trie, %struct.trie* %170, i32 0, i32 5
  %171 = load i32, i32* %depth, align 8
  %conv217 = sext i32 %171 to i64
  %172 = load %struct.kwsmatch*, %struct.kwsmatch** %kwsmatch.addr, align 8
  %size = getelementptr inbounds %struct.kwsmatch, %struct.kwsmatch* %172, i32 0, i32 2
  %arrayidx218 = getelementptr inbounds [1 x i64], [1 x i64]* %size, i64 0, i64 0
  store i64 %conv217, i64* %arrayidx218, align 8
  br label %if.end219

if.end219:                                        ; preds = %if.then213, %while.end211
  %173 = load i8*, i8** %mch, align 8
  store i8* %173, i8** %retval, align 8
  br label %return

return:                                           ; preds = %if.end219, %while.end109, %if.then
  %174 = load i8*, i8** %retval, align 8
  ret i8* %174
}

declare dso_local void @obstack_free(%struct.obstack*, i8*) #5

; Function Attrs: noinline nounwind optnone uwtable
define internal void @Gcompile(i8* %pattern, i64 %size) #0 {
entry:
  %pattern.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %err = alloca i8*, align 8
  %n = alloca i8*, align 8
  %i = alloca i32, align 4
  store i8* %pattern, i8** %pattern.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  %call = call i32 @re_set_syntax(i32 2822)
  %0 = load i32, i32* @match_icase, align 4
  call void @dfasyntax(i32 2822, i32 %0)
  %1 = load i8*, i8** %pattern.addr, align 8
  %2 = load i64, i64* %size.addr, align 8
  %conv = trunc i64 %2 to i32
  %call1 = call i8* @re_compile_pattern(i8* %1, i32 %conv, %struct.re_pattern_buffer* @regex)
  store i8* %call1, i8** %err, align 8
  %cmp = icmp ne i8* %call1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i8*, i8** %err, align 8
  call void @fatal(i8* %3, i32 0)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  call void @dfainit(%struct.dfa* @dfa_1)
  %4 = load i32, i32* @match_words, align 4
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %if.then4, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %5 = load i32, i32* @match_lines, align 4
  %tobool3 = icmp ne i32 %5, 0
  br i1 %tobool3, label %if.then4, label %if.else

if.then4:                                         ; preds = %lor.lhs.false, %if.end
  %6 = load i64, i64* %size.addr, align 8
  %add = add i64 %6, 50
  %call5 = call i8* @xmalloc(i64 %add)
  store i8* %call5, i8** %n, align 8
  store i32 0, i32* %i, align 4
  %7 = load i8*, i8** %n, align 8
  %call6 = call i8* @strcpy(i8* %7, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.78, i64 0, i64 0)) #9
  %8 = load i32, i32* @match_lines, align 4
  %tobool7 = icmp ne i32 %8, 0
  br i1 %tobool7, label %if.then8, label %if.end10

if.then8:                                         ; preds = %if.then4
  %9 = load i8*, i8** %n, align 8
  %call9 = call i8* @strcpy(i8* %9, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.79, i64 0, i64 0)) #9
  br label %if.end10

if.end10:                                         ; preds = %if.then8, %if.then4
  %10 = load i32, i32* @match_words, align 4
  %tobool11 = icmp ne i32 %10, 0
  br i1 %tobool11, label %if.then12, label %if.end14

if.then12:                                        ; preds = %if.end10
  %11 = load i8*, i8** %n, align 8
  %call13 = call i8* @strcpy(i8* %11, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.80, i64 0, i64 0)) #9
  br label %if.end14

if.end14:                                         ; preds = %if.then12, %if.end10
  %12 = load i8*, i8** %n, align 8
  %call15 = call i64 @strlen(i8* %12) #11
  %conv16 = trunc i64 %call15 to i32
  store i32 %conv16, i32* %i, align 4
  %13 = load i8*, i8** %n, align 8
  %14 = load i32, i32* %i, align 4
  %idx.ext = sext i32 %14 to i64
  %add.ptr = getelementptr inbounds i8, i8* %13, i64 %idx.ext
  %15 = load i8*, i8** %pattern.addr, align 8
  %16 = load i64, i64* %size.addr, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %add.ptr, i8* align 1 %15, i64 %16, i1 false)
  %17 = load i64, i64* %size.addr, align 8
  %18 = load i32, i32* %i, align 4
  %conv17 = sext i32 %18 to i64
  %add18 = add i64 %conv17, %17
  %conv19 = trunc i64 %add18 to i32
  store i32 %conv19, i32* %i, align 4
  %19 = load i32, i32* @match_words, align 4
  %tobool20 = icmp ne i32 %19, 0
  br i1 %tobool20, label %if.then21, label %if.end25

if.then21:                                        ; preds = %if.end14
  %20 = load i8*, i8** %n, align 8
  %21 = load i32, i32* %i, align 4
  %idx.ext22 = sext i32 %21 to i64
  %add.ptr23 = getelementptr inbounds i8, i8* %20, i64 %idx.ext22
  %call24 = call i8* @strcpy(i8* %add.ptr23, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.81, i64 0, i64 0)) #9
  br label %if.end25

if.end25:                                         ; preds = %if.then21, %if.end14
  %22 = load i32, i32* @match_lines, align 4
  %tobool26 = icmp ne i32 %22, 0
  br i1 %tobool26, label %if.then27, label %if.end31

if.then27:                                        ; preds = %if.end25
  %23 = load i8*, i8** %n, align 8
  %24 = load i32, i32* %i, align 4
  %idx.ext28 = sext i32 %24 to i64
  %add.ptr29 = getelementptr inbounds i8, i8* %23, i64 %idx.ext28
  %call30 = call i8* @strcpy(i8* %add.ptr29, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.82, i64 0, i64 0)) #9
  br label %if.end31

if.end31:                                         ; preds = %if.then27, %if.end25
  %25 = load i8*, i8** %n, align 8
  %26 = load i32, i32* %i, align 4
  %idx.ext32 = sext i32 %26 to i64
  %add.ptr33 = getelementptr inbounds i8, i8* %25, i64 %idx.ext32
  %call34 = call i64 @strlen(i8* %add.ptr33) #11
  %27 = load i32, i32* %i, align 4
  %conv35 = sext i32 %27 to i64
  %add36 = add i64 %conv35, %call34
  %conv37 = trunc i64 %add36 to i32
  store i32 %conv37, i32* %i, align 4
  %28 = load i8*, i8** %n, align 8
  %29 = load i32, i32* %i, align 4
  %conv38 = sext i32 %29 to i64
  call void @dfacomp(i8* %28, i64 %conv38, %struct.dfa* @dfa_1, i32 1)
  br label %if.end39

if.else:                                          ; preds = %lor.lhs.false
  %30 = load i8*, i8** %pattern.addr, align 8
  %31 = load i64, i64* %size.addr, align 8
  call void @dfacomp(i8* %30, i64 %31, %struct.dfa* @dfa_1, i32 1)
  br label %if.end39

if.end39:                                         ; preds = %if.else, %if.end31
  call void @kwsmusts()
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @EGexecute(i8* %buf, i64 %size, i8** %endp) #0 {
entry:
  %retval = alloca i8*, align 8
  %buf.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %endp.addr = alloca i8**, align 8
  %buflim = alloca i8*, align 8
  %beg = alloca i8*, align 8
  %end = alloca i8*, align 8
  %save = alloca i8, align 1
  %backref = alloca i32, align 4
  %start = alloca i32, align 4
  %len = alloca i32, align 4
  %kwsm = alloca %struct.kwsmatch, align 8
  store i8* %buf, i8** %buf.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  store i8** %endp, i8*** %endp.addr, align 8
  %0 = load i8*, i8** %buf.addr, align 8
  %1 = load i64, i64* %size.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 %1
  store i8* %add.ptr, i8** %buflim, align 8
  %2 = load i8*, i8** %buf.addr, align 8
  store i8* %2, i8** %end, align 8
  store i8* %2, i8** %beg, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i8*, i8** %end, align 8
  %4 = load i8*, i8** %buflim, align 8
  %cmp = icmp ult i8* %3, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i8*, i8** @kwset, align 8
  %tobool = icmp ne i8* %5, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %6 = load i8*, i8** @kwset, align 8
  %7 = load i8*, i8** %beg, align 8
  %8 = load i8*, i8** %buflim, align 8
  %9 = load i8*, i8** %beg, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %8 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %9 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %call = call i8* @kwsexec(i8* %6, i8* %7, i64 %sub.ptr.sub, %struct.kwsmatch* %kwsm)
  store i8* %call, i8** %beg, align 8
  %10 = load i8*, i8** %beg, align 8
  %tobool1 = icmp ne i8* %10, null
  br i1 %tobool1, label %if.end, label %if.then2

if.then2:                                         ; preds = %if.then
  br label %failure

if.end:                                           ; preds = %if.then
  %11 = load i8*, i8** %beg, align 8
  %12 = load i8*, i8** %buflim, align 8
  %13 = load i8*, i8** %beg, align 8
  %sub.ptr.lhs.cast3 = ptrtoint i8* %12 to i64
  %sub.ptr.rhs.cast4 = ptrtoint i8* %13 to i64
  %sub.ptr.sub5 = sub i64 %sub.ptr.lhs.cast3, %sub.ptr.rhs.cast4
  %call6 = call i8* @memchr(i8* %11, i32 10, i64 %sub.ptr.sub5) #11
  store i8* %call6, i8** %end, align 8
  %14 = load i8*, i8** %end, align 8
  %tobool7 = icmp ne i8* %14, null
  br i1 %tobool7, label %if.end9, label %if.then8

if.then8:                                         ; preds = %if.end
  %15 = load i8*, i8** %buflim, align 8
  store i8* %15, i8** %end, align 8
  br label %if.end9

if.end9:                                          ; preds = %if.then8, %if.end
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end9
  %16 = load i8*, i8** %beg, align 8
  %17 = load i8*, i8** %buf.addr, align 8
  %cmp10 = icmp ugt i8* %16, %17
  br i1 %cmp10, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %18 = load i8*, i8** %beg, align 8
  %arrayidx = getelementptr inbounds i8, i8* %18, i64 -1
  %19 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %19 to i32
  %cmp11 = icmp ne i32 %conv, 10
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %20 = phi i1 [ false, %while.cond ], [ %cmp11, %land.rhs ]
  br i1 %20, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %21 = load i8*, i8** %beg, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %21, i32 -1
  store i8* %incdec.ptr, i8** %beg, align 8
  br label %while.cond, !llvm.loop !186

while.end:                                        ; preds = %land.end
  %22 = load i8*, i8** %end, align 8
  %23 = load i8, i8* %22, align 1
  store i8 %23, i8* %save, align 1
  %strchr = getelementptr inbounds %struct.kwsmatch, %struct.kwsmatch* %kwsm, i32 0, i32 0
  %24 = load i32, i32* %strchr, align 8
  %25 = load i32, i32* @lastexact, align 4
  %cmp13 = icmp slt i32 %24, %25
  br i1 %cmp13, label %if.then15, label %if.end16

if.then15:                                        ; preds = %while.end
  br label %success

if.end16:                                         ; preds = %while.end
  %26 = load i8*, i8** %beg, align 8
  %27 = load i8*, i8** %end, align 8
  %call17 = call i8* @dfaexec(%struct.dfa* @dfa_1, i8* %26, i8* %27, i32 0, i32* null, i32* %backref)
  %tobool18 = icmp ne i8* %call17, null
  br i1 %tobool18, label %if.end20, label %if.then19

if.then19:                                        ; preds = %if.end16
  %28 = load i8, i8* %save, align 1
  %29 = load i8*, i8** %end, align 8
  store i8 %28, i8* %29, align 1
  br label %for.inc

if.end20:                                         ; preds = %if.end16
  %30 = load i8, i8* %save, align 1
  %31 = load i8*, i8** %end, align 8
  store i8 %30, i8* %31, align 1
  %32 = load i32, i32* %backref, align 4
  %tobool21 = icmp ne i32 %32, 0
  br i1 %tobool21, label %if.end23, label %if.then22

if.then22:                                        ; preds = %if.end20
  br label %success

if.end23:                                         ; preds = %if.end20
  br label %if.end50

if.else:                                          ; preds = %for.body
  %33 = load i8*, i8** %buflim, align 8
  %34 = load i8, i8* %33, align 1
  store i8 %34, i8* %save, align 1
  %35 = load i8*, i8** %beg, align 8
  %36 = load i8*, i8** %buflim, align 8
  %call24 = call i8* @dfaexec(%struct.dfa* @dfa_1, i8* %35, i8* %36, i32 0, i32* null, i32* %backref)
  store i8* %call24, i8** %beg, align 8
  %37 = load i8, i8* %save, align 1
  %38 = load i8*, i8** %buflim, align 8
  store i8 %37, i8* %38, align 1
  %39 = load i8*, i8** %beg, align 8
  %tobool25 = icmp ne i8* %39, null
  br i1 %tobool25, label %if.end27, label %if.then26

if.then26:                                        ; preds = %if.else
  br label %failure

if.end27:                                         ; preds = %if.else
  %40 = load i8*, i8** %beg, align 8
  %41 = load i8*, i8** %buflim, align 8
  %42 = load i8*, i8** %beg, align 8
  %sub.ptr.lhs.cast28 = ptrtoint i8* %41 to i64
  %sub.ptr.rhs.cast29 = ptrtoint i8* %42 to i64
  %sub.ptr.sub30 = sub i64 %sub.ptr.lhs.cast28, %sub.ptr.rhs.cast29
  %call31 = call i8* @memchr(i8* %40, i32 10, i64 %sub.ptr.sub30) #11
  store i8* %call31, i8** %end, align 8
  %43 = load i8*, i8** %end, align 8
  %tobool32 = icmp ne i8* %43, null
  br i1 %tobool32, label %if.end34, label %if.then33

if.then33:                                        ; preds = %if.end27
  %44 = load i8*, i8** %buflim, align 8
  store i8* %44, i8** %end, align 8
  br label %if.end34

if.end34:                                         ; preds = %if.then33, %if.end27
  br label %while.cond35

while.cond35:                                     ; preds = %while.body44, %if.end34
  %45 = load i8*, i8** %beg, align 8
  %46 = load i8*, i8** %buf.addr, align 8
  %cmp36 = icmp ugt i8* %45, %46
  br i1 %cmp36, label %land.rhs38, label %land.end43

land.rhs38:                                       ; preds = %while.cond35
  %47 = load i8*, i8** %beg, align 8
  %arrayidx39 = getelementptr inbounds i8, i8* %47, i64 -1
  %48 = load i8, i8* %arrayidx39, align 1
  %conv40 = sext i8 %48 to i32
  %cmp41 = icmp ne i32 %conv40, 10
  br label %land.end43

land.end43:                                       ; preds = %land.rhs38, %while.cond35
  %49 = phi i1 [ false, %while.cond35 ], [ %cmp41, %land.rhs38 ]
  br i1 %49, label %while.body44, label %while.end46

while.body44:                                     ; preds = %land.end43
  %50 = load i8*, i8** %beg, align 8
  %incdec.ptr45 = getelementptr inbounds i8, i8* %50, i32 -1
  store i8* %incdec.ptr45, i8** %beg, align 8
  br label %while.cond35, !llvm.loop !187

while.end46:                                      ; preds = %land.end43
  %51 = load i32, i32* %backref, align 4
  %tobool47 = icmp ne i32 %51, 0
  br i1 %tobool47, label %if.end49, label %if.then48

if.then48:                                        ; preds = %while.end46
  br label %success

if.end49:                                         ; preds = %while.end46
  br label %if.end50

if.end50:                                         ; preds = %if.end49, %if.end23
  %bf.load = load i8, i8* getelementptr inbounds (%struct.re_pattern_buffer, %struct.re_pattern_buffer* @regex, i32 0, i32 7), align 8
  %bf.clear = and i8 %bf.load, -65
  store i8 %bf.clear, i8* getelementptr inbounds (%struct.re_pattern_buffer, %struct.re_pattern_buffer* @regex, i32 0, i32 7), align 8
  %52 = load i8*, i8** %beg, align 8
  %53 = load i8*, i8** %end, align 8
  %54 = load i8*, i8** %beg, align 8
  %sub.ptr.lhs.cast51 = ptrtoint i8* %53 to i64
  %sub.ptr.rhs.cast52 = ptrtoint i8* %54 to i64
  %sub.ptr.sub53 = sub i64 %sub.ptr.lhs.cast51, %sub.ptr.rhs.cast52
  %conv54 = trunc i64 %sub.ptr.sub53 to i32
  %55 = load i8*, i8** %end, align 8
  %56 = load i8*, i8** %beg, align 8
  %sub.ptr.lhs.cast55 = ptrtoint i8* %55 to i64
  %sub.ptr.rhs.cast56 = ptrtoint i8* %56 to i64
  %sub.ptr.sub57 = sub i64 %sub.ptr.lhs.cast55, %sub.ptr.rhs.cast56
  %conv58 = trunc i64 %sub.ptr.sub57 to i32
  %call59 = call i32 @re_search(%struct.re_pattern_buffer* @regex, i8* %52, i32 %conv54, i32 0, i32 %conv58, %struct.re_registers* @EGexecute.regs)
  store i32 %call59, i32* %start, align 4
  %cmp60 = icmp sge i32 %call59, 0
  br i1 %cmp60, label %if.then62, label %if.end163

if.then62:                                        ; preds = %if.end50
  %57 = load i32*, i32** getelementptr inbounds (%struct.re_registers, %struct.re_registers* @EGexecute.regs, i32 0, i32 2), align 8
  %arrayidx63 = getelementptr inbounds i32, i32* %57, i64 0
  %58 = load i32, i32* %arrayidx63, align 4
  %59 = load i32, i32* %start, align 4
  %sub = sub nsw i32 %58, %59
  store i32 %sub, i32* %len, align 4
  %60 = load i32, i32* @match_lines, align 4
  %tobool64 = icmp ne i32 %60, 0
  br i1 %tobool64, label %lor.lhs.false, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.then62
  %61 = load i32, i32* @match_words, align 4
  %tobool65 = icmp ne i32 %61, 0
  br i1 %tobool65, label %lor.lhs.false, label %if.then74

lor.lhs.false:                                    ; preds = %land.lhs.true, %if.then62
  %62 = load i32, i32* @match_lines, align 4
  %tobool66 = icmp ne i32 %62, 0
  br i1 %tobool66, label %land.lhs.true67, label %if.end75

land.lhs.true67:                                  ; preds = %lor.lhs.false
  %63 = load i32, i32* %len, align 4
  %conv68 = sext i32 %63 to i64
  %64 = load i8*, i8** %end, align 8
  %65 = load i8*, i8** %beg, align 8
  %sub.ptr.lhs.cast69 = ptrtoint i8* %64 to i64
  %sub.ptr.rhs.cast70 = ptrtoint i8* %65 to i64
  %sub.ptr.sub71 = sub i64 %sub.ptr.lhs.cast69, %sub.ptr.rhs.cast70
  %cmp72 = icmp eq i64 %conv68, %sub.ptr.sub71
  br i1 %cmp72, label %if.then74, label %if.end75

if.then74:                                        ; preds = %land.lhs.true67, %land.lhs.true
  br label %success

if.end75:                                         ; preds = %land.lhs.true67, %lor.lhs.false
  %66 = load i32, i32* @match_words, align 4
  %tobool76 = icmp ne i32 %66, 0
  br i1 %tobool76, label %if.then77, label %if.end162

if.then77:                                        ; preds = %if.end75
  br label %while.cond78

while.cond78:                                     ; preds = %if.end160, %if.then77
  %67 = load i32, i32* %start, align 4
  %cmp79 = icmp sge i32 %67, 0
  br i1 %cmp79, label %while.body81, label %while.end161

while.body81:                                     ; preds = %while.cond78
  %68 = load i32, i32* %start, align 4
  %cmp82 = icmp eq i32 %68, 0
  br i1 %cmp82, label %land.lhs.true100, label %lor.lhs.false84

lor.lhs.false84:                                  ; preds = %while.body81
  %call85 = call i16** @__ctype_b_loc() #10
  %69 = load i16*, i16** %call85, align 8
  %70 = load i8*, i8** %beg, align 8
  %71 = load i32, i32* %start, align 4
  %sub86 = sub nsw i32 %71, 1
  %idxprom = sext i32 %sub86 to i64
  %arrayidx87 = getelementptr inbounds i8, i8* %70, i64 %idxprom
  %72 = load i8, i8* %arrayidx87, align 1
  %conv88 = sext i8 %72 to i32
  %idxprom89 = sext i32 %conv88 to i64
  %arrayidx90 = getelementptr inbounds i16, i16* %69, i64 %idxprom89
  %73 = load i16, i16* %arrayidx90, align 2
  %conv91 = zext i16 %73 to i32
  %and = and i32 %conv91, 8
  %tobool92 = icmp ne i32 %and, 0
  br i1 %tobool92, label %if.end125, label %lor.lhs.false93

lor.lhs.false93:                                  ; preds = %lor.lhs.false84
  %74 = load i8*, i8** %beg, align 8
  %75 = load i32, i32* %start, align 4
  %sub94 = sub nsw i32 %75, 1
  %idxprom95 = sext i32 %sub94 to i64
  %arrayidx96 = getelementptr inbounds i8, i8* %74, i64 %idxprom95
  %76 = load i8, i8* %arrayidx96, align 1
  %conv97 = sext i8 %76 to i32
  %cmp98 = icmp eq i32 %conv97, 95
  br i1 %cmp98, label %if.end125, label %land.lhs.true100

land.lhs.true100:                                 ; preds = %lor.lhs.false93, %while.body81
  %77 = load i32, i32* %len, align 4
  %conv101 = sext i32 %77 to i64
  %78 = load i8*, i8** %end, align 8
  %79 = load i8*, i8** %beg, align 8
  %sub.ptr.lhs.cast102 = ptrtoint i8* %78 to i64
  %sub.ptr.rhs.cast103 = ptrtoint i8* %79 to i64
  %sub.ptr.sub104 = sub i64 %sub.ptr.lhs.cast102, %sub.ptr.rhs.cast103
  %cmp105 = icmp eq i64 %conv101, %sub.ptr.sub104
  br i1 %cmp105, label %if.then124, label %lor.lhs.false107

lor.lhs.false107:                                 ; preds = %land.lhs.true100
  %call108 = call i16** @__ctype_b_loc() #10
  %80 = load i16*, i16** %call108, align 8
  %81 = load i8*, i8** %beg, align 8
  %82 = load i32, i32* %start, align 4
  %83 = load i32, i32* %len, align 4
  %add = add nsw i32 %82, %83
  %idxprom109 = sext i32 %add to i64
  %arrayidx110 = getelementptr inbounds i8, i8* %81, i64 %idxprom109
  %84 = load i8, i8* %arrayidx110, align 1
  %conv111 = sext i8 %84 to i32
  %idxprom112 = sext i32 %conv111 to i64
  %arrayidx113 = getelementptr inbounds i16, i16* %80, i64 %idxprom112
  %85 = load i16, i16* %arrayidx113, align 2
  %conv114 = zext i16 %85 to i32
  %and115 = and i32 %conv114, 8
  %tobool116 = icmp ne i32 %and115, 0
  br i1 %tobool116, label %if.end125, label %lor.lhs.false117

lor.lhs.false117:                                 ; preds = %lor.lhs.false107
  %86 = load i8*, i8** %beg, align 8
  %87 = load i32, i32* %start, align 4
  %88 = load i32, i32* %len, align 4
  %add118 = add nsw i32 %87, %88
  %idxprom119 = sext i32 %add118 to i64
  %arrayidx120 = getelementptr inbounds i8, i8* %86, i64 %idxprom119
  %89 = load i8, i8* %arrayidx120, align 1
  %conv121 = sext i8 %89 to i32
  %cmp122 = icmp eq i32 %conv121, 95
  br i1 %cmp122, label %if.end125, label %if.then124

if.then124:                                       ; preds = %lor.lhs.false117, %land.lhs.true100
  br label %success

if.end125:                                        ; preds = %lor.lhs.false117, %lor.lhs.false107, %lor.lhs.false93, %lor.lhs.false84
  %90 = load i32, i32* %len, align 4
  %cmp126 = icmp sgt i32 %90, 0
  br i1 %cmp126, label %if.then128, label %if.end133

if.then128:                                       ; preds = %if.end125
  %91 = load i32, i32* %len, align 4
  %dec = add nsw i32 %91, -1
  store i32 %dec, i32* %len, align 4
  %bf.load129 = load i8, i8* getelementptr inbounds (%struct.re_pattern_buffer, %struct.re_pattern_buffer* @regex, i32 0, i32 7), align 8
  %bf.clear130 = and i8 %bf.load129, -65
  %bf.set = or i8 %bf.clear130, 64
  store i8 %bf.set, i8* getelementptr inbounds (%struct.re_pattern_buffer, %struct.re_pattern_buffer* @regex, i32 0, i32 7), align 8
  %92 = load i8*, i8** %beg, align 8
  %93 = load i32, i32* %start, align 4
  %94 = load i32, i32* %len, align 4
  %add131 = add nsw i32 %93, %94
  %95 = load i32, i32* %start, align 4
  %call132 = call i32 @re_match(%struct.re_pattern_buffer* @regex, i8* %92, i32 %add131, i32 %95, %struct.re_registers* @EGexecute.regs)
  store i32 %call132, i32* %len, align 4
  br label %if.end133

if.end133:                                        ; preds = %if.then128, %if.end125
  %96 = load i32, i32* %len, align 4
  %cmp134 = icmp sle i32 %96, 0
  br i1 %cmp134, label %if.then136, label %if.end160

if.then136:                                       ; preds = %if.end133
  %97 = load i32, i32* %start, align 4
  %conv137 = sext i32 %97 to i64
  %98 = load i8*, i8** %end, align 8
  %99 = load i8*, i8** %beg, align 8
  %sub.ptr.lhs.cast138 = ptrtoint i8* %98 to i64
  %sub.ptr.rhs.cast139 = ptrtoint i8* %99 to i64
  %sub.ptr.sub140 = sub i64 %sub.ptr.lhs.cast138, %sub.ptr.rhs.cast139
  %cmp141 = icmp eq i64 %conv137, %sub.ptr.sub140
  br i1 %cmp141, label %if.then143, label %if.end144

if.then143:                                       ; preds = %if.then136
  br label %while.end161

if.end144:                                        ; preds = %if.then136
  %100 = load i32, i32* %start, align 4
  %inc = add nsw i32 %100, 1
  store i32 %inc, i32* %start, align 4
  %bf.load145 = load i8, i8* getelementptr inbounds (%struct.re_pattern_buffer, %struct.re_pattern_buffer* @regex, i32 0, i32 7), align 8
  %bf.clear146 = and i8 %bf.load145, -65
  store i8 %bf.clear146, i8* getelementptr inbounds (%struct.re_pattern_buffer, %struct.re_pattern_buffer* @regex, i32 0, i32 7), align 8
  %101 = load i8*, i8** %beg, align 8
  %102 = load i8*, i8** %end, align 8
  %103 = load i8*, i8** %beg, align 8
  %sub.ptr.lhs.cast147 = ptrtoint i8* %102 to i64
  %sub.ptr.rhs.cast148 = ptrtoint i8* %103 to i64
  %sub.ptr.sub149 = sub i64 %sub.ptr.lhs.cast147, %sub.ptr.rhs.cast148
  %conv150 = trunc i64 %sub.ptr.sub149 to i32
  %104 = load i32, i32* %start, align 4
  %105 = load i8*, i8** %end, align 8
  %106 = load i8*, i8** %beg, align 8
  %sub.ptr.lhs.cast151 = ptrtoint i8* %105 to i64
  %sub.ptr.rhs.cast152 = ptrtoint i8* %106 to i64
  %sub.ptr.sub153 = sub i64 %sub.ptr.lhs.cast151, %sub.ptr.rhs.cast152
  %107 = load i32, i32* %start, align 4
  %conv154 = sext i32 %107 to i64
  %sub155 = sub nsw i64 %sub.ptr.sub153, %conv154
  %conv156 = trunc i64 %sub155 to i32
  %call157 = call i32 @re_search(%struct.re_pattern_buffer* @regex, i8* %101, i32 %conv150, i32 %104, i32 %conv156, %struct.re_registers* @EGexecute.regs)
  store i32 %call157, i32* %start, align 4
  %108 = load i32*, i32** getelementptr inbounds (%struct.re_registers, %struct.re_registers* @EGexecute.regs, i32 0, i32 2), align 8
  %arrayidx158 = getelementptr inbounds i32, i32* %108, i64 0
  %109 = load i32, i32* %arrayidx158, align 4
  %110 = load i32, i32* %start, align 4
  %sub159 = sub nsw i32 %109, %110
  store i32 %sub159, i32* %len, align 4
  br label %if.end160

if.end160:                                        ; preds = %if.end144, %if.end133
  br label %while.cond78, !llvm.loop !188

while.end161:                                     ; preds = %if.then143, %while.cond78
  br label %if.end162

if.end162:                                        ; preds = %while.end161, %if.end75
  br label %if.end163

if.end163:                                        ; preds = %if.end162, %if.end50
  br label %for.inc

for.inc:                                          ; preds = %if.end163, %if.then19
  %111 = load i8*, i8** %end, align 8
  %add.ptr164 = getelementptr inbounds i8, i8* %111, i64 1
  store i8* %add.ptr164, i8** %beg, align 8
  br label %for.cond, !llvm.loop !189

for.end:                                          ; preds = %for.cond
  br label %failure

failure:                                          ; preds = %for.end, %if.then26, %if.then2
  store i8* null, i8** %retval, align 8
  br label %return

success:                                          ; preds = %if.then124, %if.then74, %if.then48, %if.then22, %if.then15
  %112 = load i8*, i8** %end, align 8
  %113 = load i8*, i8** %buflim, align 8
  %cmp165 = icmp ult i8* %112, %113
  br i1 %cmp165, label %cond.true, label %cond.false

cond.true:                                        ; preds = %success
  %114 = load i8*, i8** %end, align 8
  %add.ptr167 = getelementptr inbounds i8, i8* %114, i64 1
  br label %cond.end

cond.false:                                       ; preds = %success
  %115 = load i8*, i8** %end, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %add.ptr167, %cond.true ], [ %115, %cond.false ]
  %116 = load i8**, i8*** %endp.addr, align 8
  store i8* %cond, i8** %116, align 8
  %117 = load i8*, i8** %beg, align 8
  store i8* %117, i8** %retval, align 8
  br label %return

return:                                           ; preds = %cond.end, %failure
  %118 = load i8*, i8** %retval, align 8
  ret i8* %118
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @Ecompile(i8* %pattern, i64 %size) #0 {
entry:
  %pattern.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %err = alloca i8*, align 8
  %n = alloca i8*, align 8
  %i = alloca i32, align 4
  store i8* %pattern, i8** %pattern.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  %0 = load i8*, i8** @matcher, align 8
  %call = call i32 @strcmp(i8* %0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.5, i64 0, i64 0)) #11
  %cmp = icmp eq i32 %call, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call1 = call i32 @re_set_syntax(i32 47900)
  %1 = load i32, i32* @match_icase, align 4
  call void @dfasyntax(i32 47900, i32 %1)
  br label %if.end

if.else:                                          ; preds = %entry
  %call2 = call i32 @re_set_syntax(i32 43292)
  %2 = load i32, i32* @match_icase, align 4
  call void @dfasyntax(i32 43292, i32 %2)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %3 = load i8*, i8** %pattern.addr, align 8
  %4 = load i64, i64* %size.addr, align 8
  %conv = trunc i64 %4 to i32
  %call3 = call i8* @re_compile_pattern(i8* %3, i32 %conv, %struct.re_pattern_buffer* @regex)
  store i8* %call3, i8** %err, align 8
  %cmp4 = icmp ne i8* %call3, null
  br i1 %cmp4, label %if.then6, label %if.end7

if.then6:                                         ; preds = %if.end
  %5 = load i8*, i8** %err, align 8
  call void @fatal(i8* %5, i32 0)
  br label %if.end7

if.end7:                                          ; preds = %if.then6, %if.end
  call void @dfainit(%struct.dfa* @dfa_1)
  %6 = load i32, i32* @match_words, align 4
  %tobool = icmp ne i32 %6, 0
  br i1 %tobool, label %if.then9, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end7
  %7 = load i32, i32* @match_lines, align 4
  %tobool8 = icmp ne i32 %7, 0
  br i1 %tobool8, label %if.then9, label %if.else44

if.then9:                                         ; preds = %lor.lhs.false, %if.end7
  %8 = load i64, i64* %size.addr, align 8
  %add = add i64 %8, 50
  %call10 = call i8* @xmalloc(i64 %add)
  store i8* %call10, i8** %n, align 8
  store i32 0, i32* %i, align 4
  %9 = load i8*, i8** %n, align 8
  %call11 = call i8* @strcpy(i8* %9, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.78, i64 0, i64 0)) #9
  %10 = load i32, i32* @match_lines, align 4
  %tobool12 = icmp ne i32 %10, 0
  br i1 %tobool12, label %if.then13, label %if.end15

if.then13:                                        ; preds = %if.then9
  %11 = load i8*, i8** %n, align 8
  %call14 = call i8* @strcpy(i8* %11, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.83, i64 0, i64 0)) #9
  br label %if.end15

if.end15:                                         ; preds = %if.then13, %if.then9
  %12 = load i32, i32* @match_words, align 4
  %tobool16 = icmp ne i32 %12, 0
  br i1 %tobool16, label %if.then17, label %if.end19

if.then17:                                        ; preds = %if.end15
  %13 = load i8*, i8** %n, align 8
  %call18 = call i8* @strcpy(i8* %13, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.84, i64 0, i64 0)) #9
  br label %if.end19

if.end19:                                         ; preds = %if.then17, %if.end15
  %14 = load i8*, i8** %n, align 8
  %call20 = call i64 @strlen(i8* %14) #11
  %conv21 = trunc i64 %call20 to i32
  store i32 %conv21, i32* %i, align 4
  %15 = load i8*, i8** %n, align 8
  %16 = load i32, i32* %i, align 4
  %idx.ext = sext i32 %16 to i64
  %add.ptr = getelementptr inbounds i8, i8* %15, i64 %idx.ext
  %17 = load i8*, i8** %pattern.addr, align 8
  %18 = load i64, i64* %size.addr, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %add.ptr, i8* align 1 %17, i64 %18, i1 false)
  %19 = load i64, i64* %size.addr, align 8
  %20 = load i32, i32* %i, align 4
  %conv22 = sext i32 %20 to i64
  %add23 = add i64 %conv22, %19
  %conv24 = trunc i64 %add23 to i32
  store i32 %conv24, i32* %i, align 4
  %21 = load i32, i32* @match_words, align 4
  %tobool25 = icmp ne i32 %21, 0
  br i1 %tobool25, label %if.then26, label %if.end30

if.then26:                                        ; preds = %if.end19
  %22 = load i8*, i8** %n, align 8
  %23 = load i32, i32* %i, align 4
  %idx.ext27 = sext i32 %23 to i64
  %add.ptr28 = getelementptr inbounds i8, i8* %22, i64 %idx.ext27
  %call29 = call i8* @strcpy(i8* %add.ptr28, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.85, i64 0, i64 0)) #9
  br label %if.end30

if.end30:                                         ; preds = %if.then26, %if.end19
  %24 = load i32, i32* @match_lines, align 4
  %tobool31 = icmp ne i32 %24, 0
  br i1 %tobool31, label %if.then32, label %if.end36

if.then32:                                        ; preds = %if.end30
  %25 = load i8*, i8** %n, align 8
  %26 = load i32, i32* %i, align 4
  %idx.ext33 = sext i32 %26 to i64
  %add.ptr34 = getelementptr inbounds i8, i8* %25, i64 %idx.ext33
  %call35 = call i8* @strcpy(i8* %add.ptr34, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.86, i64 0, i64 0)) #9
  br label %if.end36

if.end36:                                         ; preds = %if.then32, %if.end30
  %27 = load i8*, i8** %n, align 8
  %28 = load i32, i32* %i, align 4
  %idx.ext37 = sext i32 %28 to i64
  %add.ptr38 = getelementptr inbounds i8, i8* %27, i64 %idx.ext37
  %call39 = call i64 @strlen(i8* %add.ptr38) #11
  %29 = load i32, i32* %i, align 4
  %conv40 = sext i32 %29 to i64
  %add41 = add i64 %conv40, %call39
  %conv42 = trunc i64 %add41 to i32
  store i32 %conv42, i32* %i, align 4
  %30 = load i8*, i8** %n, align 8
  %31 = load i32, i32* %i, align 4
  %conv43 = sext i32 %31 to i64
  call void @dfacomp(i8* %30, i64 %conv43, %struct.dfa* @dfa_1, i32 1)
  br label %if.end45

if.else44:                                        ; preds = %lor.lhs.false
  %32 = load i8*, i8** %pattern.addr, align 8
  %33 = load i64, i64* %size.addr, align 8
  call void @dfacomp(i8* %32, i64 %33, %struct.dfa* @dfa_1, i32 1)
  br label %if.end45

if.end45:                                         ; preds = %if.else44, %if.end36
  call void @kwsmusts()
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @Fcompile(i8* %pattern, i64 %size) #0 {
entry:
  %pattern.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %beg = alloca i8*, align 8
  %lim = alloca i8*, align 8
  %err = alloca i8*, align 8
  store i8* %pattern, i8** %pattern.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  call void @kwsinit()
  %0 = load i8*, i8** %pattern.addr, align 8
  store i8* %0, i8** %beg, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %1 = load i8*, i8** %beg, align 8
  store i8* %1, i8** %lim, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %do.body
  %2 = load i8*, i8** %lim, align 8
  %3 = load i8*, i8** %pattern.addr, align 8
  %4 = load i64, i64* %size.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 %4
  %cmp = icmp ult i8* %2, %add.ptr
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %5 = load i8*, i8** %lim, align 8
  %6 = load i8, i8* %5, align 1
  %conv = sext i8 %6 to i32
  %cmp1 = icmp ne i32 %conv, 10
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %cmp1, %land.rhs ]
  br i1 %7, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i8*, i8** %lim, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %8, i32 1
  store i8* %incdec.ptr, i8** %lim, align 8
  br label %for.cond, !llvm.loop !190

for.end:                                          ; preds = %land.end
  %9 = load i8*, i8** @kwset, align 8
  %10 = load i8*, i8** %beg, align 8
  %11 = load i8*, i8** %lim, align 8
  %12 = load i8*, i8** %beg, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %11 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %12 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %call = call i8* @kwsincr(i8* %9, i8* %10, i64 %sub.ptr.sub)
  store i8* %call, i8** %err, align 8
  %cmp3 = icmp ne i8* %call, null
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %for.end
  %13 = load i8*, i8** %err, align 8
  call void @fatal(i8* %13, i32 0)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.end
  %14 = load i8*, i8** %lim, align 8
  %15 = load i8*, i8** %pattern.addr, align 8
  %16 = load i64, i64* %size.addr, align 8
  %add.ptr5 = getelementptr inbounds i8, i8* %15, i64 %16
  %cmp6 = icmp ult i8* %14, %add.ptr5
  br i1 %cmp6, label %if.then8, label %if.end10

if.then8:                                         ; preds = %if.end
  %17 = load i8*, i8** %lim, align 8
  %incdec.ptr9 = getelementptr inbounds i8, i8* %17, i32 1
  store i8* %incdec.ptr9, i8** %lim, align 8
  br label %if.end10

if.end10:                                         ; preds = %if.then8, %if.end
  %18 = load i8*, i8** %lim, align 8
  store i8* %18, i8** %beg, align 8
  br label %do.cond

do.cond:                                          ; preds = %if.end10
  %19 = load i8*, i8** %beg, align 8
  %20 = load i8*, i8** %pattern.addr, align 8
  %21 = load i64, i64* %size.addr, align 8
  %add.ptr11 = getelementptr inbounds i8, i8* %20, i64 %21
  %cmp12 = icmp ult i8* %19, %add.ptr11
  br i1 %cmp12, label %do.body, label %do.end, !llvm.loop !191

do.end:                                           ; preds = %do.cond
  %22 = load i8*, i8** @kwset, align 8
  %call14 = call i8* @kwsprep(i8* %22)
  store i8* %call14, i8** %err, align 8
  %cmp15 = icmp ne i8* %call14, null
  br i1 %cmp15, label %if.then17, label %if.end18

if.then17:                                        ; preds = %do.end
  %23 = load i8*, i8** %err, align 8
  call void @fatal(i8* %23, i32 0)
  br label %if.end18

if.end18:                                         ; preds = %if.then17, %do.end
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @Fexecute(i8* %buf, i64 %size, i8** %endp) #0 {
entry:
  %retval = alloca i8*, align 8
  %buf.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %endp.addr = alloca i8**, align 8
  %beg = alloca i8*, align 8
  %try = alloca i8*, align 8
  %end = alloca i8*, align 8
  %len = alloca i64, align 8
  %kwsmatch = alloca %struct.kwsmatch, align 8
  store i8* %buf, i8** %buf.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  store i8** %endp, i8*** %endp.addr, align 8
  %0 = load i8*, i8** %buf.addr, align 8
  store i8* %0, i8** %beg, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i8*, i8** %beg, align 8
  %2 = load i8*, i8** %buf.addr, align 8
  %3 = load i64, i64* %size.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 %3
  %cmp = icmp ule i8* %1, %add.ptr
  br i1 %cmp, label %for.body, label %for.end70

for.body:                                         ; preds = %for.cond
  %4 = load i8*, i8** @kwset, align 8
  %5 = load i8*, i8** %beg, align 8
  %6 = load i8*, i8** %buf.addr, align 8
  %7 = load i64, i64* %size.addr, align 8
  %add.ptr1 = getelementptr inbounds i8, i8* %6, i64 %7
  %8 = load i8*, i8** %beg, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %add.ptr1 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %8 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %call = call i8* @kwsexec(i8* %4, i8* %5, i64 %sub.ptr.sub, %struct.kwsmatch* %kwsmatch)
  store i8* %call, i8** %beg, align 8
  %tobool = icmp ne i8* %call, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body
  store i8* null, i8** %retval, align 8
  br label %return

if.end:                                           ; preds = %for.body
  %size2 = getelementptr inbounds %struct.kwsmatch, %struct.kwsmatch* %kwsmatch, i32 0, i32 2
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %size2, i64 0, i64 0
  %9 = load i64, i64* %arrayidx, align 8
  store i64 %9, i64* %len, align 8
  %10 = load i32, i32* @match_lines, align 4
  %tobool3 = icmp ne i32 %10, 0
  br i1 %tobool3, label %if.then4, label %if.else

if.then4:                                         ; preds = %if.end
  %11 = load i8*, i8** %beg, align 8
  %12 = load i8*, i8** %buf.addr, align 8
  %cmp5 = icmp ugt i8* %11, %12
  br i1 %cmp5, label %land.lhs.true, label %if.end10

land.lhs.true:                                    ; preds = %if.then4
  %13 = load i8*, i8** %beg, align 8
  %arrayidx6 = getelementptr inbounds i8, i8* %13, i64 -1
  %14 = load i8, i8* %arrayidx6, align 1
  %conv = sext i8 %14 to i32
  %cmp7 = icmp ne i32 %conv, 10
  br i1 %cmp7, label %if.then9, label %if.end10

if.then9:                                         ; preds = %land.lhs.true
  br label %for.inc

if.end10:                                         ; preds = %land.lhs.true, %if.then4
  %15 = load i8*, i8** %beg, align 8
  %16 = load i64, i64* %len, align 8
  %add.ptr11 = getelementptr inbounds i8, i8* %15, i64 %16
  %17 = load i8*, i8** %buf.addr, align 8
  %18 = load i64, i64* %size.addr, align 8
  %add.ptr12 = getelementptr inbounds i8, i8* %17, i64 %18
  %cmp13 = icmp ult i8* %add.ptr11, %add.ptr12
  br i1 %cmp13, label %land.lhs.true15, label %if.end21

land.lhs.true15:                                  ; preds = %if.end10
  %19 = load i8*, i8** %beg, align 8
  %20 = load i64, i64* %len, align 8
  %arrayidx16 = getelementptr inbounds i8, i8* %19, i64 %20
  %21 = load i8, i8* %arrayidx16, align 1
  %conv17 = sext i8 %21 to i32
  %cmp18 = icmp ne i32 %conv17, 10
  br i1 %cmp18, label %if.then20, label %if.end21

if.then20:                                        ; preds = %land.lhs.true15
  br label %for.inc

if.end21:                                         ; preds = %land.lhs.true15, %if.end10
  br label %success

if.else:                                          ; preds = %if.end
  %22 = load i32, i32* @match_words, align 4
  %tobool22 = icmp ne i32 %22, 0
  br i1 %tobool22, label %if.then23, label %if.else67

if.then23:                                        ; preds = %if.else
  %23 = load i8*, i8** %beg, align 8
  store i8* %23, i8** %try, align 8
  br label %for.cond24

for.cond24:                                       ; preds = %if.end66, %if.then23
  %24 = load i64, i64* %len, align 8
  %tobool25 = icmp ne i64 %24, 0
  br i1 %tobool25, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond24
  %25 = load i8*, i8** %try, align 8
  %tobool26 = icmp ne i8* %25, null
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond24
  %26 = phi i1 [ false, %for.cond24 ], [ %tobool26, %land.rhs ]
  br i1 %26, label %for.body27, label %for.end

for.body27:                                       ; preds = %land.end
  %27 = load i8*, i8** %try, align 8
  %28 = load i8*, i8** %buf.addr, align 8
  %cmp28 = icmp ugt i8* %27, %28
  br i1 %cmp28, label %land.lhs.true30, label %if.end42

land.lhs.true30:                                  ; preds = %for.body27
  %call31 = call i16** @__ctype_b_loc() #10
  %29 = load i16*, i16** %call31, align 8
  %30 = load i8*, i8** %try, align 8
  %arrayidx32 = getelementptr inbounds i8, i8* %30, i64 -1
  %31 = load i8, i8* %arrayidx32, align 1
  %conv33 = zext i8 %31 to i32
  %idxprom = sext i32 %conv33 to i64
  %arrayidx34 = getelementptr inbounds i16, i16* %29, i64 %idxprom
  %32 = load i16, i16* %arrayidx34, align 2
  %conv35 = zext i16 %32 to i32
  %and = and i32 %conv35, 8
  %tobool36 = icmp ne i32 %and, 0
  br i1 %tobool36, label %if.then41, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true30
  %33 = load i8*, i8** %try, align 8
  %arrayidx37 = getelementptr inbounds i8, i8* %33, i64 -1
  %34 = load i8, i8* %arrayidx37, align 1
  %conv38 = zext i8 %34 to i32
  %cmp39 = icmp eq i32 %conv38, 95
  br i1 %cmp39, label %if.then41, label %if.end42

if.then41:                                        ; preds = %lor.lhs.false, %land.lhs.true30
  br label %for.end

if.end42:                                         ; preds = %lor.lhs.false, %for.body27
  %35 = load i8*, i8** %try, align 8
  %36 = load i64, i64* %len, align 8
  %add.ptr43 = getelementptr inbounds i8, i8* %35, i64 %36
  %37 = load i8*, i8** %buf.addr, align 8
  %38 = load i64, i64* %size.addr, align 8
  %add.ptr44 = getelementptr inbounds i8, i8* %37, i64 %38
  %cmp45 = icmp ult i8* %add.ptr43, %add.ptr44
  br i1 %cmp45, label %land.lhs.true47, label %if.else65

land.lhs.true47:                                  ; preds = %if.end42
  %call48 = call i16** @__ctype_b_loc() #10
  %39 = load i16*, i16** %call48, align 8
  %40 = load i8*, i8** %try, align 8
  %41 = load i64, i64* %len, align 8
  %arrayidx49 = getelementptr inbounds i8, i8* %40, i64 %41
  %42 = load i8, i8* %arrayidx49, align 1
  %conv50 = zext i8 %42 to i32
  %idxprom51 = sext i32 %conv50 to i64
  %arrayidx52 = getelementptr inbounds i16, i16* %39, i64 %idxprom51
  %43 = load i16, i16* %arrayidx52, align 2
  %conv53 = zext i16 %43 to i32
  %and54 = and i32 %conv53, 8
  %tobool55 = icmp ne i32 %and54, 0
  br i1 %tobool55, label %if.then61, label %lor.lhs.false56

lor.lhs.false56:                                  ; preds = %land.lhs.true47
  %44 = load i8*, i8** %try, align 8
  %45 = load i64, i64* %len, align 8
  %arrayidx57 = getelementptr inbounds i8, i8* %44, i64 %45
  %46 = load i8, i8* %arrayidx57, align 1
  %conv58 = zext i8 %46 to i32
  %cmp59 = icmp eq i32 %conv58, 95
  br i1 %cmp59, label %if.then61, label %if.else65

if.then61:                                        ; preds = %lor.lhs.false56, %land.lhs.true47
  %47 = load i8*, i8** @kwset, align 8
  %48 = load i8*, i8** %beg, align 8
  %49 = load i64, i64* %len, align 8
  %dec = add i64 %49, -1
  store i64 %dec, i64* %len, align 8
  %call62 = call i8* @kwsexec(i8* %47, i8* %48, i64 %dec, %struct.kwsmatch* %kwsmatch)
  store i8* %call62, i8** %try, align 8
  %size63 = getelementptr inbounds %struct.kwsmatch, %struct.kwsmatch* %kwsmatch, i32 0, i32 2
  %arrayidx64 = getelementptr inbounds [1 x i64], [1 x i64]* %size63, i64 0, i64 0
  %50 = load i64, i64* %arrayidx64, align 8
  store i64 %50, i64* %len, align 8
  br label %if.end66

if.else65:                                        ; preds = %lor.lhs.false56, %if.end42
  br label %success

if.end66:                                         ; preds = %if.then61
  br label %for.cond24, !llvm.loop !192

for.end:                                          ; preds = %if.then41, %land.end
  br label %if.end68

if.else67:                                        ; preds = %if.else
  br label %success

if.end68:                                         ; preds = %for.end
  br label %if.end69

if.end69:                                         ; preds = %if.end68
  br label %for.inc

for.inc:                                          ; preds = %if.end69, %if.then20, %if.then9
  %51 = load i8*, i8** %beg, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %51, i32 1
  store i8* %incdec.ptr, i8** %beg, align 8
  br label %for.cond, !llvm.loop !193

for.end70:                                        ; preds = %for.cond
  store i8* null, i8** %retval, align 8
  br label %return

success:                                          ; preds = %if.else67, %if.else65, %if.end21
  %52 = load i8*, i8** %beg, align 8
  %53 = load i64, i64* %len, align 8
  %add.ptr71 = getelementptr inbounds i8, i8* %52, i64 %53
  %54 = load i8*, i8** %buf.addr, align 8
  %55 = load i64, i64* %size.addr, align 8
  %add.ptr72 = getelementptr inbounds i8, i8* %54, i64 %55
  %56 = load i8*, i8** %beg, align 8
  %57 = load i64, i64* %len, align 8
  %add.ptr73 = getelementptr inbounds i8, i8* %56, i64 %57
  %sub.ptr.lhs.cast74 = ptrtoint i8* %add.ptr72 to i64
  %sub.ptr.rhs.cast75 = ptrtoint i8* %add.ptr73 to i64
  %sub.ptr.sub76 = sub i64 %sub.ptr.lhs.cast74, %sub.ptr.rhs.cast75
  %call77 = call i8* @memchr(i8* %add.ptr71, i32 10, i64 %sub.ptr.sub76) #11
  store i8* %call77, i8** %end, align 8
  %cmp78 = icmp ne i8* %call77, null
  br i1 %cmp78, label %if.then80, label %if.else82

if.then80:                                        ; preds = %success
  %58 = load i8*, i8** %end, align 8
  %incdec.ptr81 = getelementptr inbounds i8, i8* %58, i32 1
  store i8* %incdec.ptr81, i8** %end, align 8
  br label %if.end84

if.else82:                                        ; preds = %success
  %59 = load i8*, i8** %buf.addr, align 8
  %60 = load i64, i64* %size.addr, align 8
  %add.ptr83 = getelementptr inbounds i8, i8* %59, i64 %60
  store i8* %add.ptr83, i8** %end, align 8
  br label %if.end84

if.end84:                                         ; preds = %if.else82, %if.then80
  %61 = load i8*, i8** %end, align 8
  %62 = load i8**, i8*** %endp.addr, align 8
  store i8* %61, i8** %62, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end84
  %63 = load i8*, i8** %beg, align 8
  %64 = load i8*, i8** %buf.addr, align 8
  %cmp85 = icmp ugt i8* %63, %64
  br i1 %cmp85, label %land.rhs87, label %land.end92

land.rhs87:                                       ; preds = %while.cond
  %65 = load i8*, i8** %beg, align 8
  %arrayidx88 = getelementptr inbounds i8, i8* %65, i64 -1
  %66 = load i8, i8* %arrayidx88, align 1
  %conv89 = sext i8 %66 to i32
  %cmp90 = icmp ne i32 %conv89, 10
  br label %land.end92

land.end92:                                       ; preds = %land.rhs87, %while.cond
  %67 = phi i1 [ false, %while.cond ], [ %cmp90, %land.rhs87 ]
  br i1 %67, label %while.body, label %while.end

while.body:                                       ; preds = %land.end92
  %68 = load i8*, i8** %beg, align 8
  %incdec.ptr93 = getelementptr inbounds i8, i8* %68, i32 -1
  store i8* %incdec.ptr93, i8** %beg, align 8
  br label %while.cond, !llvm.loop !194

while.end:                                        ; preds = %land.end92
  %69 = load i8*, i8** %beg, align 8
  store i8* %69, i8** %retval, align 8
  br label %return

return:                                           ; preds = %while.end, %for.end70, %if.then
  %70 = load i8*, i8** %retval, align 8
  ret i8* %70
}

; Function Attrs: nocallback nounwind
declare dso_local i8* @strerror(i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @usage() #0 {
entry:
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %1 = load i8*, i8** @prog, align 8
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.27, i64 0, i64 0), i8* %1)
  call void @exit(i32 2) #8
  unreachable
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @fillbuf(i64 %save) #0 {
entry:
  %save.addr = alloca i64, align 8
  %nbuffer = alloca i8*, align 8
  %dp = alloca i8*, align 8
  %sp = alloca i8*, align 8
  %cc = alloca i32, align 4
  %maddr = alloca i8*, align 8
  store i64 %save, i64* %save.addr, align 8
  %0 = load i32, i32* @fillbuf.pagesize, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %call = call i32 @getpagesize() #10
  store i32 %call, i32* @fillbuf.pagesize, align 4
  %cmp1 = icmp eq i32 %call, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  call void @abort() #8
  unreachable

if.end:                                           ; preds = %land.lhs.true, %entry
  %1 = load i64, i64* %save.addr, align 8
  %2 = load i64, i64* @bufsalloc, align 8
  %cmp2 = icmp ugt i64 %1, %2
  br i1 %cmp2, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.end
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then3
  %3 = load i64, i64* %save.addr, align 8
  %4 = load i64, i64* @bufsalloc, align 8
  %cmp4 = icmp ugt i64 %3, %4
  br i1 %cmp4, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i64, i64* @bufsalloc, align 8
  %mul = mul i64 %5, 2
  store i64 %mul, i64* @bufsalloc, align 8
  br label %while.cond, !llvm.loop !195

while.end:                                        ; preds = %while.cond
  %6 = load i64, i64* @bufsalloc, align 8
  %mul5 = mul i64 5, %6
  store i64 %mul5, i64* @bufalloc, align 8
  %7 = load i64, i64* @bufalloc, align 8
  %add = add i64 %7, 1
  %call6 = call noalias i8* @valloc(i64 %add) #9
  store i8* %call6, i8** %nbuffer, align 8
  %8 = load i8*, i8** %nbuffer, align 8
  %tobool = icmp ne i8* %8, null
  br i1 %tobool, label %if.end8, label %if.then7

if.then7:                                         ; preds = %while.end
  call void @fatal(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0), i32 0)
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %while.end
  br label %if.end9

if.else:                                          ; preds = %if.end
  %9 = load i8*, i8** @buffer, align 8
  store i8* %9, i8** %nbuffer, align 8
  br label %if.end9

if.end9:                                          ; preds = %if.else, %if.end8
  %10 = load i8*, i8** @buflim, align 8
  %11 = load i64, i64* %save.addr, align 8
  %idx.neg = sub i64 0, %11
  %add.ptr = getelementptr inbounds i8, i8* %10, i64 %idx.neg
  store i8* %add.ptr, i8** %sp, align 8
  %12 = load i8*, i8** %nbuffer, align 8
  %13 = load i64, i64* @bufsalloc, align 8
  %add.ptr10 = getelementptr inbounds i8, i8* %12, i64 %13
  %14 = load i64, i64* %save.addr, align 8
  %idx.neg11 = sub i64 0, %14
  %add.ptr12 = getelementptr inbounds i8, i8* %add.ptr10, i64 %idx.neg11
  store i8* %add.ptr12, i8** %dp, align 8
  %15 = load i8*, i8** %dp, align 8
  store i8* %15, i8** @bufbeg, align 8
  br label %while.cond13

while.cond13:                                     ; preds = %while.body15, %if.end9
  %16 = load i64, i64* %save.addr, align 8
  %dec = add i64 %16, -1
  store i64 %dec, i64* %save.addr, align 8
  %tobool14 = icmp ne i64 %16, 0
  br i1 %tobool14, label %while.body15, label %while.end17

while.body15:                                     ; preds = %while.cond13
  %17 = load i8*, i8** %sp, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %17, i32 1
  store i8* %incdec.ptr, i8** %sp, align 8
  %18 = load i8, i8* %17, align 1
  %19 = load i8*, i8** %dp, align 8
  %incdec.ptr16 = getelementptr inbounds i8, i8* %19, i32 1
  store i8* %incdec.ptr16, i8** %dp, align 8
  store i8 %18, i8* %19, align 1
  br label %while.cond13, !llvm.loop !196

while.end17:                                      ; preds = %while.cond13
  %20 = load i8*, i8** %nbuffer, align 8
  store i8* %20, i8** @buffer, align 8
  %21 = load i32, i32* @bufmapped, align 4
  %tobool18 = icmp ne i32 %21, 0
  br i1 %tobool18, label %land.lhs.true19, label %if.else41

land.lhs.true19:                                  ; preds = %while.end17
  %22 = load i64, i64* @bufoffset, align 8
  %23 = load i32, i32* @fillbuf.pagesize, align 4
  %conv = sext i32 %23 to i64
  %rem = srem i64 %22, %conv
  %cmp20 = icmp eq i64 %rem, 0
  br i1 %cmp20, label %land.lhs.true22, label %if.else41

land.lhs.true22:                                  ; preds = %land.lhs.true19
  %24 = load i64, i64* getelementptr inbounds (%struct.stat, %struct.stat* @bufstat, i32 0, i32 8), align 8
  %25 = load i64, i64* @bufoffset, align 8
  %sub = sub nsw i64 %24, %25
  %26 = load i64, i64* @bufalloc, align 8
  %27 = load i64, i64* @bufsalloc, align 8
  %sub23 = sub i64 %26, %27
  %cmp24 = icmp uge i64 %sub, %sub23
  br i1 %cmp24, label %if.then26, label %if.else41

if.then26:                                        ; preds = %land.lhs.true22
  %28 = load i8*, i8** @buffer, align 8
  %29 = load i64, i64* @bufsalloc, align 8
  %add.ptr27 = getelementptr inbounds i8, i8* %28, i64 %29
  store i8* %add.ptr27, i8** %maddr, align 8
  %30 = load i8*, i8** %maddr, align 8
  %31 = load i64, i64* @bufalloc, align 8
  %32 = load i64, i64* @bufsalloc, align 8
  %sub28 = sub i64 %31, %32
  %33 = load i32, i32* @bufdesc, align 4
  %34 = load i64, i64* @bufoffset, align 8
  %call29 = call i8* @mmap(i8* %30, i64 %sub28, i32 3, i32 18, i32 %33, i64 %34) #9
  store i8* %call29, i8** %maddr, align 8
  %35 = load i8*, i8** %maddr, align 8
  %cmp30 = icmp eq i8* %35, inttoptr (i64 -1 to i8*)
  br i1 %cmp30, label %if.then32, label %if.end36

if.then32:                                        ; preds = %if.then26
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %37 = load i8*, i8** @filename, align 8
  %call33 = call i32* @__errno_location() #10
  %38 = load i32, i32* %call33, align 4
  %call34 = call i8* @strerror(i32 %38) #9
  %call35 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %36, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.28, i64 0, i64 0), i8* %37, i8* %call34)
  br label %tryread

if.end36:                                         ; preds = %if.then26
  %39 = load i64, i64* @bufalloc, align 8
  %40 = load i64, i64* @bufsalloc, align 8
  %sub37 = sub i64 %39, %40
  %conv38 = trunc i64 %sub37 to i32
  store i32 %conv38, i32* %cc, align 4
  %41 = load i32, i32* %cc, align 4
  %conv39 = sext i32 %41 to i64
  %42 = load i64, i64* @bufoffset, align 8
  %add40 = add nsw i64 %42, %conv39
  store i64 %add40, i64* @bufoffset, align 8
  br label %if.end50

if.else41:                                        ; preds = %land.lhs.true22, %land.lhs.true19, %while.end17
  br label %tryread

tryread:                                          ; preds = %if.else41, %if.then32
  %43 = load i32, i32* @bufmapped, align 4
  %tobool42 = icmp ne i32 %43, 0
  br i1 %tobool42, label %if.then43, label %if.end45

if.then43:                                        ; preds = %tryread
  store i32 0, i32* @bufmapped, align 4
  %44 = load i32, i32* @bufdesc, align 4
  %45 = load i64, i64* @bufoffset, align 8
  %call44 = call i64 @lseek(i32 %44, i64 %45, i32 0) #9
  br label %if.end45

if.end45:                                         ; preds = %if.then43, %tryread
  %46 = load i32, i32* @bufdesc, align 4
  %47 = load i8*, i8** @buffer, align 8
  %48 = load i64, i64* @bufsalloc, align 8
  %add.ptr46 = getelementptr inbounds i8, i8* %47, i64 %48
  %49 = load i64, i64* @bufalloc, align 8
  %50 = load i64, i64* @bufsalloc, align 8
  %sub47 = sub i64 %49, %50
  %call48 = call i64 @read(i32 %46, i8* %add.ptr46, i64 %sub47)
  %conv49 = trunc i64 %call48 to i32
  store i32 %conv49, i32* %cc, align 4
  br label %if.end50

if.end50:                                         ; preds = %if.end45, %if.end36
  %51 = load i32, i32* %cc, align 4
  %cmp51 = icmp sgt i32 %51, 0
  br i1 %cmp51, label %if.then53, label %if.else56

if.then53:                                        ; preds = %if.end50
  %52 = load i8*, i8** @buffer, align 8
  %53 = load i64, i64* @bufsalloc, align 8
  %add.ptr54 = getelementptr inbounds i8, i8* %52, i64 %53
  %54 = load i32, i32* %cc, align 4
  %idx.ext = sext i32 %54 to i64
  %add.ptr55 = getelementptr inbounds i8, i8* %add.ptr54, i64 %idx.ext
  store i8* %add.ptr55, i8** @buflim, align 8
  br label %if.end58

if.else56:                                        ; preds = %if.end50
  %55 = load i8*, i8** @buffer, align 8
  %56 = load i64, i64* @bufsalloc, align 8
  %add.ptr57 = getelementptr inbounds i8, i8* %55, i64 %56
  store i8* %add.ptr57, i8** @buflim, align 8
  br label %if.end58

if.end58:                                         ; preds = %if.else56, %if.then53
  %57 = load i32, i32* %cc, align 4
  ret i32 %57
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @grepbuf(i8* %beg, i8* %lim) #0 {
entry:
  %beg.addr = alloca i8*, align 8
  %lim.addr = alloca i8*, align 8
  %nlines = alloca i32, align 4
  %n = alloca i32, align 4
  %p = alloca i8*, align 8
  %b = alloca i8*, align 8
  %endp = alloca i8*, align 8
  store i8* %beg, i8** %beg.addr, align 8
  store i8* %lim, i8** %lim.addr, align 8
  store i32 0, i32* %nlines, align 4
  %0 = load i8*, i8** %beg.addr, align 8
  store i8* %0, i8** %p, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end14, %entry
  %1 = load i8* (...)*, i8* (...)** @execute, align 8
  %2 = load i8*, i8** %p, align 8
  %3 = load i8*, i8** %lim.addr, align 8
  %4 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %3 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %4 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %callee.knr.cast = bitcast i8* (...)* %1 to i8* (i8*, i64, i8**, ...)*
  %call = call i8* (i8*, i64, i8**, ...) %callee.knr.cast(i8* %2, i64 %sub.ptr.sub, i8** %endp)
  store i8* %call, i8** %b, align 8
  %cmp = icmp ne i8* %call, null
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i8*, i8** %b, align 8
  %6 = load i8*, i8** %lim.addr, align 8
  %cmp1 = icmp eq i8* %5, %6
  br i1 %cmp1, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %while.body
  %7 = load i8*, i8** %b, align 8
  %8 = load i8*, i8** %beg.addr, align 8
  %cmp2 = icmp ugt i8* %7, %8
  br i1 %cmp2, label %land.lhs.true3, label %lor.lhs.false

land.lhs.true3:                                   ; preds = %land.lhs.true
  %9 = load i8*, i8** %b, align 8
  %arrayidx = getelementptr inbounds i8, i8* %9, i64 -1
  %10 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %10 to i32
  %cmp4 = icmp eq i32 %conv, 10
  br i1 %cmp4, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true3, %land.lhs.true
  %11 = load i8*, i8** %b, align 8
  %12 = load i8*, i8** %beg.addr, align 8
  %cmp6 = icmp eq i8* %11, %12
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true3
  br label %while.end

if.end:                                           ; preds = %lor.lhs.false, %while.body
  %13 = load i32, i32* @out_invert, align 4
  %tobool = icmp ne i32 %13, 0
  br i1 %tobool, label %if.else, label %if.then8

if.then8:                                         ; preds = %if.end
  %14 = load i8*, i8** %b, align 8
  %15 = load i8*, i8** %endp, align 8
  call void @prtext(i8* %14, i8* %15, i32* null)
  %16 = load i32, i32* %nlines, align 4
  %add = add nsw i32 %16, 1
  store i32 %add, i32* %nlines, align 4
  br label %if.end14

if.else:                                          ; preds = %if.end
  %17 = load i8*, i8** %p, align 8
  %18 = load i8*, i8** %b, align 8
  %cmp9 = icmp ult i8* %17, %18
  br i1 %cmp9, label %if.then11, label %if.end13

if.then11:                                        ; preds = %if.else
  %19 = load i8*, i8** %p, align 8
  %20 = load i8*, i8** %b, align 8
  call void @prtext(i8* %19, i8* %20, i32* %n)
  %21 = load i32, i32* %n, align 4
  %22 = load i32, i32* %nlines, align 4
  %add12 = add nsw i32 %22, %21
  store i32 %add12, i32* %nlines, align 4
  br label %if.end13

if.end13:                                         ; preds = %if.then11, %if.else
  br label %if.end14

if.end14:                                         ; preds = %if.end13, %if.then8
  %23 = load i8*, i8** %endp, align 8
  store i8* %23, i8** %p, align 8
  br label %while.cond, !llvm.loop !197

while.end:                                        ; preds = %if.then, %while.cond
  %24 = load i32, i32* @out_invert, align 4
  %tobool15 = icmp ne i32 %24, 0
  br i1 %tobool15, label %land.lhs.true16, label %if.end21

land.lhs.true16:                                  ; preds = %while.end
  %25 = load i8*, i8** %p, align 8
  %26 = load i8*, i8** %lim.addr, align 8
  %cmp17 = icmp ult i8* %25, %26
  br i1 %cmp17, label %if.then19, label %if.end21

if.then19:                                        ; preds = %land.lhs.true16
  %27 = load i8*, i8** %p, align 8
  %28 = load i8*, i8** %lim.addr, align 8
  call void @prtext(i8* %27, i8* %28, i32* %n)
  %29 = load i32, i32* %n, align 4
  %30 = load i32, i32* %nlines, align 4
  %add20 = add nsw i32 %30, %29
  store i32 %add20, i32* %nlines, align 4
  br label %if.end21

if.end21:                                         ; preds = %if.then19, %land.lhs.true16, %while.end
  %31 = load i32, i32* %nlines, align 4
  ret i32 %31
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @prpending(i8* %lim) #0 {
entry:
  %lim.addr = alloca i8*, align 8
  %nl = alloca i8*, align 8
  store i8* %lim, i8** %lim.addr, align 8
  %0 = load i8*, i8** @lastout, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** @bufbeg, align 8
  store i8* %1, i8** @lastout, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  br label %while.cond

while.cond:                                       ; preds = %if.end4, %if.end
  %2 = load i32, i32* @pending, align 4
  %cmp = icmp sgt i32 %2, 0
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %3 = load i8*, i8** @lastout, align 8
  %4 = load i8*, i8** %lim.addr, align 8
  %cmp1 = icmp ult i8* %3, %4
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %5 = phi i1 [ false, %while.cond ], [ %cmp1, %land.rhs ]
  br i1 %5, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %6 = load i32, i32* @pending, align 4
  %dec = add nsw i32 %6, -1
  store i32 %dec, i32* @pending, align 4
  %7 = load i8*, i8** @lastout, align 8
  %8 = load i8*, i8** %lim.addr, align 8
  %9 = load i8*, i8** @lastout, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %8 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %9 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %call = call i8* @memchr(i8* %7, i32 10, i64 %sub.ptr.sub) #11
  store i8* %call, i8** %nl, align 8
  %cmp2 = icmp ne i8* %call, null
  br i1 %cmp2, label %if.then3, label %if.else

if.then3:                                         ; preds = %while.body
  %10 = load i8*, i8** %nl, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %10, i32 1
  store i8* %incdec.ptr, i8** %nl, align 8
  br label %if.end4

if.else:                                          ; preds = %while.body
  %11 = load i8*, i8** %lim.addr, align 8
  store i8* %11, i8** %nl, align 8
  br label %if.end4

if.end4:                                          ; preds = %if.else, %if.then3
  %12 = load i8*, i8** @lastout, align 8
  %13 = load i8*, i8** %nl, align 8
  call void @prline(i8* %12, i8* %13, i32 45)
  br label %while.cond, !llvm.loop !198

while.end:                                        ; preds = %land.end
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @nlscan(i8* %lim) #0 {
entry:
  %lim.addr = alloca i8*, align 8
  %beg = alloca i8*, align 8
  store i8* %lim, i8** %lim.addr, align 8
  %0 = load i8*, i8** @lastnl, align 8
  store i8* %0, i8** %beg, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i8*, i8** %beg, align 8
  %2 = load i8*, i8** %lim.addr, align 8
  %cmp = icmp ult i8* %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %beg, align 8
  %4 = load i8, i8* %3, align 1
  %conv = sext i8 %4 to i32
  %cmp1 = icmp eq i32 %conv, 10
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %5 = load i64, i64* @totalnl, align 8
  %inc = add i64 %5, 1
  store i64 %inc, i64* @totalnl, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %6 = load i8*, i8** %beg, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr, i8** %beg, align 8
  br label %for.cond, !llvm.loop !199

for.end:                                          ; preds = %for.cond
  %7 = load i8*, i8** %beg, align 8
  store i8* %7, i8** @lastnl, align 8
  ret void
}

; Function Attrs: nocallback nounwind
declare dso_local i8* @mmap(i8*, i64, i32, i32, i32, i64) #2

declare dso_local i64 @read(i32, i8*, i64) #5

; Function Attrs: noinline nounwind optnone uwtable
define internal void @prtext(i8* %beg, i8* %lim, i32* %nlinesp) #0 {
entry:
  %beg.addr = alloca i8*, align 8
  %lim.addr = alloca i8*, align 8
  %nlinesp.addr = alloca i32*, align 8
  %bp = alloca i8*, align 8
  %p = alloca i8*, align 8
  %nl = alloca i8*, align 8
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  store i8* %beg, i8** %beg.addr, align 8
  store i8* %lim, i8** %lim.addr, align 8
  store i32* %nlinesp, i32** %nlinesp.addr, align 8
  %0 = load i32, i32* @out_quiet, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @pending, align 4
  %cmp = icmp sgt i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %2 = load i8*, i8** %beg.addr, align 8
  call void @prpending(i8* %2)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %3 = load i8*, i8** %beg.addr, align 8
  store i8* %3, i8** %p, align 8
  %4 = load i32, i32* @out_quiet, align 4
  %tobool1 = icmp ne i32 %4, 0
  br i1 %tobool1, label %if.end24, label %if.then2

if.then2:                                         ; preds = %if.end
  %5 = load i8*, i8** @lastout, align 8
  %tobool3 = icmp ne i8* %5, null
  br i1 %tobool3, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then2
  %6 = load i8*, i8** @lastout, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then2
  %7 = load i8*, i8** @bufbeg, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %6, %cond.true ], [ %7, %cond.false ]
  store i8* %cond, i8** %bp, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end
  %8 = load i32, i32* %i, align 4
  %9 = load i32, i32* @out_before, align 4
  %cmp4 = icmp slt i32 %8, %9
  br i1 %cmp4, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %10 = load i8*, i8** %p, align 8
  %11 = load i8*, i8** %bp, align 8
  %cmp5 = icmp ugt i8* %10, %11
  br i1 %cmp5, label %if.then6, label %if.end10

if.then6:                                         ; preds = %for.body
  br label %do.body

do.body:                                          ; preds = %land.end, %if.then6
  %12 = load i8*, i8** %p, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %12, i32 -1
  store i8* %incdec.ptr, i8** %p, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %13 = load i8*, i8** %p, align 8
  %14 = load i8*, i8** %bp, align 8
  %cmp7 = icmp ugt i8* %13, %14
  br i1 %cmp7, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %do.cond
  %15 = load i8*, i8** %p, align 8
  %arrayidx = getelementptr inbounds i8, i8* %15, i64 -1
  %16 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %16 to i32
  %cmp8 = icmp ne i32 %conv, 10
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.cond
  %17 = phi i1 [ false, %do.cond ], [ %cmp8, %land.rhs ]
  br i1 %17, label %do.body, label %do.end, !llvm.loop !200

do.end:                                           ; preds = %land.end
  br label %if.end10

if.end10:                                         ; preds = %do.end, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end10
  %18 = load i32, i32* %i, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond, !llvm.loop !201

for.end:                                          ; preds = %for.cond
  %19 = load i32, i32* @out_before, align 4
  %tobool11 = icmp ne i32 %19, 0
  br i1 %tobool11, label %land.lhs.true13, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.end
  %20 = load i32, i32* @out_after, align 4
  %tobool12 = icmp ne i32 %20, 0
  br i1 %tobool12, label %land.lhs.true13, label %if.end19

land.lhs.true13:                                  ; preds = %lor.lhs.false, %for.end
  %21 = load i32, i32* @prtext.used, align 4
  %tobool14 = icmp ne i32 %21, 0
  br i1 %tobool14, label %land.lhs.true15, label %if.end19

land.lhs.true15:                                  ; preds = %land.lhs.true13
  %22 = load i8*, i8** %p, align 8
  %23 = load i8*, i8** @lastout, align 8
  %cmp16 = icmp ne i8* %22, %23
  br i1 %cmp16, label %if.then18, label %if.end19

if.then18:                                        ; preds = %land.lhs.true15
  %call = call i32 @puts(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.29, i64 0, i64 0))
  br label %if.end19

if.end19:                                         ; preds = %if.then18, %land.lhs.true15, %land.lhs.true13, %lor.lhs.false
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end19
  %24 = load i8*, i8** %p, align 8
  %25 = load i8*, i8** %beg.addr, align 8
  %cmp20 = icmp ult i8* %24, %25
  br i1 %cmp20, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %26 = load i8*, i8** %p, align 8
  %27 = load i8*, i8** %beg.addr, align 8
  %28 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %27 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %28 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %call22 = call i8* @memchr(i8* %26, i32 10, i64 %sub.ptr.sub) #11
  store i8* %call22, i8** %nl, align 8
  %29 = load i8*, i8** %p, align 8
  %30 = load i8*, i8** %nl, align 8
  %add.ptr = getelementptr inbounds i8, i8* %30, i64 1
  call void @prline(i8* %29, i8* %add.ptr, i32 45)
  %31 = load i8*, i8** %nl, align 8
  %add.ptr23 = getelementptr inbounds i8, i8* %31, i64 1
  store i8* %add.ptr23, i8** %p, align 8
  br label %while.cond, !llvm.loop !202

while.end:                                        ; preds = %while.cond
  br label %if.end24

if.end24:                                         ; preds = %while.end, %if.end
  %32 = load i32*, i32** %nlinesp.addr, align 8
  %tobool25 = icmp ne i32* %32, null
  br i1 %tobool25, label %if.then26, label %if.else46

if.then26:                                        ; preds = %if.end24
  store i32 0, i32* %n, align 4
  br label %for.cond27

for.cond27:                                       ; preds = %for.inc43, %if.then26
  %33 = load i8*, i8** %p, align 8
  %34 = load i8*, i8** %lim.addr, align 8
  %cmp28 = icmp ult i8* %33, %34
  br i1 %cmp28, label %for.body30, label %for.end45

for.body30:                                       ; preds = %for.cond27
  %35 = load i8*, i8** %p, align 8
  %36 = load i8*, i8** %lim.addr, align 8
  %37 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast31 = ptrtoint i8* %36 to i64
  %sub.ptr.rhs.cast32 = ptrtoint i8* %37 to i64
  %sub.ptr.sub33 = sub i64 %sub.ptr.lhs.cast31, %sub.ptr.rhs.cast32
  %call34 = call i8* @memchr(i8* %35, i32 10, i64 %sub.ptr.sub33) #11
  store i8* %call34, i8** %nl, align 8
  %cmp35 = icmp ne i8* %call34, null
  br i1 %cmp35, label %if.then37, label %if.else

if.then37:                                        ; preds = %for.body30
  %38 = load i8*, i8** %nl, align 8
  %incdec.ptr38 = getelementptr inbounds i8, i8* %38, i32 1
  store i8* %incdec.ptr38, i8** %nl, align 8
  br label %if.end39

if.else:                                          ; preds = %for.body30
  %39 = load i8*, i8** %lim.addr, align 8
  store i8* %39, i8** %nl, align 8
  br label %if.end39

if.end39:                                         ; preds = %if.else, %if.then37
  %40 = load i32, i32* @out_quiet, align 4
  %tobool40 = icmp ne i32 %40, 0
  br i1 %tobool40, label %if.end42, label %if.then41

if.then41:                                        ; preds = %if.end39
  %41 = load i8*, i8** %p, align 8
  %42 = load i8*, i8** %nl, align 8
  call void @prline(i8* %41, i8* %42, i32 58)
  br label %if.end42

if.end42:                                         ; preds = %if.then41, %if.end39
  %43 = load i8*, i8** %nl, align 8
  store i8* %43, i8** %p, align 8
  br label %for.inc43

for.inc43:                                        ; preds = %if.end42
  %44 = load i32, i32* %n, align 4
  %inc44 = add nsw i32 %44, 1
  store i32 %inc44, i32* %n, align 4
  br label %for.cond27, !llvm.loop !203

for.end45:                                        ; preds = %for.cond27
  %45 = load i32, i32* %n, align 4
  %46 = load i32*, i32** %nlinesp.addr, align 8
  store i32 %45, i32* %46, align 4
  br label %if.end50

if.else46:                                        ; preds = %if.end24
  %47 = load i32, i32* @out_quiet, align 4
  %tobool47 = icmp ne i32 %47, 0
  br i1 %tobool47, label %if.end49, label %if.then48

if.then48:                                        ; preds = %if.else46
  %48 = load i8*, i8** %beg.addr, align 8
  %49 = load i8*, i8** %lim.addr, align 8
  call void @prline(i8* %48, i8* %49, i32 58)
  br label %if.end49

if.end49:                                         ; preds = %if.then48, %if.else46
  br label %if.end50

if.end50:                                         ; preds = %if.end49, %for.end45
  %50 = load i32, i32* @out_after, align 4
  store i32 %50, i32* @pending, align 4
  store i32 1, i32* @prtext.used, align 4
  ret void
}

declare dso_local i32 @puts(i8*) #5

; Function Attrs: nocallback nounwind readonly willreturn
declare dso_local i8* @memchr(i8*, i32, i64) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal void @prline(i8* %beg, i8* %lim, i32 %0) #0 {
entry:
  %beg.addr = alloca i8*, align 8
  %lim.addr = alloca i8*, align 8
  %sep.addr = alloca i8, align 1
  %sep = trunc i32 %0 to i8
  store i8* %beg, i8** %beg.addr, align 8
  store i8* %lim, i8** %lim.addr, align 8
  store i8 %sep, i8* %sep.addr, align 1
  %1 = load i32, i32* @out_file, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** @filename, align 8
  %3 = load i8, i8* %sep.addr, align 1
  %conv = sext i8 %3 to i32
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.30, i64 0, i64 0), i8* %2, i32 %conv)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* @out_line, align 4
  %tobool1 = icmp ne i32 %4, 0
  br i1 %tobool1, label %if.then2, label %if.end5

if.then2:                                         ; preds = %if.end
  %5 = load i8*, i8** %beg.addr, align 8
  call void @nlscan(i8* %5)
  %6 = load i64, i64* @totalnl, align 8
  %inc = add i64 %6, 1
  store i64 %inc, i64* @totalnl, align 8
  %7 = load i8, i8* %sep.addr, align 1
  %conv3 = sext i8 %7 to i32
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.31, i64 0, i64 0), i64 %inc, i32 %conv3)
  %8 = load i8*, i8** %lim.addr, align 8
  store i8* %8, i8** @lastnl, align 8
  br label %if.end5

if.end5:                                          ; preds = %if.then2, %if.end
  %9 = load i32, i32* @out_byte, align 4
  %tobool6 = icmp ne i32 %9, 0
  br i1 %tobool6, label %if.then7, label %if.end10

if.then7:                                         ; preds = %if.end5
  %10 = load i64, i64* @totalcc, align 8
  %11 = load i8*, i8** %beg.addr, align 8
  %12 = load i8*, i8** @bufbeg, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %11 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %12 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %add = add i64 %10, %sub.ptr.sub
  %13 = load i8, i8* %sep.addr, align 1
  %conv8 = sext i8 %13 to i32
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.32, i64 0, i64 0), i64 %add, i32 %conv8)
  br label %if.end10

if.end10:                                         ; preds = %if.then7, %if.end5
  %14 = load i8*, i8** %beg.addr, align 8
  %15 = load i8*, i8** %lim.addr, align 8
  %16 = load i8*, i8** %beg.addr, align 8
  %sub.ptr.lhs.cast11 = ptrtoint i8* %15 to i64
  %sub.ptr.rhs.cast12 = ptrtoint i8* %16 to i64
  %sub.ptr.sub13 = sub i64 %sub.ptr.lhs.cast11, %sub.ptr.rhs.cast12
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %call14 = call i64 @fwrite(i8* %14, i64 1, i64 %sub.ptr.sub13, %struct._IO_FILE* %17)
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %call15 = call i32 @ferror(%struct._IO_FILE* %18) #9
  %tobool16 = icmp ne i32 %call15, 0
  br i1 %tobool16, label %if.then17, label %if.end19

if.then17:                                        ; preds = %if.end10
  %call18 = call i32* @__errno_location() #10
  %19 = load i32, i32* %call18, align 4
  call void @error(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.33, i64 0, i64 0), i32 %19)
  br label %if.end19

if.end19:                                         ; preds = %if.then17, %if.end10
  %20 = load i8*, i8** %lim.addr, align 8
  store i8* %20, i8** @lastout, align 8
  ret void
}

declare dso_local i64 @fwrite(i8*, i64, i64, %struct._IO_FILE*) #5

; Function Attrs: nocallback nounwind
declare dso_local i32 @ferror(%struct._IO_FILE*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal signext i8 @group_match_null_string_p(i8** %p, i8* %end, %union.register_info_type* %reg_info) #0 {
entry:
  %retval = alloca i8, align 1
  %p.addr = alloca i8**, align 8
  %end.addr = alloca i8*, align 8
  %reg_info.addr = alloca %union.register_info_type*, align 8
  %mcnt = alloca i32, align 4
  %p1 = alloca i8*, align 8
  store i8** %p, i8*** %p.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store %union.register_info_type* %reg_info, %union.register_info_type** %reg_info.addr, align 8
  %0 = load i8**, i8*** %p.addr, align 8
  %1 = load i8*, i8** %0, align 8
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 2
  store i8* %add.ptr, i8** %p1, align 8
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog, %entry
  %2 = load i8*, i8** %p1, align 8
  %3 = load i8*, i8** %end.addr, align 8
  %cmp = icmp ult i8* %2, %3
  br i1 %cmp, label %while.body, label %while.end70

while.body:                                       ; preds = %while.cond
  %4 = load i8*, i8** %p1, align 8
  %5 = load i8, i8* %4, align 1
  %conv = zext i8 %5 to i32
  switch i32 %conv, label %sw.default [
    i32 14, label %sw.bb
    i32 6, label %sw.bb64
  ]

sw.bb:                                            ; preds = %while.body
  %6 = load i8*, i8** %p1, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr, i8** %p1, align 8
  br label %do.body

do.body:                                          ; preds = %sw.bb
  br label %do.body1

do.body1:                                         ; preds = %do.body
  %7 = load i8*, i8** %p1, align 8
  %8 = load i8, i8* %7, align 1
  %conv2 = zext i8 %8 to i32
  %and = and i32 %conv2, 255
  store i32 %and, i32* %mcnt, align 4
  %9 = load i8*, i8** %p1, align 8
  %add.ptr3 = getelementptr inbounds i8, i8* %9, i64 1
  %10 = load i8, i8* %add.ptr3, align 1
  %conv4 = sext i8 %10 to i32
  %shl = shl i32 %conv4, 8
  %11 = load i32, i32* %mcnt, align 4
  %add = add nsw i32 %11, %shl
  store i32 %add, i32* %mcnt, align 4
  br label %do.end

do.end:                                           ; preds = %do.body1
  %12 = load i8*, i8** %p1, align 8
  %add.ptr5 = getelementptr inbounds i8, i8* %12, i64 2
  store i8* %add.ptr5, i8** %p1, align 8
  br label %do.end6

do.end6:                                          ; preds = %do.end
  %13 = load i32, i32* %mcnt, align 4
  %cmp7 = icmp sge i32 %13, 0
  br i1 %cmp7, label %if.then, label %if.end63

if.then:                                          ; preds = %do.end6
  br label %while.cond9

while.cond9:                                      ; preds = %if.end44, %if.then
  %14 = load i8*, i8** %p1, align 8
  %15 = load i32, i32* %mcnt, align 4
  %sub = sub nsw i32 %15, 3
  %idxprom = sext i32 %sub to i64
  %arrayidx = getelementptr inbounds i8, i8* %14, i64 %idxprom
  %16 = load i8, i8* %arrayidx, align 1
  %conv10 = zext i8 %16 to i32
  %cmp11 = icmp eq i32 %conv10, 13
  br i1 %cmp11, label %while.body13, label %while.end

while.body13:                                     ; preds = %while.cond9
  %17 = load i8*, i8** %p1, align 8
  %18 = load i8*, i8** %p1, align 8
  %19 = load i32, i32* %mcnt, align 4
  %idx.ext = sext i32 %19 to i64
  %add.ptr14 = getelementptr inbounds i8, i8* %18, i64 %idx.ext
  %add.ptr15 = getelementptr inbounds i8, i8* %add.ptr14, i64 -3
  %20 = load %union.register_info_type*, %union.register_info_type** %reg_info.addr, align 8
  %call = call signext i8 @alt_match_null_string_p(i8* %17, i8* %add.ptr15, %union.register_info_type* %20)
  %tobool = icmp ne i8 %call, 0
  br i1 %tobool, label %if.end, label %if.then16

if.then16:                                        ; preds = %while.body13
  store i8 0, i8* %retval, align 1
  br label %return

if.end:                                           ; preds = %while.body13
  %21 = load i32, i32* %mcnt, align 4
  %22 = load i8*, i8** %p1, align 8
  %idx.ext17 = sext i32 %21 to i64
  %add.ptr18 = getelementptr inbounds i8, i8* %22, i64 %idx.ext17
  store i8* %add.ptr18, i8** %p1, align 8
  %23 = load i8*, i8** %p1, align 8
  %24 = load i8, i8* %23, align 1
  %conv19 = zext i8 %24 to i32
  %cmp20 = icmp ne i32 %conv19, 14
  br i1 %cmp20, label %if.then22, label %if.end23

if.then22:                                        ; preds = %if.end
  br label %while.end

if.end23:                                         ; preds = %if.end
  %25 = load i8*, i8** %p1, align 8
  %incdec.ptr24 = getelementptr inbounds i8, i8* %25, i32 1
  store i8* %incdec.ptr24, i8** %p1, align 8
  br label %do.body25

do.body25:                                        ; preds = %if.end23
  br label %do.body26

do.body26:                                        ; preds = %do.body25
  %26 = load i8*, i8** %p1, align 8
  %27 = load i8, i8* %26, align 1
  %conv27 = zext i8 %27 to i32
  %and28 = and i32 %conv27, 255
  store i32 %and28, i32* %mcnt, align 4
  %28 = load i8*, i8** %p1, align 8
  %add.ptr29 = getelementptr inbounds i8, i8* %28, i64 1
  %29 = load i8, i8* %add.ptr29, align 1
  %conv30 = sext i8 %29 to i32
  %shl31 = shl i32 %conv30, 8
  %30 = load i32, i32* %mcnt, align 4
  %add32 = add nsw i32 %30, %shl31
  store i32 %add32, i32* %mcnt, align 4
  br label %do.end33

do.end33:                                         ; preds = %do.body26
  %31 = load i8*, i8** %p1, align 8
  %add.ptr34 = getelementptr inbounds i8, i8* %31, i64 2
  store i8* %add.ptr34, i8** %p1, align 8
  br label %do.end35

do.end35:                                         ; preds = %do.end33
  %32 = load i8*, i8** %p1, align 8
  %33 = load i32, i32* %mcnt, align 4
  %sub36 = sub nsw i32 %33, 3
  %idxprom37 = sext i32 %sub36 to i64
  %arrayidx38 = getelementptr inbounds i8, i8* %32, i64 %idxprom37
  %34 = load i8, i8* %arrayidx38, align 1
  %conv39 = zext i8 %34 to i32
  %cmp40 = icmp ne i32 %conv39, 13
  br i1 %cmp40, label %if.then42, label %if.end44

if.then42:                                        ; preds = %do.end35
  %35 = load i8*, i8** %p1, align 8
  %add.ptr43 = getelementptr inbounds i8, i8* %35, i64 -3
  store i8* %add.ptr43, i8** %p1, align 8
  br label %while.end

if.end44:                                         ; preds = %do.end35
  br label %while.cond9, !llvm.loop !204

while.end:                                        ; preds = %if.then42, %if.then22, %while.cond9
  br label %do.body45

do.body45:                                        ; preds = %while.end
  %36 = load i8*, i8** %p1, align 8
  %add.ptr46 = getelementptr inbounds i8, i8* %36, i64 -2
  %37 = load i8, i8* %add.ptr46, align 1
  %conv47 = zext i8 %37 to i32
  %and48 = and i32 %conv47, 255
  store i32 %and48, i32* %mcnt, align 4
  %38 = load i8*, i8** %p1, align 8
  %add.ptr49 = getelementptr inbounds i8, i8* %38, i64 -2
  %add.ptr50 = getelementptr inbounds i8, i8* %add.ptr49, i64 1
  %39 = load i8, i8* %add.ptr50, align 1
  %conv51 = sext i8 %39 to i32
  %shl52 = shl i32 %conv51, 8
  %40 = load i32, i32* %mcnt, align 4
  %add53 = add nsw i32 %40, %shl52
  store i32 %add53, i32* %mcnt, align 4
  br label %do.end54

do.end54:                                         ; preds = %do.body45
  %41 = load i8*, i8** %p1, align 8
  %42 = load i8*, i8** %p1, align 8
  %43 = load i32, i32* %mcnt, align 4
  %idx.ext55 = sext i32 %43 to i64
  %add.ptr56 = getelementptr inbounds i8, i8* %42, i64 %idx.ext55
  %44 = load %union.register_info_type*, %union.register_info_type** %reg_info.addr, align 8
  %call57 = call signext i8 @alt_match_null_string_p(i8* %41, i8* %add.ptr56, %union.register_info_type* %44)
  %tobool58 = icmp ne i8 %call57, 0
  br i1 %tobool58, label %if.end60, label %if.then59

if.then59:                                        ; preds = %do.end54
  store i8 0, i8* %retval, align 1
  br label %return

if.end60:                                         ; preds = %do.end54
  %45 = load i32, i32* %mcnt, align 4
  %46 = load i8*, i8** %p1, align 8
  %idx.ext61 = sext i32 %45 to i64
  %add.ptr62 = getelementptr inbounds i8, i8* %46, i64 %idx.ext61
  store i8* %add.ptr62, i8** %p1, align 8
  br label %if.end63

if.end63:                                         ; preds = %if.end60, %do.end6
  br label %sw.epilog

sw.bb64:                                          ; preds = %while.body
  %47 = load i8*, i8** %p1, align 8
  %add.ptr65 = getelementptr inbounds i8, i8* %47, i64 2
  %48 = load i8**, i8*** %p.addr, align 8
  store i8* %add.ptr65, i8** %48, align 8
  store i8 1, i8* %retval, align 1
  br label %return

sw.default:                                       ; preds = %while.body
  %49 = load i8*, i8** %end.addr, align 8
  %50 = load %union.register_info_type*, %union.register_info_type** %reg_info.addr, align 8
  %call66 = call signext i8 @common_op_match_null_string_p(i8** %p1, i8* %49, %union.register_info_type* %50)
  %tobool67 = icmp ne i8 %call66, 0
  br i1 %tobool67, label %if.end69, label %if.then68

if.then68:                                        ; preds = %sw.default
  store i8 0, i8* %retval, align 1
  br label %return

if.end69:                                         ; preds = %sw.default
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end69, %if.end63
  br label %while.cond, !llvm.loop !205

while.end70:                                      ; preds = %while.cond
  store i8 0, i8* %retval, align 1
  br label %return

return:                                           ; preds = %while.end70, %if.then68, %sw.bb64, %if.then59, %if.then16
  %51 = load i8, i8* %retval, align 1
  ret i8 %51
}

; Function Attrs: noinline nounwind optnone uwtable
define internal signext i8 @alt_match_null_string_p(i8* %p, i8* %end, %union.register_info_type* %reg_info) #0 {
entry:
  %retval = alloca i8, align 1
  %p.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %reg_info.addr = alloca %union.register_info_type*, align 8
  %mcnt = alloca i32, align 4
  %p1 = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store %union.register_info_type* %reg_info, %union.register_info_type** %reg_info.addr, align 8
  %0 = load i8*, i8** %p.addr, align 8
  store i8* %0, i8** %p1, align 8
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog, %entry
  %1 = load i8*, i8** %p1, align 8
  %2 = load i8*, i8** %end.addr, align 8
  %cmp = icmp ult i8* %1, %2
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i8*, i8** %p1, align 8
  %4 = load i8, i8* %3, align 1
  %conv = zext i8 %4 to i32
  switch i32 %conv, label %sw.default [
    i32 14, label %sw.bb
  ]

sw.bb:                                            ; preds = %while.body
  %5 = load i8*, i8** %p1, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %5, i32 1
  store i8* %incdec.ptr, i8** %p1, align 8
  br label %do.body

do.body:                                          ; preds = %sw.bb
  br label %do.body1

do.body1:                                         ; preds = %do.body
  %6 = load i8*, i8** %p1, align 8
  %7 = load i8, i8* %6, align 1
  %conv2 = zext i8 %7 to i32
  %and = and i32 %conv2, 255
  store i32 %and, i32* %mcnt, align 4
  %8 = load i8*, i8** %p1, align 8
  %add.ptr = getelementptr inbounds i8, i8* %8, i64 1
  %9 = load i8, i8* %add.ptr, align 1
  %conv3 = sext i8 %9 to i32
  %shl = shl i32 %conv3, 8
  %10 = load i32, i32* %mcnt, align 4
  %add = add nsw i32 %10, %shl
  store i32 %add, i32* %mcnt, align 4
  br label %do.end

do.end:                                           ; preds = %do.body1
  %11 = load i8*, i8** %p1, align 8
  %add.ptr4 = getelementptr inbounds i8, i8* %11, i64 2
  store i8* %add.ptr4, i8** %p1, align 8
  br label %do.end5

do.end5:                                          ; preds = %do.end
  %12 = load i32, i32* %mcnt, align 4
  %13 = load i8*, i8** %p1, align 8
  %idx.ext = sext i32 %12 to i64
  %add.ptr6 = getelementptr inbounds i8, i8* %13, i64 %idx.ext
  store i8* %add.ptr6, i8** %p1, align 8
  br label %sw.epilog

sw.default:                                       ; preds = %while.body
  %14 = load i8*, i8** %end.addr, align 8
  %15 = load %union.register_info_type*, %union.register_info_type** %reg_info.addr, align 8
  %call = call signext i8 @common_op_match_null_string_p(i8** %p1, i8* %14, %union.register_info_type* %15)
  %tobool = icmp ne i8 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %sw.default
  store i8 0, i8* %retval, align 1
  br label %return

if.end:                                           ; preds = %sw.default
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end, %do.end5
  br label %while.cond, !llvm.loop !206

while.end:                                        ; preds = %while.cond
  store i8 1, i8* %retval, align 1
  br label %return

return:                                           ; preds = %while.end, %if.then
  %16 = load i8, i8* %retval, align 1
  ret i8 %16
}

; Function Attrs: noinline nounwind optnone uwtable
define internal signext i8 @common_op_match_null_string_p(i8** %p, i8* %end, %union.register_info_type* %reg_info) #0 {
entry:
  %retval = alloca i8, align 1
  %p.addr = alloca i8**, align 8
  %end.addr = alloca i8*, align 8
  %reg_info.addr = alloca %union.register_info_type*, align 8
  %mcnt = alloca i32, align 4
  %ret = alloca i8, align 1
  %reg_no = alloca i32, align 4
  %p1 = alloca i8*, align 8
  store i8** %p, i8*** %p.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store %union.register_info_type* %reg_info, %union.register_info_type** %reg_info.addr, align 8
  %0 = load i8**, i8*** %p.addr, align 8
  %1 = load i8*, i8** %0, align 8
  store i8* %1, i8** %p1, align 8
  %2 = load i8*, i8** %p1, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %2, i32 1
  store i8* %incdec.ptr, i8** %p1, align 8
  %3 = load i8, i8* %2, align 1
  %conv = zext i8 %3 to i32
  switch i32 %conv, label %sw.default [
    i32 0, label %sw.bb
    i32 8, label %sw.bb
    i32 9, label %sw.bb
    i32 10, label %sw.bb
    i32 11, label %sw.bb
    i32 25, label %sw.bb
    i32 26, label %sw.bb
    i32 27, label %sw.bb
    i32 28, label %sw.bb
    i32 5, label %sw.bb1
    i32 12, label %sw.bb12
    i32 20, label %sw.bb23
    i32 7, label %sw.bb55
    i32 22, label %sw.bb65
  ]

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  br label %sw.epilog

sw.bb1:                                           ; preds = %entry
  %4 = load i8*, i8** %p1, align 8
  %5 = load i8, i8* %4, align 1
  %conv2 = zext i8 %5 to i32
  store i32 %conv2, i32* %reg_no, align 4
  %6 = load i8*, i8** %end.addr, align 8
  %7 = load %union.register_info_type*, %union.register_info_type** %reg_info.addr, align 8
  %call = call signext i8 @group_match_null_string_p(i8** %p1, i8* %6, %union.register_info_type* %7)
  store i8 %call, i8* %ret, align 1
  %8 = load %union.register_info_type*, %union.register_info_type** %reg_info.addr, align 8
  %9 = load i32, i32* %reg_no, align 4
  %idxprom = sext i32 %9 to i64
  %arrayidx = getelementptr inbounds %union.register_info_type, %union.register_info_type* %8, i64 %idxprom
  %bits = bitcast %union.register_info_type* %arrayidx to %struct.anon*
  %10 = bitcast %struct.anon* %bits to i8*
  %bf.load = load i8, i8* %10, align 8
  %bf.clear = and i8 %bf.load, 3
  %bf.cast = zext i8 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %sw.bb1
  %11 = load i8, i8* %ret, align 1
  %conv4 = sext i8 %11 to i32
  %12 = load %union.register_info_type*, %union.register_info_type** %reg_info.addr, align 8
  %13 = load i32, i32* %reg_no, align 4
  %idxprom5 = sext i32 %13 to i64
  %arrayidx6 = getelementptr inbounds %union.register_info_type, %union.register_info_type* %12, i64 %idxprom5
  %bits7 = bitcast %union.register_info_type* %arrayidx6 to %struct.anon*
  %14 = bitcast %struct.anon* %bits7 to i8*
  %15 = trunc i32 %conv4 to i8
  %bf.load8 = load i8, i8* %14, align 8
  %bf.value = and i8 %15, 3
  %bf.clear9 = and i8 %bf.load8, -4
  %bf.set = or i8 %bf.clear9, %bf.value
  store i8 %bf.set, i8* %14, align 8
  %bf.result.cast = zext i8 %bf.value to i32
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.bb1
  %16 = load i8, i8* %ret, align 1
  %tobool = icmp ne i8 %16, 0
  br i1 %tobool, label %if.end11, label %if.then10

if.then10:                                        ; preds = %if.end
  store i8 0, i8* %retval, align 1
  br label %return

if.end11:                                         ; preds = %if.end
  br label %sw.epilog

sw.bb12:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %sw.bb12
  br label %do.body13

do.body13:                                        ; preds = %do.body
  %17 = load i8*, i8** %p1, align 8
  %18 = load i8, i8* %17, align 1
  %conv14 = zext i8 %18 to i32
  %and = and i32 %conv14, 255
  store i32 %and, i32* %mcnt, align 4
  %19 = load i8*, i8** %p1, align 8
  %add.ptr = getelementptr inbounds i8, i8* %19, i64 1
  %20 = load i8, i8* %add.ptr, align 1
  %conv15 = sext i8 %20 to i32
  %shl = shl i32 %conv15, 8
  %21 = load i32, i32* %mcnt, align 4
  %add = add nsw i32 %21, %shl
  store i32 %add, i32* %mcnt, align 4
  br label %do.end

do.end:                                           ; preds = %do.body13
  %22 = load i8*, i8** %p1, align 8
  %add.ptr16 = getelementptr inbounds i8, i8* %22, i64 2
  store i8* %add.ptr16, i8** %p1, align 8
  br label %do.end17

do.end17:                                         ; preds = %do.end
  %23 = load i32, i32* %mcnt, align 4
  %cmp18 = icmp sge i32 %23, 0
  br i1 %cmp18, label %if.then20, label %if.else

if.then20:                                        ; preds = %do.end17
  %24 = load i32, i32* %mcnt, align 4
  %25 = load i8*, i8** %p1, align 8
  %idx.ext = sext i32 %24 to i64
  %add.ptr21 = getelementptr inbounds i8, i8* %25, i64 %idx.ext
  store i8* %add.ptr21, i8** %p1, align 8
  br label %if.end22

if.else:                                          ; preds = %do.end17
  store i8 0, i8* %retval, align 1
  br label %return

if.end22:                                         ; preds = %if.then20
  br label %sw.epilog

sw.bb23:                                          ; preds = %entry
  %26 = load i8*, i8** %p1, align 8
  %add.ptr24 = getelementptr inbounds i8, i8* %26, i64 2
  store i8* %add.ptr24, i8** %p1, align 8
  br label %do.body25

do.body25:                                        ; preds = %sw.bb23
  br label %do.body26

do.body26:                                        ; preds = %do.body25
  %27 = load i8*, i8** %p1, align 8
  %28 = load i8, i8* %27, align 1
  %conv27 = zext i8 %28 to i32
  %and28 = and i32 %conv27, 255
  store i32 %and28, i32* %mcnt, align 4
  %29 = load i8*, i8** %p1, align 8
  %add.ptr29 = getelementptr inbounds i8, i8* %29, i64 1
  %30 = load i8, i8* %add.ptr29, align 1
  %conv30 = sext i8 %30 to i32
  %shl31 = shl i32 %conv30, 8
  %31 = load i32, i32* %mcnt, align 4
  %add32 = add nsw i32 %31, %shl31
  store i32 %add32, i32* %mcnt, align 4
  br label %do.end33

do.end33:                                         ; preds = %do.body26
  %32 = load i8*, i8** %p1, align 8
  %add.ptr34 = getelementptr inbounds i8, i8* %32, i64 2
  store i8* %add.ptr34, i8** %p1, align 8
  br label %do.end35

do.end35:                                         ; preds = %do.end33
  %33 = load i32, i32* %mcnt, align 4
  %cmp36 = icmp eq i32 %33, 0
  br i1 %cmp36, label %if.then38, label %if.else53

if.then38:                                        ; preds = %do.end35
  %34 = load i8*, i8** %p1, align 8
  %add.ptr39 = getelementptr inbounds i8, i8* %34, i64 -4
  store i8* %add.ptr39, i8** %p1, align 8
  br label %do.body40

do.body40:                                        ; preds = %if.then38
  br label %do.body41

do.body41:                                        ; preds = %do.body40
  %35 = load i8*, i8** %p1, align 8
  %36 = load i8, i8* %35, align 1
  %conv42 = zext i8 %36 to i32
  %and43 = and i32 %conv42, 255
  store i32 %and43, i32* %mcnt, align 4
  %37 = load i8*, i8** %p1, align 8
  %add.ptr44 = getelementptr inbounds i8, i8* %37, i64 1
  %38 = load i8, i8* %add.ptr44, align 1
  %conv45 = sext i8 %38 to i32
  %shl46 = shl i32 %conv45, 8
  %39 = load i32, i32* %mcnt, align 4
  %add47 = add nsw i32 %39, %shl46
  store i32 %add47, i32* %mcnt, align 4
  br label %do.end48

do.end48:                                         ; preds = %do.body41
  %40 = load i8*, i8** %p1, align 8
  %add.ptr49 = getelementptr inbounds i8, i8* %40, i64 2
  store i8* %add.ptr49, i8** %p1, align 8
  br label %do.end50

do.end50:                                         ; preds = %do.end48
  %41 = load i32, i32* %mcnt, align 4
  %42 = load i8*, i8** %p1, align 8
  %idx.ext51 = sext i32 %41 to i64
  %add.ptr52 = getelementptr inbounds i8, i8* %42, i64 %idx.ext51
  store i8* %add.ptr52, i8** %p1, align 8
  br label %if.end54

if.else53:                                        ; preds = %do.end35
  store i8 0, i8* %retval, align 1
  br label %return

if.end54:                                         ; preds = %do.end50
  br label %sw.epilog

sw.bb55:                                          ; preds = %entry
  %43 = load %union.register_info_type*, %union.register_info_type** %reg_info.addr, align 8
  %44 = load i8*, i8** %p1, align 8
  %45 = load i8, i8* %44, align 1
  %idxprom56 = zext i8 %45 to i64
  %arrayidx57 = getelementptr inbounds %union.register_info_type, %union.register_info_type* %43, i64 %idxprom56
  %bits58 = bitcast %union.register_info_type* %arrayidx57 to %struct.anon*
  %46 = bitcast %struct.anon* %bits58 to i8*
  %bf.load59 = load i8, i8* %46, align 8
  %bf.clear60 = and i8 %bf.load59, 3
  %bf.cast61 = zext i8 %bf.clear60 to i32
  %tobool62 = icmp ne i32 %bf.cast61, 0
  br i1 %tobool62, label %if.end64, label %if.then63

if.then63:                                        ; preds = %sw.bb55
  store i8 0, i8* %retval, align 1
  br label %return

if.end64:                                         ; preds = %sw.bb55
  br label %sw.epilog

sw.bb65:                                          ; preds = %entry
  %47 = load i8*, i8** %p1, align 8
  %add.ptr66 = getelementptr inbounds i8, i8* %47, i64 4
  store i8* %add.ptr66, i8** %p1, align 8
  br label %sw.default

sw.default:                                       ; preds = %entry, %sw.bb65
  store i8 0, i8* %retval, align 1
  br label %return

sw.epilog:                                        ; preds = %if.end64, %if.end54, %if.end22, %if.end11, %sw.bb
  %48 = load i8*, i8** %p1, align 8
  %49 = load i8**, i8*** %p.addr, align 8
  store i8* %48, i8** %49, align 8
  store i8 1, i8* %retval, align 1
  br label %return

return:                                           ; preds = %sw.epilog, %sw.default, %if.then63, %if.else53, %if.else, %if.then10
  %50 = load i8, i8* %retval, align 1
  ret i8 %50
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @bcmp_translate(i8* %s1, i8* %s2, i32 %len, i8* %translate) #0 {
entry:
  %retval = alloca i32, align 4
  %s1.addr = alloca i8*, align 8
  %s2.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %translate.addr = alloca i8*, align 8
  %p1 = alloca i8*, align 8
  %p2 = alloca i8*, align 8
  store i8* %s1, i8** %s1.addr, align 8
  store i8* %s2, i8** %s2.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  store i8* %translate, i8** %translate.addr, align 8
  %0 = load i8*, i8** %s1.addr, align 8
  store i8* %0, i8** %p1, align 8
  %1 = load i8*, i8** %s2.addr, align 8
  store i8* %1, i8** %p2, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %2 = load i32, i32* %len.addr, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i8*, i8** %translate.addr, align 8
  %4 = load i8*, i8** %p1, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 1
  store i8* %incdec.ptr, i8** %p1, align 8
  %5 = load i8, i8* %4, align 1
  %idxprom = zext i8 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %3, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %6 to i32
  %7 = load i8*, i8** %translate.addr, align 8
  %8 = load i8*, i8** %p2, align 8
  %incdec.ptr1 = getelementptr inbounds i8, i8* %8, i32 1
  store i8* %incdec.ptr1, i8** %p2, align 8
  %9 = load i8, i8* %8, align 1
  %idxprom2 = zext i8 %9 to i64
  %arrayidx3 = getelementptr inbounds i8, i8* %7, i64 %idxprom2
  %10 = load i8, i8* %arrayidx3, align 1
  %conv4 = sext i8 %10 to i32
  %cmp = icmp ne i32 %conv, %conv4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %while.body
  %11 = load i32, i32* %len.addr, align 4
  %dec = add nsw i32 %11, -1
  store i32 %dec, i32* %len.addr, align 4
  br label %while.cond, !llvm.loop !207

while.end:                                        ; preds = %while.cond
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then
  %12 = load i32, i32* %retval, align 4
  ret i32 %12
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @init_syntax_once() #0 {
entry:
  %c = alloca i32, align 4
  %0 = load i32, i32* @init_syntax_once.done, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  call void @llvm.memset.p0i8.i64(i8* align 16 getelementptr inbounds ([256 x i8], [256 x i8]* @re_syntax_table, i64 0, i64 0), i8 0, i64 256, i1 false)
  store i32 97, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load i32, i32* %c, align 4
  %cmp = icmp sle i32 %1, 122
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %c, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* @re_syntax_table, i64 0, i64 %idxprom
  store i8 1, i8* %arrayidx, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %3 = load i32, i32* %c, align 4
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %c, align 4
  br label %for.cond, !llvm.loop !208

for.end:                                          ; preds = %for.cond
  store i32 65, i32* %c, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc6, %for.end
  %4 = load i32, i32* %c, align 4
  %cmp2 = icmp sle i32 %4, 90
  br i1 %cmp2, label %for.body3, label %for.end8

for.body3:                                        ; preds = %for.cond1
  %5 = load i32, i32* %c, align 4
  %idxprom4 = sext i32 %5 to i64
  %arrayidx5 = getelementptr inbounds [256 x i8], [256 x i8]* @re_syntax_table, i64 0, i64 %idxprom4
  store i8 1, i8* %arrayidx5, align 1
  br label %for.inc6

for.inc6:                                         ; preds = %for.body3
  %6 = load i32, i32* %c, align 4
  %inc7 = add nsw i32 %6, 1
  store i32 %inc7, i32* %c, align 4
  br label %for.cond1, !llvm.loop !209

for.end8:                                         ; preds = %for.cond1
  store i32 48, i32* %c, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc14, %for.end8
  %7 = load i32, i32* %c, align 4
  %cmp10 = icmp sle i32 %7, 57
  br i1 %cmp10, label %for.body11, label %for.end16

for.body11:                                       ; preds = %for.cond9
  %8 = load i32, i32* %c, align 4
  %idxprom12 = sext i32 %8 to i64
  %arrayidx13 = getelementptr inbounds [256 x i8], [256 x i8]* @re_syntax_table, i64 0, i64 %idxprom12
  store i8 1, i8* %arrayidx13, align 1
  br label %for.inc14

for.inc14:                                        ; preds = %for.body11
  %9 = load i32, i32* %c, align 4
  %inc15 = add nsw i32 %9, 1
  store i32 %inc15, i32* %c, align 4
  br label %for.cond9, !llvm.loop !210

for.end16:                                        ; preds = %for.cond9
  store i8 1, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @re_syntax_table, i64 0, i64 95), align 1
  store i32 1, i32* @init_syntax_once.done, align 4
  br label %return

return:                                           ; preds = %for.end16, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal signext i8 @at_begline_loc_p(i8* %pattern, i8* %p, i32 %syntax) #0 {
entry:
  %pattern.addr = alloca i8*, align 8
  %p.addr = alloca i8*, align 8
  %syntax.addr = alloca i32, align 4
  %prev = alloca i8*, align 8
  %prev_prev_backslash = alloca i8, align 1
  store i8* %pattern, i8** %pattern.addr, align 8
  store i8* %p, i8** %p.addr, align 8
  store i32 %syntax, i32* %syntax.addr, align 4
  %0 = load i8*, i8** %p.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 -2
  store i8* %add.ptr, i8** %prev, align 8
  %1 = load i8*, i8** %prev, align 8
  %2 = load i8*, i8** %pattern.addr, align 8
  %cmp = icmp ugt i8* %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load i8*, i8** %prev, align 8
  %arrayidx = getelementptr inbounds i8, i8* %3, i64 -1
  %4 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %4 to i32
  %cmp1 = icmp eq i32 %conv, 92
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %5 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  %land.ext = zext i1 %5 to i32
  %conv3 = trunc i32 %land.ext to i8
  store i8 %conv3, i8* %prev_prev_backslash, align 1
  %6 = load i8*, i8** %prev, align 8
  %7 = load i8, i8* %6, align 1
  %conv4 = sext i8 %7 to i32
  %cmp5 = icmp eq i32 %conv4, 40
  br i1 %cmp5, label %land.lhs.true, label %lor.rhs

land.lhs.true:                                    ; preds = %land.end
  %8 = load i32, i32* %syntax.addr, align 4
  %and = and i32 %8, 8192
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %lor.end20, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %9 = load i8, i8* %prev_prev_backslash, align 1
  %conv7 = sext i8 %9 to i32
  %tobool8 = icmp ne i32 %conv7, 0
  br i1 %tobool8, label %lor.end20, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false, %land.end
  %10 = load i8*, i8** %prev, align 8
  %11 = load i8, i8* %10, align 1
  %conv9 = sext i8 %11 to i32
  %cmp10 = icmp eq i32 %conv9, 124
  br i1 %cmp10, label %land.rhs12, label %land.end18

land.rhs12:                                       ; preds = %lor.rhs
  %12 = load i32, i32* %syntax.addr, align 4
  %and13 = and i32 %12, 32768
  %tobool14 = icmp ne i32 %and13, 0
  br i1 %tobool14, label %lor.end, label %lor.rhs15

lor.rhs15:                                        ; preds = %land.rhs12
  %13 = load i8, i8* %prev_prev_backslash, align 1
  %conv16 = sext i8 %13 to i32
  %tobool17 = icmp ne i32 %conv16, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs15, %land.rhs12
  %14 = phi i1 [ true, %land.rhs12 ], [ %tobool17, %lor.rhs15 ]
  br label %land.end18

land.end18:                                       ; preds = %lor.end, %lor.rhs
  %15 = phi i1 [ false, %lor.rhs ], [ %14, %lor.end ]
  br label %lor.end20

lor.end20:                                        ; preds = %land.end18, %lor.lhs.false, %land.lhs.true
  %16 = phi i1 [ true, %lor.lhs.false ], [ true, %land.lhs.true ], [ %15, %land.end18 ]
  %lor.ext = zext i1 %16 to i32
  %conv21 = trunc i32 %lor.ext to i8
  ret i8 %conv21
}

; Function Attrs: noinline nounwind optnone uwtable
define internal signext i8 @at_endline_loc_p(i8* %p, i8* %pend, i32 %syntax) #0 {
entry:
  %p.addr = alloca i8*, align 8
  %pend.addr = alloca i8*, align 8
  %syntax.addr = alloca i32, align 4
  %next = alloca i8*, align 8
  %next_backslash = alloca i8, align 1
  %next_next = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  store i8* %pend, i8** %pend.addr, align 8
  store i32 %syntax, i32* %syntax.addr, align 4
  %0 = load i8*, i8** %p.addr, align 8
  store i8* %0, i8** %next, align 8
  %1 = load i8*, i8** %next, align 8
  %2 = load i8, i8* %1, align 1
  %conv = sext i8 %2 to i32
  %cmp = icmp eq i32 %conv, 92
  %conv1 = zext i1 %cmp to i32
  %conv2 = trunc i32 %conv1 to i8
  store i8 %conv2, i8* %next_backslash, align 1
  %3 = load i8*, i8** %p.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 1
  %4 = load i8*, i8** %pend.addr, align 8
  %cmp3 = icmp ult i8* %add.ptr, %4
  br i1 %cmp3, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %5 = load i8*, i8** %p.addr, align 8
  %add.ptr5 = getelementptr inbounds i8, i8* %5, i64 1
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %add.ptr5, %cond.true ], [ null, %cond.false ]
  store i8* %cond, i8** %next_next, align 8
  %6 = load i32, i32* %syntax.addr, align 4
  %and = and i32 %6, 8192
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true6, label %cond.false10

cond.true6:                                       ; preds = %cond.end
  %7 = load i8*, i8** %next, align 8
  %8 = load i8, i8* %7, align 1
  %conv7 = sext i8 %8 to i32
  %cmp8 = icmp eq i32 %conv7, 41
  br i1 %cmp8, label %lor.end, label %lor.rhs

cond.false10:                                     ; preds = %cond.end
  %9 = load i8, i8* %next_backslash, align 1
  %conv11 = sext i8 %9 to i32
  %tobool12 = icmp ne i32 %conv11, 0
  br i1 %tobool12, label %land.lhs.true, label %lor.rhs

land.lhs.true:                                    ; preds = %cond.false10
  %10 = load i8*, i8** %next_next, align 8
  %tobool13 = icmp ne i8* %10, null
  br i1 %tobool13, label %land.lhs.true14, label %lor.rhs

land.lhs.true14:                                  ; preds = %land.lhs.true
  %11 = load i8*, i8** %next_next, align 8
  %12 = load i8, i8* %11, align 1
  %conv15 = sext i8 %12 to i32
  %cmp16 = icmp eq i32 %conv15, 41
  br i1 %cmp16, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.lhs.true14, %land.lhs.true, %cond.false10, %cond.true6
  %13 = load i32, i32* %syntax.addr, align 4
  %and18 = and i32 %13, 32768
  %tobool19 = icmp ne i32 %and18, 0
  br i1 %tobool19, label %cond.true20, label %cond.false24

cond.true20:                                      ; preds = %lor.rhs
  %14 = load i8*, i8** %next, align 8
  %15 = load i8, i8* %14, align 1
  %conv21 = sext i8 %15 to i32
  %cmp22 = icmp eq i32 %conv21, 124
  %conv23 = zext i1 %cmp22 to i32
  br label %cond.end32

cond.false24:                                     ; preds = %lor.rhs
  %16 = load i8, i8* %next_backslash, align 1
  %conv25 = sext i8 %16 to i32
  %tobool26 = icmp ne i32 %conv25, 0
  br i1 %tobool26, label %land.lhs.true27, label %land.end

land.lhs.true27:                                  ; preds = %cond.false24
  %17 = load i8*, i8** %next_next, align 8
  %tobool28 = icmp ne i8* %17, null
  br i1 %tobool28, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true27
  %18 = load i8*, i8** %next_next, align 8
  %19 = load i8, i8* %18, align 1
  %conv29 = sext i8 %19 to i32
  %cmp30 = icmp eq i32 %conv29, 124
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true27, %cond.false24
  %20 = phi i1 [ false, %land.lhs.true27 ], [ false, %cond.false24 ], [ %cmp30, %land.rhs ]
  %land.ext = zext i1 %20 to i32
  br label %cond.end32

cond.end32:                                       ; preds = %land.end, %cond.true20
  %cond33 = phi i32 [ %conv23, %cond.true20 ], [ %land.ext, %land.end ]
  %tobool34 = icmp ne i32 %cond33, 0
  br label %lor.end

lor.end:                                          ; preds = %cond.end32, %land.lhs.true14, %cond.true6
  %21 = phi i1 [ true, %land.lhs.true14 ], [ true, %cond.true6 ], [ %tobool34, %cond.end32 ]
  %lor.ext = zext i1 %21 to i32
  %conv35 = trunc i32 %lor.ext to i8
  ret i8 %conv35
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @store_op1(i32 %op, i8* %loc, i32 %arg) #0 {
entry:
  %op.addr = alloca i32, align 4
  %loc.addr = alloca i8*, align 8
  %arg.addr = alloca i32, align 4
  store i32 %op, i32* %op.addr, align 4
  store i8* %loc, i8** %loc.addr, align 8
  store i32 %arg, i32* %arg.addr, align 4
  %0 = load i32, i32* %op.addr, align 4
  %conv = trunc i32 %0 to i8
  %1 = load i8*, i8** %loc.addr, align 8
  store i8 %conv, i8* %1, align 1
  br label %do.body

do.body:                                          ; preds = %entry
  %2 = load i32, i32* %arg.addr, align 4
  %and = and i32 %2, 255
  %conv1 = trunc i32 %and to i8
  %3 = load i8*, i8** %loc.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 1
  %arrayidx = getelementptr inbounds i8, i8* %add.ptr, i64 0
  store i8 %conv1, i8* %arrayidx, align 1
  %4 = load i32, i32* %arg.addr, align 4
  %shr = ashr i32 %4, 8
  %conv2 = trunc i32 %shr to i8
  %5 = load i8*, i8** %loc.addr, align 8
  %add.ptr3 = getelementptr inbounds i8, i8* %5, i64 1
  %arrayidx4 = getelementptr inbounds i8, i8* %add.ptr3, i64 1
  store i8 %conv2, i8* %arrayidx4, align 1
  br label %do.end

do.end:                                           ; preds = %do.body
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @insert_op1(i32 %op, i8* %loc, i32 %arg, i8* %end) #0 {
entry:
  %op.addr = alloca i32, align 4
  %loc.addr = alloca i8*, align 8
  %arg.addr = alloca i32, align 4
  %end.addr = alloca i8*, align 8
  %pfrom = alloca i8*, align 8
  %pto = alloca i8*, align 8
  store i32 %op, i32* %op.addr, align 4
  store i8* %loc, i8** %loc.addr, align 8
  store i32 %arg, i32* %arg.addr, align 4
  store i8* %end, i8** %end.addr, align 8
  %0 = load i8*, i8** %end.addr, align 8
  store i8* %0, i8** %pfrom, align 8
  %1 = load i8*, i8** %end.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 3
  store i8* %add.ptr, i8** %pto, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i8*, i8** %pfrom, align 8
  %3 = load i8*, i8** %loc.addr, align 8
  %cmp = icmp ne i8* %2, %3
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i8*, i8** %pfrom, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 -1
  store i8* %incdec.ptr, i8** %pfrom, align 8
  %5 = load i8, i8* %incdec.ptr, align 1
  %6 = load i8*, i8** %pto, align 8
  %incdec.ptr1 = getelementptr inbounds i8, i8* %6, i32 -1
  store i8* %incdec.ptr1, i8** %pto, align 8
  store i8 %5, i8* %incdec.ptr1, align 1
  br label %while.cond, !llvm.loop !211

while.end:                                        ; preds = %while.cond
  %7 = load i32, i32* %op.addr, align 4
  %8 = load i8*, i8** %loc.addr, align 8
  %9 = load i32, i32* %arg.addr, align 4
  call void @store_op1(i32 %7, i8* %8, i32 %9)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @compile_range(i8** %p_ptr, i8* %pend, i8* %translate, i32 %syntax, i8* %b) #0 {
entry:
  %retval = alloca i32, align 4
  %p_ptr.addr = alloca i8**, align 8
  %pend.addr = alloca i8*, align 8
  %translate.addr = alloca i8*, align 8
  %syntax.addr = alloca i32, align 4
  %b.addr = alloca i8*, align 8
  %this_char = alloca i32, align 4
  %p = alloca i8*, align 8
  %range_start = alloca i32, align 4
  %range_end = alloca i32, align 4
  store i8** %p_ptr, i8*** %p_ptr.addr, align 8
  store i8* %pend, i8** %pend.addr, align 8
  store i8* %translate, i8** %translate.addr, align 8
  store i32 %syntax, i32* %syntax.addr, align 4
  store i8* %b, i8** %b.addr, align 8
  %0 = load i8**, i8*** %p_ptr.addr, align 8
  %1 = load i8*, i8** %0, align 8
  store i8* %1, i8** %p, align 8
  %2 = load i8*, i8** %p, align 8
  %3 = load i8*, i8** %pend.addr, align 8
  %cmp = icmp eq i8* %2, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 11, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %4 = load i8*, i8** %p, align 8
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 -2
  %5 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %5 to i32
  store i32 %conv, i32* %range_start, align 4
  %6 = load i8*, i8** %p, align 8
  %arrayidx1 = getelementptr inbounds i8, i8* %6, i64 0
  %7 = load i8, i8* %arrayidx1, align 1
  %conv2 = zext i8 %7 to i32
  store i32 %conv2, i32* %range_end, align 4
  %8 = load i8**, i8*** %p_ptr.addr, align 8
  %9 = load i8*, i8** %8, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr, i8** %8, align 8
  %10 = load i32, i32* %range_start, align 4
  %11 = load i32, i32* %range_end, align 4
  %cmp3 = icmp sgt i32 %10, %11
  br i1 %cmp3, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  %12 = load i32, i32* %syntax.addr, align 4
  %and = and i32 %12, 65536
  %tobool = icmp ne i32 %and, 0
  %13 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i32 11, i32 0
  store i32 %cond, i32* %retval, align 4
  br label %return

if.end6:                                          ; preds = %if.end
  %14 = load i32, i32* %range_start, align 4
  store i32 %14, i32* %this_char, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end6
  %15 = load i32, i32* %this_char, align 4
  %16 = load i32, i32* %range_end, align 4
  %cmp7 = icmp ule i32 %15, %16
  br i1 %cmp7, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %17 = load i8*, i8** %translate.addr, align 8
  %tobool9 = icmp ne i8* %17, null
  br i1 %tobool9, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %18 = load i8*, i8** %translate.addr, align 8
  %19 = load i32, i32* %this_char, align 4
  %conv10 = trunc i32 %19 to i8
  %idxprom = zext i8 %conv10 to i64
  %arrayidx11 = getelementptr inbounds i8, i8* %18, i64 %idxprom
  %20 = load i8, i8* %arrayidx11, align 1
  %conv12 = sext i8 %20 to i32
  br label %cond.end

cond.false:                                       ; preds = %for.body
  %21 = load i32, i32* %this_char, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond13 = phi i32 [ %conv12, %cond.true ], [ %21, %cond.false ]
  %conv14 = trunc i32 %cond13 to i8
  %conv15 = zext i8 %conv14 to i32
  %rem = srem i32 %conv15, 8
  %shl = shl i32 1, %rem
  %22 = load i8*, i8** %b.addr, align 8
  %23 = load i8*, i8** %translate.addr, align 8
  %tobool16 = icmp ne i8* %23, null
  br i1 %tobool16, label %cond.true17, label %cond.false22

cond.true17:                                      ; preds = %cond.end
  %24 = load i8*, i8** %translate.addr, align 8
  %25 = load i32, i32* %this_char, align 4
  %conv18 = trunc i32 %25 to i8
  %idxprom19 = zext i8 %conv18 to i64
  %arrayidx20 = getelementptr inbounds i8, i8* %24, i64 %idxprom19
  %26 = load i8, i8* %arrayidx20, align 1
  %conv21 = sext i8 %26 to i32
  br label %cond.end23

cond.false22:                                     ; preds = %cond.end
  %27 = load i32, i32* %this_char, align 4
  br label %cond.end23

cond.end23:                                       ; preds = %cond.false22, %cond.true17
  %cond24 = phi i32 [ %conv21, %cond.true17 ], [ %27, %cond.false22 ]
  %conv25 = trunc i32 %cond24 to i8
  %conv26 = zext i8 %conv25 to i32
  %div = sdiv i32 %conv26, 8
  %idxprom27 = sext i32 %div to i64
  %arrayidx28 = getelementptr inbounds i8, i8* %22, i64 %idxprom27
  %28 = load i8, i8* %arrayidx28, align 1
  %conv29 = zext i8 %28 to i32
  %or = or i32 %conv29, %shl
  %conv30 = trunc i32 %or to i8
  store i8 %conv30, i8* %arrayidx28, align 1
  br label %for.inc

for.inc:                                          ; preds = %cond.end23
  %29 = load i32, i32* %this_char, align 4
  %inc = add i32 %29, 1
  store i32 %inc, i32* %this_char, align 4
  br label %for.cond, !llvm.loop !212

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then5, %if.then
  %30 = load i32, i32* %retval, align 4
  ret i32 %30
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @insert_op2(i32 %op, i8* %loc, i32 %arg1, i32 %arg2, i8* %end) #0 {
entry:
  %op.addr = alloca i32, align 4
  %loc.addr = alloca i8*, align 8
  %arg1.addr = alloca i32, align 4
  %arg2.addr = alloca i32, align 4
  %end.addr = alloca i8*, align 8
  %pfrom = alloca i8*, align 8
  %pto = alloca i8*, align 8
  store i32 %op, i32* %op.addr, align 4
  store i8* %loc, i8** %loc.addr, align 8
  store i32 %arg1, i32* %arg1.addr, align 4
  store i32 %arg2, i32* %arg2.addr, align 4
  store i8* %end, i8** %end.addr, align 8
  %0 = load i8*, i8** %end.addr, align 8
  store i8* %0, i8** %pfrom, align 8
  %1 = load i8*, i8** %end.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 5
  store i8* %add.ptr, i8** %pto, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i8*, i8** %pfrom, align 8
  %3 = load i8*, i8** %loc.addr, align 8
  %cmp = icmp ne i8* %2, %3
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i8*, i8** %pfrom, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 -1
  store i8* %incdec.ptr, i8** %pfrom, align 8
  %5 = load i8, i8* %incdec.ptr, align 1
  %6 = load i8*, i8** %pto, align 8
  %incdec.ptr1 = getelementptr inbounds i8, i8* %6, i32 -1
  store i8* %incdec.ptr1, i8** %pto, align 8
  store i8 %5, i8* %incdec.ptr1, align 1
  br label %while.cond, !llvm.loop !213

while.end:                                        ; preds = %while.cond
  %7 = load i32, i32* %op.addr, align 4
  %8 = load i8*, i8** %loc.addr, align 8
  %9 = load i32, i32* %arg1.addr, align 4
  %10 = load i32, i32* %arg2.addr, align 4
  call void @store_op2(i32 %7, i8* %8, i32 %9, i32 %10)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @store_op2(i32 %op, i8* %loc, i32 %arg1, i32 %arg2) #0 {
entry:
  %op.addr = alloca i32, align 4
  %loc.addr = alloca i8*, align 8
  %arg1.addr = alloca i32, align 4
  %arg2.addr = alloca i32, align 4
  store i32 %op, i32* %op.addr, align 4
  store i8* %loc, i8** %loc.addr, align 8
  store i32 %arg1, i32* %arg1.addr, align 4
  store i32 %arg2, i32* %arg2.addr, align 4
  %0 = load i32, i32* %op.addr, align 4
  %conv = trunc i32 %0 to i8
  %1 = load i8*, i8** %loc.addr, align 8
  store i8 %conv, i8* %1, align 1
  br label %do.body

do.body:                                          ; preds = %entry
  %2 = load i32, i32* %arg1.addr, align 4
  %and = and i32 %2, 255
  %conv1 = trunc i32 %and to i8
  %3 = load i8*, i8** %loc.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 1
  %arrayidx = getelementptr inbounds i8, i8* %add.ptr, i64 0
  store i8 %conv1, i8* %arrayidx, align 1
  %4 = load i32, i32* %arg1.addr, align 4
  %shr = ashr i32 %4, 8
  %conv2 = trunc i32 %shr to i8
  %5 = load i8*, i8** %loc.addr, align 8
  %add.ptr3 = getelementptr inbounds i8, i8* %5, i64 1
  %arrayidx4 = getelementptr inbounds i8, i8* %add.ptr3, i64 1
  store i8 %conv2, i8* %arrayidx4, align 1
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body5

do.body5:                                         ; preds = %do.end
  %6 = load i32, i32* %arg2.addr, align 4
  %and6 = and i32 %6, 255
  %conv7 = trunc i32 %and6 to i8
  %7 = load i8*, i8** %loc.addr, align 8
  %add.ptr8 = getelementptr inbounds i8, i8* %7, i64 3
  %arrayidx9 = getelementptr inbounds i8, i8* %add.ptr8, i64 0
  store i8 %conv7, i8* %arrayidx9, align 1
  %8 = load i32, i32* %arg2.addr, align 4
  %shr10 = ashr i32 %8, 8
  %conv11 = trunc i32 %shr10 to i8
  %9 = load i8*, i8** %loc.addr, align 8
  %add.ptr12 = getelementptr inbounds i8, i8* %9, i64 3
  %arrayidx13 = getelementptr inbounds i8, i8* %add.ptr12, i64 1
  store i8 %conv11, i8* %arrayidx13, align 1
  br label %do.end14

do.end14:                                         ; preds = %do.body5
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal signext i8 @group_in_compile_stack(%struct.compile_stack_elt_t* %compile_stack.coerce0, i64 %compile_stack.coerce1, i32 %regnum) #0 {
entry:
  %retval = alloca i8, align 1
  %compile_stack = alloca %struct.compile_stack_type, align 8
  %regnum.addr = alloca i32, align 4
  %this_element = alloca i32, align 4
  %0 = bitcast %struct.compile_stack_type* %compile_stack to { %struct.compile_stack_elt_t*, i64 }*
  %1 = getelementptr inbounds { %struct.compile_stack_elt_t*, i64 }, { %struct.compile_stack_elt_t*, i64 }* %0, i32 0, i32 0
  store %struct.compile_stack_elt_t* %compile_stack.coerce0, %struct.compile_stack_elt_t** %1, align 8
  %2 = getelementptr inbounds { %struct.compile_stack_elt_t*, i64 }, { %struct.compile_stack_elt_t*, i64 }* %0, i32 0, i32 1
  store i64 %compile_stack.coerce1, i64* %2, align 8
  store i32 %regnum, i32* %regnum.addr, align 4
  %avail = getelementptr inbounds %struct.compile_stack_type, %struct.compile_stack_type* %compile_stack, i32 0, i32 2
  %3 = load i32, i32* %avail, align 4
  %sub = sub i32 %3, 1
  store i32 %sub, i32* %this_element, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %this_element, align 4
  %cmp = icmp sge i32 %4, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %stack = getelementptr inbounds %struct.compile_stack_type, %struct.compile_stack_type* %compile_stack, i32 0, i32 0
  %5 = load %struct.compile_stack_elt_t*, %struct.compile_stack_elt_t** %stack, align 8
  %6 = load i32, i32* %this_element, align 4
  %idxprom = sext i32 %6 to i64
  %arrayidx = getelementptr inbounds %struct.compile_stack_elt_t, %struct.compile_stack_elt_t* %5, i64 %idxprom
  %regnum1 = getelementptr inbounds %struct.compile_stack_elt_t, %struct.compile_stack_elt_t* %arrayidx, i32 0, i32 4
  %7 = load i32, i32* %regnum1, align 4
  %8 = load i32, i32* %regnum.addr, align 4
  %cmp2 = icmp eq i32 %7, %8
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i8 1, i8* %retval, align 1
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %9 = load i32, i32* %this_element, align 4
  %dec = add nsw i32 %9, -1
  store i32 %dec, i32* %this_element, align 4
  br label %for.cond, !llvm.loop !214

for.end:                                          ; preds = %for.cond
  store i8 0, i8* %retval, align 1
  br label %return

return:                                           ; preds = %for.end, %if.then
  %10 = load i8, i8* %retval, align 1
  ret i8 %10
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @lex() #0 {
entry:
  %retval = alloca i32, align 4
  %c = alloca i32, align 4
  %c1 = alloca i32, align 4
  %c2 = alloca i32, align 4
  %backslash = alloca i32, align 4
  %invert = alloca i32, align 4
  %ccl = alloca [8 x i32], align 16
  %i = alloca i32, align 4
  store i32 0, i32* %backslash, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc534, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 2
  br i1 %cmp, label %for.body, label %for.end536

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* @lexleft, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.body
  %2 = load i8*, i8** @lexptr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %2, i32 1
  store i8* %incdec.ptr, i8** @lexptr, align 8
  %3 = load i8, i8* %2, align 1
  %conv = zext i8 %3 to i32
  store i32 %conv, i32* %c, align 4
  %4 = load i32, i32* @lexleft, align 4
  %dec = add nsw i32 %4, -1
  store i32 %dec, i32* @lexleft, align 4
  %5 = load i32, i32* %c, align 4
  switch i32 %5, label %sw.default [
    i32 92, label %sw.bb
    i32 94, label %sw.bb8
    i32 36, label %sw.bb23
    i32 49, label %sw.bb86
    i32 50, label %sw.bb86
    i32 51, label %sw.bb86
    i32 52, label %sw.bb86
    i32 53, label %sw.bb86
    i32 54, label %sw.bb86
    i32 55, label %sw.bb86
    i32 56, label %sw.bb86
    i32 57, label %sw.bb86
    i32 60, label %sw.bb93
    i32 62, label %sw.bb97
    i32 98, label %sw.bb101
    i32 66, label %sw.bb105
    i32 63, label %sw.bb109
    i32 42, label %sw.bb127
    i32 43, label %sw.bb137
    i32 123, label %sw.bb155
    i32 124, label %sw.bb241
    i32 10, label %sw.bb253
    i32 40, label %sw.bb263
    i32 41, label %sw.bb271
    i32 46, label %sw.bb287
    i32 119, label %sw.bb305
    i32 87, label %sw.bb305
    i32 91, label %sw.bb333
  ]

sw.bb:                                            ; preds = %if.end
  %6 = load i32, i32* %backslash, align 4
  %tobool1 = icmp ne i32 %6, 0
  br i1 %tobool1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %sw.bb
  br label %normal_char

if.end3:                                          ; preds = %sw.bb
  %7 = load i32, i32* @lexleft, align 4
  %cmp4 = icmp eq i32 %7, 0
  br i1 %cmp4, label %if.then6, label %if.end7

if.then6:                                         ; preds = %if.end3
  call void @dfaerror(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.62, i64 0, i64 0))
  br label %if.end7

if.end7:                                          ; preds = %if.then6, %if.end3
  store i32 1, i32* %backslash, align 4
  br label %sw.epilog

sw.bb8:                                           ; preds = %if.end
  %8 = load i32, i32* %backslash, align 4
  %tobool9 = icmp ne i32 %8, 0
  br i1 %tobool9, label %if.then10, label %if.end11

if.then10:                                        ; preds = %sw.bb8
  br label %normal_char

if.end11:                                         ; preds = %sw.bb8
  %9 = load i32, i32* @syntax_bits, align 4
  %and = and i32 %9, 8
  %tobool12 = icmp ne i32 %and, 0
  br i1 %tobool12, label %if.then21, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end11
  %10 = load i32, i32* @lasttok, align 4
  %cmp13 = icmp eq i32 %10, -1
  br i1 %cmp13, label %if.then21, label %lor.lhs.false15

lor.lhs.false15:                                  ; preds = %lor.lhs.false
  %11 = load i32, i32* @lasttok, align 4
  %cmp16 = icmp eq i32 %11, 271
  br i1 %cmp16, label %if.then21, label %lor.lhs.false18

lor.lhs.false18:                                  ; preds = %lor.lhs.false15
  %12 = load i32, i32* @lasttok, align 4
  %cmp19 = icmp eq i32 %12, 269
  br i1 %cmp19, label %if.then21, label %if.end22

if.then21:                                        ; preds = %lor.lhs.false18, %lor.lhs.false15, %lor.lhs.false, %if.end11
  store i32 258, i32* @lasttok, align 4
  store i32 258, i32* %retval, align 4
  br label %return

if.end22:                                         ; preds = %lor.lhs.false18
  br label %normal_char

sw.bb23:                                          ; preds = %if.end
  %13 = load i32, i32* %backslash, align 4
  %tobool24 = icmp ne i32 %13, 0
  br i1 %tobool24, label %if.then25, label %if.end26

if.then25:                                        ; preds = %sw.bb23
  br label %normal_char

if.end26:                                         ; preds = %sw.bb23
  %14 = load i32, i32* @syntax_bits, align 4
  %and27 = and i32 %14, 8
  %tobool28 = icmp ne i32 %and27, 0
  br i1 %tobool28, label %if.then84, label %lor.lhs.false29

lor.lhs.false29:                                  ; preds = %if.end26
  %15 = load i32, i32* @lexleft, align 4
  %cmp30 = icmp eq i32 %15, 0
  br i1 %cmp30, label %if.then84, label %lor.lhs.false32

lor.lhs.false32:                                  ; preds = %lor.lhs.false29
  %16 = load i32, i32* @syntax_bits, align 4
  %and33 = and i32 %16, 8192
  %tobool34 = icmp ne i32 %and33, 0
  br i1 %tobool34, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false32
  %17 = load i32, i32* @lexleft, align 4
  %cmp35 = icmp sgt i32 %17, 0
  br i1 %cmp35, label %land.lhs.true, label %lor.lhs.false51

land.lhs.true:                                    ; preds = %cond.true
  %18 = load i8*, i8** @lexptr, align 8
  %19 = load i8, i8* %18, align 1
  %conv37 = sext i8 %19 to i32
  %cmp38 = icmp eq i32 %conv37, 41
  br i1 %cmp38, label %if.then84, label %lor.lhs.false51

cond.false:                                       ; preds = %lor.lhs.false32
  %20 = load i32, i32* @lexleft, align 4
  %cmp40 = icmp sgt i32 %20, 1
  br i1 %cmp40, label %land.lhs.true42, label %lor.lhs.false51

land.lhs.true42:                                  ; preds = %cond.false
  %21 = load i8*, i8** @lexptr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %21, i64 0
  %22 = load i8, i8* %arrayidx, align 1
  %conv43 = sext i8 %22 to i32
  %cmp44 = icmp eq i32 %conv43, 92
  br i1 %cmp44, label %land.lhs.true46, label %lor.lhs.false51

land.lhs.true46:                                  ; preds = %land.lhs.true42
  %23 = load i8*, i8** @lexptr, align 8
  %arrayidx47 = getelementptr inbounds i8, i8* %23, i64 1
  %24 = load i8, i8* %arrayidx47, align 1
  %conv48 = sext i8 %24 to i32
  %cmp49 = icmp eq i32 %conv48, 41
  br i1 %cmp49, label %if.then84, label %lor.lhs.false51

lor.lhs.false51:                                  ; preds = %land.lhs.true46, %land.lhs.true42, %cond.false, %land.lhs.true, %cond.true
  %25 = load i32, i32* @syntax_bits, align 4
  %and52 = and i32 %25, 32768
  %tobool53 = icmp ne i32 %and52, 0
  br i1 %tobool53, label %cond.true54, label %cond.false61

cond.true54:                                      ; preds = %lor.lhs.false51
  %26 = load i32, i32* @lexleft, align 4
  %cmp55 = icmp sgt i32 %26, 0
  br i1 %cmp55, label %land.lhs.true57, label %lor.lhs.false74

land.lhs.true57:                                  ; preds = %cond.true54
  %27 = load i8*, i8** @lexptr, align 8
  %28 = load i8, i8* %27, align 1
  %conv58 = sext i8 %28 to i32
  %cmp59 = icmp eq i32 %conv58, 124
  br i1 %cmp59, label %if.then84, label %lor.lhs.false74

cond.false61:                                     ; preds = %lor.lhs.false51
  %29 = load i32, i32* @lexleft, align 4
  %cmp62 = icmp sgt i32 %29, 1
  br i1 %cmp62, label %land.lhs.true64, label %lor.lhs.false74

land.lhs.true64:                                  ; preds = %cond.false61
  %30 = load i8*, i8** @lexptr, align 8
  %arrayidx65 = getelementptr inbounds i8, i8* %30, i64 0
  %31 = load i8, i8* %arrayidx65, align 1
  %conv66 = sext i8 %31 to i32
  %cmp67 = icmp eq i32 %conv66, 92
  br i1 %cmp67, label %land.lhs.true69, label %lor.lhs.false74

land.lhs.true69:                                  ; preds = %land.lhs.true64
  %32 = load i8*, i8** @lexptr, align 8
  %arrayidx70 = getelementptr inbounds i8, i8* %32, i64 1
  %33 = load i8, i8* %arrayidx70, align 1
  %conv71 = sext i8 %33 to i32
  %cmp72 = icmp eq i32 %conv71, 124
  br i1 %cmp72, label %if.then84, label %lor.lhs.false74

lor.lhs.false74:                                  ; preds = %land.lhs.true69, %land.lhs.true64, %cond.false61, %land.lhs.true57, %cond.true54
  %34 = load i32, i32* @syntax_bits, align 4
  %and75 = and i32 %34, 2048
  %tobool76 = icmp ne i32 %and75, 0
  br i1 %tobool76, label %land.lhs.true77, label %if.end85

land.lhs.true77:                                  ; preds = %lor.lhs.false74
  %35 = load i32, i32* @lexleft, align 4
  %cmp78 = icmp sgt i32 %35, 0
  br i1 %cmp78, label %land.lhs.true80, label %if.end85

land.lhs.true80:                                  ; preds = %land.lhs.true77
  %36 = load i8*, i8** @lexptr, align 8
  %37 = load i8, i8* %36, align 1
  %conv81 = sext i8 %37 to i32
  %cmp82 = icmp eq i32 %conv81, 10
  br i1 %cmp82, label %if.then84, label %if.end85

if.then84:                                        ; preds = %land.lhs.true80, %land.lhs.true69, %land.lhs.true57, %land.lhs.true46, %land.lhs.true, %lor.lhs.false29, %if.end26
  store i32 259, i32* @lasttok, align 4
  store i32 259, i32* %retval, align 4
  br label %return

if.end85:                                         ; preds = %land.lhs.true80, %land.lhs.true77, %lor.lhs.false74
  br label %normal_char

sw.bb86:                                          ; preds = %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end
  %38 = load i32, i32* %backslash, align 4
  %tobool87 = icmp ne i32 %38, 0
  br i1 %tobool87, label %land.lhs.true88, label %if.end92

land.lhs.true88:                                  ; preds = %sw.bb86
  %39 = load i32, i32* @syntax_bits, align 4
  %and89 = and i32 %39, 16384
  %tobool90 = icmp ne i32 %and89, 0
  br i1 %tobool90, label %if.end92, label %if.then91

if.then91:                                        ; preds = %land.lhs.true88
  store i32 0, i32* @laststart, align 4
  store i32 257, i32* @lasttok, align 4
  store i32 257, i32* %retval, align 4
  br label %return

if.end92:                                         ; preds = %land.lhs.true88, %sw.bb86
  br label %normal_char

sw.bb93:                                          ; preds = %if.end
  %40 = load i32, i32* %backslash, align 4
  %tobool94 = icmp ne i32 %40, 0
  br i1 %tobool94, label %if.then95, label %if.end96

if.then95:                                        ; preds = %sw.bb93
  store i32 260, i32* @lasttok, align 4
  store i32 260, i32* %retval, align 4
  br label %return

if.end96:                                         ; preds = %sw.bb93
  br label %normal_char

sw.bb97:                                          ; preds = %if.end
  %41 = load i32, i32* %backslash, align 4
  %tobool98 = icmp ne i32 %41, 0
  br i1 %tobool98, label %if.then99, label %if.end100

if.then99:                                        ; preds = %sw.bb97
  store i32 261, i32* @lasttok, align 4
  store i32 261, i32* %retval, align 4
  br label %return

if.end100:                                        ; preds = %sw.bb97
  br label %normal_char

sw.bb101:                                         ; preds = %if.end
  %42 = load i32, i32* %backslash, align 4
  %tobool102 = icmp ne i32 %42, 0
  br i1 %tobool102, label %if.then103, label %if.end104

if.then103:                                       ; preds = %sw.bb101
  store i32 262, i32* @lasttok, align 4
  store i32 262, i32* %retval, align 4
  br label %return

if.end104:                                        ; preds = %sw.bb101
  br label %normal_char

sw.bb105:                                         ; preds = %if.end
  %43 = load i32, i32* %backslash, align 4
  %tobool106 = icmp ne i32 %43, 0
  br i1 %tobool106, label %if.then107, label %if.end108

if.then107:                                       ; preds = %sw.bb105
  store i32 263, i32* @lasttok, align 4
  store i32 263, i32* %retval, align 4
  br label %return

if.end108:                                        ; preds = %sw.bb105
  br label %normal_char

sw.bb109:                                         ; preds = %if.end
  %44 = load i32, i32* @syntax_bits, align 4
  %and110 = and i32 %44, 1024
  %tobool111 = icmp ne i32 %and110, 0
  br i1 %tobool111, label %if.then112, label %if.end113

if.then112:                                       ; preds = %sw.bb109
  br label %normal_char

if.end113:                                        ; preds = %sw.bb109
  %45 = load i32, i32* %backslash, align 4
  %46 = load i32, i32* @syntax_bits, align 4
  %and114 = and i32 %46, 2
  %cmp115 = icmp ne i32 %and114, 0
  %conv116 = zext i1 %cmp115 to i32
  %cmp117 = icmp ne i32 %45, %conv116
  br i1 %cmp117, label %if.then119, label %if.end120

if.then119:                                       ; preds = %if.end113
  br label %normal_char

if.end120:                                        ; preds = %if.end113
  %47 = load i32, i32* @syntax_bits, align 4
  %and121 = and i32 %47, 16
  %tobool122 = icmp ne i32 %and121, 0
  br i1 %tobool122, label %if.end126, label %land.lhs.true123

land.lhs.true123:                                 ; preds = %if.end120
  %48 = load i32, i32* @laststart, align 4
  %tobool124 = icmp ne i32 %48, 0
  br i1 %tobool124, label %if.then125, label %if.end126

if.then125:                                       ; preds = %land.lhs.true123
  br label %normal_char

if.end126:                                        ; preds = %land.lhs.true123, %if.end120
  store i32 264, i32* @lasttok, align 4
  store i32 264, i32* %retval, align 4
  br label %return

sw.bb127:                                         ; preds = %if.end
  %49 = load i32, i32* %backslash, align 4
  %tobool128 = icmp ne i32 %49, 0
  br i1 %tobool128, label %if.then129, label %if.end130

if.then129:                                       ; preds = %sw.bb127
  br label %normal_char

if.end130:                                        ; preds = %sw.bb127
  %50 = load i32, i32* @syntax_bits, align 4
  %and131 = and i32 %50, 16
  %tobool132 = icmp ne i32 %and131, 0
  br i1 %tobool132, label %if.end136, label %land.lhs.true133

land.lhs.true133:                                 ; preds = %if.end130
  %51 = load i32, i32* @laststart, align 4
  %tobool134 = icmp ne i32 %51, 0
  br i1 %tobool134, label %if.then135, label %if.end136

if.then135:                                       ; preds = %land.lhs.true133
  br label %normal_char

if.end136:                                        ; preds = %land.lhs.true133, %if.end130
  store i32 265, i32* @lasttok, align 4
  store i32 265, i32* %retval, align 4
  br label %return

sw.bb137:                                         ; preds = %if.end
  %52 = load i32, i32* @syntax_bits, align 4
  %and138 = and i32 %52, 1024
  %tobool139 = icmp ne i32 %and138, 0
  br i1 %tobool139, label %if.then140, label %if.end141

if.then140:                                       ; preds = %sw.bb137
  br label %normal_char

if.end141:                                        ; preds = %sw.bb137
  %53 = load i32, i32* %backslash, align 4
  %54 = load i32, i32* @syntax_bits, align 4
  %and142 = and i32 %54, 2
  %cmp143 = icmp ne i32 %and142, 0
  %conv144 = zext i1 %cmp143 to i32
  %cmp145 = icmp ne i32 %53, %conv144
  br i1 %cmp145, label %if.then147, label %if.end148

if.then147:                                       ; preds = %if.end141
  br label %normal_char

if.end148:                                        ; preds = %if.end141
  %55 = load i32, i32* @syntax_bits, align 4
  %and149 = and i32 %55, 16
  %tobool150 = icmp ne i32 %and149, 0
  br i1 %tobool150, label %if.end154, label %land.lhs.true151

land.lhs.true151:                                 ; preds = %if.end148
  %56 = load i32, i32* @laststart, align 4
  %tobool152 = icmp ne i32 %56, 0
  br i1 %tobool152, label %if.then153, label %if.end154

if.then153:                                       ; preds = %land.lhs.true151
  br label %normal_char

if.end154:                                        ; preds = %land.lhs.true151, %if.end148
  store i32 266, i32* @lasttok, align 4
  store i32 266, i32* %retval, align 4
  br label %return

sw.bb155:                                         ; preds = %if.end
  %57 = load i32, i32* @syntax_bits, align 4
  %and156 = and i32 %57, 512
  %tobool157 = icmp ne i32 %and156, 0
  br i1 %tobool157, label %if.end159, label %if.then158

if.then158:                                       ; preds = %sw.bb155
  br label %normal_char

if.end159:                                        ; preds = %sw.bb155
  %58 = load i32, i32* %backslash, align 4
  %59 = load i32, i32* @syntax_bits, align 4
  %and160 = and i32 %59, 4096
  %cmp161 = icmp eq i32 %and160, 0
  %conv162 = zext i1 %cmp161 to i32
  %cmp163 = icmp ne i32 %58, %conv162
  br i1 %cmp163, label %if.then165, label %if.end166

if.then165:                                       ; preds = %if.end159
  br label %normal_char

if.end166:                                        ; preds = %if.end159
  store i32 0, i32* @maxrep, align 4
  store i32 0, i32* @minrep, align 4
  %60 = load i32, i32* @lexleft, align 4
  %tobool167 = icmp ne i32 %60, 0
  br i1 %tobool167, label %if.end169, label %if.then168

if.then168:                                       ; preds = %if.end166
  call void @dfaerror(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.63, i64 0, i64 0))
  br label %if.end169

if.end169:                                        ; preds = %if.then168, %if.end166
  %61 = load i8*, i8** @lexptr, align 8
  %incdec.ptr170 = getelementptr inbounds i8, i8* %61, i32 1
  store i8* %incdec.ptr170, i8** @lexptr, align 8
  %62 = load i8, i8* %61, align 1
  %conv171 = zext i8 %62 to i32
  store i32 %conv171, i32* %c, align 4
  %63 = load i32, i32* @lexleft, align 4
  %dec172 = add nsw i32 %63, -1
  store i32 %dec172, i32* @lexleft, align 4
  %call = call i16** @__ctype_b_loc() #10
  %64 = load i16*, i16** %call, align 8
  %65 = load i32, i32* %c, align 4
  %idxprom = sext i32 %65 to i64
  %arrayidx173 = getelementptr inbounds i16, i16* %64, i64 %idxprom
  %66 = load i16, i16* %arrayidx173, align 2
  %conv174 = zext i16 %66 to i32
  %and175 = and i32 %conv174, 2048
  %tobool176 = icmp ne i32 %and175, 0
  br i1 %tobool176, label %if.then177, label %if.else

if.then177:                                       ; preds = %if.end169
  %67 = load i32, i32* %c, align 4
  %sub = sub nsw i32 %67, 48
  store i32 %sub, i32* @minrep, align 4
  br label %for.cond178

for.cond178:                                      ; preds = %if.end192, %if.then177
  %68 = load i32, i32* @lexleft, align 4
  %tobool179 = icmp ne i32 %68, 0
  br i1 %tobool179, label %if.end181, label %if.then180

if.then180:                                       ; preds = %for.cond178
  call void @dfaerror(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.63, i64 0, i64 0))
  br label %if.end181

if.end181:                                        ; preds = %if.then180, %for.cond178
  %69 = load i8*, i8** @lexptr, align 8
  %incdec.ptr182 = getelementptr inbounds i8, i8* %69, i32 1
  store i8* %incdec.ptr182, i8** @lexptr, align 8
  %70 = load i8, i8* %69, align 1
  %conv183 = zext i8 %70 to i32
  store i32 %conv183, i32* %c, align 4
  %71 = load i32, i32* @lexleft, align 4
  %dec184 = add nsw i32 %71, -1
  store i32 %dec184, i32* @lexleft, align 4
  %call185 = call i16** @__ctype_b_loc() #10
  %72 = load i16*, i16** %call185, align 8
  %73 = load i32, i32* %c, align 4
  %idxprom186 = sext i32 %73 to i64
  %arrayidx187 = getelementptr inbounds i16, i16* %72, i64 %idxprom186
  %74 = load i16, i16* %arrayidx187, align 2
  %conv188 = zext i16 %74 to i32
  %and189 = and i32 %conv188, 2048
  %tobool190 = icmp ne i32 %and189, 0
  br i1 %tobool190, label %if.end192, label %if.then191

if.then191:                                       ; preds = %if.end181
  br label %for.end

if.end192:                                        ; preds = %if.end181
  %75 = load i32, i32* @minrep, align 4
  %mul = mul nsw i32 10, %75
  %76 = load i32, i32* %c, align 4
  %add = add nsw i32 %mul, %76
  %sub193 = sub nsw i32 %add, 48
  store i32 %sub193, i32* @minrep, align 4
  br label %for.cond178

for.end:                                          ; preds = %if.then191
  br label %if.end198

if.else:                                          ; preds = %if.end169
  %77 = load i32, i32* %c, align 4
  %cmp194 = icmp ne i32 %77, 44
  br i1 %cmp194, label %if.then196, label %if.end197

if.then196:                                       ; preds = %if.else
  call void @dfaerror(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.64, i64 0, i64 0))
  br label %if.end197

if.end197:                                        ; preds = %if.then196, %if.else
  br label %if.end198

if.end198:                                        ; preds = %if.end197, %for.end
  %78 = load i32, i32* %c, align 4
  %cmp199 = icmp eq i32 %78, 44
  br i1 %cmp199, label %if.then201, label %if.else221

if.then201:                                       ; preds = %if.end198
  br label %for.cond202

for.cond202:                                      ; preds = %if.end216, %if.then201
  %79 = load i32, i32* @lexleft, align 4
  %tobool203 = icmp ne i32 %79, 0
  br i1 %tobool203, label %if.end205, label %if.then204

if.then204:                                       ; preds = %for.cond202
  call void @dfaerror(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.63, i64 0, i64 0))
  br label %if.end205

if.end205:                                        ; preds = %if.then204, %for.cond202
  %80 = load i8*, i8** @lexptr, align 8
  %incdec.ptr206 = getelementptr inbounds i8, i8* %80, i32 1
  store i8* %incdec.ptr206, i8** @lexptr, align 8
  %81 = load i8, i8* %80, align 1
  %conv207 = zext i8 %81 to i32
  store i32 %conv207, i32* %c, align 4
  %82 = load i32, i32* @lexleft, align 4
  %dec208 = add nsw i32 %82, -1
  store i32 %dec208, i32* @lexleft, align 4
  %call209 = call i16** @__ctype_b_loc() #10
  %83 = load i16*, i16** %call209, align 8
  %84 = load i32, i32* %c, align 4
  %idxprom210 = sext i32 %84 to i64
  %arrayidx211 = getelementptr inbounds i16, i16* %83, i64 %idxprom210
  %85 = load i16, i16* %arrayidx211, align 2
  %conv212 = zext i16 %85 to i32
  %and213 = and i32 %conv212, 2048
  %tobool214 = icmp ne i32 %and213, 0
  br i1 %tobool214, label %if.end216, label %if.then215

if.then215:                                       ; preds = %if.end205
  br label %for.end220

if.end216:                                        ; preds = %if.end205
  %86 = load i32, i32* @maxrep, align 4
  %mul217 = mul nsw i32 10, %86
  %87 = load i32, i32* %c, align 4
  %add218 = add nsw i32 %mul217, %87
  %sub219 = sub nsw i32 %add218, 48
  store i32 %sub219, i32* @maxrep, align 4
  br label %for.cond202

for.end220:                                       ; preds = %if.then215
  br label %if.end222

if.else221:                                       ; preds = %if.end198
  %88 = load i32, i32* @minrep, align 4
  store i32 %88, i32* @maxrep, align 4
  br label %if.end222

if.end222:                                        ; preds = %if.else221, %for.end220
  %89 = load i32, i32* @syntax_bits, align 4
  %and223 = and i32 %89, 4096
  %tobool224 = icmp ne i32 %and223, 0
  br i1 %tobool224, label %if.end236, label %if.then225

if.then225:                                       ; preds = %if.end222
  %90 = load i32, i32* %c, align 4
  %cmp226 = icmp ne i32 %90, 92
  br i1 %cmp226, label %if.then228, label %if.end229

if.then228:                                       ; preds = %if.then225
  call void @dfaerror(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.64, i64 0, i64 0))
  br label %if.end229

if.end229:                                        ; preds = %if.then228, %if.then225
  %91 = load i32, i32* @lexleft, align 4
  %tobool230 = icmp ne i32 %91, 0
  br i1 %tobool230, label %if.end232, label %if.then231

if.then231:                                       ; preds = %if.end229
  call void @dfaerror(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.63, i64 0, i64 0))
  br label %if.end232

if.end232:                                        ; preds = %if.then231, %if.end229
  %92 = load i8*, i8** @lexptr, align 8
  %incdec.ptr233 = getelementptr inbounds i8, i8* %92, i32 1
  store i8* %incdec.ptr233, i8** @lexptr, align 8
  %93 = load i8, i8* %92, align 1
  %conv234 = zext i8 %93 to i32
  store i32 %conv234, i32* %c, align 4
  %94 = load i32, i32* @lexleft, align 4
  %dec235 = add nsw i32 %94, -1
  store i32 %dec235, i32* @lexleft, align 4
  br label %if.end236

if.end236:                                        ; preds = %if.end232, %if.end222
  %95 = load i32, i32* %c, align 4
  %cmp237 = icmp ne i32 %95, 125
  br i1 %cmp237, label %if.then239, label %if.end240

if.then239:                                       ; preds = %if.end236
  call void @dfaerror(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.64, i64 0, i64 0))
  br label %if.end240

if.end240:                                        ; preds = %if.then239, %if.end236
  store i32 0, i32* @laststart, align 4
  store i32 267, i32* @lasttok, align 4
  store i32 267, i32* %retval, align 4
  br label %return

sw.bb241:                                         ; preds = %if.end
  %96 = load i32, i32* @syntax_bits, align 4
  %and242 = and i32 %96, 1024
  %tobool243 = icmp ne i32 %and242, 0
  br i1 %tobool243, label %if.then244, label %if.end245

if.then244:                                       ; preds = %sw.bb241
  br label %normal_char

if.end245:                                        ; preds = %sw.bb241
  %97 = load i32, i32* %backslash, align 4
  %98 = load i32, i32* @syntax_bits, align 4
  %and246 = and i32 %98, 32768
  %cmp247 = icmp eq i32 %and246, 0
  %conv248 = zext i1 %cmp247 to i32
  %cmp249 = icmp ne i32 %97, %conv248
  br i1 %cmp249, label %if.then251, label %if.end252

if.then251:                                       ; preds = %if.end245
  br label %normal_char

if.end252:                                        ; preds = %if.end245
  store i32 1, i32* @laststart, align 4
  store i32 269, i32* @lasttok, align 4
  store i32 269, i32* %retval, align 4
  br label %return

sw.bb253:                                         ; preds = %if.end
  %99 = load i32, i32* @syntax_bits, align 4
  %and254 = and i32 %99, 1024
  %tobool255 = icmp ne i32 %and254, 0
  br i1 %tobool255, label %if.then261, label %lor.lhs.false256

lor.lhs.false256:                                 ; preds = %sw.bb253
  %100 = load i32, i32* %backslash, align 4
  %tobool257 = icmp ne i32 %100, 0
  br i1 %tobool257, label %if.then261, label %lor.lhs.false258

lor.lhs.false258:                                 ; preds = %lor.lhs.false256
  %101 = load i32, i32* @syntax_bits, align 4
  %and259 = and i32 %101, 2048
  %tobool260 = icmp ne i32 %and259, 0
  br i1 %tobool260, label %if.end262, label %if.then261

if.then261:                                       ; preds = %lor.lhs.false258, %lor.lhs.false256, %sw.bb253
  br label %normal_char

if.end262:                                        ; preds = %lor.lhs.false258
  store i32 1, i32* @laststart, align 4
  store i32 269, i32* @lasttok, align 4
  store i32 269, i32* %retval, align 4
  br label %return

sw.bb263:                                         ; preds = %if.end
  %102 = load i32, i32* %backslash, align 4
  %103 = load i32, i32* @syntax_bits, align 4
  %and264 = and i32 %103, 8192
  %cmp265 = icmp eq i32 %and264, 0
  %conv266 = zext i1 %cmp265 to i32
  %cmp267 = icmp ne i32 %102, %conv266
  br i1 %cmp267, label %if.then269, label %if.end270

if.then269:                                       ; preds = %sw.bb263
  br label %normal_char

if.end270:                                        ; preds = %sw.bb263
  %104 = load i32, i32* @parens, align 4
  %inc = add nsw i32 %104, 1
  store i32 %inc, i32* @parens, align 4
  store i32 1, i32* @laststart, align 4
  store i32 271, i32* @lasttok, align 4
  store i32 271, i32* %retval, align 4
  br label %return

sw.bb271:                                         ; preds = %if.end
  %105 = load i32, i32* %backslash, align 4
  %106 = load i32, i32* @syntax_bits, align 4
  %and272 = and i32 %106, 8192
  %cmp273 = icmp eq i32 %and272, 0
  %conv274 = zext i1 %cmp273 to i32
  %cmp275 = icmp ne i32 %105, %conv274
  br i1 %cmp275, label %if.then277, label %if.end278

if.then277:                                       ; preds = %sw.bb271
  br label %normal_char

if.end278:                                        ; preds = %sw.bb271
  %107 = load i32, i32* @parens, align 4
  %cmp279 = icmp eq i32 %107, 0
  br i1 %cmp279, label %land.lhs.true281, label %if.end285

land.lhs.true281:                                 ; preds = %if.end278
  %108 = load i32, i32* @syntax_bits, align 4
  %and282 = and i32 %108, 131072
  %tobool283 = icmp ne i32 %and282, 0
  br i1 %tobool283, label %if.then284, label %if.end285

if.then284:                                       ; preds = %land.lhs.true281
  br label %normal_char

if.end285:                                        ; preds = %land.lhs.true281, %if.end278
  %109 = load i32, i32* @parens, align 4
  %dec286 = add nsw i32 %109, -1
  store i32 %dec286, i32* @parens, align 4
  store i32 0, i32* @laststart, align 4
  store i32 272, i32* @lasttok, align 4
  store i32 272, i32* %retval, align 4
  br label %return

sw.bb287:                                         ; preds = %if.end
  %110 = load i32, i32* %backslash, align 4
  %tobool288 = icmp ne i32 %110, 0
  br i1 %tobool288, label %if.then289, label %if.end290

if.then289:                                       ; preds = %sw.bb287
  br label %normal_char

if.end290:                                        ; preds = %sw.bb287
  %arraydecay = getelementptr inbounds [8 x i32], [8 x i32]* %ccl, i64 0, i64 0
  call void @zeroset(i32* %arraydecay)
  %arraydecay291 = getelementptr inbounds [8 x i32], [8 x i32]* %ccl, i64 0, i64 0
  call void @notset(i32* %arraydecay291)
  %111 = load i32, i32* @syntax_bits, align 4
  %and292 = and i32 %111, 64
  %tobool293 = icmp ne i32 %and292, 0
  br i1 %tobool293, label %if.end296, label %if.then294

if.then294:                                       ; preds = %if.end290
  %arraydecay295 = getelementptr inbounds [8 x i32], [8 x i32]* %ccl, i64 0, i64 0
  call void @clrbit(i32 10, i32* %arraydecay295)
  br label %if.end296

if.end296:                                        ; preds = %if.then294, %if.end290
  %112 = load i32, i32* @syntax_bits, align 4
  %and297 = and i32 %112, 128
  %tobool298 = icmp ne i32 %and297, 0
  br i1 %tobool298, label %if.then299, label %if.end301

if.then299:                                       ; preds = %if.end296
  %arraydecay300 = getelementptr inbounds [8 x i32], [8 x i32]* %ccl, i64 0, i64 0
  call void @clrbit(i32 0, i32* %arraydecay300)
  br label %if.end301

if.end301:                                        ; preds = %if.then299, %if.end296
  store i32 0, i32* @laststart, align 4
  %arraydecay302 = getelementptr inbounds [8 x i32], [8 x i32]* %ccl, i64 0, i64 0
  %call303 = call i32 @charclass_index(i32* %arraydecay302)
  %add304 = add nsw i32 273, %call303
  store i32 %add304, i32* @lasttok, align 4
  store i32 %add304, i32* %retval, align 4
  br label %return

sw.bb305:                                         ; preds = %if.end, %if.end
  %113 = load i32, i32* %backslash, align 4
  %tobool306 = icmp ne i32 %113, 0
  br i1 %tobool306, label %if.end308, label %if.then307

if.then307:                                       ; preds = %sw.bb305
  br label %normal_char

if.end308:                                        ; preds = %sw.bb305
  %arraydecay309 = getelementptr inbounds [8 x i32], [8 x i32]* %ccl, i64 0, i64 0
  call void @zeroset(i32* %arraydecay309)
  store i32 0, i32* %c2, align 4
  br label %for.cond310

for.cond310:                                      ; preds = %for.inc, %if.end308
  %114 = load i32, i32* %c2, align 4
  %cmp311 = icmp slt i32 %114, 256
  br i1 %cmp311, label %for.body313, label %for.end324

for.body313:                                      ; preds = %for.cond310
  %call314 = call i16** @__ctype_b_loc() #10
  %115 = load i16*, i16** %call314, align 8
  %116 = load i32, i32* %c2, align 4
  %idxprom315 = sext i32 %116 to i64
  %arrayidx316 = getelementptr inbounds i16, i16* %115, i64 %idxprom315
  %117 = load i16, i16* %arrayidx316, align 2
  %conv317 = zext i16 %117 to i32
  %and318 = and i32 %conv317, 8
  %tobool319 = icmp ne i32 %and318, 0
  br i1 %tobool319, label %if.then320, label %if.end322

if.then320:                                       ; preds = %for.body313
  %118 = load i32, i32* %c2, align 4
  %arraydecay321 = getelementptr inbounds [8 x i32], [8 x i32]* %ccl, i64 0, i64 0
  call void @setbit(i32 %118, i32* %arraydecay321)
  br label %if.end322

if.end322:                                        ; preds = %if.then320, %for.body313
  br label %for.inc

for.inc:                                          ; preds = %if.end322
  %119 = load i32, i32* %c2, align 4
  %inc323 = add nsw i32 %119, 1
  store i32 %inc323, i32* %c2, align 4
  br label %for.cond310, !llvm.loop !215

for.end324:                                       ; preds = %for.cond310
  %120 = load i32, i32* %c, align 4
  %cmp325 = icmp eq i32 %120, 87
  br i1 %cmp325, label %if.then327, label %if.end329

if.then327:                                       ; preds = %for.end324
  %arraydecay328 = getelementptr inbounds [8 x i32], [8 x i32]* %ccl, i64 0, i64 0
  call void @notset(i32* %arraydecay328)
  br label %if.end329

if.end329:                                        ; preds = %if.then327, %for.end324
  store i32 0, i32* @laststart, align 4
  %arraydecay330 = getelementptr inbounds [8 x i32], [8 x i32]* %ccl, i64 0, i64 0
  %call331 = call i32 @charclass_index(i32* %arraydecay330)
  %add332 = add nsw i32 273, %call331
  store i32 %add332, i32* @lasttok, align 4
  store i32 %add332, i32* %retval, align 4
  br label %return

sw.bb333:                                         ; preds = %if.end
  %121 = load i32, i32* %backslash, align 4
  %tobool334 = icmp ne i32 %121, 0
  br i1 %tobool334, label %if.then335, label %if.end336

if.then335:                                       ; preds = %sw.bb333
  br label %normal_char

if.end336:                                        ; preds = %sw.bb333
  %arraydecay337 = getelementptr inbounds [8 x i32], [8 x i32]* %ccl, i64 0, i64 0
  call void @zeroset(i32* %arraydecay337)
  %122 = load i32, i32* @lexleft, align 4
  %tobool338 = icmp ne i32 %122, 0
  br i1 %tobool338, label %if.end340, label %if.then339

if.then339:                                       ; preds = %if.end336
  call void @dfaerror(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.65, i64 0, i64 0))
  br label %if.end340

if.end340:                                        ; preds = %if.then339, %if.end336
  %123 = load i8*, i8** @lexptr, align 8
  %incdec.ptr341 = getelementptr inbounds i8, i8* %123, i32 1
  store i8* %incdec.ptr341, i8** @lexptr, align 8
  %124 = load i8, i8* %123, align 1
  %conv342 = zext i8 %124 to i32
  store i32 %conv342, i32* %c, align 4
  %125 = load i32, i32* @lexleft, align 4
  %dec343 = add nsw i32 %125, -1
  store i32 %dec343, i32* @lexleft, align 4
  %126 = load i32, i32* %c, align 4
  %cmp344 = icmp eq i32 %126, 94
  br i1 %cmp344, label %if.then346, label %if.else353

if.then346:                                       ; preds = %if.end340
  %127 = load i32, i32* @lexleft, align 4
  %tobool347 = icmp ne i32 %127, 0
  br i1 %tobool347, label %if.end349, label %if.then348

if.then348:                                       ; preds = %if.then346
  call void @dfaerror(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.65, i64 0, i64 0))
  br label %if.end349

if.end349:                                        ; preds = %if.then348, %if.then346
  %128 = load i8*, i8** @lexptr, align 8
  %incdec.ptr350 = getelementptr inbounds i8, i8* %128, i32 1
  store i8* %incdec.ptr350, i8** @lexptr, align 8
  %129 = load i8, i8* %128, align 1
  %conv351 = zext i8 %129 to i32
  store i32 %conv351, i32* %c, align 4
  %130 = load i32, i32* @lexleft, align 4
  %dec352 = add nsw i32 %130, -1
  store i32 %dec352, i32* @lexleft, align 4
  store i32 1, i32* %invert, align 4
  br label %if.end354

if.else353:                                       ; preds = %if.end340
  store i32 0, i32* %invert, align 4
  br label %if.end354

if.end354:                                        ; preds = %if.else353, %if.end349
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end354
  %131 = load i32, i32* %c, align 4
  %cmp355 = icmp eq i32 %131, 91
  br i1 %cmp355, label %land.lhs.true357, label %if.end407

land.lhs.true357:                                 ; preds = %do.body
  %132 = load i32, i32* @syntax_bits, align 4
  %and358 = and i32 %132, 4
  %tobool359 = icmp ne i32 %and358, 0
  br i1 %tobool359, label %if.then360, label %if.end407

if.then360:                                       ; preds = %land.lhs.true357
  store i32 0, i32* %c1, align 4
  br label %for.cond361

for.cond361:                                      ; preds = %for.inc404, %if.then360
  %133 = load i32, i32* %c1, align 4
  %idxprom362 = sext i32 %133 to i64
  %arrayidx363 = getelementptr inbounds [12 x %struct.anon.0], [12 x %struct.anon.0]* @prednames, i64 0, i64 %idxprom362
  %name = getelementptr inbounds %struct.anon.0, %struct.anon.0* %arrayidx363, i32 0, i32 0
  %134 = load i8*, i8** %name, align 16
  %tobool364 = icmp ne i8* %134, null
  br i1 %tobool364, label %for.body365, label %for.end406

for.body365:                                      ; preds = %for.cond361
  %135 = load i32, i32* %c1, align 4
  %idxprom366 = sext i32 %135 to i64
  %arrayidx367 = getelementptr inbounds [12 x %struct.anon.0], [12 x %struct.anon.0]* @prednames, i64 0, i64 %idxprom366
  %name368 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %arrayidx367, i32 0, i32 0
  %136 = load i8*, i8** %name368, align 16
  %call369 = call i32 @looking_at(i8* %136)
  %tobool370 = icmp ne i32 %call369, 0
  br i1 %tobool370, label %if.then371, label %if.end403

if.then371:                                       ; preds = %for.body365
  store i32 0, i32* %c2, align 4
  br label %for.cond372

for.cond372:                                      ; preds = %for.inc383, %if.then371
  %137 = load i32, i32* %c2, align 4
  %cmp373 = icmp slt i32 %137, 256
  br i1 %cmp373, label %for.body375, label %for.end385

for.body375:                                      ; preds = %for.cond372
  %138 = load i32, i32* %c1, align 4
  %idxprom376 = sext i32 %138 to i64
  %arrayidx377 = getelementptr inbounds [12 x %struct.anon.0], [12 x %struct.anon.0]* @prednames, i64 0, i64 %idxprom376
  %pred = getelementptr inbounds %struct.anon.0, %struct.anon.0* %arrayidx377, i32 0, i32 1
  %139 = load i32 (...)*, i32 (...)** %pred, align 8
  %140 = load i32, i32* %c2, align 4
  %callee.knr.cast = bitcast i32 (...)* %139 to i32 (i32, ...)*
  %call378 = call i32 (i32, ...) %callee.knr.cast(i32 %140)
  %tobool379 = icmp ne i32 %call378, 0
  br i1 %tobool379, label %if.then380, label %if.end382

if.then380:                                       ; preds = %for.body375
  %141 = load i32, i32* %c2, align 4
  %arraydecay381 = getelementptr inbounds [8 x i32], [8 x i32]* %ccl, i64 0, i64 0
  call void @setbit(i32 %141, i32* %arraydecay381)
  br label %if.end382

if.end382:                                        ; preds = %if.then380, %for.body375
  br label %for.inc383

for.inc383:                                       ; preds = %if.end382
  %142 = load i32, i32* %c2, align 4
  %inc384 = add nsw i32 %142, 1
  store i32 %inc384, i32* %c2, align 4
  br label %for.cond372, !llvm.loop !216

for.end385:                                       ; preds = %for.cond372
  %143 = load i32, i32* %c1, align 4
  %idxprom386 = sext i32 %143 to i64
  %arrayidx387 = getelementptr inbounds [12 x %struct.anon.0], [12 x %struct.anon.0]* @prednames, i64 0, i64 %idxprom386
  %name388 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %arrayidx387, i32 0, i32 0
  %144 = load i8*, i8** %name388, align 16
  %call389 = call i64 @strlen(i8* %144) #11
  %145 = load i8*, i8** @lexptr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %145, i64 %call389
  store i8* %add.ptr, i8** @lexptr, align 8
  %146 = load i32, i32* %c1, align 4
  %idxprom390 = sext i32 %146 to i64
  %arrayidx391 = getelementptr inbounds [12 x %struct.anon.0], [12 x %struct.anon.0]* @prednames, i64 0, i64 %idxprom390
  %name392 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %arrayidx391, i32 0, i32 0
  %147 = load i8*, i8** %name392, align 16
  %call393 = call i64 @strlen(i8* %147) #11
  %148 = load i32, i32* @lexleft, align 4
  %conv394 = sext i32 %148 to i64
  %sub395 = sub i64 %conv394, %call393
  %conv396 = trunc i64 %sub395 to i32
  store i32 %conv396, i32* @lexleft, align 4
  %149 = load i32, i32* @lexleft, align 4
  %tobool397 = icmp ne i32 %149, 0
  br i1 %tobool397, label %if.end399, label %if.then398

if.then398:                                       ; preds = %for.end385
  call void @dfaerror(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.65, i64 0, i64 0))
  br label %if.end399

if.end399:                                        ; preds = %if.then398, %for.end385
  %150 = load i8*, i8** @lexptr, align 8
  %incdec.ptr400 = getelementptr inbounds i8, i8* %150, i32 1
  store i8* %incdec.ptr400, i8** @lexptr, align 8
  %151 = load i8, i8* %150, align 1
  %conv401 = zext i8 %151 to i32
  store i32 %conv401, i32* %c1, align 4
  %152 = load i32, i32* @lexleft, align 4
  %dec402 = add nsw i32 %152, -1
  store i32 %dec402, i32* @lexleft, align 4
  br label %skip

if.end403:                                        ; preds = %for.body365
  br label %for.inc404

for.inc404:                                       ; preds = %if.end403
  %153 = load i32, i32* %c1, align 4
  %inc405 = add nsw i32 %153, 1
  store i32 %inc405, i32* %c1, align 4
  br label %for.cond361, !llvm.loop !217

for.end406:                                       ; preds = %for.cond361
  br label %if.end407

if.end407:                                        ; preds = %for.end406, %land.lhs.true357, %do.body
  %154 = load i32, i32* %c, align 4
  %cmp408 = icmp eq i32 %154, 92
  br i1 %cmp408, label %land.lhs.true410, label %if.end420

land.lhs.true410:                                 ; preds = %if.end407
  %155 = load i32, i32* @syntax_bits, align 4
  %and411 = and i32 %155, 1
  %tobool412 = icmp ne i32 %and411, 0
  br i1 %tobool412, label %if.then413, label %if.end420

if.then413:                                       ; preds = %land.lhs.true410
  %156 = load i32, i32* @lexleft, align 4
  %tobool414 = icmp ne i32 %156, 0
  br i1 %tobool414, label %if.end416, label %if.then415

if.then415:                                       ; preds = %if.then413
  call void @dfaerror(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.65, i64 0, i64 0))
  br label %if.end416

if.end416:                                        ; preds = %if.then415, %if.then413
  %157 = load i8*, i8** @lexptr, align 8
  %incdec.ptr417 = getelementptr inbounds i8, i8* %157, i32 1
  store i8* %incdec.ptr417, i8** @lexptr, align 8
  %158 = load i8, i8* %157, align 1
  %conv418 = zext i8 %158 to i32
  store i32 %conv418, i32* %c, align 4
  %159 = load i32, i32* @lexleft, align 4
  %dec419 = add nsw i32 %159, -1
  store i32 %dec419, i32* @lexleft, align 4
  br label %if.end420

if.end420:                                        ; preds = %if.end416, %land.lhs.true410, %if.end407
  %160 = load i32, i32* @lexleft, align 4
  %tobool421 = icmp ne i32 %160, 0
  br i1 %tobool421, label %if.end423, label %if.then422

if.then422:                                       ; preds = %if.end420
  call void @dfaerror(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.65, i64 0, i64 0))
  br label %if.end423

if.end423:                                        ; preds = %if.then422, %if.end420
  %161 = load i8*, i8** @lexptr, align 8
  %incdec.ptr424 = getelementptr inbounds i8, i8* %161, i32 1
  store i8* %incdec.ptr424, i8** @lexptr, align 8
  %162 = load i8, i8* %161, align 1
  %conv425 = zext i8 %162 to i32
  store i32 %conv425, i32* %c1, align 4
  %163 = load i32, i32* @lexleft, align 4
  %dec426 = add nsw i32 %163, -1
  store i32 %dec426, i32* @lexleft, align 4
  %164 = load i32, i32* %c1, align 4
  %cmp427 = icmp eq i32 %164, 45
  br i1 %cmp427, label %if.then429, label %if.else462

if.then429:                                       ; preds = %if.end423
  %165 = load i32, i32* @lexleft, align 4
  %tobool430 = icmp ne i32 %165, 0
  br i1 %tobool430, label %if.end432, label %if.then431

if.then431:                                       ; preds = %if.then429
  call void @dfaerror(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.65, i64 0, i64 0))
  br label %if.end432

if.end432:                                        ; preds = %if.then431, %if.then429
  %166 = load i8*, i8** @lexptr, align 8
  %incdec.ptr433 = getelementptr inbounds i8, i8* %166, i32 1
  store i8* %incdec.ptr433, i8** @lexptr, align 8
  %167 = load i8, i8* %166, align 1
  %conv434 = zext i8 %167 to i32
  store i32 %conv434, i32* %c2, align 4
  %168 = load i32, i32* @lexleft, align 4
  %dec435 = add nsw i32 %168, -1
  store i32 %dec435, i32* @lexleft, align 4
  %169 = load i32, i32* %c2, align 4
  %cmp436 = icmp eq i32 %169, 93
  br i1 %cmp436, label %if.then438, label %if.else441

if.then438:                                       ; preds = %if.end432
  %170 = load i8*, i8** @lexptr, align 8
  %incdec.ptr439 = getelementptr inbounds i8, i8* %170, i32 -1
  store i8* %incdec.ptr439, i8** @lexptr, align 8
  %171 = load i32, i32* @lexleft, align 4
  %inc440 = add nsw i32 %171, 1
  store i32 %inc440, i32* @lexleft, align 4
  %172 = load i32, i32* %c, align 4
  store i32 %172, i32* %c2, align 4
  br label %if.end461

if.else441:                                       ; preds = %if.end432
  %173 = load i32, i32* %c2, align 4
  %cmp442 = icmp eq i32 %173, 92
  br i1 %cmp442, label %land.lhs.true444, label %if.end454

land.lhs.true444:                                 ; preds = %if.else441
  %174 = load i32, i32* @syntax_bits, align 4
  %and445 = and i32 %174, 1
  %tobool446 = icmp ne i32 %and445, 0
  br i1 %tobool446, label %if.then447, label %if.end454

if.then447:                                       ; preds = %land.lhs.true444
  %175 = load i32, i32* @lexleft, align 4
  %tobool448 = icmp ne i32 %175, 0
  br i1 %tobool448, label %if.end450, label %if.then449

if.then449:                                       ; preds = %if.then447
  call void @dfaerror(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.65, i64 0, i64 0))
  br label %if.end450

if.end450:                                        ; preds = %if.then449, %if.then447
  %176 = load i8*, i8** @lexptr, align 8
  %incdec.ptr451 = getelementptr inbounds i8, i8* %176, i32 1
  store i8* %incdec.ptr451, i8** @lexptr, align 8
  %177 = load i8, i8* %176, align 1
  %conv452 = zext i8 %177 to i32
  store i32 %conv452, i32* %c2, align 4
  %178 = load i32, i32* @lexleft, align 4
  %dec453 = add nsw i32 %178, -1
  store i32 %dec453, i32* @lexleft, align 4
  br label %if.end454

if.end454:                                        ; preds = %if.end450, %land.lhs.true444, %if.else441
  %179 = load i32, i32* @lexleft, align 4
  %tobool455 = icmp ne i32 %179, 0
  br i1 %tobool455, label %if.end457, label %if.then456

if.then456:                                       ; preds = %if.end454
  call void @dfaerror(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.65, i64 0, i64 0))
  br label %if.end457

if.end457:                                        ; preds = %if.then456, %if.end454
  %180 = load i8*, i8** @lexptr, align 8
  %incdec.ptr458 = getelementptr inbounds i8, i8* %180, i32 1
  store i8* %incdec.ptr458, i8** @lexptr, align 8
  %181 = load i8, i8* %180, align 1
  %conv459 = zext i8 %181 to i32
  store i32 %conv459, i32* %c1, align 4
  %182 = load i32, i32* @lexleft, align 4
  %dec460 = add nsw i32 %182, -1
  store i32 %dec460, i32* @lexleft, align 4
  br label %if.end461

if.end461:                                        ; preds = %if.end457, %if.then438
  br label %if.end463

if.else462:                                       ; preds = %if.end423
  %183 = load i32, i32* %c, align 4
  store i32 %183, i32* %c2, align 4
  br label %if.end463

if.end463:                                        ; preds = %if.else462, %if.end461
  br label %while.cond

while.cond:                                       ; preds = %if.end490, %if.end463
  %184 = load i32, i32* %c, align 4
  %185 = load i32, i32* %c2, align 4
  %cmp464 = icmp sle i32 %184, %185
  br i1 %cmp464, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %186 = load i32, i32* %c, align 4
  %arraydecay466 = getelementptr inbounds [8 x i32], [8 x i32]* %ccl, i64 0, i64 0
  call void @setbit(i32 %186, i32* %arraydecay466)
  %187 = load i32, i32* @case_fold, align 4
  %tobool467 = icmp ne i32 %187, 0
  br i1 %tobool467, label %if.then468, label %if.end490

if.then468:                                       ; preds = %while.body
  %call469 = call i16** @__ctype_b_loc() #10
  %188 = load i16*, i16** %call469, align 8
  %189 = load i32, i32* %c, align 4
  %idxprom470 = sext i32 %189 to i64
  %arrayidx471 = getelementptr inbounds i16, i16* %188, i64 %idxprom470
  %190 = load i16, i16* %arrayidx471, align 2
  %conv472 = zext i16 %190 to i32
  %and473 = and i32 %conv472, 256
  %tobool474 = icmp ne i32 %and473, 0
  br i1 %tobool474, label %if.then475, label %if.else478

if.then475:                                       ; preds = %if.then468
  %191 = load i32, i32* %c, align 4
  %call476 = call i32 @tolower(i32 %191) #11
  %arraydecay477 = getelementptr inbounds [8 x i32], [8 x i32]* %ccl, i64 0, i64 0
  call void @setbit(i32 %call476, i32* %arraydecay477)
  br label %if.end489

if.else478:                                       ; preds = %if.then468
  %call479 = call i16** @__ctype_b_loc() #10
  %192 = load i16*, i16** %call479, align 8
  %193 = load i32, i32* %c, align 4
  %idxprom480 = sext i32 %193 to i64
  %arrayidx481 = getelementptr inbounds i16, i16* %192, i64 %idxprom480
  %194 = load i16, i16* %arrayidx481, align 2
  %conv482 = zext i16 %194 to i32
  %and483 = and i32 %conv482, 512
  %tobool484 = icmp ne i32 %and483, 0
  br i1 %tobool484, label %if.then485, label %if.end488

if.then485:                                       ; preds = %if.else478
  %195 = load i32, i32* %c, align 4
  %call486 = call i32 @toupper(i32 %195) #11
  %arraydecay487 = getelementptr inbounds [8 x i32], [8 x i32]* %ccl, i64 0, i64 0
  call void @setbit(i32 %call486, i32* %arraydecay487)
  br label %if.end488

if.end488:                                        ; preds = %if.then485, %if.else478
  br label %if.end489

if.end489:                                        ; preds = %if.end488, %if.then475
  br label %if.end490

if.end490:                                        ; preds = %if.end489, %while.body
  %196 = load i32, i32* %c, align 4
  %inc491 = add nsw i32 %196, 1
  store i32 %inc491, i32* %c, align 4
  br label %while.cond, !llvm.loop !218

while.end:                                        ; preds = %while.cond
  br label %skip

skip:                                             ; preds = %while.end, %if.end399
  br label %do.cond

do.cond:                                          ; preds = %skip
  %197 = load i32, i32* %c1, align 4
  store i32 %197, i32* %c, align 4
  %cmp492 = icmp ne i32 %197, 93
  br i1 %cmp492, label %do.body, label %do.end, !llvm.loop !219

do.end:                                           ; preds = %do.cond
  %198 = load i32, i32* %invert, align 4
  %tobool494 = icmp ne i32 %198, 0
  br i1 %tobool494, label %if.then495, label %if.end502

if.then495:                                       ; preds = %do.end
  %arraydecay496 = getelementptr inbounds [8 x i32], [8 x i32]* %ccl, i64 0, i64 0
  call void @notset(i32* %arraydecay496)
  %199 = load i32, i32* @syntax_bits, align 4
  %and497 = and i32 %199, 256
  %tobool498 = icmp ne i32 %and497, 0
  br i1 %tobool498, label %if.then499, label %if.end501

if.then499:                                       ; preds = %if.then495
  %arraydecay500 = getelementptr inbounds [8 x i32], [8 x i32]* %ccl, i64 0, i64 0
  call void @clrbit(i32 10, i32* %arraydecay500)
  br label %if.end501

if.end501:                                        ; preds = %if.then499, %if.then495
  br label %if.end502

if.end502:                                        ; preds = %if.end501, %do.end
  store i32 0, i32* @laststart, align 4
  %arraydecay503 = getelementptr inbounds [8 x i32], [8 x i32]* %ccl, i64 0, i64 0
  %call504 = call i32 @charclass_index(i32* %arraydecay503)
  %add505 = add nsw i32 273, %call504
  store i32 %add505, i32* @lasttok, align 4
  store i32 %add505, i32* %retval, align 4
  br label %return

sw.default:                                       ; preds = %if.end
  br label %normal_char

normal_char:                                      ; preds = %sw.default, %if.then335, %if.then307, %if.then289, %if.then284, %if.then277, %if.then269, %if.then261, %if.then251, %if.then244, %if.then165, %if.then158, %if.then153, %if.then147, %if.then140, %if.then135, %if.then129, %if.then125, %if.then119, %if.then112, %if.end108, %if.end104, %if.end100, %if.end96, %if.end92, %if.end85, %if.then25, %if.end22, %if.then10, %if.then2
  store i32 0, i32* @laststart, align 4
  %200 = load i32, i32* @case_fold, align 4
  %tobool506 = icmp ne i32 %200, 0
  br i1 %tobool506, label %land.lhs.true507, label %if.end533

land.lhs.true507:                                 ; preds = %normal_char
  %call508 = call i16** @__ctype_b_loc() #10
  %201 = load i16*, i16** %call508, align 8
  %202 = load i32, i32* %c, align 4
  %idxprom509 = sext i32 %202 to i64
  %arrayidx510 = getelementptr inbounds i16, i16* %201, i64 %idxprom509
  %203 = load i16, i16* %arrayidx510, align 2
  %conv511 = zext i16 %203 to i32
  %and512 = and i32 %conv511, 1024
  %tobool513 = icmp ne i32 %and512, 0
  br i1 %tobool513, label %if.then514, label %if.end533

if.then514:                                       ; preds = %land.lhs.true507
  %arraydecay515 = getelementptr inbounds [8 x i32], [8 x i32]* %ccl, i64 0, i64 0
  call void @zeroset(i32* %arraydecay515)
  %204 = load i32, i32* %c, align 4
  %arraydecay516 = getelementptr inbounds [8 x i32], [8 x i32]* %ccl, i64 0, i64 0
  call void @setbit(i32 %204, i32* %arraydecay516)
  %call517 = call i16** @__ctype_b_loc() #10
  %205 = load i16*, i16** %call517, align 8
  %206 = load i32, i32* %c, align 4
  %idxprom518 = sext i32 %206 to i64
  %arrayidx519 = getelementptr inbounds i16, i16* %205, i64 %idxprom518
  %207 = load i16, i16* %arrayidx519, align 2
  %conv520 = zext i16 %207 to i32
  %and521 = and i32 %conv520, 256
  %tobool522 = icmp ne i32 %and521, 0
  br i1 %tobool522, label %if.then523, label %if.else526

if.then523:                                       ; preds = %if.then514
  %208 = load i32, i32* %c, align 4
  %call524 = call i32 @tolower(i32 %208) #11
  %arraydecay525 = getelementptr inbounds [8 x i32], [8 x i32]* %ccl, i64 0, i64 0
  call void @setbit(i32 %call524, i32* %arraydecay525)
  br label %if.end529

if.else526:                                       ; preds = %if.then514
  %209 = load i32, i32* %c, align 4
  %call527 = call i32 @toupper(i32 %209) #11
  %arraydecay528 = getelementptr inbounds [8 x i32], [8 x i32]* %ccl, i64 0, i64 0
  call void @setbit(i32 %call527, i32* %arraydecay528)
  br label %if.end529

if.end529:                                        ; preds = %if.else526, %if.then523
  %arraydecay530 = getelementptr inbounds [8 x i32], [8 x i32]* %ccl, i64 0, i64 0
  %call531 = call i32 @charclass_index(i32* %arraydecay530)
  %add532 = add nsw i32 273, %call531
  store i32 %add532, i32* @lasttok, align 4
  store i32 %add532, i32* %retval, align 4
  br label %return

if.end533:                                        ; preds = %land.lhs.true507, %normal_char
  %210 = load i32, i32* %c, align 4
  store i32 %210, i32* %retval, align 4
  br label %return

sw.epilog:                                        ; preds = %if.end7
  br label %for.inc534

for.inc534:                                       ; preds = %sw.epilog
  %211 = load i32, i32* %i, align 4
  %inc535 = add nsw i32 %211, 1
  store i32 %inc535, i32* %i, align 4
  br label %for.cond, !llvm.loop !220

for.end536:                                       ; preds = %for.cond
  call void @abort() #8
  unreachable

return:                                           ; preds = %if.end533, %if.end529, %if.end502, %if.end329, %if.end301, %if.end285, %if.end270, %if.end262, %if.end252, %if.end240, %if.end154, %if.end136, %if.end126, %if.then107, %if.then103, %if.then99, %if.then95, %if.then91, %if.then84, %if.then21, %if.then
  %212 = load i32, i32* %retval, align 4
  ret i32 %212
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @notset(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 8
  %i = alloca i32, align 4
  store i32* %s, i32** %s.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %conv = sext i32 %0 to i64
  %cmp = icmp ult i64 %conv, 8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32*, i32** %s.addr, align 8
  %2 = load i32, i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds i32, i32* %1, i64 %idxprom
  %3 = load i32, i32* %arrayidx, align 4
  %neg = xor i32 %3, -1
  %4 = load i32*, i32** %s.addr, align 8
  %5 = load i32, i32* %i, align 4
  %idxprom2 = sext i32 %5 to i64
  %arrayidx3 = getelementptr inbounds i32, i32* %4, i64 %idxprom2
  store i32 %neg, i32* %arrayidx3, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond, !llvm.loop !221

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @charclass_index(i32* %s) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca i32*, align 8
  %i = alloca i32, align 4
  store i32* %s, i32** %s.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.dfa*, %struct.dfa** @dfa, align 8
  %cindex = getelementptr inbounds %struct.dfa, %struct.dfa* %1, i32 0, i32 1
  %2 = load i32, i32* %cindex, align 8
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32*, i32** %s.addr, align 8
  %4 = load %struct.dfa*, %struct.dfa** @dfa, align 8
  %charclasses = getelementptr inbounds %struct.dfa, %struct.dfa* %4, i32 0, i32 0
  %5 = load [8 x i32]*, [8 x i32]** %charclasses, align 8
  %6 = load i32, i32* %i, align 4
  %idxprom = sext i32 %6 to i64
  %arrayidx = getelementptr inbounds [8 x i32], [8 x i32]* %5, i64 %idxprom
  %arraydecay = getelementptr inbounds [8 x i32], [8 x i32]* %arrayidx, i64 0, i64 0
  %call = call i32 @equal(i32* %3, i32* %arraydecay)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  store i32 %7, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond, !llvm.loop !222

for.end:                                          ; preds = %for.cond
  %9 = load %struct.dfa*, %struct.dfa** @dfa, align 8
  %cindex1 = getelementptr inbounds %struct.dfa, %struct.dfa* %9, i32 0, i32 1
  %10 = load i32, i32* %cindex1, align 8
  %11 = load %struct.dfa*, %struct.dfa** @dfa, align 8
  %calloc = getelementptr inbounds %struct.dfa, %struct.dfa* %11, i32 0, i32 2
  %12 = load i32, i32* %calloc, align 4
  %cmp2 = icmp sge i32 %10, %12
  br i1 %cmp2, label %if.then3, label %if.end13

if.then3:                                         ; preds = %for.end
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then3
  %13 = load %struct.dfa*, %struct.dfa** @dfa, align 8
  %cindex4 = getelementptr inbounds %struct.dfa, %struct.dfa* %13, i32 0, i32 1
  %14 = load i32, i32* %cindex4, align 8
  %15 = load %struct.dfa*, %struct.dfa** @dfa, align 8
  %calloc5 = getelementptr inbounds %struct.dfa, %struct.dfa* %15, i32 0, i32 2
  %16 = load i32, i32* %calloc5, align 4
  %cmp6 = icmp sge i32 %14, %16
  br i1 %cmp6, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %17 = load %struct.dfa*, %struct.dfa** @dfa, align 8
  %calloc7 = getelementptr inbounds %struct.dfa, %struct.dfa* %17, i32 0, i32 2
  %18 = load i32, i32* %calloc7, align 4
  %mul = mul nsw i32 %18, 2
  store i32 %mul, i32* %calloc7, align 4
  br label %while.cond, !llvm.loop !223

while.end:                                        ; preds = %while.cond
  %19 = load %struct.dfa*, %struct.dfa** @dfa, align 8
  %charclasses8 = getelementptr inbounds %struct.dfa, %struct.dfa* %19, i32 0, i32 0
  %20 = load [8 x i32]*, [8 x i32]** %charclasses8, align 8
  %21 = bitcast [8 x i32]* %20 to i8*
  %22 = load %struct.dfa*, %struct.dfa** @dfa, align 8
  %calloc9 = getelementptr inbounds %struct.dfa, %struct.dfa* %22, i32 0, i32 2
  %23 = load i32, i32* %calloc9, align 4
  %conv = sext i32 %23 to i64
  %mul10 = mul i64 %conv, 32
  %call11 = call i8* @xrealloc_1(i8* %21, i64 %mul10)
  %24 = bitcast i8* %call11 to [8 x i32]*
  %25 = load %struct.dfa*, %struct.dfa** @dfa, align 8
  %charclasses12 = getelementptr inbounds %struct.dfa, %struct.dfa* %25, i32 0, i32 0
  store [8 x i32]* %24, [8 x i32]** %charclasses12, align 8
  br label %if.end13

if.end13:                                         ; preds = %while.end, %for.end
  %26 = load %struct.dfa*, %struct.dfa** @dfa, align 8
  %cindex14 = getelementptr inbounds %struct.dfa, %struct.dfa* %26, i32 0, i32 1
  %27 = load i32, i32* %cindex14, align 8
  %inc15 = add nsw i32 %27, 1
  store i32 %inc15, i32* %cindex14, align 8
  %28 = load i32*, i32** %s.addr, align 8
  %29 = load %struct.dfa*, %struct.dfa** @dfa, align 8
  %charclasses16 = getelementptr inbounds %struct.dfa, %struct.dfa* %29, i32 0, i32 0
  %30 = load [8 x i32]*, [8 x i32]** %charclasses16, align 8
  %31 = load i32, i32* %i, align 4
  %idxprom17 = sext i32 %31 to i64
  %arrayidx18 = getelementptr inbounds [8 x i32], [8 x i32]* %30, i64 %idxprom17
  %arraydecay19 = getelementptr inbounds [8 x i32], [8 x i32]* %arrayidx18, i64 0, i64 0
  call void @copyset(i32* %28, i32* %arraydecay19)
  %32 = load i32, i32* %i, align 4
  store i32 %32, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end13, %if.then
  %33 = load i32, i32* %retval, align 4
  ret i32 %33
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @looking_at(i8* %s) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca i8*, align 8
  %len = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 8
  %0 = load i8*, i8** %s.addr, align 8
  %call = call i64 @strlen(i8* %0) #11
  %conv = trunc i64 %call to i32
  store i32 %conv, i32* %len, align 4
  %1 = load i32, i32* @lexleft, align 4
  %2 = load i32, i32* %len, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i8*, i8** %s.addr, align 8
  %4 = load i8*, i8** @lexptr, align 8
  %5 = load i32, i32* %len, align 4
  %conv2 = sext i32 %5 to i64
  %call3 = call i32 @strncmp(i8* %3, i8* %4, i64 %conv2) #11
  %cmp4 = icmp eq i32 %call3, 0
  %conv5 = zext i1 %cmp4 to i32
  store i32 %conv5, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load i32, i32* %retval, align 4
  ret i32 %6
}

; Function Attrs: nocallback nounwind readonly willreturn
declare dso_local i32 @toupper(i32) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @equal(i32* %s1, i32* %s2) #0 {
entry:
  %retval = alloca i32, align 4
  %s1.addr = alloca i32*, align 8
  %s2.addr = alloca i32*, align 8
  %i = alloca i32, align 4
  store i32* %s1, i32** %s1.addr, align 8
  store i32* %s2, i32** %s2.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %conv = sext i32 %0 to i64
  %cmp = icmp ult i64 %conv, 8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32*, i32** %s1.addr, align 8
  %2 = load i32, i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds i32, i32* %1, i64 %idxprom
  %3 = load i32, i32* %arrayidx, align 4
  %4 = load i32*, i32** %s2.addr, align 8
  %5 = load i32, i32* %i, align 4
  %idxprom2 = sext i32 %5 to i64
  %arrayidx3 = getelementptr inbounds i32, i32* %4, i64 %idxprom2
  %6 = load i32, i32* %arrayidx3, align 4
  %cmp4 = icmp ne i32 %3, %6
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond, !llvm.loop !224

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  %8 = load i32, i32* %retval, align 4
  ret i32 %8
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @is_alpha(i32 %c) #0 {
entry:
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  %call = call i16** @__ctype_b_loc() #10
  %0 = load i16*, i16** %call, align 8
  %1 = load i32, i32* %c.addr, align 4
  %idxprom = sext i32 %1 to i64
  %arrayidx = getelementptr inbounds i16, i16* %0, i64 %idxprom
  %2 = load i16, i16* %arrayidx, align 2
  %conv = zext i16 %2 to i32
  %and = and i32 %conv, 1024
  %tobool = icmp ne i32 %and, 0
  %land.ext = zext i1 %tobool to i32
  ret i32 %land.ext
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @is_upper(i32 %c) #0 {
entry:
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  %call = call i16** @__ctype_b_loc() #10
  %0 = load i16*, i16** %call, align 8
  %1 = load i32, i32* %c.addr, align 4
  %idxprom = sext i32 %1 to i64
  %arrayidx = getelementptr inbounds i16, i16* %0, i64 %idxprom
  %2 = load i16, i16* %arrayidx, align 2
  %conv = zext i16 %2 to i32
  %and = and i32 %conv, 256
  %tobool = icmp ne i32 %and, 0
  %land.ext = zext i1 %tobool to i32
  ret i32 %land.ext
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @is_lower(i32 %c) #0 {
entry:
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  %call = call i16** @__ctype_b_loc() #10
  %0 = load i16*, i16** %call, align 8
  %1 = load i32, i32* %c.addr, align 4
  %idxprom = sext i32 %1 to i64
  %arrayidx = getelementptr inbounds i16, i16* %0, i64 %idxprom
  %2 = load i16, i16* %arrayidx, align 2
  %conv = zext i16 %2 to i32
  %and = and i32 %conv, 512
  %tobool = icmp ne i32 %and, 0
  %land.ext = zext i1 %tobool to i32
  ret i32 %land.ext
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @is_digit(i32 %c) #0 {
entry:
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  %call = call i16** @__ctype_b_loc() #10
  %0 = load i16*, i16** %call, align 8
  %1 = load i32, i32* %c.addr, align 4
  %idxprom = sext i32 %1 to i64
  %arrayidx = getelementptr inbounds i16, i16* %0, i64 %idxprom
  %2 = load i16, i16* %arrayidx, align 2
  %conv = zext i16 %2 to i32
  %and = and i32 %conv, 2048
  %tobool = icmp ne i32 %and, 0
  %land.ext = zext i1 %tobool to i32
  ret i32 %land.ext
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @is_xdigit(i32 %c) #0 {
entry:
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  %call = call i16** @__ctype_b_loc() #10
  %0 = load i16*, i16** %call, align 8
  %1 = load i32, i32* %c.addr, align 4
  %idxprom = sext i32 %1 to i64
  %arrayidx = getelementptr inbounds i16, i16* %0, i64 %idxprom
  %2 = load i16, i16* %arrayidx, align 2
  %conv = zext i16 %2 to i32
  %and = and i32 %conv, 4096
  %tobool = icmp ne i32 %and, 0
  %land.ext = zext i1 %tobool to i32
  ret i32 %land.ext
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @is_space(i32 %c) #0 {
entry:
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  %call = call i16** @__ctype_b_loc() #10
  %0 = load i16*, i16** %call, align 8
  %1 = load i32, i32* %c.addr, align 4
  %idxprom = sext i32 %1 to i64
  %arrayidx = getelementptr inbounds i16, i16* %0, i64 %idxprom
  %2 = load i16, i16* %arrayidx, align 2
  %conv = zext i16 %2 to i32
  %and = and i32 %conv, 8192
  %tobool = icmp ne i32 %and, 0
  %land.ext = zext i1 %tobool to i32
  ret i32 %land.ext
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @is_punct(i32 %c) #0 {
entry:
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  %call = call i16** @__ctype_b_loc() #10
  %0 = load i16*, i16** %call, align 8
  %1 = load i32, i32* %c.addr, align 4
  %idxprom = sext i32 %1 to i64
  %arrayidx = getelementptr inbounds i16, i16* %0, i64 %idxprom
  %2 = load i16, i16* %arrayidx, align 2
  %conv = zext i16 %2 to i32
  %and = and i32 %conv, 4
  %tobool = icmp ne i32 %and, 0
  %land.ext = zext i1 %tobool to i32
  ret i32 %land.ext
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @is_alnum(i32 %c) #0 {
entry:
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  %call = call i16** @__ctype_b_loc() #10
  %0 = load i16*, i16** %call, align 8
  %1 = load i32, i32* %c.addr, align 4
  %idxprom = sext i32 %1 to i64
  %arrayidx = getelementptr inbounds i16, i16* %0, i64 %idxprom
  %2 = load i16, i16* %arrayidx, align 2
  %conv = zext i16 %2 to i32
  %and = and i32 %conv, 8
  %tobool = icmp ne i32 %and, 0
  %land.ext = zext i1 %tobool to i32
  ret i32 %land.ext
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @is_print(i32 %c) #0 {
entry:
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  %call = call i16** @__ctype_b_loc() #10
  %0 = load i16*, i16** %call, align 8
  %1 = load i32, i32* %c.addr, align 4
  %idxprom = sext i32 %1 to i64
  %arrayidx = getelementptr inbounds i16, i16* %0, i64 %idxprom
  %2 = load i16, i16* %arrayidx, align 2
  %conv = zext i16 %2 to i32
  %and = and i32 %conv, 16384
  %tobool = icmp ne i32 %and, 0
  %land.ext = zext i1 %tobool to i32
  ret i32 %land.ext
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @is_graph(i32 %c) #0 {
entry:
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  %call = call i16** @__ctype_b_loc() #10
  %0 = load i16*, i16** %call, align 8
  %1 = load i32, i32* %c.addr, align 4
  %idxprom = sext i32 %1 to i64
  %arrayidx = getelementptr inbounds i16, i16* %0, i64 %idxprom
  %2 = load i16, i16* %arrayidx, align 2
  %conv = zext i16 %2 to i32
  %and = and i32 %conv, 32768
  %tobool = icmp ne i32 %and, 0
  %land.ext = zext i1 %tobool to i32
  ret i32 %land.ext
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @is_cntrl(i32 %c) #0 {
entry:
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  %call = call i16** @__ctype_b_loc() #10
  %0 = load i16*, i16** %call, align 8
  %1 = load i32, i32* %c.addr, align 4
  %idxprom = sext i32 %1 to i64
  %arrayidx = getelementptr inbounds i16, i16* %0, i64 %idxprom
  %2 = load i16, i16* %arrayidx, align 2
  %conv = zext i16 %2 to i32
  %and = and i32 %conv, 2
  %tobool = icmp ne i32 %and, 0
  %land.ext = zext i1 %tobool to i32
  ret i32 %land.ext
}

; Function Attrs: nocallback nounwind readonly willreturn
declare dso_local i32 @strncmp(i8*, i8*, i64) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal void @branch() #0 {
entry:
  call void @closure()
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* @tok, align 4
  %cmp = icmp ne i32 %0, 272
  br i1 %cmp, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %while.cond
  %1 = load i32, i32* @tok, align 4
  %cmp1 = icmp ne i32 %1, 269
  br i1 %cmp1, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %2 = load i32, i32* @tok, align 4
  %cmp2 = icmp sge i32 %2, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %while.cond
  %3 = phi i1 [ false, %land.lhs.true ], [ false, %while.cond ], [ %cmp2, %land.rhs ]
  br i1 %3, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  call void @closure()
  call void @addtok(i32 268)
  br label %while.cond, !llvm.loop !225

while.end:                                        ; preds = %land.end
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @closure() #0 {
entry:
  %tindex = alloca i32, align 4
  %ntokens = alloca i32, align 4
  %i = alloca i32, align 4
  call void @atom()
  br label %while.cond

while.cond:                                       ; preds = %if.end22, %entry
  %0 = load i32, i32* @tok, align 4
  %cmp = icmp eq i32 %0, 264
  br i1 %cmp, label %lor.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.cond
  %1 = load i32, i32* @tok, align 4
  %cmp1 = icmp eq i32 %1, 265
  br i1 %cmp1, label %lor.end, label %lor.lhs.false2

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %2 = load i32, i32* @tok, align 4
  %cmp3 = icmp eq i32 %2, 266
  br i1 %cmp3, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false2
  %3 = load i32, i32* @tok, align 4
  %cmp4 = icmp eq i32 %3, 267
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false2, %lor.lhs.false, %while.cond
  %4 = phi i1 [ true, %lor.lhs.false2 ], [ true, %lor.lhs.false ], [ true, %while.cond ], [ %cmp4, %lor.rhs ]
  br i1 %4, label %while.body, label %while.end

while.body:                                       ; preds = %lor.end
  %5 = load i32, i32* @tok, align 4
  %cmp5 = icmp eq i32 %5, 267
  br i1 %cmp5, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %6 = load %struct.dfa*, %struct.dfa** @dfa, align 8
  %tindex6 = getelementptr inbounds %struct.dfa, %struct.dfa* %6, i32 0, i32 4
  %7 = load i32, i32* %tindex6, align 8
  %call = call i32 @nsubtoks(i32 %7)
  store i32 %call, i32* %ntokens, align 4
  %8 = load %struct.dfa*, %struct.dfa** @dfa, align 8
  %tindex7 = getelementptr inbounds %struct.dfa, %struct.dfa* %8, i32 0, i32 4
  %9 = load i32, i32* %tindex7, align 8
  %10 = load i32, i32* %ntokens, align 4
  %sub = sub nsw i32 %9, %10
  store i32 %sub, i32* %tindex, align 4
  %11 = load i32, i32* @maxrep, align 4
  %cmp8 = icmp eq i32 %11, 0
  br i1 %cmp8, label %if.then9, label %if.end

if.then9:                                         ; preds = %if.then
  call void @addtok(i32 266)
  br label %if.end

if.end:                                           ; preds = %if.then9, %if.then
  %12 = load i32, i32* @minrep, align 4
  %cmp10 = icmp eq i32 %12, 0
  br i1 %cmp10, label %if.then11, label %if.end12

if.then11:                                        ; preds = %if.end
  call void @addtok(i32 264)
  br label %if.end12

if.end12:                                         ; preds = %if.then11, %if.end
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end12
  %13 = load i32, i32* %i, align 4
  %14 = load i32, i32* @minrep, align 4
  %cmp13 = icmp slt i32 %13, %14
  br i1 %cmp13, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %15 = load i32, i32* %tindex, align 4
  %16 = load i32, i32* %ntokens, align 4
  call void @copytoks(i32 %15, i32 %16)
  call void @addtok(i32 268)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %17 = load i32, i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond, !llvm.loop !226

for.end:                                          ; preds = %for.cond
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc17, %for.end
  %18 = load i32, i32* %i, align 4
  %19 = load i32, i32* @maxrep, align 4
  %cmp15 = icmp slt i32 %18, %19
  br i1 %cmp15, label %for.body16, label %for.end19

for.body16:                                       ; preds = %for.cond14
  %20 = load i32, i32* %tindex, align 4
  %21 = load i32, i32* %ntokens, align 4
  call void @copytoks(i32 %20, i32 %21)
  call void @addtok(i32 264)
  call void @addtok(i32 268)
  br label %for.inc17

for.inc17:                                        ; preds = %for.body16
  %22 = load i32, i32* %i, align 4
  %inc18 = add nsw i32 %22, 1
  store i32 %inc18, i32* %i, align 4
  br label %for.cond14, !llvm.loop !227

for.end19:                                        ; preds = %for.cond14
  %call20 = call i32 @lex()
  store i32 %call20, i32* @tok, align 4
  br label %if.end22

if.else:                                          ; preds = %while.body
  %23 = load i32, i32* @tok, align 4
  call void @addtok(i32 %23)
  %call21 = call i32 @lex()
  store i32 %call21, i32* @tok, align 4
  br label %if.end22

if.end22:                                         ; preds = %if.else, %for.end19
  br label %while.cond, !llvm.loop !228

while.end:                                        ; preds = %lor.end
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @nsubtoks(i32 %tindex) #0 {
entry:
  %retval = alloca i32, align 4
  %tindex.addr = alloca i32, align 4
  %ntoks1 = alloca i32, align 4
  store i32 %tindex, i32* %tindex.addr, align 4
  %0 = load %struct.dfa*, %struct.dfa** @dfa, align 8
  %tokens = getelementptr inbounds %struct.dfa, %struct.dfa* %0, i32 0, i32 3
  %1 = load i32*, i32** %tokens, align 8
  %2 = load i32, i32* %tindex.addr, align 4
  %sub = sub nsw i32 %2, 1
  %idxprom = sext i32 %sub to i64
  %arrayidx = getelementptr inbounds i32, i32* %1, i64 %idxprom
  %3 = load i32, i32* %arrayidx, align 4
  switch i32 %3, label %sw.default [
    i32 264, label %sw.bb
    i32 265, label %sw.bb
    i32 266, label %sw.bb
    i32 268, label %sw.bb2
    i32 269, label %sw.bb2
    i32 270, label %sw.bb2
  ]

sw.default:                                       ; preds = %entry
  store i32 1, i32* %retval, align 4
  br label %return

sw.bb:                                            ; preds = %entry, %entry, %entry
  %4 = load i32, i32* %tindex.addr, align 4
  %sub1 = sub nsw i32 %4, 1
  %call = call i32 @nsubtoks(i32 %sub1)
  %add = add nsw i32 1, %call
  store i32 %add, i32* %retval, align 4
  br label %return

sw.bb2:                                           ; preds = %entry, %entry, %entry
  %5 = load i32, i32* %tindex.addr, align 4
  %sub3 = sub nsw i32 %5, 1
  %call4 = call i32 @nsubtoks(i32 %sub3)
  store i32 %call4, i32* %ntoks1, align 4
  %6 = load i32, i32* %ntoks1, align 4
  %add5 = add nsw i32 1, %6
  %7 = load i32, i32* %tindex.addr, align 4
  %sub6 = sub nsw i32 %7, 1
  %8 = load i32, i32* %ntoks1, align 4
  %sub7 = sub nsw i32 %sub6, %8
  %call8 = call i32 @nsubtoks(i32 %sub7)
  %add9 = add nsw i32 %add5, %call8
  store i32 %add9, i32* %retval, align 4
  br label %return

return:                                           ; preds = %sw.bb2, %sw.bb, %sw.default
  %9 = load i32, i32* %retval, align 4
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @copytoks(i32 %tindex, i32 %ntokens) #0 {
entry:
  %tindex.addr = alloca i32, align 4
  %ntokens.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %tindex, i32* %tindex.addr, align 4
  store i32 %ntokens, i32* %ntokens.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %ntokens.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load %struct.dfa*, %struct.dfa** @dfa, align 8
  %tokens = getelementptr inbounds %struct.dfa, %struct.dfa* %2, i32 0, i32 3
  %3 = load i32*, i32** %tokens, align 8
  %4 = load i32, i32* %tindex.addr, align 4
  %5 = load i32, i32* %i, align 4
  %add = add nsw i32 %4, %5
  %idxprom = sext i32 %add to i64
  %arrayidx = getelementptr inbounds i32, i32* %3, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  call void @addtok(i32 %6)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond, !llvm.loop !229

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @atom() #0 {
entry:
  %0 = load i32, i32* @tok, align 4
  %cmp = icmp sge i32 %0, 0
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @tok, align 4
  %cmp1 = icmp slt i32 %1, 256
  br i1 %cmp1, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %2 = load i32, i32* @tok, align 4
  %cmp2 = icmp sge i32 %2, 273
  br i1 %cmp2, label %if.then, label %lor.lhs.false3

lor.lhs.false3:                                   ; preds = %lor.lhs.false
  %3 = load i32, i32* @tok, align 4
  %cmp4 = icmp eq i32 %3, 257
  br i1 %cmp4, label %if.then, label %lor.lhs.false5

lor.lhs.false5:                                   ; preds = %lor.lhs.false3
  %4 = load i32, i32* @tok, align 4
  %cmp6 = icmp eq i32 %4, 258
  br i1 %cmp6, label %if.then, label %lor.lhs.false7

lor.lhs.false7:                                   ; preds = %lor.lhs.false5
  %5 = load i32, i32* @tok, align 4
  %cmp8 = icmp eq i32 %5, 259
  br i1 %cmp8, label %if.then, label %lor.lhs.false9

lor.lhs.false9:                                   ; preds = %lor.lhs.false7
  %6 = load i32, i32* @tok, align 4
  %cmp10 = icmp eq i32 %6, 260
  br i1 %cmp10, label %if.then, label %lor.lhs.false11

lor.lhs.false11:                                  ; preds = %lor.lhs.false9
  %7 = load i32, i32* @tok, align 4
  %cmp12 = icmp eq i32 %7, 261
  br i1 %cmp12, label %if.then, label %lor.lhs.false13

lor.lhs.false13:                                  ; preds = %lor.lhs.false11
  %8 = load i32, i32* @tok, align 4
  %cmp14 = icmp eq i32 %8, 262
  br i1 %cmp14, label %if.then, label %lor.lhs.false15

lor.lhs.false15:                                  ; preds = %lor.lhs.false13
  %9 = load i32, i32* @tok, align 4
  %cmp16 = icmp eq i32 %9, 263
  br i1 %cmp16, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false15, %lor.lhs.false13, %lor.lhs.false11, %lor.lhs.false9, %lor.lhs.false7, %lor.lhs.false5, %lor.lhs.false3, %lor.lhs.false, %land.lhs.true
  %10 = load i32, i32* @tok, align 4
  call void @addtok(i32 %10)
  %call = call i32 @lex()
  store i32 %call, i32* @tok, align 4
  br label %if.end25

if.else:                                          ; preds = %lor.lhs.false15
  %11 = load i32, i32* @tok, align 4
  %cmp17 = icmp eq i32 %11, 271
  br i1 %cmp17, label %if.then18, label %if.else23

if.then18:                                        ; preds = %if.else
  %call19 = call i32 @lex()
  store i32 %call19, i32* @tok, align 4
  call void @regexp(i32 0)
  %12 = load i32, i32* @tok, align 4
  %cmp20 = icmp ne i32 %12, 272
  br i1 %cmp20, label %if.then21, label %if.end

if.then21:                                        ; preds = %if.then18
  call void @dfaerror(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.77, i64 0, i64 0))
  br label %if.end

if.end:                                           ; preds = %if.then21, %if.then18
  %call22 = call i32 @lex()
  store i32 %call22, i32* @tok, align 4
  br label %if.end24

if.else23:                                        ; preds = %if.else
  call void @addtok(i32 256)
  br label %if.end24

if.end24:                                         ; preds = %if.else23, %if.end
  br label %if.end25

if.end25:                                         ; preds = %if.end24, %if.then
  ret void
}

; Function Attrs: nocallback nounwind
declare dso_local noalias align 16 i8* @calloc(i64, i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @dfamust(%struct.dfa* %dfa) #0 {
entry:
  %dfa.addr = alloca %struct.dfa*, align 8
  %musts = alloca %struct.must*, align 8
  %mp = alloca %struct.must*, align 8
  %result = alloca i8*, align 8
  %ri = alloca i32, align 4
  %i = alloca i32, align 4
  %exact = alloca i32, align 4
  %t = alloca i32, align 4
  %dm = alloca %struct.dfamust*, align 8
  %new = alloca i8**, align 8
  %lmp = alloca %struct.must*, align 8
  %rmp = alloca %struct.must*, align 8
  %j = alloca i32, align 4
  %ln = alloca i32, align 4
  %rn = alloca i32, align 4
  %n = alloca i32, align 4
  %lmp227 = alloca %struct.must*, align 8
  %rmp228 = alloca %struct.must*, align 8
  %tp = alloca i8*, align 8
  store %struct.dfa* %dfa, %struct.dfa** %dfa.addr, align 8
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.78, i64 0, i64 0), i8** %result, align 8
  store i32 0, i32* %exact, align 4
  %0 = load %struct.dfa*, %struct.dfa** %dfa.addr, align 8
  %tindex = getelementptr inbounds %struct.dfa, %struct.dfa* %0, i32 0, i32 4
  %1 = load i32, i32* %tindex, align 8
  %add = add nsw i32 %1, 1
  %conv = sext i32 %add to i64
  %mul = mul i64 %conv, 32
  %call = call noalias align 16 i8* @malloc(i64 %mul) #9
  %2 = bitcast i8* %call to %struct.must*
  store %struct.must* %2, %struct.must** %musts, align 8
  %3 = load %struct.must*, %struct.must** %musts, align 8
  %cmp = icmp eq %struct.must* %3, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.must*, %struct.must** %musts, align 8
  store %struct.must* %4, %struct.must** %mp, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %5 = load i32, i32* %i, align 4
  %6 = load %struct.dfa*, %struct.dfa** %dfa.addr, align 8
  %tindex2 = getelementptr inbounds %struct.dfa, %struct.dfa* %6, i32 0, i32 4
  %7 = load i32, i32* %tindex2, align 8
  %cmp3 = icmp sle i32 %5, %7
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load %struct.must*, %struct.must** %mp, align 8
  %9 = load i32, i32* %i, align 4
  %idxprom = sext i32 %9 to i64
  %arrayidx = getelementptr inbounds %struct.must, %struct.must* %8, i64 %idxprom
  %10 = bitcast %struct.must* %arrayidx to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 bitcast (%struct.must* @dfamust.must0 to i8*), i64 32, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond, !llvm.loop !230

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc62, %for.end
  %12 = load i32, i32* %i, align 4
  %13 = load %struct.dfa*, %struct.dfa** %dfa.addr, align 8
  %tindex6 = getelementptr inbounds %struct.dfa, %struct.dfa* %13, i32 0, i32 4
  %14 = load i32, i32* %tindex6, align 8
  %cmp7 = icmp sle i32 %12, %14
  br i1 %cmp7, label %for.body9, label %for.end64

for.body9:                                        ; preds = %for.cond5
  %call10 = call noalias align 16 i8* @malloc(i64 8) #9
  %15 = bitcast i8* %call10 to i8**
  %16 = load %struct.must*, %struct.must** %mp, align 8
  %17 = load i32, i32* %i, align 4
  %idxprom11 = sext i32 %17 to i64
  %arrayidx12 = getelementptr inbounds %struct.must, %struct.must* %16, i64 %idxprom11
  %in = getelementptr inbounds %struct.must, %struct.must* %arrayidx12, i32 0, i32 0
  store i8** %15, i8*** %in, align 8
  %call13 = call noalias align 16 i8* @malloc(i64 2) #9
  %18 = load %struct.must*, %struct.must** %mp, align 8
  %19 = load i32, i32* %i, align 4
  %idxprom14 = sext i32 %19 to i64
  %arrayidx15 = getelementptr inbounds %struct.must, %struct.must* %18, i64 %idxprom14
  %left = getelementptr inbounds %struct.must, %struct.must* %arrayidx15, i32 0, i32 1
  store i8* %call13, i8** %left, align 8
  %call16 = call noalias align 16 i8* @malloc(i64 2) #9
  %20 = load %struct.must*, %struct.must** %mp, align 8
  %21 = load i32, i32* %i, align 4
  %idxprom17 = sext i32 %21 to i64
  %arrayidx18 = getelementptr inbounds %struct.must, %struct.must* %20, i64 %idxprom17
  %right = getelementptr inbounds %struct.must, %struct.must* %arrayidx18, i32 0, i32 2
  store i8* %call16, i8** %right, align 8
  %call19 = call noalias align 16 i8* @malloc(i64 2) #9
  %22 = load %struct.must*, %struct.must** %mp, align 8
  %23 = load i32, i32* %i, align 4
  %idxprom20 = sext i32 %23 to i64
  %arrayidx21 = getelementptr inbounds %struct.must, %struct.must* %22, i64 %idxprom20
  %is = getelementptr inbounds %struct.must, %struct.must* %arrayidx21, i32 0, i32 3
  store i8* %call19, i8** %is, align 8
  %24 = load %struct.must*, %struct.must** %mp, align 8
  %25 = load i32, i32* %i, align 4
  %idxprom22 = sext i32 %25 to i64
  %arrayidx23 = getelementptr inbounds %struct.must, %struct.must* %24, i64 %idxprom22
  %in24 = getelementptr inbounds %struct.must, %struct.must* %arrayidx23, i32 0, i32 0
  %26 = load i8**, i8*** %in24, align 8
  %cmp25 = icmp eq i8** %26, null
  br i1 %cmp25, label %if.then44, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body9
  %27 = load %struct.must*, %struct.must** %mp, align 8
  %28 = load i32, i32* %i, align 4
  %idxprom27 = sext i32 %28 to i64
  %arrayidx28 = getelementptr inbounds %struct.must, %struct.must* %27, i64 %idxprom27
  %left29 = getelementptr inbounds %struct.must, %struct.must* %arrayidx28, i32 0, i32 1
  %29 = load i8*, i8** %left29, align 8
  %cmp30 = icmp eq i8* %29, null
  br i1 %cmp30, label %if.then44, label %lor.lhs.false32

lor.lhs.false32:                                  ; preds = %lor.lhs.false
  %30 = load %struct.must*, %struct.must** %mp, align 8
  %31 = load i32, i32* %i, align 4
  %idxprom33 = sext i32 %31 to i64
  %arrayidx34 = getelementptr inbounds %struct.must, %struct.must* %30, i64 %idxprom33
  %right35 = getelementptr inbounds %struct.must, %struct.must* %arrayidx34, i32 0, i32 2
  %32 = load i8*, i8** %right35, align 8
  %cmp36 = icmp eq i8* %32, null
  br i1 %cmp36, label %if.then44, label %lor.lhs.false38

lor.lhs.false38:                                  ; preds = %lor.lhs.false32
  %33 = load %struct.must*, %struct.must** %mp, align 8
  %34 = load i32, i32* %i, align 4
  %idxprom39 = sext i32 %34 to i64
  %arrayidx40 = getelementptr inbounds %struct.must, %struct.must* %33, i64 %idxprom39
  %is41 = getelementptr inbounds %struct.must, %struct.must* %arrayidx40, i32 0, i32 3
  %35 = load i8*, i8** %is41, align 8
  %cmp42 = icmp eq i8* %35, null
  br i1 %cmp42, label %if.then44, label %if.end45

if.then44:                                        ; preds = %lor.lhs.false38, %lor.lhs.false32, %lor.lhs.false, %for.body9
  br label %done

if.end45:                                         ; preds = %lor.lhs.false38
  %36 = load %struct.must*, %struct.must** %mp, align 8
  %37 = load i32, i32* %i, align 4
  %idxprom46 = sext i32 %37 to i64
  %arrayidx47 = getelementptr inbounds %struct.must, %struct.must* %36, i64 %idxprom46
  %is48 = getelementptr inbounds %struct.must, %struct.must* %arrayidx47, i32 0, i32 3
  %38 = load i8*, i8** %is48, align 8
  %arrayidx49 = getelementptr inbounds i8, i8* %38, i64 0
  store i8 0, i8* %arrayidx49, align 1
  %39 = load %struct.must*, %struct.must** %mp, align 8
  %40 = load i32, i32* %i, align 4
  %idxprom50 = sext i32 %40 to i64
  %arrayidx51 = getelementptr inbounds %struct.must, %struct.must* %39, i64 %idxprom50
  %right52 = getelementptr inbounds %struct.must, %struct.must* %arrayidx51, i32 0, i32 2
  %41 = load i8*, i8** %right52, align 8
  %arrayidx53 = getelementptr inbounds i8, i8* %41, i64 0
  store i8 0, i8* %arrayidx53, align 1
  %42 = load %struct.must*, %struct.must** %mp, align 8
  %43 = load i32, i32* %i, align 4
  %idxprom54 = sext i32 %43 to i64
  %arrayidx55 = getelementptr inbounds %struct.must, %struct.must* %42, i64 %idxprom54
  %left56 = getelementptr inbounds %struct.must, %struct.must* %arrayidx55, i32 0, i32 1
  %44 = load i8*, i8** %left56, align 8
  %arrayidx57 = getelementptr inbounds i8, i8* %44, i64 0
  store i8 0, i8* %arrayidx57, align 1
  %45 = load %struct.must*, %struct.must** %mp, align 8
  %46 = load i32, i32* %i, align 4
  %idxprom58 = sext i32 %46 to i64
  %arrayidx59 = getelementptr inbounds %struct.must, %struct.must* %45, i64 %idxprom58
  %in60 = getelementptr inbounds %struct.must, %struct.must* %arrayidx59, i32 0, i32 0
  %47 = load i8**, i8*** %in60, align 8
  %arrayidx61 = getelementptr inbounds i8*, i8** %47, i64 0
  store i8* null, i8** %arrayidx61, align 8
  br label %for.inc62

for.inc62:                                        ; preds = %if.end45
  %48 = load i32, i32* %i, align 4
  %inc63 = add nsw i32 %48, 1
  store i32 %inc63, i32* %i, align 4
  br label %for.cond5, !llvm.loop !231

for.end64:                                        ; preds = %for.cond5
  store i32 0, i32* %ri, align 4
  br label %for.cond65

for.cond65:                                       ; preds = %for.inc370, %for.end64
  %49 = load i32, i32* %ri, align 4
  %50 = load %struct.dfa*, %struct.dfa** %dfa.addr, align 8
  %tindex66 = getelementptr inbounds %struct.dfa, %struct.dfa* %50, i32 0, i32 4
  %51 = load i32, i32* %tindex66, align 8
  %cmp67 = icmp slt i32 %49, %51
  br i1 %cmp67, label %for.body69, label %for.end372

for.body69:                                       ; preds = %for.cond65
  %52 = load %struct.dfa*, %struct.dfa** %dfa.addr, align 8
  %tokens = getelementptr inbounds %struct.dfa, %struct.dfa* %52, i32 0, i32 3
  %53 = load i32*, i32** %tokens, align 8
  %54 = load i32, i32* %ri, align 4
  %idxprom70 = sext i32 %54 to i64
  %arrayidx71 = getelementptr inbounds i32, i32* %53, i64 %idxprom70
  %55 = load i32, i32* %arrayidx71, align 4
  store i32 %55, i32* %t, align 4
  switch i32 %55, label %sw.default [
    i32 271, label %sw.bb
    i32 272, label %sw.bb
    i32 256, label %sw.bb72
    i32 258, label %sw.bb72
    i32 259, label %sw.bb72
    i32 260, label %sw.bb72
    i32 261, label %sw.bb72
    i32 262, label %sw.bb72
    i32 263, label %sw.bb72
    i32 257, label %sw.bb72
    i32 265, label %sw.bb73
    i32 264, label %sw.bb73
    i32 269, label %sw.bb78
    i32 270, label %sw.bb78
    i32 266, label %sw.bb175
    i32 -1, label %sw.bb183
    i32 268, label %sw.bb221
  ]

sw.bb:                                            ; preds = %for.body69, %for.body69
  br label %done

sw.bb72:                                          ; preds = %for.body69, %for.body69, %for.body69, %for.body69, %for.body69, %for.body69, %for.body69, %for.body69
  %56 = load %struct.must*, %struct.must** %mp, align 8
  call void @resetmust(%struct.must* %56)
  br label %sw.epilog

sw.bb73:                                          ; preds = %for.body69, %for.body69
  %57 = load %struct.must*, %struct.must** %mp, align 8
  %58 = load %struct.must*, %struct.must** %musts, align 8
  %cmp74 = icmp ule %struct.must* %57, %58
  br i1 %cmp74, label %if.then76, label %if.end77

if.then76:                                        ; preds = %sw.bb73
  br label %done

if.end77:                                         ; preds = %sw.bb73
  %59 = load %struct.must*, %struct.must** %mp, align 8
  %incdec.ptr = getelementptr inbounds %struct.must, %struct.must* %59, i32 -1
  store %struct.must* %incdec.ptr, %struct.must** %mp, align 8
  %60 = load %struct.must*, %struct.must** %mp, align 8
  call void @resetmust(%struct.must* %60)
  br label %sw.epilog

sw.bb78:                                          ; preds = %for.body69, %for.body69
  %61 = load %struct.must*, %struct.must** %mp, align 8
  %62 = load %struct.must*, %struct.must** %musts, align 8
  %arrayidx79 = getelementptr inbounds %struct.must, %struct.must* %62, i64 2
  %cmp80 = icmp ult %struct.must* %61, %arrayidx79
  br i1 %cmp80, label %if.then82, label %if.end83

if.then82:                                        ; preds = %sw.bb78
  br label %done

if.end83:                                         ; preds = %sw.bb78
  %63 = load %struct.must*, %struct.must** %mp, align 8
  %incdec.ptr84 = getelementptr inbounds %struct.must, %struct.must* %63, i32 -1
  store %struct.must* %incdec.ptr84, %struct.must** %mp, align 8
  store %struct.must* %incdec.ptr84, %struct.must** %rmp, align 8
  %64 = load %struct.must*, %struct.must** %mp, align 8
  %incdec.ptr85 = getelementptr inbounds %struct.must, %struct.must* %64, i32 -1
  store %struct.must* %incdec.ptr85, %struct.must** %mp, align 8
  store %struct.must* %incdec.ptr85, %struct.must** %lmp, align 8
  %65 = load %struct.must*, %struct.must** %lmp, align 8
  %is86 = getelementptr inbounds %struct.must, %struct.must* %65, i32 0, i32 3
  %66 = load i8*, i8** %is86, align 8
  %67 = load %struct.must*, %struct.must** %rmp, align 8
  %is87 = getelementptr inbounds %struct.must, %struct.must* %67, i32 0, i32 3
  %68 = load i8*, i8** %is87, align 8
  %call88 = call i32 @strcmp(i8* %66, i8* %68) #11
  %cmp89 = icmp ne i32 %call88, 0
  br i1 %cmp89, label %if.then91, label %if.end94

if.then91:                                        ; preds = %if.end83
  %69 = load %struct.must*, %struct.must** %lmp, align 8
  %is92 = getelementptr inbounds %struct.must, %struct.must* %69, i32 0, i32 3
  %70 = load i8*, i8** %is92, align 8
  %arrayidx93 = getelementptr inbounds i8, i8* %70, i64 0
  store i8 0, i8* %arrayidx93, align 1
  br label %if.end94

if.end94:                                         ; preds = %if.then91, %if.end83
  store i32 0, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end94
  %71 = load %struct.must*, %struct.must** %lmp, align 8
  %left95 = getelementptr inbounds %struct.must, %struct.must* %71, i32 0, i32 1
  %72 = load i8*, i8** %left95, align 8
  %73 = load i32, i32* %i, align 4
  %idxprom96 = sext i32 %73 to i64
  %arrayidx97 = getelementptr inbounds i8, i8* %72, i64 %idxprom96
  %74 = load i8, i8* %arrayidx97, align 1
  %conv98 = sext i8 %74 to i32
  %cmp99 = icmp ne i32 %conv98, 0
  br i1 %cmp99, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %75 = load %struct.must*, %struct.must** %lmp, align 8
  %left101 = getelementptr inbounds %struct.must, %struct.must* %75, i32 0, i32 1
  %76 = load i8*, i8** %left101, align 8
  %77 = load i32, i32* %i, align 4
  %idxprom102 = sext i32 %77 to i64
  %arrayidx103 = getelementptr inbounds i8, i8* %76, i64 %idxprom102
  %78 = load i8, i8* %arrayidx103, align 1
  %conv104 = sext i8 %78 to i32
  %79 = load %struct.must*, %struct.must** %rmp, align 8
  %left105 = getelementptr inbounds %struct.must, %struct.must* %79, i32 0, i32 1
  %80 = load i8*, i8** %left105, align 8
  %81 = load i32, i32* %i, align 4
  %idxprom106 = sext i32 %81 to i64
  %arrayidx107 = getelementptr inbounds i8, i8* %80, i64 %idxprom106
  %82 = load i8, i8* %arrayidx107, align 1
  %conv108 = sext i8 %82 to i32
  %cmp109 = icmp eq i32 %conv104, %conv108
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %83 = phi i1 [ false, %while.cond ], [ %cmp109, %land.rhs ]
  br i1 %83, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %84 = load i32, i32* %i, align 4
  %inc111 = add nsw i32 %84, 1
  store i32 %inc111, i32* %i, align 4
  br label %while.cond, !llvm.loop !232

while.end:                                        ; preds = %land.end
  %85 = load %struct.must*, %struct.must** %lmp, align 8
  %left112 = getelementptr inbounds %struct.must, %struct.must* %85, i32 0, i32 1
  %86 = load i8*, i8** %left112, align 8
  %87 = load i32, i32* %i, align 4
  %idxprom113 = sext i32 %87 to i64
  %arrayidx114 = getelementptr inbounds i8, i8* %86, i64 %idxprom113
  store i8 0, i8* %arrayidx114, align 1
  %88 = load %struct.must*, %struct.must** %lmp, align 8
  %right115 = getelementptr inbounds %struct.must, %struct.must* %88, i32 0, i32 2
  %89 = load i8*, i8** %right115, align 8
  %call116 = call i64 @strlen(i8* %89) #11
  %conv117 = trunc i64 %call116 to i32
  store i32 %conv117, i32* %ln, align 4
  %90 = load %struct.must*, %struct.must** %rmp, align 8
  %right118 = getelementptr inbounds %struct.must, %struct.must* %90, i32 0, i32 2
  %91 = load i8*, i8** %right118, align 8
  %call119 = call i64 @strlen(i8* %91) #11
  %conv120 = trunc i64 %call119 to i32
  store i32 %conv120, i32* %rn, align 4
  %92 = load i32, i32* %ln, align 4
  store i32 %92, i32* %n, align 4
  %93 = load i32, i32* %n, align 4
  %94 = load i32, i32* %rn, align 4
  %cmp121 = icmp sgt i32 %93, %94
  br i1 %cmp121, label %if.then123, label %if.end124

if.then123:                                       ; preds = %while.end
  %95 = load i32, i32* %rn, align 4
  store i32 %95, i32* %n, align 4
  br label %if.end124

if.end124:                                        ; preds = %if.then123, %while.end
  store i32 0, i32* %i, align 4
  br label %for.cond125

for.cond125:                                      ; preds = %for.inc144, %if.end124
  %96 = load i32, i32* %i, align 4
  %97 = load i32, i32* %n, align 4
  %cmp126 = icmp slt i32 %96, %97
  br i1 %cmp126, label %for.body128, label %for.end146

for.body128:                                      ; preds = %for.cond125
  %98 = load %struct.must*, %struct.must** %lmp, align 8
  %right129 = getelementptr inbounds %struct.must, %struct.must* %98, i32 0, i32 2
  %99 = load i8*, i8** %right129, align 8
  %100 = load i32, i32* %ln, align 4
  %101 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %100, %101
  %sub130 = sub nsw i32 %sub, 1
  %idxprom131 = sext i32 %sub130 to i64
  %arrayidx132 = getelementptr inbounds i8, i8* %99, i64 %idxprom131
  %102 = load i8, i8* %arrayidx132, align 1
  %conv133 = sext i8 %102 to i32
  %103 = load %struct.must*, %struct.must** %rmp, align 8
  %right134 = getelementptr inbounds %struct.must, %struct.must* %103, i32 0, i32 2
  %104 = load i8*, i8** %right134, align 8
  %105 = load i32, i32* %rn, align 4
  %106 = load i32, i32* %i, align 4
  %sub135 = sub nsw i32 %105, %106
  %sub136 = sub nsw i32 %sub135, 1
  %idxprom137 = sext i32 %sub136 to i64
  %arrayidx138 = getelementptr inbounds i8, i8* %104, i64 %idxprom137
  %107 = load i8, i8* %arrayidx138, align 1
  %conv139 = sext i8 %107 to i32
  %cmp140 = icmp ne i32 %conv133, %conv139
  br i1 %cmp140, label %if.then142, label %if.end143

if.then142:                                       ; preds = %for.body128
  br label %for.end146

if.end143:                                        ; preds = %for.body128
  br label %for.inc144

for.inc144:                                       ; preds = %if.end143
  %108 = load i32, i32* %i, align 4
  %inc145 = add nsw i32 %108, 1
  store i32 %inc145, i32* %i, align 4
  br label %for.cond125, !llvm.loop !233

for.end146:                                       ; preds = %if.then142, %for.cond125
  store i32 0, i32* %j, align 4
  br label %for.cond147

for.cond147:                                      ; preds = %for.inc159, %for.end146
  %109 = load i32, i32* %j, align 4
  %110 = load i32, i32* %i, align 4
  %cmp148 = icmp slt i32 %109, %110
  br i1 %cmp148, label %for.body150, label %for.end161

for.body150:                                      ; preds = %for.cond147
  %111 = load %struct.must*, %struct.must** %lmp, align 8
  %right151 = getelementptr inbounds %struct.must, %struct.must* %111, i32 0, i32 2
  %112 = load i8*, i8** %right151, align 8
  %113 = load i32, i32* %ln, align 4
  %114 = load i32, i32* %i, align 4
  %sub152 = sub nsw i32 %113, %114
  %115 = load i32, i32* %j, align 4
  %add153 = add nsw i32 %sub152, %115
  %idxprom154 = sext i32 %add153 to i64
  %arrayidx155 = getelementptr inbounds i8, i8* %112, i64 %idxprom154
  %116 = load i8, i8* %arrayidx155, align 1
  %117 = load %struct.must*, %struct.must** %lmp, align 8
  %right156 = getelementptr inbounds %struct.must, %struct.must* %117, i32 0, i32 2
  %118 = load i8*, i8** %right156, align 8
  %119 = load i32, i32* %j, align 4
  %idxprom157 = sext i32 %119 to i64
  %arrayidx158 = getelementptr inbounds i8, i8* %118, i64 %idxprom157
  store i8 %116, i8* %arrayidx158, align 1
  br label %for.inc159

for.inc159:                                       ; preds = %for.body150
  %120 = load i32, i32* %j, align 4
  %inc160 = add nsw i32 %120, 1
  store i32 %inc160, i32* %j, align 4
  br label %for.cond147, !llvm.loop !234

for.end161:                                       ; preds = %for.cond147
  %121 = load %struct.must*, %struct.must** %lmp, align 8
  %right162 = getelementptr inbounds %struct.must, %struct.must* %121, i32 0, i32 2
  %122 = load i8*, i8** %right162, align 8
  %123 = load i32, i32* %j, align 4
  %idxprom163 = sext i32 %123 to i64
  %arrayidx164 = getelementptr inbounds i8, i8* %122, i64 %idxprom163
  store i8 0, i8* %arrayidx164, align 1
  %124 = load %struct.must*, %struct.must** %lmp, align 8
  %in165 = getelementptr inbounds %struct.must, %struct.must* %124, i32 0, i32 0
  %125 = load i8**, i8*** %in165, align 8
  %126 = load %struct.must*, %struct.must** %rmp, align 8
  %in166 = getelementptr inbounds %struct.must, %struct.must* %126, i32 0, i32 0
  %127 = load i8**, i8*** %in166, align 8
  %call167 = call i8** @inboth(i8** %125, i8** %127)
  store i8** %call167, i8*** %new, align 8
  %128 = load i8**, i8*** %new, align 8
  %cmp168 = icmp eq i8** %128, null
  br i1 %cmp168, label %if.then170, label %if.end171

if.then170:                                       ; preds = %for.end161
  br label %done

if.end171:                                        ; preds = %for.end161
  %129 = load %struct.must*, %struct.must** %lmp, align 8
  %in172 = getelementptr inbounds %struct.must, %struct.must* %129, i32 0, i32 0
  %130 = load i8**, i8*** %in172, align 8
  call void @freelist(i8** %130)
  %131 = load %struct.must*, %struct.must** %lmp, align 8
  %in173 = getelementptr inbounds %struct.must, %struct.must* %131, i32 0, i32 0
  %132 = load i8**, i8*** %in173, align 8
  %133 = bitcast i8** %132 to i8*
  call void @free(i8* %133) #9
  %134 = load i8**, i8*** %new, align 8
  %135 = load %struct.must*, %struct.must** %lmp, align 8
  %in174 = getelementptr inbounds %struct.must, %struct.must* %135, i32 0, i32 0
  store i8** %134, i8*** %in174, align 8
  br label %sw.epilog

sw.bb175:                                         ; preds = %for.body69
  %136 = load %struct.must*, %struct.must** %mp, align 8
  %137 = load %struct.must*, %struct.must** %musts, align 8
  %cmp176 = icmp ule %struct.must* %136, %137
  br i1 %cmp176, label %if.then178, label %if.end179

if.then178:                                       ; preds = %sw.bb175
  br label %done

if.end179:                                        ; preds = %sw.bb175
  %138 = load %struct.must*, %struct.must** %mp, align 8
  %incdec.ptr180 = getelementptr inbounds %struct.must, %struct.must* %138, i32 -1
  store %struct.must* %incdec.ptr180, %struct.must** %mp, align 8
  %139 = load %struct.must*, %struct.must** %mp, align 8
  %is181 = getelementptr inbounds %struct.must, %struct.must* %139, i32 0, i32 3
  %140 = load i8*, i8** %is181, align 8
  %arrayidx182 = getelementptr inbounds i8, i8* %140, i64 0
  store i8 0, i8* %arrayidx182, align 1
  br label %sw.epilog

sw.bb183:                                         ; preds = %for.body69
  %141 = load %struct.must*, %struct.must** %mp, align 8
  %142 = load %struct.must*, %struct.must** %musts, align 8
  %arrayidx184 = getelementptr inbounds %struct.must, %struct.must* %142, i64 1
  %cmp185 = icmp ne %struct.must* %141, %arrayidx184
  br i1 %cmp185, label %if.then187, label %if.end188

if.then187:                                       ; preds = %sw.bb183
  br label %done

if.end188:                                        ; preds = %sw.bb183
  store i32 0, i32* %i, align 4
  br label %for.cond189

for.cond189:                                      ; preds = %for.inc211, %if.end188
  %143 = load %struct.must*, %struct.must** %musts, align 8
  %arrayidx190 = getelementptr inbounds %struct.must, %struct.must* %143, i64 0
  %in191 = getelementptr inbounds %struct.must, %struct.must* %arrayidx190, i32 0, i32 0
  %144 = load i8**, i8*** %in191, align 8
  %145 = load i32, i32* %i, align 4
  %idxprom192 = sext i32 %145 to i64
  %arrayidx193 = getelementptr inbounds i8*, i8** %144, i64 %idxprom192
  %146 = load i8*, i8** %arrayidx193, align 8
  %cmp194 = icmp ne i8* %146, null
  br i1 %cmp194, label %for.body196, label %for.end213

for.body196:                                      ; preds = %for.cond189
  %147 = load %struct.must*, %struct.must** %musts, align 8
  %arrayidx197 = getelementptr inbounds %struct.must, %struct.must* %147, i64 0
  %in198 = getelementptr inbounds %struct.must, %struct.must* %arrayidx197, i32 0, i32 0
  %148 = load i8**, i8*** %in198, align 8
  %149 = load i32, i32* %i, align 4
  %idxprom199 = sext i32 %149 to i64
  %arrayidx200 = getelementptr inbounds i8*, i8** %148, i64 %idxprom199
  %150 = load i8*, i8** %arrayidx200, align 8
  %call201 = call i64 @strlen(i8* %150) #11
  %151 = load i8*, i8** %result, align 8
  %call202 = call i64 @strlen(i8* %151) #11
  %cmp203 = icmp ugt i64 %call201, %call202
  br i1 %cmp203, label %if.then205, label %if.end210

if.then205:                                       ; preds = %for.body196
  %152 = load %struct.must*, %struct.must** %musts, align 8
  %arrayidx206 = getelementptr inbounds %struct.must, %struct.must* %152, i64 0
  %in207 = getelementptr inbounds %struct.must, %struct.must* %arrayidx206, i32 0, i32 0
  %153 = load i8**, i8*** %in207, align 8
  %154 = load i32, i32* %i, align 4
  %idxprom208 = sext i32 %154 to i64
  %arrayidx209 = getelementptr inbounds i8*, i8** %153, i64 %idxprom208
  %155 = load i8*, i8** %arrayidx209, align 8
  store i8* %155, i8** %result, align 8
  br label %if.end210

if.end210:                                        ; preds = %if.then205, %for.body196
  br label %for.inc211

for.inc211:                                       ; preds = %if.end210
  %156 = load i32, i32* %i, align 4
  %inc212 = add nsw i32 %156, 1
  store i32 %inc212, i32* %i, align 4
  br label %for.cond189, !llvm.loop !235

for.end213:                                       ; preds = %for.cond189
  %157 = load i8*, i8** %result, align 8
  %158 = load %struct.must*, %struct.must** %musts, align 8
  %arrayidx214 = getelementptr inbounds %struct.must, %struct.must* %158, i64 0
  %is215 = getelementptr inbounds %struct.must, %struct.must* %arrayidx214, i32 0, i32 3
  %159 = load i8*, i8** %is215, align 8
  %call216 = call i32 @strcmp(i8* %157, i8* %159) #11
  %cmp217 = icmp eq i32 %call216, 0
  br i1 %cmp217, label %if.then219, label %if.end220

if.then219:                                       ; preds = %for.end213
  store i32 1, i32* %exact, align 4
  br label %if.end220

if.end220:                                        ; preds = %if.then219, %for.end213
  br label %done

sw.bb221:                                         ; preds = %for.body69
  %160 = load %struct.must*, %struct.must** %mp, align 8
  %161 = load %struct.must*, %struct.must** %musts, align 8
  %arrayidx222 = getelementptr inbounds %struct.must, %struct.must* %161, i64 2
  %cmp223 = icmp ult %struct.must* %160, %arrayidx222
  br i1 %cmp223, label %if.then225, label %if.end226

if.then225:                                       ; preds = %sw.bb221
  br label %done

if.end226:                                        ; preds = %sw.bb221
  %162 = load %struct.must*, %struct.must** %mp, align 8
  %incdec.ptr229 = getelementptr inbounds %struct.must, %struct.must* %162, i32 -1
  store %struct.must* %incdec.ptr229, %struct.must** %mp, align 8
  store %struct.must* %incdec.ptr229, %struct.must** %rmp228, align 8
  %163 = load %struct.must*, %struct.must** %mp, align 8
  %incdec.ptr230 = getelementptr inbounds %struct.must, %struct.must* %163, i32 -1
  store %struct.must* %incdec.ptr230, %struct.must** %mp, align 8
  store %struct.must* %incdec.ptr230, %struct.must** %lmp227, align 8
  %164 = load %struct.must*, %struct.must** %lmp227, align 8
  %in231 = getelementptr inbounds %struct.must, %struct.must* %164, i32 0, i32 0
  %165 = load i8**, i8*** %in231, align 8
  %166 = load %struct.must*, %struct.must** %rmp228, align 8
  %in232 = getelementptr inbounds %struct.must, %struct.must* %166, i32 0, i32 0
  %167 = load i8**, i8*** %in232, align 8
  %call233 = call i8** @addlists(i8** %165, i8** %167)
  %168 = load %struct.must*, %struct.must** %lmp227, align 8
  %in234 = getelementptr inbounds %struct.must, %struct.must* %168, i32 0, i32 0
  store i8** %call233, i8*** %in234, align 8
  %169 = load %struct.must*, %struct.must** %lmp227, align 8
  %in235 = getelementptr inbounds %struct.must, %struct.must* %169, i32 0, i32 0
  %170 = load i8**, i8*** %in235, align 8
  %cmp236 = icmp eq i8** %170, null
  br i1 %cmp236, label %if.then238, label %if.end239

if.then238:                                       ; preds = %if.end226
  br label %done

if.end239:                                        ; preds = %if.end226
  %171 = load %struct.must*, %struct.must** %lmp227, align 8
  %right240 = getelementptr inbounds %struct.must, %struct.must* %171, i32 0, i32 2
  %172 = load i8*, i8** %right240, align 8
  %arrayidx241 = getelementptr inbounds i8, i8* %172, i64 0
  %173 = load i8, i8* %arrayidx241, align 1
  %conv242 = sext i8 %173 to i32
  %cmp243 = icmp ne i32 %conv242, 0
  br i1 %cmp243, label %land.lhs.true, label %if.end273

land.lhs.true:                                    ; preds = %if.end239
  %174 = load %struct.must*, %struct.must** %rmp228, align 8
  %left245 = getelementptr inbounds %struct.must, %struct.must* %174, i32 0, i32 1
  %175 = load i8*, i8** %left245, align 8
  %arrayidx246 = getelementptr inbounds i8, i8* %175, i64 0
  %176 = load i8, i8* %arrayidx246, align 1
  %conv247 = sext i8 %176 to i32
  %cmp248 = icmp ne i32 %conv247, 0
  br i1 %cmp248, label %if.then250, label %if.end273

if.then250:                                       ; preds = %land.lhs.true
  %177 = load %struct.must*, %struct.must** %lmp227, align 8
  %right251 = getelementptr inbounds %struct.must, %struct.must* %177, i32 0, i32 2
  %178 = load i8*, i8** %right251, align 8
  %call252 = call i8* @icpyalloc(i8* %178)
  store i8* %call252, i8** %tp, align 8
  %179 = load i8*, i8** %tp, align 8
  %cmp253 = icmp eq i8* %179, null
  br i1 %cmp253, label %if.then255, label %if.end256

if.then255:                                       ; preds = %if.then250
  br label %done

if.end256:                                        ; preds = %if.then250
  %180 = load i8*, i8** %tp, align 8
  %181 = load %struct.must*, %struct.must** %rmp228, align 8
  %left257 = getelementptr inbounds %struct.must, %struct.must* %181, i32 0, i32 1
  %182 = load i8*, i8** %left257, align 8
  %call258 = call i8* @icatalloc(i8* %180, i8* %182)
  store i8* %call258, i8** %tp, align 8
  %183 = load i8*, i8** %tp, align 8
  %cmp259 = icmp eq i8* %183, null
  br i1 %cmp259, label %if.then261, label %if.end262

if.then261:                                       ; preds = %if.end256
  br label %done

if.end262:                                        ; preds = %if.end256
  %184 = load %struct.must*, %struct.must** %lmp227, align 8
  %in263 = getelementptr inbounds %struct.must, %struct.must* %184, i32 0, i32 0
  %185 = load i8**, i8*** %in263, align 8
  %186 = load i8*, i8** %tp, align 8
  %187 = load i8*, i8** %tp, align 8
  %call264 = call i64 @strlen(i8* %187) #11
  %conv265 = trunc i64 %call264 to i32
  %call266 = call i8** @enlist(i8** %185, i8* %186, i32 %conv265)
  %188 = load %struct.must*, %struct.must** %lmp227, align 8
  %in267 = getelementptr inbounds %struct.must, %struct.must* %188, i32 0, i32 0
  store i8** %call266, i8*** %in267, align 8
  %189 = load i8*, i8** %tp, align 8
  call void @free(i8* %189) #9
  %190 = load %struct.must*, %struct.must** %lmp227, align 8
  %in268 = getelementptr inbounds %struct.must, %struct.must* %190, i32 0, i32 0
  %191 = load i8**, i8*** %in268, align 8
  %cmp269 = icmp eq i8** %191, null
  br i1 %cmp269, label %if.then271, label %if.end272

if.then271:                                       ; preds = %if.end262
  br label %done

if.end272:                                        ; preds = %if.end262
  br label %if.end273

if.end273:                                        ; preds = %if.end272, %land.lhs.true, %if.end239
  %192 = load %struct.must*, %struct.must** %lmp227, align 8
  %is274 = getelementptr inbounds %struct.must, %struct.must* %192, i32 0, i32 3
  %193 = load i8*, i8** %is274, align 8
  %arrayidx275 = getelementptr inbounds i8, i8* %193, i64 0
  %194 = load i8, i8* %arrayidx275, align 1
  %conv276 = sext i8 %194 to i32
  %cmp277 = icmp ne i32 %conv276, 0
  br i1 %cmp277, label %if.then279, label %if.end289

if.then279:                                       ; preds = %if.end273
  %195 = load %struct.must*, %struct.must** %lmp227, align 8
  %left280 = getelementptr inbounds %struct.must, %struct.must* %195, i32 0, i32 1
  %196 = load i8*, i8** %left280, align 8
  %197 = load %struct.must*, %struct.must** %rmp228, align 8
  %left281 = getelementptr inbounds %struct.must, %struct.must* %197, i32 0, i32 1
  %198 = load i8*, i8** %left281, align 8
  %call282 = call i8* @icatalloc(i8* %196, i8* %198)
  %199 = load %struct.must*, %struct.must** %lmp227, align 8
  %left283 = getelementptr inbounds %struct.must, %struct.must* %199, i32 0, i32 1
  store i8* %call282, i8** %left283, align 8
  %200 = load %struct.must*, %struct.must** %lmp227, align 8
  %left284 = getelementptr inbounds %struct.must, %struct.must* %200, i32 0, i32 1
  %201 = load i8*, i8** %left284, align 8
  %cmp285 = icmp eq i8* %201, null
  br i1 %cmp285, label %if.then287, label %if.end288

if.then287:                                       ; preds = %if.then279
  br label %done

if.end288:                                        ; preds = %if.then279
  br label %if.end289

if.end289:                                        ; preds = %if.end288, %if.end273
  %202 = load %struct.must*, %struct.must** %rmp228, align 8
  %is290 = getelementptr inbounds %struct.must, %struct.must* %202, i32 0, i32 3
  %203 = load i8*, i8** %is290, align 8
  %arrayidx291 = getelementptr inbounds i8, i8* %203, i64 0
  %204 = load i8, i8* %arrayidx291, align 1
  %conv292 = sext i8 %204 to i32
  %cmp293 = icmp eq i32 %conv292, 0
  br i1 %cmp293, label %if.then295, label %if.end298

if.then295:                                       ; preds = %if.end289
  %205 = load %struct.must*, %struct.must** %lmp227, align 8
  %right296 = getelementptr inbounds %struct.must, %struct.must* %205, i32 0, i32 2
  %206 = load i8*, i8** %right296, align 8
  %arrayidx297 = getelementptr inbounds i8, i8* %206, i64 0
  store i8 0, i8* %arrayidx297, align 1
  br label %if.end298

if.end298:                                        ; preds = %if.then295, %if.end289
  %207 = load %struct.must*, %struct.must** %lmp227, align 8
  %right299 = getelementptr inbounds %struct.must, %struct.must* %207, i32 0, i32 2
  %208 = load i8*, i8** %right299, align 8
  %209 = load %struct.must*, %struct.must** %rmp228, align 8
  %right300 = getelementptr inbounds %struct.must, %struct.must* %209, i32 0, i32 2
  %210 = load i8*, i8** %right300, align 8
  %call301 = call i8* @icatalloc(i8* %208, i8* %210)
  %211 = load %struct.must*, %struct.must** %lmp227, align 8
  %right302 = getelementptr inbounds %struct.must, %struct.must* %211, i32 0, i32 2
  store i8* %call301, i8** %right302, align 8
  %212 = load %struct.must*, %struct.must** %lmp227, align 8
  %right303 = getelementptr inbounds %struct.must, %struct.must* %212, i32 0, i32 2
  %213 = load i8*, i8** %right303, align 8
  %cmp304 = icmp eq i8* %213, null
  br i1 %cmp304, label %if.then306, label %if.end307

if.then306:                                       ; preds = %if.end298
  br label %done

if.end307:                                        ; preds = %if.end298
  %214 = load %struct.must*, %struct.must** %lmp227, align 8
  %is308 = getelementptr inbounds %struct.must, %struct.must* %214, i32 0, i32 3
  %215 = load i8*, i8** %is308, align 8
  %arrayidx309 = getelementptr inbounds i8, i8* %215, i64 0
  %216 = load i8, i8* %arrayidx309, align 1
  %conv310 = sext i8 %216 to i32
  %cmp311 = icmp ne i32 %conv310, 0
  br i1 %cmp311, label %land.lhs.true313, label %if.else

land.lhs.true313:                                 ; preds = %if.end307
  %217 = load %struct.must*, %struct.must** %rmp228, align 8
  %is314 = getelementptr inbounds %struct.must, %struct.must* %217, i32 0, i32 3
  %218 = load i8*, i8** %is314, align 8
  %arrayidx315 = getelementptr inbounds i8, i8* %218, i64 0
  %219 = load i8, i8* %arrayidx315, align 1
  %conv316 = sext i8 %219 to i32
  %cmp317 = icmp ne i32 %conv316, 0
  br i1 %cmp317, label %if.then319, label %if.else

if.then319:                                       ; preds = %land.lhs.true313
  %220 = load %struct.must*, %struct.must** %lmp227, align 8
  %is320 = getelementptr inbounds %struct.must, %struct.must* %220, i32 0, i32 3
  %221 = load i8*, i8** %is320, align 8
  %222 = load %struct.must*, %struct.must** %rmp228, align 8
  %is321 = getelementptr inbounds %struct.must, %struct.must* %222, i32 0, i32 3
  %223 = load i8*, i8** %is321, align 8
  %call322 = call i8* @icatalloc(i8* %221, i8* %223)
  %224 = load %struct.must*, %struct.must** %lmp227, align 8
  %is323 = getelementptr inbounds %struct.must, %struct.must* %224, i32 0, i32 3
  store i8* %call322, i8** %is323, align 8
  %225 = load %struct.must*, %struct.must** %lmp227, align 8
  %is324 = getelementptr inbounds %struct.must, %struct.must* %225, i32 0, i32 3
  %226 = load i8*, i8** %is324, align 8
  %cmp325 = icmp eq i8* %226, null
  br i1 %cmp325, label %if.then327, label %if.end328

if.then327:                                       ; preds = %if.then319
  br label %done

if.end328:                                        ; preds = %if.then319
  br label %if.end331

if.else:                                          ; preds = %land.lhs.true313, %if.end307
  %227 = load %struct.must*, %struct.must** %lmp227, align 8
  %is329 = getelementptr inbounds %struct.must, %struct.must* %227, i32 0, i32 3
  %228 = load i8*, i8** %is329, align 8
  %arrayidx330 = getelementptr inbounds i8, i8* %228, i64 0
  store i8 0, i8* %arrayidx330, align 1
  br label %if.end331

if.end331:                                        ; preds = %if.else, %if.end328
  br label %sw.epilog

sw.default:                                       ; preds = %for.body69
  %229 = load i32, i32* %t, align 4
  %cmp332 = icmp slt i32 %229, -1
  br i1 %cmp332, label %if.then334, label %if.else335

if.then334:                                       ; preds = %sw.default
  br label %done

if.else335:                                       ; preds = %sw.default
  %230 = load i32, i32* %t, align 4
  %cmp336 = icmp eq i32 %230, 0
  br i1 %cmp336, label %if.then338, label %if.else339

if.then338:                                       ; preds = %if.else335
  br label %done

if.else339:                                       ; preds = %if.else335
  %231 = load i32, i32* %t, align 4
  %cmp340 = icmp sge i32 %231, 273
  br i1 %cmp340, label %if.then342, label %if.else343

if.then342:                                       ; preds = %if.else339
  %232 = load %struct.must*, %struct.must** %mp, align 8
  call void @resetmust(%struct.must* %232)
  br label %if.end366

if.else343:                                       ; preds = %if.else339
  %233 = load %struct.must*, %struct.must** %mp, align 8
  call void @resetmust(%struct.must* %233)
  %234 = load i32, i32* %t, align 4
  %conv344 = trunc i32 %234 to i8
  %235 = load %struct.must*, %struct.must** %mp, align 8
  %right345 = getelementptr inbounds %struct.must, %struct.must* %235, i32 0, i32 2
  %236 = load i8*, i8** %right345, align 8
  %arrayidx346 = getelementptr inbounds i8, i8* %236, i64 0
  store i8 %conv344, i8* %arrayidx346, align 1
  %237 = load %struct.must*, %struct.must** %mp, align 8
  %left347 = getelementptr inbounds %struct.must, %struct.must* %237, i32 0, i32 1
  %238 = load i8*, i8** %left347, align 8
  %arrayidx348 = getelementptr inbounds i8, i8* %238, i64 0
  store i8 %conv344, i8* %arrayidx348, align 1
  %239 = load %struct.must*, %struct.must** %mp, align 8
  %is349 = getelementptr inbounds %struct.must, %struct.must* %239, i32 0, i32 3
  %240 = load i8*, i8** %is349, align 8
  %arrayidx350 = getelementptr inbounds i8, i8* %240, i64 0
  store i8 %conv344, i8* %arrayidx350, align 1
  %241 = load %struct.must*, %struct.must** %mp, align 8
  %right351 = getelementptr inbounds %struct.must, %struct.must* %241, i32 0, i32 2
  %242 = load i8*, i8** %right351, align 8
  %arrayidx352 = getelementptr inbounds i8, i8* %242, i64 1
  store i8 0, i8* %arrayidx352, align 1
  %243 = load %struct.must*, %struct.must** %mp, align 8
  %left353 = getelementptr inbounds %struct.must, %struct.must* %243, i32 0, i32 1
  %244 = load i8*, i8** %left353, align 8
  %arrayidx354 = getelementptr inbounds i8, i8* %244, i64 1
  store i8 0, i8* %arrayidx354, align 1
  %245 = load %struct.must*, %struct.must** %mp, align 8
  %is355 = getelementptr inbounds %struct.must, %struct.must* %245, i32 0, i32 3
  %246 = load i8*, i8** %is355, align 8
  %arrayidx356 = getelementptr inbounds i8, i8* %246, i64 1
  store i8 0, i8* %arrayidx356, align 1
  %247 = load %struct.must*, %struct.must** %mp, align 8
  %in357 = getelementptr inbounds %struct.must, %struct.must* %247, i32 0, i32 0
  %248 = load i8**, i8*** %in357, align 8
  %249 = load %struct.must*, %struct.must** %mp, align 8
  %is358 = getelementptr inbounds %struct.must, %struct.must* %249, i32 0, i32 3
  %250 = load i8*, i8** %is358, align 8
  %call359 = call i8** @enlist(i8** %248, i8* %250, i32 1)
  %251 = load %struct.must*, %struct.must** %mp, align 8
  %in360 = getelementptr inbounds %struct.must, %struct.must* %251, i32 0, i32 0
  store i8** %call359, i8*** %in360, align 8
  %252 = load %struct.must*, %struct.must** %mp, align 8
  %in361 = getelementptr inbounds %struct.must, %struct.must* %252, i32 0, i32 0
  %253 = load i8**, i8*** %in361, align 8
  %cmp362 = icmp eq i8** %253, null
  br i1 %cmp362, label %if.then364, label %if.end365

if.then364:                                       ; preds = %if.else343
  br label %done

if.end365:                                        ; preds = %if.else343
  br label %if.end366

if.end366:                                        ; preds = %if.end365, %if.then342
  br label %if.end367

if.end367:                                        ; preds = %if.end366
  br label %if.end368

if.end368:                                        ; preds = %if.end367
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end368, %if.end331, %if.end179, %if.end171, %if.end77, %sw.bb72
  %254 = load %struct.must*, %struct.must** %mp, align 8
  %incdec.ptr369 = getelementptr inbounds %struct.must, %struct.must* %254, i32 1
  store %struct.must* %incdec.ptr369, %struct.must** %mp, align 8
  br label %for.inc370

for.inc370:                                       ; preds = %sw.epilog
  %255 = load i32, i32* %ri, align 4
  %inc371 = add nsw i32 %255, 1
  store i32 %inc371, i32* %ri, align 4
  br label %for.cond65, !llvm.loop !236

for.end372:                                       ; preds = %for.cond65
  br label %done

done:                                             ; preds = %for.end372, %if.then364, %if.then338, %if.then334, %if.then327, %if.then306, %if.then287, %if.then271, %if.then261, %if.then255, %if.then238, %if.then225, %if.end220, %if.then187, %if.then178, %if.then170, %if.then82, %if.then76, %sw.bb, %if.then44
  %256 = load i8*, i8** %result, align 8
  %call373 = call i64 @strlen(i8* %256) #11
  %tobool = icmp ne i64 %call373, 0
  br i1 %tobool, label %if.then374, label %if.end384

if.then374:                                       ; preds = %done
  %call375 = call noalias align 16 i8* @malloc(i64 24) #9
  %257 = bitcast i8* %call375 to %struct.dfamust*
  store %struct.dfamust* %257, %struct.dfamust** %dm, align 8
  %258 = load i32, i32* %exact, align 4
  %259 = load %struct.dfamust*, %struct.dfamust** %dm, align 8
  %exact376 = getelementptr inbounds %struct.dfamust, %struct.dfamust* %259, i32 0, i32 0
  store i32 %258, i32* %exact376, align 8
  %260 = load i8*, i8** %result, align 8
  %call377 = call i64 @strlen(i8* %260) #11
  %add378 = add i64 %call377, 1
  %call379 = call noalias align 16 i8* @malloc(i64 %add378) #9
  %261 = load %struct.dfamust*, %struct.dfamust** %dm, align 8
  %must = getelementptr inbounds %struct.dfamust, %struct.dfamust* %261, i32 0, i32 1
  store i8* %call379, i8** %must, align 8
  %262 = load %struct.dfamust*, %struct.dfamust** %dm, align 8
  %must380 = getelementptr inbounds %struct.dfamust, %struct.dfamust* %262, i32 0, i32 1
  %263 = load i8*, i8** %must380, align 8
  %264 = load i8*, i8** %result, align 8
  %call381 = call i8* @strcpy(i8* %263, i8* %264) #9
  %265 = load %struct.dfa*, %struct.dfa** %dfa.addr, align 8
  %musts382 = getelementptr inbounds %struct.dfa, %struct.dfa* %265, i32 0, i32 21
  %266 = load %struct.dfamust*, %struct.dfamust** %musts382, align 8
  %267 = load %struct.dfamust*, %struct.dfamust** %dm, align 8
  %next = getelementptr inbounds %struct.dfamust, %struct.dfamust* %267, i32 0, i32 2
  store %struct.dfamust* %266, %struct.dfamust** %next, align 8
  %268 = load %struct.dfamust*, %struct.dfamust** %dm, align 8
  %269 = load %struct.dfa*, %struct.dfa** %dfa.addr, align 8
  %musts383 = getelementptr inbounds %struct.dfa, %struct.dfa* %269, i32 0, i32 21
  store %struct.dfamust* %268, %struct.dfamust** %musts383, align 8
  br label %if.end384

if.end384:                                        ; preds = %if.then374, %done
  %270 = load %struct.must*, %struct.must** %musts, align 8
  store %struct.must* %270, %struct.must** %mp, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond385

for.cond385:                                      ; preds = %for.inc405, %if.end384
  %271 = load i32, i32* %i, align 4
  %272 = load %struct.dfa*, %struct.dfa** %dfa.addr, align 8
  %tindex386 = getelementptr inbounds %struct.dfa, %struct.dfa* %272, i32 0, i32 4
  %273 = load i32, i32* %tindex386, align 8
  %cmp387 = icmp sle i32 %271, %273
  br i1 %cmp387, label %for.body389, label %for.end407

for.body389:                                      ; preds = %for.cond385
  %274 = load %struct.must*, %struct.must** %mp, align 8
  %275 = load i32, i32* %i, align 4
  %idxprom390 = sext i32 %275 to i64
  %arrayidx391 = getelementptr inbounds %struct.must, %struct.must* %274, i64 %idxprom390
  %in392 = getelementptr inbounds %struct.must, %struct.must* %arrayidx391, i32 0, i32 0
  %276 = load i8**, i8*** %in392, align 8
  call void @freelist(i8** %276)
  %277 = load %struct.must*, %struct.must** %mp, align 8
  %278 = load i32, i32* %i, align 4
  %idxprom393 = sext i32 %278 to i64
  %arrayidx394 = getelementptr inbounds %struct.must, %struct.must* %277, i64 %idxprom393
  %in395 = getelementptr inbounds %struct.must, %struct.must* %arrayidx394, i32 0, i32 0
  %279 = load i8**, i8*** %in395, align 8
  %280 = bitcast i8** %279 to i8*
  call void @ifree(i8* %280)
  %281 = load %struct.must*, %struct.must** %mp, align 8
  %282 = load i32, i32* %i, align 4
  %idxprom396 = sext i32 %282 to i64
  %arrayidx397 = getelementptr inbounds %struct.must, %struct.must* %281, i64 %idxprom396
  %left398 = getelementptr inbounds %struct.must, %struct.must* %arrayidx397, i32 0, i32 1
  %283 = load i8*, i8** %left398, align 8
  call void @ifree(i8* %283)
  %284 = load %struct.must*, %struct.must** %mp, align 8
  %285 = load i32, i32* %i, align 4
  %idxprom399 = sext i32 %285 to i64
  %arrayidx400 = getelementptr inbounds %struct.must, %struct.must* %284, i64 %idxprom399
  %right401 = getelementptr inbounds %struct.must, %struct.must* %arrayidx400, i32 0, i32 2
  %286 = load i8*, i8** %right401, align 8
  call void @ifree(i8* %286)
  %287 = load %struct.must*, %struct.must** %mp, align 8
  %288 = load i32, i32* %i, align 4
  %idxprom402 = sext i32 %288 to i64
  %arrayidx403 = getelementptr inbounds %struct.must, %struct.must* %287, i64 %idxprom402
  %is404 = getelementptr inbounds %struct.must, %struct.must* %arrayidx403, i32 0, i32 3
  %289 = load i8*, i8** %is404, align 8
  call void @ifree(i8* %289)
  br label %for.inc405

for.inc405:                                       ; preds = %for.body389
  %290 = load i32, i32* %i, align 4
  %inc406 = add nsw i32 %290, 1
  store i32 %inc406, i32* %i, align 4
  br label %for.cond385, !llvm.loop !237

for.end407:                                       ; preds = %for.cond385
  %291 = load %struct.must*, %struct.must** %mp, align 8
  %292 = bitcast %struct.must* %291 to i8*
  call void @free(i8* %292) #9
  br label %return

return:                                           ; preds = %for.end407, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @resetmust(%struct.must* %mp) #0 {
entry:
  %mp.addr = alloca %struct.must*, align 8
  store %struct.must* %mp, %struct.must** %mp.addr, align 8
  %0 = load %struct.must*, %struct.must** %mp.addr, align 8
  %is = getelementptr inbounds %struct.must, %struct.must* %0, i32 0, i32 3
  %1 = load i8*, i8** %is, align 8
  %arrayidx = getelementptr inbounds i8, i8* %1, i64 0
  store i8 0, i8* %arrayidx, align 1
  %2 = load %struct.must*, %struct.must** %mp.addr, align 8
  %right = getelementptr inbounds %struct.must, %struct.must* %2, i32 0, i32 2
  %3 = load i8*, i8** %right, align 8
  %arrayidx1 = getelementptr inbounds i8, i8* %3, i64 0
  store i8 0, i8* %arrayidx1, align 1
  %4 = load %struct.must*, %struct.must** %mp.addr, align 8
  %left = getelementptr inbounds %struct.must, %struct.must* %4, i32 0, i32 1
  %5 = load i8*, i8** %left, align 8
  %arrayidx2 = getelementptr inbounds i8, i8* %5, i64 0
  store i8 0, i8* %arrayidx2, align 1
  %6 = load %struct.must*, %struct.must** %mp.addr, align 8
  %in = getelementptr inbounds %struct.must, %struct.must* %6, i32 0, i32 0
  %7 = load i8**, i8*** %in, align 8
  call void @freelist(i8** %7)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8** @inboth(i8** %left, i8** %right) #0 {
entry:
  %retval = alloca i8**, align 8
  %left.addr = alloca i8**, align 8
  %right.addr = alloca i8**, align 8
  %both = alloca i8**, align 8
  %temp = alloca i8**, align 8
  %lnum = alloca i32, align 4
  %rnum = alloca i32, align 4
  store i8** %left, i8*** %left.addr, align 8
  store i8** %right, i8*** %right.addr, align 8
  %0 = load i8**, i8*** %left.addr, align 8
  %cmp = icmp eq i8** %0, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8**, i8*** %right.addr, align 8
  %cmp1 = icmp eq i8** %1, null
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i8** null, i8*** %retval, align 8
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %call = call noalias align 16 i8* @malloc(i64 8) #9
  %2 = bitcast i8* %call to i8**
  store i8** %2, i8*** %both, align 8
  %3 = load i8**, i8*** %both, align 8
  %cmp2 = icmp eq i8** %3, null
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  store i8** null, i8*** %retval, align 8
  br label %return

if.end4:                                          ; preds = %if.end
  %4 = load i8**, i8*** %both, align 8
  %arrayidx = getelementptr inbounds i8*, i8** %4, i64 0
  store i8* null, i8** %arrayidx, align 8
  store i32 0, i32* %lnum, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc24, %if.end4
  %5 = load i8**, i8*** %left.addr, align 8
  %6 = load i32, i32* %lnum, align 4
  %idxprom = sext i32 %6 to i64
  %arrayidx5 = getelementptr inbounds i8*, i8** %5, i64 %idxprom
  %7 = load i8*, i8** %arrayidx5, align 8
  %cmp6 = icmp ne i8* %7, null
  br i1 %cmp6, label %for.body, label %for.end26

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %rnum, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc, %for.body
  %8 = load i8**, i8*** %right.addr, align 8
  %9 = load i32, i32* %rnum, align 4
  %idxprom8 = sext i32 %9 to i64
  %arrayidx9 = getelementptr inbounds i8*, i8** %8, i64 %idxprom8
  %10 = load i8*, i8** %arrayidx9, align 8
  %cmp10 = icmp ne i8* %10, null
  br i1 %cmp10, label %for.body11, label %for.end

for.body11:                                       ; preds = %for.cond7
  %11 = load i8**, i8*** %left.addr, align 8
  %12 = load i32, i32* %lnum, align 4
  %idxprom12 = sext i32 %12 to i64
  %arrayidx13 = getelementptr inbounds i8*, i8** %11, i64 %idxprom12
  %13 = load i8*, i8** %arrayidx13, align 8
  %14 = load i8**, i8*** %right.addr, align 8
  %15 = load i32, i32* %rnum, align 4
  %idxprom14 = sext i32 %15 to i64
  %arrayidx15 = getelementptr inbounds i8*, i8** %14, i64 %idxprom14
  %16 = load i8*, i8** %arrayidx15, align 8
  %call16 = call i8** @comsubs(i8* %13, i8* %16)
  store i8** %call16, i8*** %temp, align 8
  %17 = load i8**, i8*** %temp, align 8
  %cmp17 = icmp eq i8** %17, null
  br i1 %cmp17, label %if.then18, label %if.end19

if.then18:                                        ; preds = %for.body11
  %18 = load i8**, i8*** %both, align 8
  call void @freelist(i8** %18)
  store i8** null, i8*** %retval, align 8
  br label %return

if.end19:                                         ; preds = %for.body11
  %19 = load i8**, i8*** %both, align 8
  %20 = load i8**, i8*** %temp, align 8
  %call20 = call i8** @addlists(i8** %19, i8** %20)
  store i8** %call20, i8*** %both, align 8
  %21 = load i8**, i8*** %temp, align 8
  call void @freelist(i8** %21)
  %22 = load i8**, i8*** %both, align 8
  %cmp21 = icmp eq i8** %22, null
  br i1 %cmp21, label %if.then22, label %if.end23

if.then22:                                        ; preds = %if.end19
  store i8** null, i8*** %retval, align 8
  br label %return

if.end23:                                         ; preds = %if.end19
  br label %for.inc

for.inc:                                          ; preds = %if.end23
  %23 = load i32, i32* %rnum, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %rnum, align 4
  br label %for.cond7, !llvm.loop !238

for.end:                                          ; preds = %for.cond7
  br label %for.inc24

for.inc24:                                        ; preds = %for.end
  %24 = load i32, i32* %lnum, align 4
  %inc25 = add nsw i32 %24, 1
  store i32 %inc25, i32* %lnum, align 4
  br label %for.cond, !llvm.loop !239

for.end26:                                        ; preds = %for.cond
  %25 = load i8**, i8*** %both, align 8
  store i8** %25, i8*** %retval, align 8
  br label %return

return:                                           ; preds = %for.end26, %if.then22, %if.then18, %if.then3, %if.then
  %26 = load i8**, i8*** %retval, align 8
  ret i8** %26
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @freelist(i8** %cpp) #0 {
entry:
  %cpp.addr = alloca i8**, align 8
  %i = alloca i32, align 4
  store i8** %cpp, i8*** %cpp.addr, align 8
  %0 = load i8**, i8*** %cpp.addr, align 8
  %cmp = icmp eq i8** %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %for.end

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load i8**, i8*** %cpp.addr, align 8
  %2 = load i32, i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds i8*, i8** %1, i64 %idxprom
  %3 = load i8*, i8** %arrayidx, align 8
  %cmp1 = icmp ne i8* %3, null
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i8**, i8*** %cpp.addr, align 8
  %5 = load i32, i32* %i, align 4
  %idxprom2 = sext i32 %5 to i64
  %arrayidx3 = getelementptr inbounds i8*, i8** %4, i64 %idxprom2
  %6 = load i8*, i8** %arrayidx3, align 8
  call void @free(i8* %6) #9
  %7 = load i8**, i8*** %cpp.addr, align 8
  %8 = load i32, i32* %i, align 4
  %idxprom4 = sext i32 %8 to i64
  %arrayidx5 = getelementptr inbounds i8*, i8** %7, i64 %idxprom4
  store i8* null, i8** %arrayidx5, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond, !llvm.loop !240

for.end:                                          ; preds = %if.then, %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8** @addlists(i8** %old, i8** %new) #0 {
entry:
  %retval = alloca i8**, align 8
  %old.addr = alloca i8**, align 8
  %new.addr = alloca i8**, align 8
  %i = alloca i32, align 4
  store i8** %old, i8*** %old.addr, align 8
  store i8** %new, i8*** %new.addr, align 8
  %0 = load i8**, i8*** %old.addr, align 8
  %cmp = icmp eq i8** %0, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8**, i8*** %new.addr, align 8
  %cmp1 = icmp eq i8** %1, null
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i8** null, i8*** %retval, align 8
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load i8**, i8*** %new.addr, align 8
  %3 = load i32, i32* %i, align 4
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr inbounds i8*, i8** %2, i64 %idxprom
  %4 = load i8*, i8** %arrayidx, align 8
  %cmp2 = icmp ne i8* %4, null
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i8**, i8*** %old.addr, align 8
  %6 = load i8**, i8*** %new.addr, align 8
  %7 = load i32, i32* %i, align 4
  %idxprom3 = sext i32 %7 to i64
  %arrayidx4 = getelementptr inbounds i8*, i8** %6, i64 %idxprom3
  %8 = load i8*, i8** %arrayidx4, align 8
  %9 = load i8**, i8*** %new.addr, align 8
  %10 = load i32, i32* %i, align 4
  %idxprom5 = sext i32 %10 to i64
  %arrayidx6 = getelementptr inbounds i8*, i8** %9, i64 %idxprom5
  %11 = load i8*, i8** %arrayidx6, align 8
  %call = call i64 @strlen(i8* %11) #11
  %conv = trunc i64 %call to i32
  %call7 = call i8** @enlist(i8** %5, i8* %8, i32 %conv)
  store i8** %call7, i8*** %old.addr, align 8
  %12 = load i8**, i8*** %old.addr, align 8
  %cmp8 = icmp eq i8** %12, null
  br i1 %cmp8, label %if.then10, label %if.end11

if.then10:                                        ; preds = %for.body
  br label %for.end

if.end11:                                         ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end11
  %13 = load i32, i32* %i, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond, !llvm.loop !241

for.end:                                          ; preds = %if.then10, %for.cond
  %14 = load i8**, i8*** %old.addr, align 8
  store i8** %14, i8*** %retval, align 8
  br label %return

return:                                           ; preds = %for.end, %if.then
  %15 = load i8**, i8*** %retval, align 8
  ret i8** %15
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @icpyalloc(i8* %string) #0 {
entry:
  %string.addr = alloca i8*, align 8
  store i8* %string, i8** %string.addr, align 8
  %0 = load i8*, i8** %string.addr, align 8
  %call = call i8* @icatalloc(i8* null, i8* %0)
  ret i8* %call
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @icatalloc(i8* %old, i8* %new) #0 {
entry:
  %retval = alloca i8*, align 8
  %old.addr = alloca i8*, align 8
  %new.addr = alloca i8*, align 8
  %result = alloca i8*, align 8
  %oldsize = alloca i32, align 4
  %newsize = alloca i32, align 4
  store i8* %old, i8** %old.addr, align 8
  store i8* %new, i8** %new.addr, align 8
  %0 = load i8*, i8** %new.addr, align 8
  %cmp = icmp eq i8* %0, null
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %1 = load i8*, i8** %new.addr, align 8
  %call = call i64 @strlen(i8* %1) #11
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 0, %cond.true ], [ %call, %cond.false ]
  %conv = trunc i64 %cond to i32
  store i32 %conv, i32* %newsize, align 4
  %2 = load i8*, i8** %old.addr, align 8
  %cmp1 = icmp eq i8* %2, null
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end
  store i32 0, i32* %oldsize, align 4
  br label %if.end9

if.else:                                          ; preds = %cond.end
  %3 = load i32, i32* %newsize, align 4
  %cmp3 = icmp eq i32 %3, 0
  br i1 %cmp3, label %if.then5, label %if.else6

if.then5:                                         ; preds = %if.else
  %4 = load i8*, i8** %old.addr, align 8
  store i8* %4, i8** %retval, align 8
  br label %return

if.else6:                                         ; preds = %if.else
  %5 = load i8*, i8** %old.addr, align 8
  %call7 = call i64 @strlen(i8* %5) #11
  %conv8 = trunc i64 %call7 to i32
  store i32 %conv8, i32* %oldsize, align 4
  br label %if.end

if.end:                                           ; preds = %if.else6
  br label %if.end9

if.end9:                                          ; preds = %if.end, %if.then
  %6 = load i8*, i8** %old.addr, align 8
  %cmp10 = icmp eq i8* %6, null
  br i1 %cmp10, label %if.then12, label %if.else15

if.then12:                                        ; preds = %if.end9
  %7 = load i32, i32* %newsize, align 4
  %add = add nsw i32 %7, 1
  %conv13 = sext i32 %add to i64
  %call14 = call noalias align 16 i8* @malloc(i64 %conv13) #9
  store i8* %call14, i8** %result, align 8
  br label %if.end20

if.else15:                                        ; preds = %if.end9
  %8 = load i8*, i8** %old.addr, align 8
  %9 = load i32, i32* %oldsize, align 4
  %10 = load i32, i32* %newsize, align 4
  %add16 = add nsw i32 %9, %10
  %add17 = add nsw i32 %add16, 1
  %conv18 = sext i32 %add17 to i64
  %call19 = call align 16 i8* @realloc(i8* %8, i64 %conv18) #9
  store i8* %call19, i8** %result, align 8
  br label %if.end20

if.end20:                                         ; preds = %if.else15, %if.then12
  %11 = load i8*, i8** %result, align 8
  %cmp21 = icmp ne i8* %11, null
  br i1 %cmp21, label %land.lhs.true, label %if.end27

land.lhs.true:                                    ; preds = %if.end20
  %12 = load i8*, i8** %new.addr, align 8
  %cmp23 = icmp ne i8* %12, null
  br i1 %cmp23, label %if.then25, label %if.end27

if.then25:                                        ; preds = %land.lhs.true
  %13 = load i8*, i8** %result, align 8
  %14 = load i32, i32* %oldsize, align 4
  %idx.ext = sext i32 %14 to i64
  %add.ptr = getelementptr inbounds i8, i8* %13, i64 %idx.ext
  %15 = load i8*, i8** %new.addr, align 8
  %call26 = call i8* @strcpy(i8* %add.ptr, i8* %15) #9
  br label %if.end27

if.end27:                                         ; preds = %if.then25, %land.lhs.true, %if.end20
  %16 = load i8*, i8** %result, align 8
  store i8* %16, i8** %retval, align 8
  br label %return

return:                                           ; preds = %if.end27, %if.then5
  %17 = load i8*, i8** %retval, align 8
  ret i8* %17
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8** @enlist(i8** %cpp, i8* %new, i32 %len) #0 {
entry:
  %retval = alloca i8**, align 8
  %cpp.addr = alloca i8**, align 8
  %new.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i8** %cpp, i8*** %cpp.addr, align 8
  store i8* %new, i8** %new.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  %0 = load i8**, i8*** %cpp.addr, align 8
  %cmp = icmp eq i8** %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i8** null, i8*** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i8*, i8** %new.addr, align 8
  %call = call i8* @icpyalloc(i8* %1)
  store i8* %call, i8** %new.addr, align 8
  %cmp1 = icmp eq i8* %call, null
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %2 = load i8**, i8*** %cpp.addr, align 8
  call void @freelist(i8** %2)
  store i8** null, i8*** %retval, align 8
  br label %return

if.end3:                                          ; preds = %if.end
  %3 = load i8*, i8** %new.addr, align 8
  %4 = load i32, i32* %len.addr, align 4
  %idxprom = sext i32 %4 to i64
  %arrayidx = getelementptr inbounds i8, i8* %3, i64 %idxprom
  store i8 0, i8* %arrayidx, align 1
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end3
  %5 = load i8**, i8*** %cpp.addr, align 8
  %6 = load i32, i32* %i, align 4
  %idxprom4 = sext i32 %6 to i64
  %arrayidx5 = getelementptr inbounds i8*, i8** %5, i64 %idxprom4
  %7 = load i8*, i8** %arrayidx5, align 8
  %cmp6 = icmp ne i8* %7, null
  br i1 %cmp6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load i8**, i8*** %cpp.addr, align 8
  %9 = load i32, i32* %i, align 4
  %idxprom7 = sext i32 %9 to i64
  %arrayidx8 = getelementptr inbounds i8*, i8** %8, i64 %idxprom7
  %10 = load i8*, i8** %arrayidx8, align 8
  %11 = load i8*, i8** %new.addr, align 8
  %call9 = call i8* @istrstr(i8* %10, i8* %11)
  %cmp10 = icmp ne i8* %call9, null
  br i1 %cmp10, label %if.then11, label %if.end12

if.then11:                                        ; preds = %for.body
  %12 = load i8*, i8** %new.addr, align 8
  call void @free(i8* %12) #9
  %13 = load i8**, i8*** %cpp.addr, align 8
  store i8** %13, i8*** %retval, align 8
  br label %return

if.end12:                                         ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end12
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond, !llvm.loop !242

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end33, %for.end
  %15 = load i8**, i8*** %cpp.addr, align 8
  %16 = load i32, i32* %j, align 4
  %idxprom13 = sext i32 %16 to i64
  %arrayidx14 = getelementptr inbounds i8*, i8** %15, i64 %idxprom13
  %17 = load i8*, i8** %arrayidx14, align 8
  %cmp15 = icmp ne i8* %17, null
  br i1 %cmp15, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %18 = load i8*, i8** %new.addr, align 8
  %19 = load i8**, i8*** %cpp.addr, align 8
  %20 = load i32, i32* %j, align 4
  %idxprom16 = sext i32 %20 to i64
  %arrayidx17 = getelementptr inbounds i8*, i8** %19, i64 %idxprom16
  %21 = load i8*, i8** %arrayidx17, align 8
  %call18 = call i8* @istrstr(i8* %18, i8* %21)
  %cmp19 = icmp eq i8* %call18, null
  br i1 %cmp19, label %if.then20, label %if.else

if.then20:                                        ; preds = %while.body
  %22 = load i32, i32* %j, align 4
  %inc21 = add nsw i32 %22, 1
  store i32 %inc21, i32* %j, align 4
  br label %if.end33

if.else:                                          ; preds = %while.body
  %23 = load i8**, i8*** %cpp.addr, align 8
  %24 = load i32, i32* %j, align 4
  %idxprom22 = sext i32 %24 to i64
  %arrayidx23 = getelementptr inbounds i8*, i8** %23, i64 %idxprom22
  %25 = load i8*, i8** %arrayidx23, align 8
  call void @free(i8* %25) #9
  %26 = load i32, i32* %i, align 4
  %dec = add nsw i32 %26, -1
  store i32 %dec, i32* %i, align 4
  %27 = load i32, i32* %j, align 4
  %cmp24 = icmp eq i32 %dec, %27
  br i1 %cmp24, label %if.then25, label %if.end26

if.then25:                                        ; preds = %if.else
  br label %while.end

if.end26:                                         ; preds = %if.else
  %28 = load i8**, i8*** %cpp.addr, align 8
  %29 = load i32, i32* %i, align 4
  %idxprom27 = sext i32 %29 to i64
  %arrayidx28 = getelementptr inbounds i8*, i8** %28, i64 %idxprom27
  %30 = load i8*, i8** %arrayidx28, align 8
  %31 = load i8**, i8*** %cpp.addr, align 8
  %32 = load i32, i32* %j, align 4
  %idxprom29 = sext i32 %32 to i64
  %arrayidx30 = getelementptr inbounds i8*, i8** %31, i64 %idxprom29
  store i8* %30, i8** %arrayidx30, align 8
  %33 = load i8**, i8*** %cpp.addr, align 8
  %34 = load i32, i32* %i, align 4
  %idxprom31 = sext i32 %34 to i64
  %arrayidx32 = getelementptr inbounds i8*, i8** %33, i64 %idxprom31
  store i8* null, i8** %arrayidx32, align 8
  br label %if.end33

if.end33:                                         ; preds = %if.end26, %if.then20
  br label %while.cond, !llvm.loop !243

while.end:                                        ; preds = %if.then25, %while.cond
  %35 = load i8**, i8*** %cpp.addr, align 8
  %36 = bitcast i8** %35 to i8*
  %37 = load i32, i32* %i, align 4
  %add = add nsw i32 %37, 2
  %conv = sext i32 %add to i64
  %mul = mul i64 %conv, 8
  %call34 = call align 16 i8* @realloc(i8* %36, i64 %mul) #9
  %38 = bitcast i8* %call34 to i8**
  store i8** %38, i8*** %cpp.addr, align 8
  %39 = load i8**, i8*** %cpp.addr, align 8
  %cmp35 = icmp eq i8** %39, null
  br i1 %cmp35, label %if.then37, label %if.end38

if.then37:                                        ; preds = %while.end
  store i8** null, i8*** %retval, align 8
  br label %return

if.end38:                                         ; preds = %while.end
  %40 = load i8*, i8** %new.addr, align 8
  %41 = load i8**, i8*** %cpp.addr, align 8
  %42 = load i32, i32* %i, align 4
  %idxprom39 = sext i32 %42 to i64
  %arrayidx40 = getelementptr inbounds i8*, i8** %41, i64 %idxprom39
  store i8* %40, i8** %arrayidx40, align 8
  %43 = load i8**, i8*** %cpp.addr, align 8
  %44 = load i32, i32* %i, align 4
  %add41 = add nsw i32 %44, 1
  %idxprom42 = sext i32 %add41 to i64
  %arrayidx43 = getelementptr inbounds i8*, i8** %43, i64 %idxprom42
  store i8* null, i8** %arrayidx43, align 8
  %45 = load i8**, i8*** %cpp.addr, align 8
  store i8** %45, i8*** %retval, align 8
  br label %return

return:                                           ; preds = %if.end38, %if.then37, %if.then11, %if.then2, %if.then
  %46 = load i8**, i8*** %retval, align 8
  ret i8** %46
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @ifree(i8* %cp) #0 {
entry:
  %cp.addr = alloca i8*, align 8
  store i8* %cp, i8** %cp.addr, align 8
  %0 = load i8*, i8** %cp.addr, align 8
  %cmp = icmp ne i8* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** %cp.addr, align 8
  call void @free(i8* %1) #9
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8** @comsubs(i8* %left, i8* %right) #0 {
entry:
  %retval = alloca i8**, align 8
  %left.addr = alloca i8*, align 8
  %right.addr = alloca i8*, align 8
  %cpp = alloca i8**, align 8
  %lcp = alloca i8*, align 8
  %rcp = alloca i8*, align 8
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  store i8* %left, i8** %left.addr, align 8
  store i8* %right, i8** %right.addr, align 8
  %0 = load i8*, i8** %left.addr, align 8
  %cmp = icmp eq i8* %0, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8*, i8** %right.addr, align 8
  %cmp1 = icmp eq i8* %1, null
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i8** null, i8*** %retval, align 8
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %call = call noalias align 16 i8* @malloc(i64 8) #9
  %2 = bitcast i8* %call to i8**
  store i8** %2, i8*** %cpp, align 8
  %3 = load i8**, i8*** %cpp, align 8
  %cmp2 = icmp eq i8** %3, null
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  store i8** null, i8*** %retval, align 8
  br label %return

if.end4:                                          ; preds = %if.end
  %4 = load i8**, i8*** %cpp, align 8
  %arrayidx = getelementptr inbounds i8*, i8** %4, i64 0
  store i8* null, i8** %arrayidx, align 8
  %5 = load i8*, i8** %left.addr, align 8
  store i8* %5, i8** %lcp, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc40, %if.end4
  %6 = load i8*, i8** %lcp, align 8
  %7 = load i8, i8* %6, align 1
  %conv = sext i8 %7 to i32
  %cmp5 = icmp ne i32 %conv, 0
  br i1 %cmp5, label %for.body, label %for.end41

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %len, align 4
  %8 = load i8*, i8** %right.addr, align 8
  %9 = load i8*, i8** %lcp, align 8
  %10 = load i8, i8* %9, align 1
  %conv7 = sext i8 %10 to i32
  %call8 = call i8* @strchr(i8* %8, i32 %conv7) #11
  store i8* %call8, i8** %rcp, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end28, %for.body
  %11 = load i8*, i8** %rcp, align 8
  %cmp9 = icmp ne i8* %11, null
  br i1 %cmp9, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  store i32 1, i32* %i, align 4
  br label %for.cond11

for.cond11:                                       ; preds = %for.inc, %while.body
  %12 = load i8*, i8** %lcp, align 8
  %13 = load i32, i32* %i, align 4
  %idxprom = sext i32 %13 to i64
  %arrayidx12 = getelementptr inbounds i8, i8* %12, i64 %idxprom
  %14 = load i8, i8* %arrayidx12, align 1
  %conv13 = sext i8 %14 to i32
  %cmp14 = icmp ne i32 %conv13, 0
  br i1 %cmp14, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond11
  %15 = load i8*, i8** %lcp, align 8
  %16 = load i32, i32* %i, align 4
  %idxprom16 = sext i32 %16 to i64
  %arrayidx17 = getelementptr inbounds i8, i8* %15, i64 %idxprom16
  %17 = load i8, i8* %arrayidx17, align 1
  %conv18 = sext i8 %17 to i32
  %18 = load i8*, i8** %rcp, align 8
  %19 = load i32, i32* %i, align 4
  %idxprom19 = sext i32 %19 to i64
  %arrayidx20 = getelementptr inbounds i8, i8* %18, i64 %idxprom19
  %20 = load i8, i8* %arrayidx20, align 1
  %conv21 = sext i8 %20 to i32
  %cmp22 = icmp eq i32 %conv18, %conv21
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond11
  %21 = phi i1 [ false, %for.cond11 ], [ %cmp22, %land.rhs ]
  br i1 %21, label %for.body24, label %for.end

for.body24:                                       ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body24
  %22 = load i32, i32* %i, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond11, !llvm.loop !244

for.end:                                          ; preds = %land.end
  %23 = load i32, i32* %i, align 4
  %24 = load i32, i32* %len, align 4
  %cmp25 = icmp sgt i32 %23, %24
  br i1 %cmp25, label %if.then27, label %if.end28

if.then27:                                        ; preds = %for.end
  %25 = load i32, i32* %i, align 4
  store i32 %25, i32* %len, align 4
  br label %if.end28

if.end28:                                         ; preds = %if.then27, %for.end
  %26 = load i8*, i8** %rcp, align 8
  %add.ptr = getelementptr inbounds i8, i8* %26, i64 1
  %27 = load i8*, i8** %lcp, align 8
  %28 = load i8, i8* %27, align 1
  %conv29 = sext i8 %28 to i32
  %call30 = call i8* @strchr(i8* %add.ptr, i32 %conv29) #11
  store i8* %call30, i8** %rcp, align 8
  br label %while.cond, !llvm.loop !245

while.end:                                        ; preds = %while.cond
  %29 = load i32, i32* %len, align 4
  %cmp31 = icmp eq i32 %29, 0
  br i1 %cmp31, label %if.then33, label %if.end34

if.then33:                                        ; preds = %while.end
  br label %for.inc40

if.end34:                                         ; preds = %while.end
  %30 = load i8**, i8*** %cpp, align 8
  %31 = load i8*, i8** %lcp, align 8
  %32 = load i32, i32* %len, align 4
  %call35 = call i8** @enlist(i8** %30, i8* %31, i32 %32)
  store i8** %call35, i8*** %cpp, align 8
  %cmp36 = icmp eq i8** %call35, null
  br i1 %cmp36, label %if.then38, label %if.end39

if.then38:                                        ; preds = %if.end34
  br label %for.end41

if.end39:                                         ; preds = %if.end34
  br label %for.inc40

for.inc40:                                        ; preds = %if.end39, %if.then33
  %33 = load i8*, i8** %lcp, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %33, i32 1
  store i8* %incdec.ptr, i8** %lcp, align 8
  br label %for.cond, !llvm.loop !246

for.end41:                                        ; preds = %if.then38, %for.cond
  %34 = load i8**, i8*** %cpp, align 8
  store i8** %34, i8*** %retval, align 8
  br label %return

return:                                           ; preds = %for.end41, %if.then3, %if.then
  %35 = load i8**, i8*** %retval, align 8
  ret i8** %35
}

; Function Attrs: nocallback nounwind readonly willreturn
declare dso_local i8* @strchr(i8*, i32) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @istrstr(i8* %lookin, i8* %lookfor) #0 {
entry:
  %retval = alloca i8*, align 8
  %lookin.addr = alloca i8*, align 8
  %lookfor.addr = alloca i8*, align 8
  %cp = alloca i8*, align 8
  %len = alloca i32, align 4
  store i8* %lookin, i8** %lookin.addr, align 8
  store i8* %lookfor, i8** %lookfor.addr, align 8
  %0 = load i8*, i8** %lookfor.addr, align 8
  %call = call i64 @strlen(i8* %0) #11
  %conv = trunc i64 %call to i32
  store i32 %conv, i32* %len, align 4
  %1 = load i8*, i8** %lookin.addr, align 8
  store i8* %1, i8** %cp, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i8*, i8** %cp, align 8
  %3 = load i8, i8* %2, align 1
  %conv1 = sext i8 %3 to i32
  %cmp = icmp ne i32 %conv1, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i8*, i8** %cp, align 8
  %5 = load i8*, i8** %lookfor.addr, align 8
  %6 = load i32, i32* %len, align 4
  %conv3 = sext i32 %6 to i64
  %call4 = call i32 @strncmp(i8* %4, i8* %5, i64 %conv3) #11
  %cmp5 = icmp eq i32 %call4, 0
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %7 = load i8*, i8** %cp, align 8
  store i8* %7, i8** %retval, align 8
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %8 = load i8*, i8** %cp, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %8, i32 1
  store i8* %incdec.ptr, i8** %cp, align 8
  br label %for.cond, !llvm.loop !247

for.end:                                          ; preds = %for.cond
  store i8* null, i8** %retval, align 8
  br label %return

return:                                           ; preds = %for.end, %if.then
  %9 = load i8*, i8** %retval, align 8
  ret i8* %9
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @kwsmusts() #0 {
entry:
  %dm = alloca %struct.dfamust*, align 8
  %err = alloca i8*, align 8
  %0 = load %struct.dfamust*, %struct.dfamust** getelementptr inbounds (%struct.dfa, %struct.dfa* @dfa_1, i32 0, i32 21), align 8
  %tobool = icmp ne %struct.dfamust* %0, null
  br i1 %tobool, label %if.then, label %if.end29

if.then:                                          ; preds = %entry
  call void @kwsinit()
  %1 = load %struct.dfamust*, %struct.dfamust** getelementptr inbounds (%struct.dfa, %struct.dfa* @dfa_1, i32 0, i32 21), align 8
  store %struct.dfamust* %1, %struct.dfamust** %dm, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %2 = load %struct.dfamust*, %struct.dfamust** %dm, align 8
  %tobool1 = icmp ne %struct.dfamust* %2, null
  br i1 %tobool1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.dfamust*, %struct.dfamust** %dm, align 8
  %exact = getelementptr inbounds %struct.dfamust, %struct.dfamust* %3, i32 0, i32 0
  %4 = load i32, i32* %exact, align 8
  %tobool2 = icmp ne i32 %4, 0
  br i1 %tobool2, label %if.end, label %if.then3

if.then3:                                         ; preds = %for.body
  br label %for.inc

if.end:                                           ; preds = %for.body
  %5 = load i32, i32* @lastexact, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* @lastexact, align 4
  %6 = load i8*, i8** @kwset, align 8
  %7 = load %struct.dfamust*, %struct.dfamust** %dm, align 8
  %must = getelementptr inbounds %struct.dfamust, %struct.dfamust* %7, i32 0, i32 1
  %8 = load i8*, i8** %must, align 8
  %9 = load %struct.dfamust*, %struct.dfamust** %dm, align 8
  %must4 = getelementptr inbounds %struct.dfamust, %struct.dfamust* %9, i32 0, i32 1
  %10 = load i8*, i8** %must4, align 8
  %call = call i64 @strlen(i8* %10) #11
  %call5 = call i8* @kwsincr(i8* %6, i8* %8, i64 %call)
  store i8* %call5, i8** %err, align 8
  %cmp = icmp ne i8* %call5, null
  br i1 %cmp, label %if.then6, label %if.end7

if.then6:                                         ; preds = %if.end
  %11 = load i8*, i8** %err, align 8
  call void @fatal(i8* %11, i32 0)
  br label %if.end7

if.end7:                                          ; preds = %if.then6, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end7, %if.then3
  %12 = load %struct.dfamust*, %struct.dfamust** %dm, align 8
  %next = getelementptr inbounds %struct.dfamust, %struct.dfamust* %12, i32 0, i32 2
  %13 = load %struct.dfamust*, %struct.dfamust** %next, align 8
  store %struct.dfamust* %13, %struct.dfamust** %dm, align 8
  br label %for.cond, !llvm.loop !248

for.end:                                          ; preds = %for.cond
  %14 = load %struct.dfamust*, %struct.dfamust** getelementptr inbounds (%struct.dfa, %struct.dfa* @dfa_1, i32 0, i32 21), align 8
  store %struct.dfamust* %14, %struct.dfamust** %dm, align 8
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc22, %for.end
  %15 = load %struct.dfamust*, %struct.dfamust** %dm, align 8
  %tobool9 = icmp ne %struct.dfamust* %15, null
  br i1 %tobool9, label %for.body10, label %for.end24

for.body10:                                       ; preds = %for.cond8
  %16 = load %struct.dfamust*, %struct.dfamust** %dm, align 8
  %exact11 = getelementptr inbounds %struct.dfamust, %struct.dfamust* %16, i32 0, i32 0
  %17 = load i32, i32* %exact11, align 8
  %tobool12 = icmp ne i32 %17, 0
  br i1 %tobool12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %for.body10
  br label %for.inc22

if.end14:                                         ; preds = %for.body10
  %18 = load i8*, i8** @kwset, align 8
  %19 = load %struct.dfamust*, %struct.dfamust** %dm, align 8
  %must15 = getelementptr inbounds %struct.dfamust, %struct.dfamust* %19, i32 0, i32 1
  %20 = load i8*, i8** %must15, align 8
  %21 = load %struct.dfamust*, %struct.dfamust** %dm, align 8
  %must16 = getelementptr inbounds %struct.dfamust, %struct.dfamust* %21, i32 0, i32 1
  %22 = load i8*, i8** %must16, align 8
  %call17 = call i64 @strlen(i8* %22) #11
  %call18 = call i8* @kwsincr(i8* %18, i8* %20, i64 %call17)
  store i8* %call18, i8** %err, align 8
  %cmp19 = icmp ne i8* %call18, null
  br i1 %cmp19, label %if.then20, label %if.end21

if.then20:                                        ; preds = %if.end14
  %23 = load i8*, i8** %err, align 8
  call void @fatal(i8* %23, i32 0)
  br label %if.end21

if.end21:                                         ; preds = %if.then20, %if.end14
  br label %for.inc22

for.inc22:                                        ; preds = %if.end21, %if.then13
  %24 = load %struct.dfamust*, %struct.dfamust** %dm, align 8
  %next23 = getelementptr inbounds %struct.dfamust, %struct.dfamust* %24, i32 0, i32 2
  %25 = load %struct.dfamust*, %struct.dfamust** %next23, align 8
  store %struct.dfamust* %25, %struct.dfamust** %dm, align 8
  br label %for.cond8, !llvm.loop !249

for.end24:                                        ; preds = %for.cond8
  %26 = load i8*, i8** @kwset, align 8
  %call25 = call i8* @kwsprep(i8* %26)
  store i8* %call25, i8** %err, align 8
  %cmp26 = icmp ne i8* %call25, null
  br i1 %cmp26, label %if.then27, label %if.end28

if.then27:                                        ; preds = %for.end24
  %27 = load i8*, i8** %err, align 8
  call void @fatal(i8* %27, i32 0)
  br label %if.end28

if.end28:                                         ; preds = %if.then27, %for.end24
  br label %if.end29

if.end29:                                         ; preds = %if.end28, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @kwsinit() #0 {
entry:
  %i = alloca i32, align 4
  %0 = load i32, i32* @match_icase, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 256
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call = call i16** @__ctype_b_loc() #10
  %2 = load i16*, i16** %call, align 8
  %3 = load i32, i32* %i, align 4
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr inbounds i16, i16* %2, i64 %idxprom
  %4 = load i16, i16* %arrayidx, align 2
  %conv = zext i16 %4 to i32
  %and = and i32 %conv, 256
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %call2 = call i32 @tolower(i32 %5) #11
  br label %cond.end

cond.false:                                       ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call2, %cond.true ], [ %6, %cond.false ]
  %conv3 = trunc i32 %cond to i8
  %7 = load i32, i32* %i, align 4
  %idxprom4 = sext i32 %7 to i64
  %arrayidx5 = getelementptr inbounds [256 x i8], [256 x i8]* @kwsinit.trans, i64 0, i64 %idxprom4
  store i8 %conv3, i8* %arrayidx5, align 1
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond, !llvm.loop !250

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %entry
  %9 = load i32, i32* @match_icase, align 4
  %tobool6 = icmp ne i32 %9, 0
  %10 = zext i1 %tobool6 to i64
  %cond7 = select i1 %tobool6, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @kwsinit.trans, i64 0, i64 0), i8* null
  %call8 = call i8* @kwsalloc(i8* %cond7)
  store i8* %call8, i8** @kwset, align 8
  %tobool9 = icmp ne i8* %call8, null
  br i1 %tobool9, label %if.end11, label %if.then10

if.then10:                                        ; preds = %if.end
  call void @fatal(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0), i32 0)
  br label %if.end11

if.end11:                                         ; preds = %if.then10, %if.end
  ret void
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback noreturn nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nocallback nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nocallback nounwind readnone willreturn "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nocallback nounwind readonly willreturn "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { argmemonly nofree nounwind willreturn writeonly }
attributes #7 = { argmemonly nofree nounwind willreturn }
attributes #8 = { nocallback noreturn nounwind }
attributes #9 = { nocallback nounwind }
attributes #10 = { nocallback nounwind readnone willreturn }
attributes #11 = { nocallback nounwind readonly willreturn }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{i32 7, !"frame-pointer", i32 2}
!3 = !{!"Ubuntu clang version 13.0.1-++20220120110844+75e33f71c2da-1~exp1~20220120230854.66"}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.mustprogress"}
!6 = distinct !{!6, !5}
!7 = distinct !{!7, !5}
!8 = distinct !{!8, !5}
!9 = distinct !{!9, !5}
!10 = distinct !{!10, !5}
!11 = distinct !{!11, !5}
!12 = distinct !{!12, !5}
!13 = distinct !{!13, !5}
!14 = distinct !{!14, !5}
!15 = distinct !{!15, !5}
!16 = distinct !{!16, !5}
!17 = distinct !{!17, !5}
!18 = distinct !{!18, !5}
!19 = distinct !{!19, !5}
!20 = distinct !{!20, !5}
!21 = distinct !{!21, !5}
!22 = distinct !{!22, !5}
!23 = distinct !{!23, !5}
!24 = distinct !{!24, !5}
!25 = distinct !{!25, !5}
!26 = distinct !{!26, !5}
!27 = distinct !{!27, !5}
!28 = distinct !{!28, !5}
!29 = distinct !{!29, !5}
!30 = distinct !{!30, !5}
!31 = distinct !{!31, !5}
!32 = distinct !{!32, !5}
!33 = distinct !{!33, !5}
!34 = distinct !{!34, !5}
!35 = distinct !{!35, !5}
!36 = distinct !{!36, !5}
!37 = distinct !{!37, !5}
!38 = distinct !{!38, !5}
!39 = distinct !{!39, !5}
!40 = distinct !{!40, !5}
!41 = distinct !{!41, !5}
!42 = distinct !{!42, !5}
!43 = distinct !{!43, !5}
!44 = distinct !{!44, !5}
!45 = distinct !{!45, !5}
!46 = distinct !{!46, !5}
!47 = distinct !{!47, !5}
!48 = distinct !{!48, !5}
!49 = distinct !{!49, !5}
!50 = distinct !{!50, !5}
!51 = distinct !{!51, !5}
!52 = distinct !{!52, !5}
!53 = distinct !{!53, !5}
!54 = distinct !{!54, !5}
!55 = distinct !{!55, !5}
!56 = distinct !{!56, !5}
!57 = distinct !{!57, !5}
!58 = distinct !{!58, !5}
!59 = distinct !{!59, !5}
!60 = distinct !{!60, !5}
!61 = distinct !{!61, !5}
!62 = distinct !{!62, !5}
!63 = distinct !{!63, !5}
!64 = distinct !{!64, !5}
!65 = distinct !{!65, !5}
!66 = distinct !{!66, !5}
!67 = distinct !{!67, !5}
!68 = distinct !{!68, !5}
!69 = distinct !{!69, !5}
!70 = distinct !{!70, !5}
!71 = distinct !{!71, !5}
!72 = distinct !{!72, !5}
!73 = distinct !{!73, !5}
!74 = distinct !{!74, !5}
!75 = distinct !{!75, !5}
!76 = distinct !{!76, !5}
!77 = distinct !{!77, !5}
!78 = distinct !{!78, !5}
!79 = distinct !{!79, !5}
!80 = distinct !{!80, !5}
!81 = distinct !{!81, !5}
!82 = distinct !{!82, !5}
!83 = distinct !{!83, !5}
!84 = distinct !{!84, !5}
!85 = distinct !{!85, !5}
!86 = distinct !{!86, !5}
!87 = distinct !{!87, !5}
!88 = distinct !{!88, !5}
!89 = distinct !{!89, !5}
!90 = distinct !{!90, !5}
!91 = distinct !{!91, !5}
!92 = distinct !{!92, !5}
!93 = distinct !{!93, !5}
!94 = distinct !{!94, !5}
!95 = distinct !{!95, !5}
!96 = distinct !{!96, !5}
!97 = distinct !{!97, !5}
!98 = distinct !{!98, !5}
!99 = distinct !{!99, !5}
!100 = distinct !{!100, !5}
!101 = distinct !{!101, !5}
!102 = distinct !{!102, !5}
!103 = distinct !{!103, !5}
!104 = distinct !{!104, !5}
!105 = distinct !{!105, !5}
!106 = distinct !{!106, !5}
!107 = distinct !{!107, !5}
!108 = distinct !{!108, !5}
!109 = distinct !{!109, !5}
!110 = distinct !{!110, !5}
!111 = distinct !{!111, !5}
!112 = distinct !{!112, !5}
!113 = distinct !{!113, !5}
!114 = distinct !{!114, !5}
!115 = distinct !{!115, !5}
!116 = distinct !{!116, !5}
!117 = distinct !{!117, !5}
!118 = distinct !{!118, !5}
!119 = distinct !{!119, !5}
!120 = distinct !{!120, !5}
!121 = distinct !{!121, !5}
!122 = distinct !{!122, !5}
!123 = distinct !{!123, !5}
!124 = distinct !{!124, !5}
!125 = distinct !{!125, !5}
!126 = distinct !{!126, !5}
!127 = distinct !{!127, !5}
!128 = distinct !{!128, !5}
!129 = distinct !{!129, !5}
!130 = distinct !{!130, !5}
!131 = distinct !{!131, !5}
!132 = distinct !{!132, !5}
!133 = distinct !{!133, !5}
!134 = distinct !{!134, !5}
!135 = distinct !{!135, !5}
!136 = distinct !{!136, !5}
!137 = distinct !{!137, !5}
!138 = distinct !{!138, !5}
!139 = distinct !{!139, !5}
!140 = distinct !{!140, !5}
!141 = distinct !{!141, !5}
!142 = distinct !{!142, !5}
!143 = distinct !{!143, !5}
!144 = distinct !{!144, !5}
!145 = distinct !{!145, !5}
!146 = distinct !{!146, !5}
!147 = distinct !{!147, !5}
!148 = distinct !{!148, !5}
!149 = distinct !{!149, !5}
!150 = distinct !{!150, !5}
!151 = distinct !{!151, !5}
!152 = distinct !{!152, !5}
!153 = distinct !{!153, !5}
!154 = distinct !{!154, !5}
!155 = distinct !{!155, !5}
!156 = distinct !{!156, !5}
!157 = distinct !{!157, !5}
!158 = distinct !{!158, !5}
!159 = distinct !{!159, !5}
!160 = distinct !{!160, !5}
!161 = distinct !{!161, !5}
!162 = distinct !{!162, !5}
!163 = distinct !{!163, !5}
!164 = distinct !{!164, !5}
!165 = distinct !{!165, !5}
!166 = distinct !{!166, !5}
!167 = distinct !{!167, !5}
!168 = distinct !{!168, !5}
!169 = distinct !{!169, !5}
!170 = distinct !{!170, !5}
!171 = distinct !{!171, !5}
!172 = distinct !{!172, !5}
!173 = distinct !{!173, !5}
!174 = distinct !{!174, !5}
!175 = distinct !{!175, !5}
!176 = distinct !{!176, !5}
!177 = distinct !{!177, !5}
!178 = distinct !{!178, !5}
!179 = distinct !{!179, !5}
!180 = distinct !{!180, !5}
!181 = distinct !{!181, !5}
!182 = distinct !{!182, !5}
!183 = distinct !{!183, !5}
!184 = distinct !{!184, !5}
!185 = distinct !{!185, !5}
!186 = distinct !{!186, !5}
!187 = distinct !{!187, !5}
!188 = distinct !{!188, !5}
!189 = distinct !{!189, !5}
!190 = distinct !{!190, !5}
!191 = distinct !{!191, !5}
!192 = distinct !{!192, !5}
!193 = distinct !{!193, !5}
!194 = distinct !{!194, !5}
!195 = distinct !{!195, !5}
!196 = distinct !{!196, !5}
!197 = distinct !{!197, !5}
!198 = distinct !{!198, !5}
!199 = distinct !{!199, !5}
!200 = distinct !{!200, !5}
!201 = distinct !{!201, !5}
!202 = distinct !{!202, !5}
!203 = distinct !{!203, !5}
!204 = distinct !{!204, !5}
!205 = distinct !{!205, !5}
!206 = distinct !{!206, !5}
!207 = distinct !{!207, !5}
!208 = distinct !{!208, !5}
!209 = distinct !{!209, !5}
!210 = distinct !{!210, !5}
!211 = distinct !{!211, !5}
!212 = distinct !{!212, !5}
!213 = distinct !{!213, !5}
!214 = distinct !{!214, !5}
!215 = distinct !{!215, !5}
!216 = distinct !{!216, !5}
!217 = distinct !{!217, !5}
!218 = distinct !{!218, !5}
!219 = distinct !{!219, !5}
!220 = distinct !{!220, !5}
!221 = distinct !{!221, !5}
!222 = distinct !{!222, !5}
!223 = distinct !{!223, !5}
!224 = distinct !{!224, !5}
!225 = distinct !{!225, !5}
!226 = distinct !{!226, !5}
!227 = distinct !{!227, !5}
!228 = distinct !{!228, !5}
!229 = distinct !{!229, !5}
!230 = distinct !{!230, !5}
!231 = distinct !{!231, !5}
!232 = distinct !{!232, !5}
!233 = distinct !{!233, !5}
!234 = distinct !{!234, !5}
!235 = distinct !{!235, !5}
!236 = distinct !{!236, !5}
!237 = distinct !{!237, !5}
!238 = distinct !{!238, !5}
!239 = distinct !{!239, !5}
!240 = distinct !{!240, !5}
!241 = distinct !{!241, !5}
!242 = distinct !{!242, !5}
!243 = distinct !{!243, !5}
!244 = distinct !{!244, !5}
!245 = distinct !{!245, !5}
!246 = distinct !{!246, !5}
!247 = distinct !{!247, !5}
!248 = distinct !{!248, !5}
!249 = distinct !{!249, !5}
!250 = distinct !{!250, !5}
